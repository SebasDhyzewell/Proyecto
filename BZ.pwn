/*
GAMEMODE BABYZONE 0.1
ULTIMA ACTUALIZACION 01/03/23
INICIO 01/03/23
PROGRAMADOR: MONTOYA(SEBAS)
CEO PROYECTO: MONTOYA
*/
#include <a_samp>
#include <nex-ac>
#undef	 MAX_PLAYERS
#define	 MAX_PLAYERS (150)
#include <a_mysql>
#include <a_zones>
#include <crashdetect>
#include <g_cars>
#include <sscanf2>
#include <streamer>
#include <YSI\y_timers>
#include <yom_buttons>
#include <vfunc>
#include <geolocation>
#include <playerprogress>
#include <mSelection>
#include <pause>
#include <SpeedVehicle>
#include <Pawn.CMD>
#include <Pawn.Regex>
#include <mSelection2>
#include <CarTroll>
//===========   LIMIT'S  ===========//
#define     MAX_REPORTS         5
#define 	MAX_FABRICAS        12
#define     MAX_OBJETOS         10
#define     MAX_NPC_ROBOS       200
#define     MAX_TERRITORIOS     100
#define     MAX_TEXTDRAWS       250
#define     MAX_BANDAS          500
#define     MAX_MARIHUANA       200
#define     MAX_PROPIEDADES     2000
#define     MAX_PTOYS     		4
#define		MAX_PAUTOS			8
#define     MAX_GARAGES         7
#define     MAX_CASAS_ROBO      15
#define     MAX_LISTITEMS       300
#define     MAX_PEDIDOS         300
#define     DEBUG_GM            0
#define		MAX_CURRICULUMS		80
#define     MAX_PHONE_CONTACTS  20
#define     MAX_COP_OBJECTS     (300)
//===========   DEFINES  ===========//
#define     SPEED_CONTROLS      000.1
#define 	INVALID_REPORT_ID 	-1
#define     INVALID_TOY_ID      11392
#define     Button_Close        "X"
#define     RangoBarrerasTren   150.0
#define     RangoSonidoPlayer   55.0
#define     SECONDS_TO_LOGIN    120
//===========  NOTES OF THE GM  ===========//
#define SERVER_COIN "BZ"
#define SERVER_COIN2 "BZ"
#define SERVER_NAME ""SERVER_NAME2" Roleplay"
#define SERVER_NAME2 "BabyZone"
#define RCON_PSSWRD "Montoy2023@"
#define EMISORA_URL "142.44.203.0:9988"
#define SERVER_VERSION "0.1"
#define DIALOG_CAPTION  "{DBED15}"SERVER_NAME2""
#define WEB_URL "discord.gg/Pgj6rtwWdJ"
#define WEB_SONIDOS "sonidos.imgtemporal.club/Sonidos"
//============	ENTRADA / SALIDA	============//
#define ENTRADAPORF "{FFFFFF}Pulsa {DBED16}'F'{FFFFFF} para ingresar"
#define SALIDAPORF "{FFFFFF}Pulsa {DBED16}'F'{FFFFFF} para salir"
#define ENTRADAPORH "{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para ingresar"
#define SALIDAPORH "{FFFFFF}Pulsa {DBED16}'H'{FFFFFF}para salir"
#define ENTRADAPORY "{FFFFFF}Pulsa {DBED16}'Y'{FFFFFF} para entrar"
#define SALIDAPORY "{FFFFFF}Pulsa {DBED16}'Y'{FFFFFF}para salir"
//===========   SOUNDS  ===========//
#define AUDIO_BALDE "sonidos.imgtemporal.club/AguaBalde.mp3"
#define AUDIO_REGAR "sonidos.imgtemporal.club/Agua.mp3"
#define AUDIO_CORTAR "sonidos.imgtemporal.club/Cortar.mp3"
#define AUDIO_LOGRO "sonidos.imgtemporal.club/Logro.mp3"
#define AUDIO_DESTORNILLADOR "sonidos.imgtemporal.club/Destornillador.mp3"
#define AUDIO_CAMPANAS "sonidos.imgtemporal.club/Campanas.mp3"
#define AUDIO_BARRETA "sonidos.imgtemporal.club/Barreta.mp3"
#define AUDIO_ARPON "sonidos.imgtemporal.club/Sonidos/Arpon.mp3"
#define AUDIO_MINERO "sonidos.imgtemporal.club/Sonidos/Minero.mp3"
#define AUDIO_ALARMA "sonidos.imgtemporal.club/Alarma.mp3"
#define AUDIO_GOLPES "sonidos.imgtemporal.club/Golpes.mp3"
#define AUDIO_MISION "sonidos.imgtemporal.club/Sonido-Mision.mp3"
#define AUDIO_BOVEDA "sonidos.imgtemporal.club/Boveda.mp3"
//============   CONFIG fabricaS DE META   ============//
new TIEMPO_COCINA = 20;
new TIEMPO_PROCESO = 20;
//============   END THE CONFIG   ============//
#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif
//============   FIN DE LA CONFIGURACIÓN   ============//
#if !defined isnull
	#define isnull(%1) ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif
//============    DIALOGS     ============//
#define     OBJETIVOROCA            (1)
#define     OBJETIVOPESCA           (2)
//============    COLORS     ============//
#define     DEFAULT_COLOR       0xFFFFFF00
#define     COLOR_NARANJA       0xff9c00FF
#define     COLOR_SEIS          0x000000FF
#define     COLORCARGO0         0xFFFFFF00
#define     COLORCARGO1         0xFFFFFFFF
#define     COLORCARGO2         0xFFC600FF
#define     COLORCARGO3         0xFFA200FF
#define     COLORCARGO4         0xFF8400FF
#define     COLORCARGO5         0xFF5A00FF
#define     COLORCARGO6         0xFF1E00FF
#define     COLORCARGO7         0x00FF00FF
#define     COLORABATIDO        0x00FF3BFF
#define     COLOR_SAMP          0xafc0d3FF
#define     COLOR_VERDECLARO    0x33CC99FF
#define     COLOR_WHITE         0xFFFFFF00
#define     COLOR_BLANCO        0xFFFFFF00
#define     COLOR_MEGAPHONE     0x3399FF00
#define     COLOR_POLICIA       0x3399FF00
#define     COLOR_POLICIAREF    0x3399FFFF
#define     COLOR_GRAD1         0xB4B5B7FF
#define     COLOR_GRAD2         0xBFC0C2FF
#define     COLOR_GRAD3         0xCBCCCEFF
#define     COLOR_GRAD4         0xD8D8D8FF
#define     COLOR_GRAD5         0xE3E3E3FF
#define     COLOR_GRAD6         0xF0F0F0FF
#define     COLOR_COMBATE       0xAFAFAFAA
#define     COLOR_ORANGE        0xFF7F00FF
#define     COLOR_GREEN3        0x9EC73D00
#define     TEAM_BLUE_COLOR     0x3399FF00
#define     COLOR_FADE1         0xE6E6E6E6
#define     COLOR_FADE2         0xC8C8C8C8
#define     COLOR_FADE3         0xAAAAAAAA
#define     COLOR_FADE4         0x8C8C8C8C
#define     COLOR_FADE5         0x6E6E6E6E
#define     COLOR_GREY          0xAFAFAFAA
#define     COLOR_DORADO        0xdabb3eFF
#define     COLOR_YELLOW        0xDBED15FF
#define     COLOR_AMARILLO      0xFFFF00FF
#define     COLOR_ROJO          0xEB0000FF
#define     Hablar              0xE6E6E6E6
#define     Hablar2             0xC8C8C8C8
#define     Hablar3             0xAAAAAAAA
#define     Hablar4             0x8C8C8C8C
#define     Hablar5             0x6E6E6E6E
#define     CHAT                0xE6E6E6E6
#define     CHAT2               0xC8C8C8C8
#define     CHAT3               0xAAAAAAAA
#define     CHAT4               0x8C8C8C8C
#define     CHAT5               0x6E6E6E6E
#define     COLOR_AZUL          0x00FAFFFF
#define     COLOR_MUTE          0xAA3333AA
#define     COLOR_DEFAULT       0xFFFFFF00
#define     COLOR_VERDE2        0x00FF00FF
#define     COLOR_RED           0xEE0000FF
#define     COLOR_AMARILLO2     0xF4FA58FF
#define     COLOR_GREEN2        0x9EC73DFF
#define     COLOR_CHEAT         0xF0525FFF
//============    MACROS     ============//
#define     GetVehicleName(%0)  NombreAuto[GetVehicleModel(%0)-400]
#define     segundos(%0)        (1000 * %0)
#define     minutos(%0)         (1000 * %0 * 60)
#define     horas(%0)           (1000 * %0 * 60 * 60)
#define     PlayerToPoint(%1,%2,%3,%4,%5)   IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define     funcion%0(%1)                   forward %0(%1); public %0(%1)
#define     GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)
#define     strLower(%0) static i, e; i = 0, e = strlen(%0); for( ; i != e; ++i) %0[i] |= (1 << 5)
//============    NEWS     ============//
new RejasFC[33],PuertasFC[6],BotonesFC[6];
new Float:FortCarsonX[MAX_PLAYERS][4];
new PlayerText:MensajeTD[MAX_PLAYERS];
new IDReporte[MAX_PLAYERS], IDReporteMensaje[MAX_PLAYERS][150],ListItemReportId[MAX_PLAYERS][40],CancelReport[MAX_PLAYERS],JustReported[MAX_PLAYERS],reportar[MAX_PLAYERS];
new ArbolStatus, CervezaStatus, HalloweenStatus;
new YaMostroAlertaSed[MAX_PLAYERS] = 0;
new TraeDinero[MAX_PLAYERS] = 0;
new TieneCrisol[MAX_PLAYERS];
new HornoUsarP[MAX_PLAYERS];
new paredx,ofi1,ofi2,ofi3,ofi4,tuberis1,tuberis2,tuberis3,luz1,luz2,luz3,luz4,luz5;
new FabricaMedica[MAX_PLAYERS];
new Float:QuimicosCP[MAX_PLAYERS][4];
new LlegoAutoF[MAX_FABRICAS],Participo[MAX_PLAYERS] = 0;
new unkbox[MAX_FABRICAS][5];
new TieneBarril[MAX_PLAYERS] = 0, TieneCajaMeta[MAX_PLAYERS] = 0, BarrilMeta[MAX_FABRICAS][5], CajaMeta[MAX_FABRICAS][5], VehiculoConBarril[MAX_VEHICLES] = 0, VehiculoConCajas[MAX_VEHICLES] = 0;
new QuimicosActivo[MAX_FABRICAS] = 0, MetanfetaminaEnVenta[MAX_FABRICAS] = 0, MetanfetaminaEnSlot[MAX_FABRICAS] = 0, PuertaAbiertaFabrica[MAX_FABRICAS] = 0;
new HornoEncendido1[MAX_FABRICAS] = 0, HornoEncendido2[MAX_FABRICAS] = 0, HornoEncendido3[MAX_FABRICAS] = 0;
new DANOF[MAX_PLAYERS];
new pickupCarreras;
new EmpezoCarreraP[MAX_PLAYERS];
new PlayerText:CarreraT[MAX_PLAYERS][3],PlayerText:CarreraPosicion[MAX_PLAYERS];
new Text:BoxCarrera[4];
new EnCarreras[MAX_PLAYERS],lugarcarrera,EmpezoCarrera,ParticipantesCarrera,HabilitarCarreras,ParticipantesCarrera2, Text3D:TextoCarrera,ConteoCarrera;
new VueltasCarrera[MAX_PLAYERS],bool:EntradaCarrera[MAX_PLAYERS],VehiculoCarrera[14], SlotGanador,InfoCP[4][6];
new TiempoReparar[MAX_PLAYERS];
new TieneHerramientaEnMano[MAX_PLAYERS];
new PlayerText:NewPlayerr[MAX_PLAYERS];
new PlayerText:TAXIMET2[MAX_PLAYERS];
new LoginTimer[MAX_PLAYERS];
new npctoggle = 0;
new Text3D:TextBot[9];
new quienfue[MAX_PLAYER_NAME];
new VariableCaido[MAX_PLAYERS];
new AnuncioTexto[MAX_PLAYERS][144],AnuncioTipo[MAX_PLAYERS],Text3D:LabelFC[6], ActorFC[9], bool:EventoActivo,bool:NidadX, bool:HallX, t_cerveza,MapaFC[86],MapaNavi[17], MapasTexturizados[18],Text3D:TextoNavi;
new CabinasOcupadasEmisoras[5][3], TieneMicrofono[MAX_PLAYERS], Text3D:CabinasTextos[5], AreaCabinas[6];
new YaEstaAbierta[40], PuertaEmisora[5],PuertaAbiertaEmisora[5],PrendaMarcada[MAX_PLAYERS];
new ObjetoRobo[86], Text3D:LabelRobo[MAX_PLAYERS], PlayerText:RoboCasas[MAX_PLAYERS][4], PuertasRobo[13];
new PlayerText:NotiConnect[MAX_PLAYERS][5];
new NotificacionConectado[MAX_PLAYERS];
new ForzarCerraduraID[MAX_PLAYERS], TiempoForzarCerradura[MAX_PLAYERS], CasaForzada[MAX_PLAYERS];
new Text3D:EscaparLabel[12], Text:BoxRobar, Text:SeleccionaPuerta,Text3D:ForzarTD[MAX_CASAS_ROBO];
new Forzada1,Forzada2,Forzada3,Forzada4,Forzada5,Forzada6,Forzada7,Forzada8,Forzada9,Forzada10,Forzada11,Forzada12;
new CasaAbierta, CasaAbierta2, CasaAbierta3, CasaAbierta4, CasaAbierta5 ,CasaAbierta6, CasaAbierta7, CasaAbierta8;
new CasaAbierta9, CasaAbierta10, CasaAbierta11, CasaAbierta12, Minero,Minero1;
new IslaSeguridad,IslaSeguridad2,Hombreemisora,Chicataxista,Guardia3,Guardia4,Guardia6,Guardia7,Guardia8,Guardia12,actors[20],Avionista,Entrenador,Entrenador2;
new PlayerText:MensajeBox[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS],Picando[MAX_PLAYERS] = 0;
new EnEstacion[MAX_PLAYERS],rocajugador[MAX_PLAYERS];
new pescador[MAX_PLAYERS], pesca[MAX_PLAYERS], RecorridoPescador[MAX_PLAYERS];
new Slapeo[MAX_PLAYERS], TimerSlap[MAX_PLAYERS];
new policiahombre = mS_INVALID_LISTID;
new policiamujer = mS_INVALID_LISTID;
new Text:CN, Text:CN2, Text:CN3, Text:CN4,Text:CN5;
new bool:PayDayActive = false, rejacuartilla = 0, bool:PuedenSalirPatio = false, TimerForcep,Text:Territorio_TD[2];
new DIALOG_CREATE_CREW_COLOR_String[4200],RopaHombre = mS_INVALID_LISTID,RopaMujer = mS_INVALID_LISTID,RopaHombreBZ = mS_INVALID_LISTID,RopaMujerBZ = mS_INVALID_LISTID,objetos = mS_INVALID_LISTID;
new Helrp = mS_INVALID_LISTID,barp = mS_INVALID_LISTID,Motosrp = mS_INVALID_LISTID,vehrp = mS_INVALID_LISTID,MedicoReanimo[MAX_PLAYERS],CeldaJugador[MAX_PLAYERS];
new TimerMedico[MAX_PLAYERS],TimerMeca[MAX_PLAYERS],TimerTaxista[MAX_PLAYERS],AUTOS = 0,VirtualWorldAutos[MAX_PLAYERS],AlquiladoTimer,DineroTirado[MAX_PLAYERS][7],ProgresoSexoOral[MAX_PLAYERS],Dildo[MAX_PLAYERS],TimerMaria = 0,fiestaCervezaTexturaTexto[3];
new ValueTimerBugH[MAX_PLAYERS], Text3D:TextoDulces[32],Text3D:TextoSombrero[32], MapaHall[117],PuestoCamioneros[18], EstMuni[14], PuestosPuentesote[25], PUnity[26],PMontana[13], PBell[13], PTung[13];
new PColinas[13],PCNN[13],PBAY[13],PELQUE[13],PEME[13],PTRANS[13],PESTALV[13],PMARK[13],PSANT[13],PBASU[13],PLSSF[13],PGILI[13],PJULIU[13],PPICKE[13],PAA[13],PPAYA[13],PELQ[13],PLSF[13],PPIZEA[13],PDELAPI[13],PFADO[13],PASF[13],PC1[13];
new ContadorBaile[MAX_PLAYERS],ProgresoProstituta[6],Paciente2[MAX_PLAYERS],BotonesAcademia[7],CamillaLS[MAX_PLAYERS],CamillaGA[MAX_PLAYERS],CamillaSF[MAX_PLAYERS],CamillaLV[MAX_PLAYERS],mapIconMedico[MAX_PLAYERS][MAX_PLAYERS],ContadorCBug[MAX_PLAYERS],RoboTienda[MAX_PLAYERS],valortotal[MAX_PLAYERS],roboTiendasObjeto[MAX_PLAYERS];
new PuedeTomarDinero[MAX_PLAYERS],UltimoRobado[MAX_PLAYERS],RoboActual[MAX_PLAYERS],Text:EquisCerrar,_Select_Status[ MAX_PLAYERS ] = false, _Model_Status[ MAX_PLAYERS ] = 0, TiempoVida[MAX_PLAYERS];
new Float:PosPDX[MAX_PLAYERS],Float:PosPDY[MAX_PLAYERS],Float:PosPDZ[MAX_PLAYERS],Cargas[MAX_PLAYERS], AceptoRepara[MAX_PLAYERS],suicidio[MAX_PLAYERS], permisopesca[MAX_PLAYERS];
new TimerTxtMarcelo;
new TowedCar[MAX_PLAYERS][4], TimerReparar[MAX_PLAYERS], TimerPescador[MAX_PLAYERS],TimerRevisar[MAX_PLAYERS], TimerRecoleccion[MAX_PLAYERS], TimerDescargarCamion[MAX_PLAYERS];
new TimerCamionero[MAX_PLAYERS], Float:VidaVehiculo[MAX_VEHICLES] = 1000.0,avion[3], ViajeAvion[MAX_PLAYERS], contadoravion = 0,TimerBasurero[MAX_PLAYERS], PortonAbiertoCasa,TimerMalherido[MAX_PLAYERS], TimerCombustible[MAX_PLAYERS], TimerCargarCamion[MAX_PLAYERS];
new VerAdmin[MAX_PLAYERS],BarreraTren[36], PasoTrenBarrera[5][18],barrera,LogeoCorrecto[MAX_PLAYERS],TimerLuces[MAX_VEHICLES], TimerLuces2[MAX_VEHICLES],PlayerText:Radly[MAX_PLAYERS],PlayerText:AfinidadconX[MAX_PLAYERS], PlayerText:LineasPutiNivel[MAX_PLAYERS];
new nuevoszonesmap[12], PlayerText:LogroRueda[MAX_PLAYERS], PlayerText:LogroLinea[MAX_PLAYERS];
new PlayerText:LogroTitulo[MAX_PLAYERS], PlayerText:LogroTexto[MAX_PLAYERS], PlayerText:LogroNumero[MAX_PLAYERS];
new EventoBolo[MAX_PLAYERS], Piso[MAX_PLAYERS], ResetearYaMostro[MAX_PLAYERS],Forzando[MAX_PLAYERS] = 0;
new TieneGPSActivo[MAX_PLAYERS];
new bool:EnGaraje[MAX_PLAYERS],C_Type[MAX_PLAYERS],Float:EditandoCoche[MAX_PLAYERS][6],ObjetoSlot[MAX_PLAYERS],ColorSlot[MAX_PLAYERS],TuneandoCoche[MAX_PLAYERS],PickupTuning[MAX_PLAYERS],ObjetoTuning[MAX_PLAYERS],ObjetoTuning2[MAX_PLAYERS];
new MensajeSinGasoEnviado[MAX_PLAYERS] = 0;
new TipoPrision[MAX_PLAYERS] = 1;
new Text:MapaLateral[4];
new LlamadaTipo[MAX_PLAYERS] = 0;
new SexoOral[MAX_PLAYERS] = -1;
new precioofertax[MAX_PLAYERS];
new Float:CaidaTaxi[3][MAX_PLAYERS];
new MinutoLlamada[MAX_PLAYERS];
new YoLlame[MAX_PLAYERS] = 0;
new CLlamada[MAX_PLAYERS];
new TipoOferta[MAX_PLAYERS];
new LoggedYet[MAX_PLAYERS] = 0;
new SprunkOfrecido[MAX_PLAYERS], Ofertante[MAX_PLAYERS];
new Text:Sangre2;
new LCHAT[MAX_PLAYERS];
new TiempoEntrada[MAX_PLAYERS] = 0;
new Text:Sangre,TimerDineroP[MAX_PLAYERS];
new RecienDuda[MAX_PLAYERS];
new vehaveriado[MAX_VEHICLES] = 0,DineroColegiala[33], TiempoAvion;
new PaisActual[MAX_PLAYERS],Text:Cuadroputi, Text:Cuadroputi1, Text:PuticlubMedia,Text:PuticlubAlta;
new TieneSombrero[MAX_PLAYERS], PuestoUnityTiene[MAX_PLAYERS][4],PuestoUnityxTiene[MAX_PLAYERS][4], PuestoEstMuniTiene[MAX_PLAYERS][4], PuestoAGTiene[MAX_PLAYERS][4], PuestoPGTiene[MAX_PLAYERS][4], PuestoColinasTiene[MAX_PLAYERS][4], PuestoCamioneroTiene[MAX_PLAYERS][4], GorrosSFBridgeTiene[MAX_PLAYERS][4];
new PuestoMountTiene[MAX_PLAYERS][4], GorrosBridgeTiene[MAX_PLAYERS][4],PuestoJTTiene[MAX_PLAYERS][4], PuestoAATiene[MAX_PLAYERS][4], PuestoTransTiene[MAX_PLAYERS][4],PuestoCBTiene[MAX_PLAYERS][4], PuestoAESFTiene[MAX_PLAYERS][4], PuestoBaysideTiene[MAX_PLAYERS][4], PuestoWeelsTiene[MAX_PLAYERS][4], PuestoCNNTiene[MAX_PLAYERS][4], PuestoQuebradoTiene[MAX_PLAYERS][4], PuestoEmeTiene[MAX_PLAYERS][4],PuestoFaDoTiene[MAX_PLAYERS][4], PuestoC1Tiene[MAX_PLAYERS][4];
new PuestoLeSFTiene[MAX_PLAYERS][4], PuestoEstaLVTiene[MAX_PLAYERS][4], PuestoMarketTiene[MAX_PLAYERS][4], PuestoSMBTiene[MAX_PLAYERS][4],PuestoMCTiene[MAX_PLAYERS][4], PuestoPPTiene[MAX_PLAYERS][4], PuestoBasuTiene[MAX_PLAYERS][4], PuestoElqTiene[MAX_PLAYERS][4], PuestoPayaTiene[MAX_PLAYERS][4], PuestoLSFTiene[MAX_PLAYERS][4], PuestoCamionero[4], PuestoEstMuni[4], GorrosSFBridge[4], GorrosBridge[4], PuestoUnity[4];
new PuestoUnityx[4],PuestoMount[4],PuestoCB[4],PuestoWeels[4],PuestoColinas[4],PuestoCNN[4],PuestoBayside[4],PuestoQuebrado[4],PuestoEme[4],PuestoTrans[4],PuestoEstaLV[4],PuestoMarket[4],PuestoSMB[4],PuestoBasu[4],PuestoLSF[4],PuestoMC[4],PuestoJT[4],PuestoPP[4],PuestoAA[4],PuestoPaya[4],PuestoElq[4],PuestoLeSF[4],PuestoPG[4],PuestoAG[4],PuestoFaDo[4],PuestoAESF[4],PuestoC1[4];
new Text:FlechasArribaPuti, Text:FlechasArribaPuti2, Strips[12], Stripx[10], EnClub[MAX_PLAYERS] = 0, Text:Completonegro, Text:LuegoDe,Bailarina1 = 0,Bailarina2 = 0,Bailarina3 = 0,Bailarina4 = 0,Bailarina5 = 0,Bailarina6 = 0, EstaDomiciliaria[MAX_PLAYERS],SpecJugador[MAX_PLAYERS] = INVALID_PLAYER_ID;
new BaldeAgua[MAX_PLAYERS],bool:EnPrueba[MAX_PLAYERS],bool:PruebaOnline[MAX_PLAYERS],Frecuencia[MAX_PLAYERS],FraseLoro[MAX_PLAYERS][70],asdtren[MAX_PLAYERS],asd[MAX_PLAYERS],frecuencias[9], EnLlamada911[MAX_PLAYERS];
new AutoBuscado[MAX_PLAYERS], JugadorBuscado[MAX_PLAYERS], PatenteBuscada[MAX_PLAYERS][10],PaydayDado,Balde[MAX_VEHICLES],ObjExp[19], ObjBox[34], ObjCon[5], ObjHumo1[3], ObjHumo2[3];
new VerBaul[MAX_PLAYERS],Objeto[MAX_PLAYERS],Avisos[MAX_PLAYERS],Float:PosTP[MAX_PLAYERS][3];
new Float: fVehSpeed[MAX_PLAYERS],EnPatrulla[MAX_PLAYERS],Logeando[MAX_PLAYERS],RecorridoBasu[MAX_PLAYERS],CargandoC[MAX_PLAYERS],ExpObj, BoxObj, ConObj, Humo1Ojb, Humo2Ojb,BotonesACA[7],iVehicleObjective[MAX_VEHICLES][2],PuertasLVPD[3],PuertasACA[7],Localizando[MAX_PLAYERS],Monto[MAX_PLAYERS],Ficha[MAX_PLAYERS],Text:NewPlayer[3];
new AvisosAuto[MAX_PLAYERS],Mecanico[MAX_PLAYERS],MConductor[MAX_PLAYERS],EnAuto[MAX_PLAYERS],RopaMeca[MAX_PLAYERS],Bidon[MAX_PLAYERS],Baul[MAX_VEHICLES],llenado[MAX_VEHICLES],Muriendo[MAX_PLAYERS],LlamadaTaxi[MAX_PLAYERS],EnTaxi[MAX_PLAYERS];
new CanalDudas[MAX_PLAYERS],CanalAnuncios[MAX_PLAYERS],Oficial[MAX_PLAYERS],RopaMedi[MAX_PLAYERS],RopaBasu[MAX_PLAYERS],RopaMine[MAX_PLAYERS],Capo[MAX_VEHICLES],BajandoV[MAX_PLAYERS],Bajando[MAX_PLAYERS],MRepuestos[MAX_PLAYERS],PBasura[MAX_PLAYERS],Companero[MAX_PLAYERS],recogiendo[MAX_PLAYERS],TM[MAX_PLAYERS],Taxista[MAX_PLAYERS],Pasajero[MAX_PLAYERS];
new LlamadaMeca[MAX_PLAYERS],ResponderMeca[MAX_PLAYERS],ResponderTaxi[MAX_PLAYERS],ResponderMedi[MAX_PLAYERS];
new TelefonoEstado[MAX_PLAYERS],tviaje[MAX_PLAYERS],tcarga[MAX_PLAYERS],Hora, Minuto, Segundo,Float:SpecX[MAX_PLAYERS];
new Luces[MAX_VEHICLES],TimerCombate[MAX_PLAYERS],EnCombate[MAX_PLAYERS],CColocado[MAX_PLAYERS],CagoSeguro[MAX_PLAYERS], BaulPB[MAX_PLAYERS],HCalculo[MAX_PLAYERS],Text:TAXIMET,Text:TAXIMET3,Text:TAXIMET4,HCurando[MAX_PLAYERS],DudaTexto[MAX_PLAYERS][128];
new EnLlamada[MAX_PLAYERS],NoQuitar[MAX_PLAYERS],Agresor[MAX_PLAYERS],TCV[MAX_PLAYERS],TCV2[MAX_PLAYERS],GuardaEspalda[MAX_PLAYERS],Float:SpecY[MAX_PLAYERS],SpecInt[MAX_PLAYERS],Deposito[MAX_PLAYERS],YaOfrecio[MAX_PLAYERS];
new Chofer[MAX_VEHICLES] = INVALID_PLAYER_ID,Carga[MAX_PLAYERS],NombresOcultos[MAX_PLAYERS], TipoCargo[MAX_PLAYERS],CamionCargado[MAX_VEHICLES] = 0,CamionID[MAX_PLAYERS],Paciente[MAX_PLAYERS],armaofertada[MAX_PLAYERS],CrackOfrecidos[MAX_PLAYERS],PiezasOfrecidas[MAX_PLAYERS],EVOfrecidos[MAX_PLAYERS];
new MedicamentosOfrecidos[MAX_PLAYERS],MarihuanaOfrecida[MAX_PLAYERS],dineropedido[MAX_PLAYERS],ofertador[MAX_PLAYERS],LeOfreci[MAX_PLAYERS],Mats1[MAX_PLAYERS],Mats2[MAX_PLAYERS],Mats3[MAX_PLAYERS],MedicoCP2[MAX_PLAYERS],PuntoMats[MAX_PLAYERS],EstadoRadio[MAX_PLAYERS],Curando[MAX_PLAYERS],MedicoCP[MAX_PLAYERS],Mobile2[MAX_PLAYERS],PacienteAmbu[MAX_PLAYERS],Reanimado[MAX_PLAYERS],MarcadoMedicos[MAX_PLAYERS];
new LlamadaMedicos[MAX_PLAYERS],bloqueado[MAX_VEHICLES],alarma[MAX_VEHICLES],PrimerSpawn[MAX_PLAYERS] = 0,averiado[MAX_VEHICLES],Jail[MAX_PLAYERS],San[MAX_PLAYERS],porton, puerta_1, puerta_2, puerta_3, reja1, reja2, reja3, reja4, reja5, reja6,Manejando[MAX_PLAYERS],iVehicle[MAX_PLAYERS],pistas[9], suelo[4], isla[9];
new Float:DeathXH[MAX_PLAYERS],Float:DeathYH[MAX_PLAYERS],Float:DeathZH[MAX_PLAYERS],VehicleFuel[MAX_VEHICLES],Float:DeathX[MAX_PLAYERS], Float:DeathY[MAX_PLAYERS];
new Float:DeathZ[MAX_PLAYERS], Float:PuntoBaX[MAX_PLAYERS], Float:PuntoBaY[MAX_PLAYERS], Float:PuntoBaZ[MAX_PLAYERS], Float:PuntoBaA[MAX_PLAYERS],Float:PuntoCX[MAX_PLAYERS], Float:PuntoCY[MAX_PLAYERS], Float:PuntoCZ[MAX_PLAYERS], Float:PuntoTraX[MAX_PLAYERS], Float:PuntoTraY[MAX_PLAYERS], Float:PuntoTraZ[MAX_PLAYERS];
new Botones[40],PuertasDeBotones[40],TrenUno, TrenTres, TrenCuatro, TrenDos,DineroCamello, CrackCamello, MarihuanaCamello, MedicamentosCamello, TranquilizantesCamello, alarmaon[MAX_VEHICLES], Camello,Alquilador[MAX_PLAYER_NAME],bool:Alquilado,HorasSalon,bool:PermisoSalon[MAX_PLAYERS],bool:Boleto[MAX_PLAYERS],Personas,PrecioSalon,NivelSalon,Text3D:TextoSalon,Text3D:TextoSalon2,NombreEvento[100],DescriEvento[150],TipoEvento,bool:Escuchando[MAX_PLAYERS],PuertaAbierta[5],Puerta[5];
new Esposando[MAX_PLAYERS], TimerEsposar[MAX_PLAYERS],Cargando2[MAX_PLAYERS] = 0,autos[MAX_PAUTOS][MAX_PLAYERS],Patente[MAX_PLAYERS][MAX_PAUTOS][10],EspacioBaul[MAX_PLAYERS][MAX_PAUTOS][11],Componentes[MAX_PLAYERS][14][MAX_PAUTOS],JugadorLogeado[MAX_PLAYERS];
new Text:AlertaRefuerzos[5],YaEncendiendo[MAX_PLAYERS],MotorAuto[MAX_VEHICLES],DudaOff[MAX_PLAYERS], ModoCombate,TieneSprunk[MAX_PLAYERS], TienePorro[MAX_PLAYERS],TieneCerveza[MAX_PLAYERS],TieneVino[MAX_PLAYERS], TienePizza[MAX_PLAYERS], TieneAquariu[MAX_PLAYERS], Contador[MAX_PLAYERS];
new Boletos[MAX_PLAYERS], VWTemporal[MAX_PLAYERS], llamadasonido1[MAX_PLAYERS], llamadasonido2[MAX_PLAYERS],Specteado[MAX_PLAYERS],NPC_Tren[6],hands[MAX_PLAYERS];
new EstaEnBus[MAX_PLAYERS], tipogrua[MAX_PLAYERS], mares,muelles[5],idTimerOfertaPerdida[MAX_PLAYERS],idTimerTiempoVenta[MAX_PLAYERS],Float:SpecZ[MAX_PLAYERS], SpecVW[MAX_PLAYERS];
static door1, door2, door3, door4, engine, lights, alarm, doors, bonnet, boot, objective,controls[12];
new MySQL:handle_db;
new PlayerText:ContadorVelocimetro[MAX_PLAYERS][2];
//Velocimetro
new Text:TEXTDRAWBOX1,Text:TEXTDRAWBOX2,Text:TEXTDRAWBOX3,Text:TEXTDRAWBOX4,Text:TEXTDRAWBOX5;

static const s_TopSpeed[212] = {
	157, 147, 186, 110, 133, 164, 110, 148, 100, 158, 129, 221, 168, 110, 105, 192, 154, 270,115, 149, 145, 154, 140, 99, 135, 270, 173, 165, 157, 201, 190, 130, 94, 110, 167, 0, 149,158, 142, 168, 136, 145, 139, 126, 110, 164, 270, 270, 111, 0, 0, 193, 270, 60, 135, 157,106, 95, 157, 136, 270, 160, 111, 142, 145, 145, 147, 140, 144, 270, 157, 110, 190, 190,149, 173, 270, 186, 117, 140, 184, 73, 156, 122, 190, 99, 64, 270, 270, 139, 157, 149, 140,270, 214, 176, 162, 270, 108, 123, 140, 145, 216, 216, 173, 140, 179, 166, 108, 79, 101, 270,270, 270, 120, 142, 157, 157, 164, 270, 270, 160, 176, 151, 130, 160, 158, 149, 176, 149, 60,70, 110, 167, 168, 158, 173, 0, 0, 270, 149, 203, 164, 151, 150, 147, 149, 142, 270, 153, 145,157, 121, 270, 144, 158, 113, 113, 156, 178, 169, 154, 178, 270, 145, 165, 160, 173, 146, 0, 0,93, 60, 110, 60, 158, 158, 270, 130, 158, 153, 151, 136, 85, 0, 153, 142, 165, 108, 162, 0, 0, 270, 270, 130, 190, 175, 175, 175, 158, 151, 110, 169, 171, 148, 152, 0, 0, 0, 108, 0, 0
};
static const Float:ForzarCerradurasPositions[][3]= {
    {-2277.1763,-9.9763,38.2523},{1344.5836,2610.3254,11.5494},{932.2239,1973.6547,11.6083},{-2394.4846,-14.2417,35.9529},{2373.8467,-1139.5442,30.0510},{-2727.5435,-50.9449,7.0301},{-2727.5054,-155.6168,7.2009},{2485.8654,-1998.0233,14.0340},{2067.4014,695.7449,11.4562},{-1448.9193,2647.9514,56.4912},{1844.8607,770.7580,11.4637},{1762.8298,-2101.1572,13.9916}
};
static const Float:RobarObjetoPositions[][3]= {
    {-2279.4539,-15.9261,38.2993},{1356.3865,2612.5457,11.6759},{940.9933,1975.9020,11.6227},{-2395.0447,-17.9672,36.0232},{2369.2874,-1129.8945,30.0510},{-2730.4619,-58.3389,7.0453},{-2731.8608,-163.3383,7.2174},{-2628.6865,-178.5047,7.1544},{2480.9312,-1990.4189,14.0341},{2063.2168,696.6254,11.5381},{-1449.5641,2644.4102,56.5616},{1843.1997,766.9429,11.5545},{1757.4739,-2092.9973,13.9916},{1676.9354,2612.3923,11.5559}
};
new Float:Saltos[][3] = {
    {135.1563,2349.8230,1949.2449,},{131.8110,2350.3130,1949.1318},{131.7475,2344.1021,1950.5651},{135.2510,2344.7883,1950.4067},{133.2603,2347.3042,1949.8262},{133.5275,2342.2461,1950.9934}
};
static const Float:LlenarBaldePos[][3]= {
    {-1113.1726,-1624.8458,76.3739},{-1085.6027,-1233.0909,129.2188},{2182.2854,-1204.4094,1049.0234},{2500.0156,-1709.0613,1014.7422},{2373.8501,-1132.3589,1050.8750},{2312.9299,-1009.5996,1050.2109},{2336.7605,-1139.1429,1050.7031},{2236.4453,-1068.4406,1049.0234},{2278.4763,-1135.3755,1050.8984},{2268.3149,-1138.6337,1050.6328},{2337.7563,-1067.6060,1049.0310},{244.8778,1190.7170,1080.2578},{19.1101,1349.6440,1084.3812},{233.5327,1246.1370,1082.1406},{218.8409,1292.0800,1082.1406},{267.2342,1292.5289,1080.2578},{228.0432,1159.1633,1082.6094},{264.3879,1246.8861,1084.2578},{378.4278,1455.1125,1080.1875},{320.3961,1480.1434,1084.4397},{31.5584,1405.5405,1084.4297},{-265.2631,1448.9730,1084.3672},{-284.1034,1477.7433,1084.3812},{-48.2810,1397.8523,1084.4297},{78.1618,1337.4204,1083.8672},{2320.4250,-1209.8008,1049.0234},{237.7081,1119.7861,1080.9922},{239.1131,1018.1585,1084.0267},{302.3803,1480.1520,1080.2578},{1280.3440,-808.9535,1085.6328},{414.3080,2535.4280,10.0000}, {333.6844,1122.8926,1083.8903}
};
new Float:ServicioMedicoPos[3][6] = {
    {1148.0066,-1322.5038,-10.7922},{-2713.3152,636.8893,1385.6547},{1242.1221,-809.4786,1164.2759}
};
new Float:ConceSpawn[7][4] = {
	{1594.9730,-1010.2951,24.6063,187.5361},{1648.3289,-1089.2202,23.6109,90.7212},{1700.3760,-1070.1266,23.6113,180.0457},{1752.6080,-1014.8112,23.6657,167.1269},{1740.2095,-1084.4073,23.6660,359.0909},{1677.0603,-1106.6633,23.6120,91.0374},{1558.2231,-1012.6805,23.6114,180.1122}
};
new Float:ConceHeliSpawn[6][4] = {
	{1981.8584,-2371.3872,14.0095,90.0000},{1986.6873,-2392.7295,14.0095,90.0000},{1987.0623,-2327.1477,14.0095,90.0000},{1986.8376,-2304.5823,14.0095,90.0000},{1986.8013,-2260.5063,14.0095,90.0000},{2012.8467,-2441.5562,14.0095,90.0000}
};
new Float:ConceBSpawn[3][4] = {
	{720.7311,-1631.8506,-0.3845,177.5780},{731.7709,-1672.6738,-0.3929,181.6829},{720.1028,-1697.5327,-0.6295,180.0758}
};
new Float:GuardarCajas[10][3] = {
	{-1995.5270,222.0770,1035.8162}, {-1999.7247,222.0580,1035.8162},{-2003.9645,222.0589,1035.8162}, {-2008.2815,222.0568,1035.8162},{-2012.3071,222.0569,1035.8225}, {-2016.7941,222.0571,1035.8225},{-2021.0618,222.0583,1035.8225}, {-2024.7915,224.0278,1035.8225},{-2024.7909,227.3824,1035.8162}, {-2018.0531,231.9894,1035.8162}
};
new Float:FCSPAWN[30][4] = {
	{199.1747,1459.5541,1089.1055,180.0000}, {195.1056,1459.3986,1089.1055,180.0000},{190.7936,1459.7858,1089.1055,180.0000}, {187.0855,1459.4928,1089.1055,180.0000},{183.4470,1459.5338,1089.1055,180.0000}, {179.6088,1459.3896,1089.1055,180.0000},{175.6575,1459.4519,1089.1055,180.0000}, {199.0618,1439.0070,1089.1055,0.0000},{195.0666,1439.3788,1089.1055,0.0000}, {191.5202,1439.1429,1089.1055,0.0000},{187.3893,1439.7242,1089.1055,0.0000}, {183.3691,1439.5751,1089.1055,0.0000},{179.7219,1439.6594,1089.1055,0.0000}, {175.5549,1439.4552,1089.1055,0.0000},{198.9114,1459.6091,1084.8462,180.0000}, {194.9099,1460.5367,1084.8462,180.0000},{191.0115,1460.5378,1084.8462,180.0000}, {187.3833,1460.6614,1084.8462,180.0000},{183.5765,1460.1118,1084.8462,180.0000}, {179.5950,1459.6536,1084.8462,180.0000},{175.8583,1460.5348,1084.8462,180.0000}, {172.0326,1460.0111,1084.8462,180.0000},{171.9444,1438.8562,1084.8462,0.0000}, {175.6630,1438.8634,1084.8462,0.0000},{179.4310,1438.5083,1084.8462,0.0000}, {183.5618,1438.8528,1084.8462,0.0000},{187.3934,1438.2661,1084.8462,0.0000}, {191.3599,1438.7249,1084.8462,0.0000},{195.1422,1439.3063,1084.8462,0.0000}, {199.2997,1439.0018,1084.8462,0.0000}
};
new Float:ChalecoSpawn[24][6] = {
	{-2018.02710, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000}, {-2018.02710, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},{-2018.54712, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000}, {-2020.52710, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},{-2018.02710, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000}, {-2019.56714, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},{-2021.50708, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2020.52710, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},{-2019.06714, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2018.54712, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},{-2019.56714, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000}, {-2020.52710, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},{-2018.54712, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2021.50708, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},{-2021.00708, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2021.50708, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},{-2021.00708, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000}, {-2019.06714, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},{-2020.04712, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2020.04712, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},{-2019.06714, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000}, {-2021.00708, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},{-2019.56714, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}, {-2020.09448, 238.44119, 1035.73596,   -29.22001, -50.81999, 92.45998}
};
new Float:EscopetasRecortadas[10][6] = {
	{-2021.98181, 244.37700, 1035.66382,   0.00000, 0.00000, 0.00000}, {-2021.86084, 244.04727, 1035.22876,   90.00000, 7.00000, 0.00000},{-2021.35913, 244.18207, 1035.22888,   90.00000, 7.00000, 180.00000}, {-2021.08179, 244.37700, 1035.30383,   0.00000, 0.00000, 0.00000},{-2021.98181, 244.37700, 1035.30383,   0.00000, 0.00000, 0.00000}, {-2021.04321, 244.38640, 1035.50781,   0.00000, 0.00000, 180.00000},{-2021.09961, 244.04617, 1035.22876,   90.00000, 7.00000, 0.00000}, {-2020.49866, 244.19951, 1035.22888,   90.00000, 7.00000, 180.00000},{-2021.07385, 244.37820, 1035.66382,   0.00000, 0.00000, 0.00000}, {-2020.22290, 244.40649, 1035.50781,   0.00000, 0.00000, 180.00000}
};
new Float:PTec[10][6] = {
	{-2019.88318, 244.41052, 1037.08557,   0.00000, 0.00000, 180.00000}, {-2021.94531, 244.36340, 1036.84961,   0.00000, 0.00000, 0.00000},{-2019.89148, 244.23950, 1036.58472,   90.00000, 0.00000, 180.00000}, {-2021.05835, 244.38280, 1037.08557,   0.00000, 0.00000, 180.00000},{-2021.07922, 244.22166, 1036.58472,   90.00000, 0.00000, 180.00000}, {-2020.84509, 244.35448, 1036.84961,   0.00000, 0.00000, 0.00000},{-2018.65576, 244.27119, 1036.58472,   90.00000, 0.00000, 180.00000}, {-2018.41455, 244.34410, 1036.84961,   0.00000, 0.00000, 0.00000},{-2019.59436, 244.36140, 1036.84961,   0.00000, 0.00000, 0.00000}, {-2018.63733, 244.43520, 1037.08557,   0.00000, 0.00000, 180.00000}
};
new Float:PUzis[10][6] = {
	{-2018.87012, 244.21410, 1035.22949,   90.00000, 7.00000, 222.00000}, {-2019.57410, 244.23192, 1035.22949,   90.00000, 7.00000, 160.00000},{-2018.89648, 244.43968, 1035.64746,   0.00000, 0.00000, 185.00000}, {-2018.54041, 244.43912, 1035.64746,   0.00000, 25.00000, 185.00000},{-2019.23901, 244.14301, 1035.22949,   90.00000, 7.00000, 127.00000}, {-2019.25305, 244.44669, 1035.64746,   0.00000, 25.00000, 185.00000},{-2018.13232, 244.43910, 1035.64746,   0.00000, 0.00000, 185.00000}, {-2018.18652, 244.01750, 1035.22949,   90.00000, 7.00000, 77.00000},{-2019.61877, 244.43066, 1035.64746,   0.00000, 0.00000, 185.00000}, {-2018.60645, 244.13139, 1035.22949,   90.00000, 7.00000, -18.00000}
};
new Float:PSnipers[10][6] = {
	{-2019.85730, 244.38020, 1035.99414,   0.00000, 0.00000, 5.00000}, {-2021.63086, 244.38510, 1036.28320,   0.00000, 0.00000, 5.00000},{-2019.33923, 244.45490, 1036.28320,   0.00000, 0.00000, 187.00000}, {-2021.60779, 244.37869, 1036.01819,   0.00000, 0.00000, 5.00000},{-2019.56970, 244.15793, 1035.87146,   60.00000, 0.00000, 180.00000}, {-2018.33521, 244.45239, 1036.02905,   0.00000, 0.00000, 187.00000},{-2021.14893, 244.14674, 1035.87146,   60.00000, 0.00000, 180.00000}, {-2018.38452, 244.44810, 1036.29419,   0.00000, 0.00000, 187.00000},{-2020.17102, 244.44839, 1036.24646,   0.00000, 0.00000, 187.00000}, {-2018.12842, 244.14818, 1035.87146,   60.00000, 0.00000, 180.00000}
};
new Float:BolsoSpawn[31][6] = {
	{-2026.49500, 252.92755, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2026.31030, 253.44168, 1035.20044,   0.00000, 0.00000, 0.00000},{-2026.50281, 253.90945, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2026.33667, 254.40216, 1035.20044,   0.00000, 0.00000, 0.00000},{-2025.83167, 254.63782, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2025.89404, 254.09216, 1035.20044,   0.00000, 0.00000, 0.00000},{-2025.75586, 253.54041, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2025.83398, 252.93347, 1035.20044,   0.00000, 0.00000, 0.00000},{-2025.34473, 253.10786, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.92517, 252.83632, 1035.20044,   0.00000, 0.00000, 0.00000},{-2025.17676, 253.58061, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2025.35071, 254.06973, 1035.20044,   0.00000, 0.00000, 0.00000},{-2025.22717, 254.59962, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.71033, 254.65564, 1035.20044,   0.00000, 0.00000, 0.00000},{-2024.87915, 254.20277, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.42456, 254.29457, 1035.20044,   0.00000, 0.00000, 0.00000},{-2024.66357, 253.69652, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.66895, 253.19490, 1035.20044,   0.00000, 0.00000, 0.00000},{-2024.32520, 252.85796, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.26550, 253.44356, 1035.20044,   0.00000, 0.00000, 0.00000},{-2024.13940, 253.93353, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2024.13062, 254.67595, 1035.20044,   0.00000, 0.00000, 0.00000},{-2023.80359, 254.29774, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2023.79785, 253.63652, 1035.20044,   0.00000, 0.00000, 0.00000},{-2023.91846, 253.06677, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2023.59717, 252.76834, 1035.20044,   0.00000, 0.00000, 0.00000},{-2023.22083, 252.83463, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2023.38904, 253.24394, 1035.20044,   0.00000, 0.00000, 0.00000},{-2023.40515, 253.76410, 1035.20044,   0.00000, 0.00000, 0.00000}, {-2023.36169, 254.28839, 1035.20044,   0.00000, 0.00000, 0.00000},{-2023.60840, 254.67216, 1035.20044,   0.00000, 0.00000, 0.00000}
};
new Float:Cajas1[2][3] = {
	{-1995.44226, 220.87140, 1036.28809},{-1995.43774, 220.88451, 1035.22485}
};
new Float:Cajas2[2][3] = {
	{-1999.65063, 220.83051, 1036.28809},{-1999.66272, 220.86720, 1035.21875}
};
new Float:Cajas3[2][3] = {
	{-2003.90698, 220.84540, 1036.28809},{-2003.91345, 220.83290, 1035.21521}
};
new Float:Cajas4[2][3] = {
	{-2008.23206, 220.82809, 1036.28809},{-2008.19434, 220.78900, 1035.22705}
};
new Float:Cajas5[2][3] = {
	{-2012.24988, 220.80341, 1036.28809},{-2012.22876, 220.87730, 1035.21497}
};
new Float:Cajas6[2][3] = {
	{-2016.73218, 220.91370, 1036.28809},{-2016.68604, 220.89410, 1035.21497}
};
new Float:Cajas7[2][3] = {
	{-2020.99927, 220.85710, 1036.28809},{-2020.97791, 220.85620, 1035.21497}
};
new Float:Cajas8[2][3] = {
	{-2025.99988, 223.90810, 1036.35596},{-2026.01501, 223.92320, 1035.28625}
};
new Float:Cajas9[2][3] = {
	{-2026.00830, 227.28999, 1036.35596},{-2025.99390, 227.31190, 1035.28625}
};
new Float:Cajas10[2][3] = {
	{-2018.13245, 233.20580, 1036.29602},{-2018.12109, 233.21930, 1035.21436}
};
new Float:FabricasRecos[11][3] = {
	{-1853.9966,123.2759,15.1172},{-1043.5349,1546.3799,33.0007},{-27.3778,2337.5212,24.1406},{578.8013,1219.5505,11.7113},{2816.95410, -1428.76807, 15.78511},{1201.20227, -975.79108, 42.94669},{-316.9135,1568.7860,75.3594},{-2005.53418, 1377.34277, 6.59055},{-2180.76733, 1218.98425, 33.38559},{2258.50220, 66.98792, 25.94164},{793.97052, 1686.08948, 4.70481}
};
new ComponentesCheck[] =
{
	0x033C2700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x021A27FA, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023B2785, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02BC4703, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03BA278A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x028E078A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02310744, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x0228073A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02BD4701, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023A2780, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x0228077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x027A27CA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x0282278A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023E07C0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x03703730, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x031D2775, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02BE4788, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02010771, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029A0FCE, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03382700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023F8795, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029F078C, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x029627EA, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x0236C782, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029E1FCA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0xFC000437, 0x00000000, 0x021C0000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x03FE6007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00001B87, 0x00000001, 0x01E00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x039E07D2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023CC700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00030000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x038E07D6, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x023D0709, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x029E1F8A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x029C077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02BD076C, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0xFFFFFE00, 0x00000007, 0x00000000, 0x000001F8,
	0x02000700, 0x00000000, 0x00FFFFFE, 0x00000007, 0xC0000000, 0x00002007, 0xFE000700, 0x00000003, 0x00FFFE00, 0x00000007, 0x00003C00, 0x00000600, 0xCE000700, 0xFF800000, 0x00FFFE01, 0x00000007, 0x3C000000, 0x00000000,
	0x02000700, 0x000003FC, 0x00FFFE00, 0x00000007, 0x003C0000, 0x00001800, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x007FE000, 0x00FFFE00, 0x00000007, 0x03C00000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000047, 0x0000003E, 0x3C000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00001C00, 0x00FFFE00, 0x0000000F, 0x00000000, 0x0003C000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x000003C0, 0xC0000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029607C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03FFE7CF, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x031727F1, 0x00000000, 0x00FFFE00, 0x00000007, 0x00030000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x025627F0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x039E07C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000
};

enum Users
{
	User, Cantidad
};
new Usuarios[Users];

enum    _:e_object_types
{
	OBJECT_TYPE_ROADBLOCK,OBJECT_TYPE_SIGN,OBJECT_TYPE_POLICELINE,OBJECT_TYPE_SPIKE
}

enum	e_object_data
{
	Owner[MAX_PLAYER_NAME],Type,ObjData,ObjModel,Float: ObjX,Float: ObjY,Float: ObjZ,Float: ObjRX,Float: ObjRY,Float: ObjRZ,ObjInterior,ObjVirtualWorld,ObjID,Text3D: ObjLabel,ObjArea,bool: ObjCreated
}
new CopObjectData[MAX_COP_OBJECTS][e_object_data],EditingCopObjectID[MAX_PLAYERS] = {-1, ...},RoadblockList = mS_INVALID_LISTID,SignList = mS_INVALID_LISTID;
new Float: zOffsets[5] = {1.35, 3.25, 0.35, 0.4, 5.35};

enum EmiInfo
{
    TieneEmisora,
	EmisoraID,
	NombreEmisora[90],
	URLEmisora[128],
	TransEmisora,
	CabinaOcupada,
}
new Emisoras[MAX_PLAYERS][EmiInfo];

enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
	BeingUsed,
	ReportadoID
}
new Reports[MAX_REPORTS][reportinfo];

enum Phone_Book_Enum
{
    phone_book_contact_VALID,
	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER
};
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum dialogs
{
    DIALOG_INFO,
    LOGIN,
    INFOMEDICO,
    REGISTRO,
    BUSCARCOCHE,
    INVENTARIO,
    SEXO,
    GPS,
    GPS1,
    GPS2,
    GPS3,
    GPS4,
    GPS5,
    GPS6,
    GPS7,
    GPS8,
    GPS9,
    PRODUCTOS,
    BARMAS_BANDA,
    TRABAJOS,
    INDOMEDICO,
    CAMIOND,
    REG_AFABRICA,
    C_EMPLEADOS,
    C_EMPLEADOS2,
    C_ARMASF,
    COMPRACHALE,
    F_SACARMA,
    ACTIVIDAD,
    ADMINISTRACION,
    FMEDICO,
    BANCO,
    BANCO1,
    BANCO2,
    BANCO3,
    BANCO4,
    VENDERAUTO,
    VENDERAUTO2,
    BUSCARCOCHE2,
    BUSCARCOCHE3,
    BUSCARCOCHE4,
    VENDERCASA,
    VENDERCASA1,
    COMPRARCAMELLO,
    VENDERCAMELLO,
    COMPRARCAMELLO2,
    COMPRARCRACK,
    VENDERMEDICAMENTOS,
    VENDERTRANQUILIZANTES,
    VENDERCRACK,
    ESTANTE,
    REGLAS,
    REGLAS2,
    REGLAS3,
    REGLAS4,
    LLAMAGRUA,
	LLAMAGRUA2,
	LLAMAGRUA3,
    REGISTROOFF,
    CREPUESTOS,
    INMIGRACION,
    INFOLADRON,
    DHOSPITAL,
    BOTIQUIN,
    DEMAIL,
    DAYUDA,
    DRECARGA,
    DCONFIG,
    HERRAMIENTAS,
    INFOBASU,
    COMPRARMEDICAMENTOS,
    COMPRARTRANQUILIZANTES,
    JUGUETES,
    PRODUCTOS2,
    HABILIDAD,
    DIALOG_SALON,
    SERVICIOGRUA1,
    SERVICIOGRUA2,
    SERVICIOGRUA3,
    DIALOG_PIZZA,
    COMPRARLICENCIA,
    INVITAR,
    AlquilarSalon1,
    AlquilarSalon2,
    AlquilarSalon3,
    AlquilarSalon4,
    AlquilarSalon5,
    AlquilarSalon6,
    AlquilarSalon7,
   	REPORTSMENU,
    DIALOG_VOBJECT_MENU,
    DIALOG_VOBJECT_OBJECTS,
    DIALOG_VOBJECT_OBJECT,
    DIALOG_VOBJECT_OBJECT_CNAME,
    DIALOG_VOBJECT_OBJECT_COLORS,
    DIALOG_VOBJECT_OBJECT_COLOR,
    DIALOG_VOBJECT_OBJECT_COLOR_HEX,
    DIALOG_VOBJECT_OBJECT_CDELETE,
    DIALOG_VOBJECT_DELETE_ALL,
    DIALOG_VOBJECT_TEXT_MENU,
    DIALOG_VOBJECT_TEXT_TEXT,
    DIALOG_VOBJECT_TEXT_FONT,
    DIALOG_VOBJECT_TEXT_FONT_SIZE,
    DIALOG_VOBJECT_TEXT_FONT_COLOR,
    DIALOG_VOBJECT_COUNTRY,
    DIALOG_ADMINS,
    DIALOG_ADMINS_ADD,
    DIALOG_ADMINS_ADD_2,
    DIALOG_ADMINS_2,
    DIALOG_ADMINS_3,
    COMPRAR_VIP,
    DSEXOO,
    CONTROLES,
    TRABAV,
    ALARMAV,
    ENTREGARSE,
    DIALOGO_FRECUENCIAS,
    DIALOGO_INFO,
    DIALOGO_LORO,
    DIALOGO_LORO2,
    TALLER,
    TALLER2,
    DIALOG_ROPA,
    D_COLOR1,
    D_COLOR2,
    CAMBIOS,
    VENDERBZ,
    COMPRAR_PRENDA,
    ELEVADORSAPD,
    ELEVADORGARAGE,
    ELEVADORTEJADO,
    TRABAJO_MEDICO,
    COMPRARMARIHUANA,
    VENDERMARIHUANA,
    DOMICILIARIA,
    DASCENSOR,
    DCLUB,
    GeoLocalization,
    LocalizarP,
    CCCOBJETOS,
    MISION,
    MISION2,
    MISION3,
    MMEDICO,
    CVEHICULO,
    CREAR_BANDA,
    CONFIG_BANDA,
    CHANGE_NAME_CREW,
    VIEW_RANK_NAME,
    CHANGE_RANK_NAME,
    CHANGE_PROP_RANK,
    CREW_RANK_EDI,
    CREW_RANK_EXP,
    CREW_RANK_INV,
    CREW_MODIFY_COLOR,
    CREW_VIEW_MEMBERS,
    CREW_DELETE,
    MENU_INVITACIONES,
    DIALOG_PLAYER_INV_DELETE_ALL,
    DIALOG_PLAYER_INV_ACEPT,
    REPARACION,
    D_REGALOS,
    D_REGALOS2,
    D_REGALOS3,
    D_REGALOS4,
    D_REGALOSQ,
    D_REGALOS2Q,
    D_REGALOS3Q,
    D_REGALOS4Q,
    COMPRARRADIO,
    MENU_TIENDA,
    MENU_TIENDA_1,
    DIALOG_PHONE,
    DIALOG_PHONE_BOOK,
    DIALOG_PHONE_BOOK_ADD_NUMBER,
    DIALOG_PHONE_BOOK_ADD_NAME,
    DIALOG_PHONE_BOOK_OPTIONS,
    DIALOG_PHONE_BOOK_CHANGE_NAME,
    DIALOG_PHONE_BOOK_CONFIRM_DELET,
    DIALOG_PHONE_BOOK_DELETE_ALL,
    DIALOG_PHONE_CALL_NUMBER,
    DIALOG_PHONE_SMS_NUMBER,
    DIALOG_PHONE_SMS_MESSAGE,
    DIALOG_PHONE_BOOK_SEND_MESSAGE,
    DIALOG_PEDIDO,
    DIALOG_PEDIDO_2,
    DIALOG_PEDIDO_PROPIEDAD,
    DIALOG_PEDIDO_NOMBRE,
    DIALOG_PEDIDO_DESALOJO,
    MENU_PEDIDOS,
    DIALOG_MENU_DESBAN,
    DIALOG_ACENTO,
    DIALOG_PLAYER_TOYS,
    DIALOG_PLAYER_TOY_MENU,
    DIALOG_PLAYER_TOY_EDIT_NAME,
    DIALOG_PLAYER_TOY_CONFIRMDELETE,
    DIALOG_PLAYER_TOY_EDIT_BONE,
    DIALOG_PLAYER_TOY_SELECT_BONE,
    DIALOG_PLAYER_TOY_COLOR_1,
    DIALOG_PLAYER_TOY_COLOR_2,
    DIALOG_PLAYER_TOY_DELETE_ALL,
    C_BOLETO,
    DIALOG_ANUNCIO1,
    DIALOG_ANUNCIO2,
    DIALOG_ANUNCIO3,
    AUTOVENDER,
    VPLAYERAUTO,
    VPLAYERAUTO2,
    VPLAYERAUTO3,
    VPLAYERAUTO4,
    COPOBJECTS_DIALOG,
    DIALOG_SPAM
}

enum Maria
{
    mID,
	Owner[MAX_PLAYER_NAME],
	Status,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Time,
	Object,
	Text3D:Etiqueta,
	Created,
}
new Marihuana[MAX_MARIHUANA][Maria];

enum
{
    AREA_TYPE_GANGZONE
};
enum Toys_Info
{
    shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price,
}
enum Robos
{
	rPolicia,
	rID,
	Actor,
	TiendaRobada,
	TiendaLadron,
	Float:RoboX,
	Float:RoboY,
	Float:RoboZ,
	Float:RoboA,
	RoboVW,
	RoboInt,
	RoboSkin,
	LocalidadRobo[32],
	Float:EntradaX,
	Float:EntradaY,
	Float:EntradaZ,
 	RoboProceso,
	rEnUso
}
new RoboTiendas[MAX_NPC_ROBOS][Robos];

enum B_TEXTDRAW
{
	Text:_button_close,
 	Text:_string,
	Text:_background[ 2 ]
};
new PlayerBackGround[ B_TEXTDRAW ];

enum eInformacion
{
	eID,
	eEnUso,
	Pickup,
	Text3D:Etiqueta,
	Text3D:EtiquetaInterior,
	Dueno,
	DuenoName[MAX_PLAYER_NAME],
 	ePrecio,
	Nivel,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosA,
	Float:SalidX,
	Float:SalidY,
	Float:SalidZ,
	Float:SalidA,
	eMundoVirtual,
	eInterior
};
new Estacionamientos[MAX_GARAGES][eInformacion];

enum _:Trabajos
{
	T_Ninguno,
	T_Medico,
	T_Taxista,
	T_Guardaespaldas,
	T_Camionero,
	T_Cosechador,
	T_Armero,
	T_Mecanico,
	T_Basurero,
	T_Transportista,
	T_Ladron,
	T_Minero,
	T_Pescador,
	T_Prostituta
}
static const Float:CosecharPositions[][3] = {
    {-31.3545,54.7022,3.1172},{-392.1681,-1481.9919,25.6680}
};
static const Float:VerMapasPositions[][6] = {
    {-1589.232422, 860.018372, 7.674500, 0.000000, 0.000000, 90.000000},{2420.764404, 2280.395508, 10.619200, 0.000000, 0.000000, 0.000000},{1451.268677, -1022.182373, 23.632813, 0.000000, 0.000000, 0.000000},{1454.430664, -1151.711914, 23.778942, 0.000000, 0.000000, 90.000000},{126.283234, -173.912689, 1.382813, 0.000000, 0.000000, 0.000000},{1802.403320, -1273.245972, 13.437500, 0.000000, 0.000000, 120.000000},{-180.199707, -1621.776855, 3.327500, 0.000000, 0.000000, 90.000000},{1489.258789, -1740.809814, 13.436900, 0.000000, 0.000000, 90.000000},{-1724.221191, -51.245609, 3.359375, 0.000000, 0.000000, 310.000000},{-1996.265015, 278.204315, 33.273899, 0.000000, 0.000000, 0.000000},{1181.169556, -1318.203613, 13.385829, 0.000000, 0.000000, 90.000000},{1714.988525, -1880.433838, 13.371250, 0.000000, 0.000000, 0.000000},{1546.280151, -1670.824219, 13.366695, 0.000000, 0.000000, 90.000000},{1996.563110, -1454.584229, 13.359375, 0.000000, 0.000000, 90.000000},{504.550995, -1357.840698, 15.929846, 0.000000, 0.000000, 20.000000},{453.804840, -1488.212891, 30.904728, 0.000000, 0.000000, 20.000000},{1677.590576, 946.691895, 10.710300, 0.000000, 0.000000, 90.000000},{2709.112549, -2509.999756, 13.464100, 0.000000, 0.000000, 90.000000},{2222.999023, -1718.630493, 13.332771, 0.000000, 0.000000, 0.000000},{1827.712769, -1838.025513, 13.382813, 0.000000, 0.000000, 0.000000},{644.288330, -1348.391113, 13.436900, 0.000000, 0.000000, 0.000000},{2230.809082, -2206.128662, 13.351563, 0.000000, 0.000000, 45.000000},{1635.828125, -1878.220459, 13.349934, 0.000000, 0.000000, 90.000000}
};
new VEHICLE_COLORS[256] = {
    0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};
new RandomColors[] = {
    0xFFFFFFFF, 0xFFFFFFFF, 0x99CC00FF, 0xFF9900FF, 0x6699CCFF, 0x0099FFFF, 0xCCCC99FF, 0xFF8C13FF, 0xC715FFFF,0x20B2AAFF,  0xDC143CFF, 0x6495EDFF, 0xf0e68cFF, 0x778899FF, 0xFF1493FF, 0xF4A460FF, 0xEE82EEFF, 0xFFD720FF,0x8b4513FF,  0x4949A0FF, 0x148b8bFF, 0x14ff7fFF, 0x556b2fFF, 0x0FD9FAFF, 0x10DC29FF, 0x534081FF, 0x0495CDFF,0xEF6CE8FF,  0xBD34DAFF, 0x247C1BFF, 0x0C8E5DFF, 0x635B03FF, 0xCB7ED3FF, 0x65ADEBFF, 0x5C1ACCFF, 0xF2F853FF,0x11F891FF,  0x7B39AAFF, 0x53EB10FF, 0x54137DFF, 0x275222FF, 0xF09F5BFF, 0x3D0A4FFF, 0x22F767FF, 0xD63034FF,0x9A6980FF,  0xDFB935FF, 0x3793FAFF, 0x90239DFF, 0xE9AB2FFF, 0xAF2FF3FF, 0x057F94FF, 0xB98519FF, 0x388EEAFF,0x028151FF,  0xA55043FF, 0x0DE018FF, 0x93AB1CFF, 0x95BAF0FF, 0x369976FF, 0x18F71FFF, 0x4B8987FF, 0x491B9EFF,0x829DC7FF,  0xBCE635FF, 0xCEA6DFFF, 0x20D4ADFF, 0x2D74FDFF, 0x3C1C0DFF, 0x12D6D4FF, 0x48C000FF, 0x2A51E2FF,0xE3AC12FF,  0xFC42A8FF, 0x2FC827FF, 0x1A30BFFF, 0xB740C2FF, 0x42ACF5FF, 0x2FD9DEFF, 0xFAFB71FF, 0x05D1CDFF,0xC471BDFF,  0x94436EFF, 0xC1F7ECFF, 0xCE79EEFF, 0xBD1EF2FF, 0x93B7E4FF, 0x3214AAFF, 0x184D3BFF, 0xAE4B99FF,0x7E49D7FF,  0x4C436EFF, 0xFA24CCFF, 0xCE76BEFF, 0xA04E0AFF, 0x9F945CFF, 0xDCDE3DFF, 0x10C9C5FF, 0x70524DFF,0x0BE472FF,  0x8A2CD7FF, 0x6152C2FF, 0xCF72A9FF, 0xE59338FF, 0xEEDC2DFF, 0xD8C762FF, 0xD8C762FF, 0xFF8C13FF,0xC715FFFF,  0x20B2AAFF, 0xDC143CFF, 0x6495EDFF, 0xf0e68cFF, 0x778899FF, 0xFF1493FF, 0xF4A460FF, 0xEE82EEFF,0xFFD720FF,  0x8b4513FF, 0x4949A0FF, 0x148b8bFF, 0x14ff7fFF, 0x556b2fFF, 0x0FD9FAFF, 0x10DC29FF, 0x534081FF,0x0495CDFF,  0xEF6CE8FF, 0xBD34DAFF, 0x247C1BFF, 0x0C8E5DFF, 0x635B03FF, 0xCB7ED3FF, 0x65ADEBFF, 0x5C1ACCFF,0xF2F853FF,  0x11F891FF, 0x7B39AAFF, 0x53EB10FF, 0x54137DFF, 0x275222FF, 0xF09F5BFF, 0x3D0A4FFF, 0x22F767FF,0xD63034FF,  0x9A6980FF, 0xDFB935FF, 0x3793FAFF, 0x90239DFF, 0xE9AB2FFF, 0xAF2FF3FF, 0x057F94FF, 0xB98519FF,0x388EEAFF,  0x028151FF, 0xA55043FF, 0x0DE018FF, 0x93AB1CFF, 0x95BAF0FF, 0x369976FF, 0x18F71FFF, 0x4B8987FF,0x491B9EFF,  0x829DC7FF, 0xBCE635FF, 0xCEA6DFFF, 0x20D4ADFF, 0x2D74FDFF, 0x3C1C0DFF, 0x12D6D4FF, 0x48C000FF,0x2A51E2FF,  0xE3AC12FF, 0xFC42A8FF, 0x2FC827FF, 0x1A30BFFF, 0xB740C2FF, 0x42ACF5FF, 0x2FD9DEFF, 0xFAFB71FF,0x05D1CDFF,  0xC471BDFF, 0x94436EFF, 0xC1F7ECFF, 0xCE79EEFF, 0xBD1EF2FF, 0x93B7E4FF, 0x3214AAFF, 0x184D3BFF,0xAE4B99FF,  0x7E49D7FF, 0x4C436EFF, 0xFA24CCFF, 0xCE76BEFF, 0xA04E0AFF, 0x9F945CFF, 0xDCDE3DFF, 0x10C9C5FF,0x70524DFF,  0x0BE472FF, 0x8A2CD7FF, 0x6152C2FF, 0xCF72A9FF, 0xE59338FF, 0xEEDC2DFF, 0xD8C762FF, 0xD8C762FF
};
new Float:CamillasLS[][5] = {
    {1161.3247,-1334.8248,-10.7922,271.2708,2.0},{1161.6248,-1327.0193,-10.7922,270.4997,1.0},{1146.0052,-1341.2516,-10.7922,93.1505,4.0},{1164.0238,-1334.7267,-10.7922,270.2720,2.0},{1167.5248,-1334.5248,-10.7922,270.6050,2.0},{1167.6248,-1326.8646,-10.7922,270.4997,1.0},{1163.6246,-1345.8657,-10.7849,268.9404,3.0},{1166.3246,-1345.5560,-10.7922,268.9404,3.0},{1168.0043,-1341.1843,-10.7922,93.0450,3.0},{1151.2059,-1341.3474,-10.7922,88.6033,4.0},{1148.9045,-1349.2318,-10.7922,89.1554,5.0},{1146.1086,-1349.1567,-10.7922,87.1579,5.0},{1148.5044,-1341.1702,-10.7922,88.9362,4.0},{1151.8046,-1349.2213,-10.7922,89.1554,5.0},{1147.1246,-1345.9316,-10.7922,276.0371,4.0},{1149.7246,-1345.8223,-10.7922,271.7092,4.0},{1162.7048,-1329.9869,-10.7922,92.4929,2.0},{1164.6245,-1326.8224,-10.7922,270.4997,1.0},{1169.0248,-1345.6031,-10.7922,272.4887,3.0}
};
new Float:CamillasSF[10][5] = {
    {-2721.8760,605.4824,1385.6470,89.2424,2.0},{-2709.1360,614.9445,1385.6547,89.7947,4.0},{-2734.1257,616.8509,1385.6547,90.5742,3.0},{-2701.9238,614.8807,1385.6547,89.7947,3.0},{-2736.6060,605.3529,1385.6547,89.4617,1.0},{-2719.0046,605.4175,1385.6470,91.2399,2.0},{-2705.5659,614.8506,1385.6547,89.7947,4.0},{-2716.3760,605.4506,1385.6470,91.2399,2.0},{-2738.2854,616.7706,1385.6547,89.9083,3.0},{-2733.7061,605.1204,1385.6466,88.4629,1.0}
};
new Float:CamillasLV[][5] = {
    {1235.7244,-808.0383,1164.2759,89.5639,1.0},{1250.4841,-824.1636,1167.9960,273.8879,4.0},{1247.0929,-827.2189,1167.9960,90.2216,5.0},{1249.4652,-827.2841,1167.9960,90.8875,5.0},{1251.7042,-827.3507,1167.9960,90.8875,5.0},{1248.0647,-824.2131,1167.9960,273.2220,4.0},{1231.5941,-813.3441,1164.2759,89.8969,1.0},{1245.6648,-824.1623,1164.2759,268.6747,2.0},{1245.6635,-824.1140,1167.9960,268.5611,4.0},{1250.5448,-824.2269,1164.2759,272.0038,2.0},{1231.6140,-808.1431,1164.2759,88.8981,1.0},{1244.9840,-827.2869,1164.2759,90.3352,3.0},{1249.4642,-827.1910,1164.2759,88.6706,3.0},{1251.7042,-827.1281,1164.2759,88.6706,3.0},{1248.0647,-824.1572,1164.2759,269.3405,2.0},{1233.7240,-808.1099,1164.2759,88.5652,1.0},{1243.5237,-824.3701,1164.2759,273.3355,2.0},{1247.0841,-827.2117,1164.2759,92.6656,3.0},{1243.4446,-824.2711,1167.9960,272.2232,4.0},{1244.9845,-827.3311,1167.9960,90.5546,5.0}
};
static const Float:HPCPos[][4]= {
    {1177.9380,-1319.6550,14.0954,270.0000},{1177.0137,-1320.7273,14.0497,270.0000},{1178.2452,-1321.6278,14.1105,270.0000},{1176.6415,-1323.2949,14.0314,270.0000},{1175.0815,-1326.7074,14.5938,270.0000},{1177.5160,-1327.5901,14.0745,270.0000},{1177.3823,-1325.9209,14.0679,270.0000},{1178.8015,-1325.1271,14.1380,270.0000},{1179.4799,-1322.5624,14.1715,270.0000},{1177.7886,-1328.0889,14.0880,270.0000},{1178.7125,-1326.8868,14.1336,270.0000},{1176.3210,-1326.2289,14.0155,270.0000},{1174.6530,-1324.7268,14.7891,270.0000},{1174.9304,-1321.0016,14.5938,270.0000},{1173.0728,-1327.5487,15.3968,270.0000}
};
static const Float:HPGPos[][4]= {
    {2033.8634,-1404.9954,17.2452,180.0000},{2031.3839,-1405.2439,17.2389,180.0000},{2028.2241,-1405.2552,17.2386,180.0000},{2025.6044,-1405.2645,17.2132,180.0000},{2023.5852,-1405.2715,17.1940,180.0000},{2021.4044,-1405.2791,17.1732,180.0000},{2035.4185,-1402.1874,17.3067,180.0000},{2037.1831,-1407.1774,17.1897,180.0000},{2031.7944,-1402.5620,17.2722,180.0000},{2028.8978,-1403.6459,17.2446,180.0000},{2023.2278,-1402.9595,17.1906,180.0000}
};
static const Float:HPLVPos[][4]= {
    {1614.8058,1817.5908,10.8203,0.0000},{1613.0419,1817.8004,10.8203,0.0000},{1611.0299,1816.3567,10.8203,0.0000},{1608.6085,1817.3228,10.8203,0.0000},{1605.3682,1816.1503,10.8203,0.0000},{1603.1455,1817.4187,10.8203,0.0000},{1601.2949,1816.1897,10.8203,0.0000},{1599.5619,1817.2391,10.8203,0.0000},{1598.8051,1819.0078,10.8203,0.0000},{1601.6807,1820.1045,10.8280,0.0000},{1603.5867,1818.8036,10.8203,0.0000},{1605.7253,1820.2758,10.8280,0.0000},{1607.5717,1818.6564,10.8203,0.0000},{1609.6084,1820.3187,10.8280,0.0000},{1611.2225,1818.5868,10.8203,0.0000},{1614.3680,1819.1401,10.8280,0.0000},{1617.1754,1820.0564,10.8280,0.0000}
};
static const Float:HPSFPos[][4]= {
    {-2662.3035,638.3649,14.4531,175.0000},{-2658.9199,638.4907,14.4531,175.0000},{-2656.1143,638.5948,14.4531,175.0000},{-2653.2971,638.6994,14.4531,175.0000},{-2650.1743,638.8153,14.4531,175.0000},{-2647.8831,639.3567,14.4531,175.0000},{-2645.5295,638.2349,14.4531,175.0000},{-2642.3918,639.0449,14.4531,175.0000},{-2642.0688,637.0115,14.4531,175.0000},{-2640.3364,635.5806,14.4531,175.0000},{-2641.4216,633.7475,14.4545,175.0000},{-2643.1511,635.5380,14.4531,175.0000},{-2646.5178,635.7631,14.4531,175.0000},{-2648.3799,636.5843,14.4531,175.0000},{-2650.4348,635.8369,14.4531,175.0000},{-2652.0046,637.6121,14.4531,175.0000},{-2654.1812,636.6133,14.4531,175.0000},{-2662.0847,636.1230,14.4531,175.0000},{-2658.1287,636.0930,14.4531,175.0000},{-2660.0605,637.0927,14.4531,175.0000},{-2655.7766,637.2667,14.4531,175.0000}
};
static const Float:OperacionesPositions[][3]= {
    {833.6001,3.1724,1004.1797},{830.6400,-0.2800,1004.1797},{822.0131,4.0536,1004.1797},{822.0101,1.9244,1004.1797},{2316.6121,-15.1184,26.7422},{2316.6074,-9.9517,26.7422},{1086.9856,-148.6115,1001.1160},{1084.9305,-148.6101,1001.1160},{1091.8477,-135.6460,1001.1160},{1109.1139,1268.7269,10.8203},{1380.1714,-1785.8119,13.5469}
};
static const Float:RadiosPos[][3]= {
    {1254.7644,-804.6345,1084.0151},{1434.3252,589.3580,1000.9779},{225.3002,1187.7854,1080.2578},{2327.0132,-1018.0557,1050.2178},{2331.0811,-1068.4113,1049.0234},{2194.8037,-1201.2301,1049.0234},{2311.1023,-1207.4109,1049.0234},{2360.8394,-1130.8195,1050.8750},{2282.0415,-1135.8741,1050.8984},{2491.3289,-1697.8755,1014.7490},{224.4195,1241.0884,1082.1406},{232.9977,1289.9427,1082.1406},{236.3799,1048.3400,1084.0067},{292.4060,1472.9526,1080.2642},{320.25391, 1490.39087, 1083.43884},{379.02029, 1469.72083, 1079.17688},{366.4335,1425.3593,1081.3359},{482.1933,1399.6086,1080.2578},{450.5942,1414.1479,1084.3080},{263.4377,1288.6233,1080.2578},{229.50169, 1151.12305, 1081.60596},{23.2901,1347.0875,1088.8750},{-270.6304,1447.6964,1088.8672},{17.9222,1407.9509,1084.4297},{147.5579,1373.5997,1083.8594},{236.7255,1082.3959,1084.2415},{-70.99350, 1359.27661, 1079.21289},{-287.9925,1478.1453,1088.8823},{-47.8563,1411.1011,1084.4297},{265.88324, 1242.81116, 1083.25623},{2451.8186,-1705.9608,1013.5078},{2806.3760,-1165.6929,1025.5703},{321.8526,1117.1307,1083.8828},{2319.1746,-1142.2817,1050.4922},{2267.0566,-1136.5151,1050.6403},{-2166.1284,641.7698,1057.5875},{417.8647,2535.4861,10.0000},{1273.2833,-785.8144,1089.9303},{2549.2622,-1280.6965,1060.9844},{1475.0764,548.1407,1000.9959},{-786.8574,488.8219,1376.1953},{2261.9563,-1208.6964,1049.0308},{1099.4520,-817.2785,107.4822},{78.6785,1341.4865,1083.4033}
};
static const Float:GasolineraPositions[][3]= {
    {1925.1581,-1779.2399,13.0875},{1002.5995,-938.9977,41.7164},{-90.9733,-1169.9698,1.9307},{654.7282,-565.5597,15.7458},{-1677.1003,414.2072,7.0904},{-2410.9700,974.6269,45.4609},{-1327.8411,2677.0786,49.8695},{615.9312,1689.9292,6.7035},{1595.3818,2198.0535,10.5985},{2202.4304,2476.8889,10.6556},{1944.0356,-1772.2762,13.1342},{2148.8745,2748.3677,10.8203},{2751.7844,-2595.2117,2.2000},{1382.7792,461.4145,20.1010},{-1472.1361,1863.7946,32.6328},{2114.6504,920.4183,10.8203},{2639.3811,1106.8284,10.8203},{-1606.5299,-2713.9026,48.5335},{2751.7844,-2595.2117,2.2000},{1968.6451,-2638.5715,13.5469},{-1116.7944,-174.9563,14.1440},{1332.6748,1540.4779,10.8203},{2320.3205,580.9168,10.8554},{1156.7572,1260.2539,10.8203}
};
static const Float:CeldasPositions[][3]=
{
	{172.0682,1438.3047,1084.8462},{175.9516,1438.9554,1084.8462},{179.7587,1438.0883,1084.8462},{183.7799,1438.3221,1084.8462},{187.7992,1437.8352,1084.8462},{191.7423,1437.8417,1084.8462},{195.5862,1438.1899,1084.8462},{199.4962,1438.1758,1084.8462},{199.1098,1460.8811,1084.8462},{195.6922,1460.6552,1084.8462},{191.7911,1460.3043,1084.8462},{187.8092,1460.7742,1084.8462},{184.1076,1460.0978,1084.8462},{180.1715,1460.2877,1084.8462},{176.3600,1460.4807,1084.8462},{172.5534,1460.7180,1084.8462},{176.1593,1459.1552,1089.1055},{179.9729,1459.4087,1089.1055},{183.8501,1459.5066,1089.1055},{187.5735,1459.2120,1089.1055},{191.6875,1460.0719,1089.1055},{195.4530,1459.6787,1089.1055},{199.5654,1459.7024,1089.1055},{199.6154,1438.9169,1089.1055},{195.7357,1439.0088,1089.1055},{191.8590,1439.1483,1089.1055},{188.0030,1438.9355,1089.1055},{184.1357,1439.2328,1089.1055},{180.1986,1438.7174,1089.1055},{176.3905,1439.0450,1089.1055}
};
new NombreHerramienta[5][] = { "",  "{00CC00}Martillo{FFFFFF} | ",  "{00CC00}Destornillador{FFFFFF} | ",    "{00CC00}Barreta{FFFFFF} | ",   "{00CC00}Balde{FFFFFF} | "};

static const Float:FortCarsonSpawn[30][3] = {
	{172.0682,1438.3047,1084.8462}, {175.9516,1438.9554,1084.8462},{179.7587,1438.0883,1084.8462}, {183.7799,1438.3221,1084.8462},{187.7992,1437.8352,1084.8462}, {191.7423,1437.8417,1084.8462},{195.5862,1438.1899,1084.8462}, {199.4962,1438.1758,1084.8462},{199.1098,1460.8811,1084.8462}, {195.6922,1460.6552,1084.8462},{191.7911,1460.3043,1084.8462}, {187.8092,1460.7742,1084.8462},{184.1076,1460.0978,1084.8462}, {180.1715,1460.2877,1084.8462},{176.3600,1460.4807,1084.8462}, {172.5534,1460.7180,1084.8462},{176.1593,1459.1552,1089.1055}, {179.9729,1459.4087,1089.1055},{183.8501,1459.5066,1089.1055}, {187.5735,1459.2120,1089.1055},{191.6875,1460.0719,1089.1055}, {195.4530,1459.6787,1089.1055},{199.5654,1459.7024,1089.1055}, {199.6154,1438.9169,1089.1055},{195.7357,1439.0088,1089.1055}, {191.8590,1439.1483,1089.1055},{188.0030,1438.9355,1089.1055}, {184.1357,1439.2328,1089.1055},{180.1986,1438.7174,1089.1055}, {176.3905,1439.0450,1089.1055}
};
new Float:DineroSpawn1[7][3] = {
    {1219.4506, -6.7681, 1000.3845},{1219.7976, -6.8836, 1000.3845},{1219.9985, -7.0584, 1000.3845},{1219.6404, -7.0946, 1000.3845},{1219.4285, -6.9823, 1000.3845},{1219.3450, -7.1265, 1000.3845},{1219.5104, -7.2973, 1000.3845}
};
new Float:DineroSpawn2[12][3] = {
    {1214.65063, -4.69790, 1000.38452},{1214.14819, -4.23293, 1000.38452},{1214.53308, -4.04349, 1000.38452},{1214.60669, -4.41849, 1000.38452},{1214.12769, -4.46524, 1000.38452},{1214.36548, -4.61390, 1000.38452},{1214.47095, -4.19637, 1000.38452},{1214.20825, -3.98005, 1000.38452},{1213.84241, -4.38125, 1000.38452},{1213.93042, -4.66804, 1000.38452},{1214.29126, -4.78296, 1000.38452},{1214.34155, -4.37421, 1000.38452}
};
new Float:DineroSpawn3[17][3] = {
    {1202.96399, 8.28210, 999.92468},{1202.75500, 8.12750, 999.92468},{1202.69250, 8.37438, 999.92468},{1202.84998, 8.55979, 999.92468},{1203.11084, 8.45035, 999.92468},{1203.26245, 8.19671, 999.92468},{1203.00867, 8.04549, 999.92468},{1202.72449, 7.95939, 999.92468},{1203.16357, 7.83645, 999.92468},{1202.79993, 7.77427, 999.92468},{1202.38135, 7.93154, 999.92468},{1203.31152, 8.00469, 999.92468},{1203.44116, 8.41645, 999.92468},{1203.38232, 8.70793, 999.92468},{1203.12512, 8.74535, 999.92468},{1202.73047, 8.74830, 999.92468},{1202.73047, 8.74830, 999.92468}
};
new Float:DineroSpawn4[17][3] = {
    {1221.45471, 8.70950, 1000.38733},{1221.18079, 8.95026, 1000.38733},{1221.64392, 9.20410, 1000.38733},{1221.03357, 8.71232, 1000.38733},{1220.81445, 8.96599, 1000.38733},{1220.77930, 8.68179, 1000.38733},{1220.98523, 9.16584, 1000.38733},{1221.35608, 9.19465, 1000.38733},{1221.58569, 8.95798, 1000.38733},{1221.34583, 8.49501, 1000.38733},{1221.00684, 8.51719, 1000.38733},{1221.30237, 8.80439, 1000.38733},{1221.68201, 8.54490, 1000.38733},{1221.73621, 8.74649, 1000.38733},{1221.88123, 9.05650, 1000.38733},{1221.11169, 8.30978, 1000.38733},{1221.55042, 8.29642, 1000.38733}
};
new Float:DineroSpawn5[14][3] = {
    {1207.96570, -6.90310,1000.38733},{1208.19617, -6.73263,1000.38733},{1207.97278, -6.56259,1000.38733},{1208.36243, -6.45283,1000.38733},{1208.52686, -6.81083,1000.38733},{1208.20422, -7.08637,1000.38733},{1208.58374, -6.59465,1000.38733},{1208.57703, -6.26913,1000.38733},{1208.25940, -6.17592,1000.38733},{1207.94446, -6.35177,1000.38733},{1207.91321, -6.08451,1000.38733},{1208.63062, -5.99649,1000.38733},{1208.85559, -6.40737,1000.38733},{1208.88074, -6.13652, 1000.38733}
};
new Float:DineroSpawn6[11][3] = {
    {1203.41333, -8.66540, 1001.10388},{1203.19043, -8.34746, 1001.10388},{1203.29358, -8.47133, 1001.10388},{1203.10022, -8.61934, 1001.10388},{1202.93945, -8.46910, 1001.10388},{1202.90540, -8.30045, 1001.10388},{1203.38538, -8.25599, 1001.10388},{1203.04211, -8.15435, 1001.10388},{1202.86487, -8.78291, 1001.10388},{1202.84534, -8.62792, 1001.10388},{1203.17700, -8.80070, 1001.10388}
};
new Float:EstacionamientoCamionero[59][4] = {
    {2069.7180,2422.4978,10.7178,269.8497}, {2069.0488,2416.7107,10.7178,270.8350}, {2069.0100,2413.7415,10.7178,269.9562},{2069.3208,2410.7585,10.7178,267.8664},  {2069.1484,2407.7351,10.7178,268.9985}, {2069.2466,2404.8096,10.7197,269.5660},{2068.8679,2401.7734,10.7250,270.4845},  {2069.5366,2398.9690,10.7217,270.0494}, {2069.1985,2396.0447,10.7256,270.9738},{2068.7021,2393.2031,10.7255,271.3805},  {2069.0479,2390.0613,10.7255,268.8426}, {2078.3579,2422.3350,10.7178,90.1878},{2078.6353,2419.4163,10.7178,88.7606},    {2078.9937,2416.5027,10.7223,88.7923},  {2078.8472,2413.6343,10.7178,91.6046},{2078.6589,2410.7097,10.7178,90.9780},    {2069.4436,2419.5530,10.7178,269.2118}, {2078.0088,2407.6951,10.7177,91.5206},{2079.1050,2404.7798,10.7178,88.3970},    {2077.7427,2401.6953,10.7177,90.9732},  {2079.0037,2398.7427,10.7178,89.1851},{2079.1719,2395.9822,10.7177,89.6311},    {2078.4805,2392.9758,10.7178,88.8372},  {2078.3494,2389.9963,10.7179,91.4931},{2086.6340,2422.5757,10.7178,269.6368},   {2087.0779,2419.5530,10.7178,269.6935}, {2086.2122,2416.6030,10.7178,271.3036},{2086.3079,2413.6252,10.7176,270.9491},  {2087.0103,2410.7585,10.7178,270.8611}, {2086.5947,2407.7368,10.7178,271.1256},{2086.2122,2404.7976,10.7178,267.3324},  {2086.9910,2401.9883,10.7178,269.0317}, {2086.4133,2398.8130,10.7178,267.5578},{2086.2700,2395.9319,10.6875,269.5852},  {2086.2354,2392.9148,10.7178,269.0103}, {2086.1912,2390.1309,10.7178,270.2054},{2096.6958,2390.0129,10.7178,270.2597}, {2095.8147,2392.9041,10.7178,90.5982},   {2095.6445,2395.8586,10.7178,86.6870},{2096.2080,2398.9033,10.7178,89.0238},    {2096.4546,2401.8137,10.7178,87.6966},  {2096.3569,2404.7004,10.7178,88.0389},{2096.6760,2407.6082,10.7178,87.7897},    {2095.8726,2410.5107,10.7139,86.8762},  {2096.2737,2413.5745,10.7178,90.0802},{2096.4568,2416.6282,10.6877,89.0720},    {2096.4822,2419.4331,10.7178,89.4069},  {2096.3069,2422.3921,10.7178,91.2038},{2104.2380,2422.4290,10.7178,268.7301},   {2104.0344,2419.5662,10.7178,269.6224}, {2104.2651,2416.6438,10.7178,269.8183},{2103.8311,2413.6514,10.7178,271.1700},  {2104.4236,2410.7073,10.7178,270.8135}, {2104.9734,2407.8037,10.7177,268.0424},{2103.7742,2401.7839,10.6845,271.5938},  {2104.1587,2398.9211,10.7178,272.2759}, {2104.6467,2396.0334,10.7177,271.8693},{2103.9285,2392.9788,10.7178,269.3462},  {2104.2876,2390.0640,10.7178,269.4435}
};
new Float:EstacionamientoNormal[87][4] = {
    {1700.9434,-1893.0575,-49.5459,359.1727},{1692.1959,-1892.3928,-49.5500,358.5018},{1687.4604,-1892.0718,-49.5457,359.5341},{1683.2198,-1891.9866,-49.5437,359.3870},{1678.6841,-1891.8391,-49.5452,359.3071},{1674.3474,-1891.7332,-49.5457,358.7783},{1670.0671,-1891.9661,-49.5439,358.9673},{1661.3129,-1891.8578,-49.5450,357.9927},{1652.4753,-1892.2537,-49.5214,359.0848},{1648.3402,-1892.2540,-49.5463,359.1805},{1643.7401,-1892.3600,-49.5437,358.9878},{1635.0544,-1892.2921,-49.5446,359.0557},{1630.7037,-1891.9773,-49.5178,359.3072},{1624.9020,-1885.8916,-49.5503,269.3125},{1624.9250,-1881.2821,-49.5458,270.2203},{1624.6895,-1876.6132,-49.5436,269.3907},{1624.7087,-1871.7465,-49.5199,270.7915},{1624.8037,-1866.7968,-49.5450,268.8862},{1624.8608,-1862.1732,-49.5446,269.6339},{1625.0593,-1857.2717,-49.5470,267.8584},{1624.9291,-1852.4271,-49.5458,269.1884},{1624.5190,-1847.6683,-49.5460,269.2230},{1643.8900,-1848.1674,-49.5444,356.9514},{1661.1975,-1848.7606,-49.5454,359.7119},{1682.9938,-1859.1254,-49.5460,270.7711},{1683.1062,-1863.2749,-49.5530,268.7698},{1682.7625,-1867.3658,-49.5182,269.2705},{1682.2968,-1872.0295,-49.5421,268.7775},{1692.0452,-1892.4513,-60.2719,359.0346},{1687.5537,-1891.8564,-60.2702,359.4271},{1678.9497,-1892.2196,-60.2717,358.1399},{1648.4669,-1891.5432,-60.2703,359.9407},{1643.8351,-1892.3015,-60.2711,359.1833},{1634.9308,-1892.0286,-60.2469,359.3054},{1624.5059,-1886.2368,-60.2436,270.3784},{1624.8840,-1881.0900,-60.2731,269.9742},{1625.0099,-1876.4462,-60.2453,272.3181},{1624.8190,-1852.7928,-60.2807,268.3029},{1624.3732,-1847.9072,-60.2442,271.4542},{1648.2174,-1849.0896,-60.2706,358.6554},{1661.0142,-1849.0599,-60.2452,359.5746},{1669.9652,-1848.4615,-60.2729,359.4380},{1682.5824,-1858.9597,-60.2738,269.5594},{1682.1111,-1863.0200,-60.2724,271.0364},{1682.3948,-1867.2174,-60.2725,269.7123},{1682.8677,-1871.9066,-60.2774,270.5558},{1698.5054,-1868.1997,-49.5449,90.5219},{1698.6495,-1863.1975,-49.5454,89.9168},{1698.7686,-1858.2522,-49.5480,91.1162},{1699.0171,-1853.0203,-49.5453,91.0152},{1698.3234,-1848.2490,-49.5494,91.2853},{1698.7477,-1843.3202,-49.5452,90.9259},{1698.1277,-1838.2383,-49.5191,89.5903},{1699.2198,-1833.3199,-49.5450,89.8076},{1699.1166,-1828.4044,-49.5181,92.6670},{1698.2000,-1823.2429,-49.5463,90.9048},{1698.7080,-1823.0408,-60.2779,89.5352},{1699.1685,-1828.2711,-60.2722,89.1948},{1698.3683,-1833.1237,-60.2443,88.8886},{1698.5221,-1838.2834,-60.2743,90.4589},{1699.1111,-1843.2233,-60.2729,90.1863},{1698.2303,-1848.1890,-60.2713,89.2910},{1698.6639,-1853.1273,-60.2731,89.2623},{1698.7783,-1858.1204,-60.2726,89.9146},{1698.5807,-1863.0490,-60.2723,90.2713},{1698.5999,-1867.9010,-60.2711,89.7022},{1696.6182,-1893.3223,-49.5174,2.0531},{1656.8086,-1892.0720,-49.5456,0.2596},{1639.4436,-1891.7799,-49.5199,0.0611},{1647.8235,-1848.3661,-49.5179,0.5933},{1652.1539,-1848.6429,-49.5468,0.6608},{1656.4976,-1848.3142,-49.5185,1.1586},{1665.6100,-1848.9293,-49.5456,0.2534},{1670.0616,-1848.5620,-49.5184,1.0163},{1700.9070,-1891.7345,-60.2478,0.7216},{1696.3022,-1891.9620,-60.2723,0.0890},{1683.2422,-1891.8271,-60.2709,0.1301},{1674.4420,-1891.9174,-60.2717,1.0014},{1670.2343,-1892.0488,-60.2461,0.0316},{1661.3765,-1891.9287,-60.2478,0.8051},{1656.9729,-1892.1548,-60.2722,0.3159},{1652.5803,-1891.8945,-60.2742,1.0098},{1639.4609,-1892.2233,-60.2710,0.4207},{1630.4873,-1892.0220,-60.2705,1.2220},{1652.2684,-1848.9530,-60.2729,0.5955},{1656.7208,-1849.1294,-60.2712,0.2793},{1665.4950,-1848.5863,-60.2708,0.8123}
};
new Float:EstacionamientoMinero[10][4] = {
	{-1280.7651,450.4886,7.0840,358.9461},{-1275.2996,450.8217,7.0841,358.0985},{-1269.7046,451.7606,7.0840,4.4092},{-1263.7773,450.7595,7.0840,3.3909},{-1259.1250,451.1145,7.0841,2.1065},{-1260.1409,471.3822,7.0807,180.4372},{-1265.9272,471.8560,7.0807,177.4233},{-1270.8258,471.8618,7.0807,179.1856},{-1276.2070,471.8233,7.0808,179.0241},{-1281.6302,471.3324,7.0806,179.3396}
};
new ArmaNombre2[47][] = {
    "","Manopla","Palo de golf","Porra","Cuchillo","Bate de Beisbol","Pala","Palo de Pool","Katana","Motosierra","Dildo púrpura","Dildo blanco","Dildo blanco grande","Dildo",  "Ramo de flores","Baston","Granada","Granada lagrimogena","Molotov",""," "," ","9mm","9mm silenciada","Desert eagle","Escopeta","Escopeta recortada","Escopeta de combate", "Uzi","MP5","AK-47","M4","TEC-9","Rifle","Sniper Rifle","Bazooca","heatseeker","Lanzallamas","Minigun","satchel charge","Bomba",
    "Aerosol","Matafuego",  "Camara","Lentes de vision", "Lentes térmico","Paracaidas"
};
new NombreAuto[212][] = {
    {"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},   {"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"}, {"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"}, {"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
    {"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"}, {"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},    {"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},  {"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkleys RC Van"},
    {"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"}, {"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},    {"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},  {"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
    {"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"}, {"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},    {"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},  {"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
    {"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},   {"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"}, {"Blade"},  {"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"}, {"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},   {"Utility"},
    {"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},  {"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},   {"Bandito"},    {"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},   {"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"}, {"Tug"},{"Trailer 3"},
    {"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},    {"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"}, {"Police Car (LVPD)"},  {"Police Ranger"},{"Picador"},{"S.W.A.T Van"},{"Alpha"},{"Phoenix"},{"Glendale Chocado"},   {"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},    {"Utility Trailer"}
};
static stock const Float:ac_wMinRange[] = {
    25.0, 25.0, 25.0, 30.0, 25.0, 35.0, 25.0, 35.0, 40.0, 40.0, 25.0, 55.0, 50.0, 50.0, 50.0, 4.0, 65.0
};
enum HalloweenEvento
{
    sombreros[128],
	Payasos[32]
}
new E_Halloween[HalloweenEvento];

enum HalloweenPuestos
{
    P1Hora,P2Hora,P3Hora,P4Hora,P5Hora,P6Hora,P7Hora,P8Hora,P9Hora,P10Hora,P11Hora,P12Hora,P13Hora,P14Hora,P15Hora,P16Hora,P17Hora,P18Hora,P19Hora,P20Hora,P21Hora,P22Hora,P23Hora,P24Hora,P25Hora,P26Hora,P27Hora,P28Hora,P29Hora,P30Hora,P31Hora,P32Hora,
}
new Halloween[MAX_PLAYERS][HalloweenPuestos];

enum RutaCosechas
{
    RutaCosecha,
	ProgresoCosecha,
	CosechaLugar,
}
new Cosechas[MAX_PLAYERS][RutaCosechas];

enum TransportistasO
{
    Objeto1,
	Objeto2,
	Objeto3,
	Ruta
}
new Transportistas[MAX_PLAYERS][TransportistasO];

enum Barras
{
    PlayerBar:Sed,
	PlayerBar:Hambre,
	PlayerBar:Experiencia,
	PlayerBar:Combustible,
	PlayerBar:Velocimetro,
	PlayerBar:Cosecha,
	PlayerBar:Camionero,
	PlayerBar:ReparandoBar,
	PlayerBar:Picar,
	PlayerBar:Revisar
};
new Progressbar[MAX_PLAYERS][Barras];

enum BI
{
	bID,
	BIntegrantes,
	BNombre[32],
	BLider[32],
	bRango1[32],
	bRango2[32],
	bRango3[32],
	bRango4[32],
	bRango5[32],
	bRango6[32],
	bRango7[32],
	bRango8[32],
	territorio[15],
	RANK_EXP[7],
	RANK_EDIT[7],
	RANK_INV[7],
	UltimoAtaque,
	B_Atacando,
	BColor,
	EnUso
};
new BandasInfo[MAX_BANDAS][BI];

enum TerriInfo
{
	bool:Territorio_Valido,
	Territorio_ID,
	Territorio_Banda,
	Territorio_Lugar[32],
	bool:Territorio_Usado,
	Territorio_BandaID,
	Territorio_BandaID2,
	Territorio_Color,
	Float:Territorio_MinX,
	Float:Territorio_MinY,
	Float:Territorio_MinZ,
	Float:Territorio_MaxX,
	Float:Territorio_MaxY,
	Float:Territorio_MaxZ,
	Territorio_Area,
	Territorio_GZ,
	bool:Territorio_EnGuerra,
	Territorio_AtacanteID,
	Territorio_Tiempo,
	Territorio_TimerEx,
	Territorio_UltimoA
};
new TerritorioInfo[MAX_TERRITORIOS][TerriInfo];

enum venta_info
{
    IDU,
	IDVEN,
	PRECIO,
	PMAX,
	TIPO,
	SLOT,
	IDV,
	GASOLINA,
	MODELO,
	TRABA,
	ALARMA,
	INTERIOR,
	SEGURO,
	MUNDO,
	PLACA[24],
	COLOR1,
	COLOR2,
	Float:XAV,
	Float:YAV,
	Float:ZAV,
	MONEDA,
	SQL
};
new VentaVehiculo[MAX_PLAYERS][venta_info];

enum jInfo
{
    pLogroNivel, AsaltoBlindado, pCaramelos, pTrucoTrato, pFiestaCerveza, pHechizado, pLogroPutiClub, pID, pNivelPescador, pExpPescador, pExpMinero, pNivelMinero, suspendido, enHospital, TiempoPD,
    pAfinidad1, pAfinidad2, pAfinidad3, pAfinidad4, pAfinidad5, pAfinidad6, pPuntosCarrera, Float:jPosE_x, Float:jPosE_y, Float:jPosE_z, Float:hx, Float:hy, Float:hz, Float:j_HEALTH, Float:j_ARMOUR, Float:@X, Float:@Y, Float:@Z, Float:@A,
    pStriptease, pAutomedicado, pRemedios, pMedicamentos, pTranquilizantes, pAdicto, pCracks, pMedico, pReanimados, pTortuga, pCasa, pRestaurante, pOficina, pCerrajero, pForzadas, pPilotoExperto, pGanadas,
    pNegocioRedondo, pCosecha, pMarihuanero, pPorros, pNivelMecanico, pExpMecanico, pNivelLadron, pExpLadron, pNivelBasurero, pExpBasurero, pNivelCamionero, pExpCamionero, pNivelTransportista, pExpTransportista, pNivelArmero,
    pSemillas, pExpArmero, pNivelMedico, pExpMedico, pPassword[128], tempPassword[129], pExpulsando[32], pLNumero, pPasajeros, pDineroRobado, pEMS, pCama, pVwCama, pAtendido, pMedicina, pEnfermedad, pBanco,
    pRango, pMarihuana, pCrack, pMateriales, pAgenda, pNumero, pGuia, pSonidos, pMuteos, pBarras, pAlerta, pVelocimetro, pOnline, pPatines, pGPS, pEmisora, vID1, vID2, vID3, vID4, pRadio, pDuty, pModelo,
    pSocioHP, pTipoCarcel, pTiempoCarcel, pTiempoJail, pCargos, p_Ban, pRazon[32], pInterior, pMundoVirtual, QuienC[150], IP[16], EnCasa, EnRopero, EnGarage, PrecioNivel, ExperienciaTotal, hprecio, hmoneda, h2precio, h2moneda,
    Repuestos, Mobile, MobileSub, CasaID, CasaID2, EstacionamientoID, vEstacionado1, vEstacionado2, vEstacionado3, vEstacionado4, pEnEstacionamiento, Moneda, Totems, arrestado, horasjugadas, pVip, pTrabajo2, finmes, findia, finano, findialicencia, finmeslicencia, finanolicencia,
    piezas, Agonizando, pAdmin, pSexo, pTrabajo, pEdad, pRopa, pFaccion, pNivel, j_ARMAS[13], pDinero, pExperiencia, pEnFC, finlicencia, ContraTemporal[128], pPaisRegistro[30], PaisDistinto, jRegistrado, Nickname[MAX_PLAYER_NAME],
    jConexion[90], pSed, pLicencia, pHambre, pMartillo, pDestornillador, pBarreta, pBalde, Float:pOX, Float:pOY, Float:pOZ, Float:pOA, VE1, VE2, VE3, VE4, vMonedaa, vModelo, vGas, vinterior, vvw, vColor1, vColor2, Float:pVidaV,
    vBaul, vBaul2, vBaul3, vBaul4, vBaul5, vBaul6, vBaul7, vBaul8, vBaul9, vBaul10, vPJ, vpatente[10], vComponentes0, vComponentes1, vComponentes2, vComponentes3, vComponentes4, vComponentes5, vComponentes6, vComponentes7,
    vComponentes8, vComponentes9, vComponentes10, vComponentes11, vComponentes12, vComponentes13, vPrecio, vTraba, Float:vX, Float:vY, Float:vZ, Float:vA, vOvw, vSeguro, vOinterior, Float:pOX2, Float:pOY2, Float:pOZ2, Float:pOA2,
    V2E1, V2E2, V2E3, V2E4, v2Monedaa, vModelo2, v2Gas, v2interior, v2vw, v2Color1, v2Color2, Float:pVidaV2, v2Baul, v2Baul2, v2Baul3, v2Baul4, v2Baul5, v2Baul6, v2Baul7, v2Baul8, vPJ2, v2patente[10], v2Componentes0, v2Componentes1,
    v2Componentes2, v2Componentes3, v2Componentes4, v2Componentes5, v2Componentes6, v2Componentes7, v2Componentes8, v2Componentes9, v2Componentes10, v2Componentes11, v2Componentes12, v2Componentes13, v2Precio, v2Traba, Float:v2X,
    Float:v2Y, Float:v2Z, Float:v2A, v2Ovw, vSeguro2, v2Ointerior, Float:pOX3, Float:pOY3, Float:pOZ3, Float:pOA3, V3E1, V3E2, V3E3, V3E4, v3Monedaa, vModelo3, v3Gas, v3interior, v3vw, v3Color1, v3Color2, Float:pVidaV3, v3Baul,
    v3Baul2, v3Baul3, v3Baul4, v3Baul5, v3Baul6, v3Baul7, v3Baul8, vPJ3, v3patente[10], v3Componentes0, v3Componentes1, v3Componentes2, v3Componentes3, v3Componentes4, v3Componentes5, v3Componentes6, v3Componentes7, v3Componentes8,
    v3Componentes9, v3Componentes10, v3Componentes11, v3Componentes12, v3Componentes13, v3Precio, v3Traba, Float:v3X, Float:v3Y, Float:v3Z, Float:v3A, v3Ovw, vSeguro3, v3Ointerior, Float:pOX4, Float:pOY4, Float:pOZ4, Float:pOA4,
    V4E1, V4E2, V4E3, V4E4, v4Monedaa, vModelo4, v4Gas, v4interior, v4vw, v4Color1, v4Color2, Float:pVidaV4, v4Baul, v4Baul2, v4Baul3, v4Baul4, v4Baul5, v4Baul6, v4Baul7, v4Baul8, vPJ4, v4patente[10], v4Componentes0, v4Componentes1,
    v4Componentes2, v4Componentes3, v4Componentes4, v4Componentes5, v4Componentes6, v4Componentes7, v4Componentes8, v4Componentes9, v4Componentes10, v4Componentes11, v4Componentes12, v4Componentes13, v4Precio, v4Traba, Float:v4X,
    Float:v4Y, Float:v4Z, Float:v4A, v4Ovw, vSeguro4, pt_LAST_TERRITORY, v4Ointerior, pEmail[52], vAlarma, v2Alarma, v3Alarma, v4Alarma, vAAlarma, vAAlarma2, vAAlarma3, vAAlarma4, BaneosD, BaneosD2, v2Baul9, v2Baul10, v3Baul9,
    v3Baul10, v4Baul9, v4Baul10, pTerritorioMapa, pTerritorioAviso, pBloqueado, pRazonSan[50], sancionado, pSobreRuedas, pLicenciaVuelo, pAcento, pRegalo, pTempBan
};
new PlayerInfo[MAX_PLAYERS][jInfo];

enum vInfo
{
	v_DBID,
	Float:pOX,
	Float:pOY,
	Float:pOZ,
	Float:pOA,
	v0_interior,
	v0_vw,
	vPrecio,
	Float:pVidaVE,
	VE1,
	VE2,
	VE3,
	VE4,
	vMonedaa,
	vModelo,
	vGas,
	vinterior,
 	vvw,
	vColor1,
	vColor2,
	Float:pVidaV,
	vPJ,
	vTraba,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vSeguro,
	vAlarma,
	vAlarm
}
new VehicleInfo[MAX_PLAYERS][MAX_PAUTOS][vInfo];

enum pToysInfo
{
	pToyValid,
	pToyID,
	pToyName[24],
	pUsando,
	pModelID,
	pBone,
	Float:pOffsetX,
	Float:pOffsetY,
	Float:pOffsetZ,
	Float:pRotX,
	Float:pRotY,
	Float:pRotZ,
	Float:pScaleX,
	Float:pScaleY,
	Float:pScaleZ,
	pColor1,
	pColor2
};
new PlayerToys[MAX_PLAYERS][MAX_PTOYS][pToysInfo];

enum oi_info
{
    obj_ID,
	obj_BONE,
	obj_NAME[32]
};

new OBJETOS_INFO[][oi_info] = {
    {0, 1,  "Vacío"},{1, 1, "Manopla"},{2, 1,   "Palo de golf"},{3, 1,  "Porra"},{4, 1, "Cuchillo"},{5, 1,  "Bate de beisbol"},{6, 1,   "Pala"},{7, 1,  "Palo de billar"},{8, 1,    "Katana"},
    {9, 1,  "Motosierra"},{10, 1,   "Consolador rosa"},{11, 1,  "Vibrador blanco"},{12, 1,  "Gran vibrador blanco"},{13, 1, "Vibrador plateado"},{14, 1,    "Ramo de flores"},{15, 1,   "Baston"},
    {16, 1, "Granada"},{17, 1,  "Gas Lacrimógeno"},{18, 1,  "Molotov"},{22, 1,  "9mm"},{23, 1,  "9mm con silenciador"},{24, 1,  "Desert Eagle"},{25, 1, "Escopeta"},{26, 1, "Sawn Off"},
    {27, 1, "Escopeta de combate"},{28, 1,  "UZI"},{29, 1,  "MP5"},{30, 1,  "AK-47"},{31, 1,    "M4"},{32, 1,   "TEC-9"},{33, 1,    "Rifle"},{34, 1,    "Sniper"},{35, 1,   "Lanzacohetes"},{36, 1, "Bazooka"},
    {37, 1, "Lanzallamas"},{38, 1,  "Minigun"},{39, 1,  "Bomba"},{40, 1,    "Detonador"},{41, 1,    "Spray"},{42, 1,    "Extintor De Incendios"},{43, 1,    "Camara"},{44, 1,   "Lentes de visión nocturna"},
    {45, 1, "Gafas termicas"},{46, 1,   "Paracaídas"},{19472, 2, "Mascara Anti-Gas"},{18637, 4, "Escudo Policía"},{18640, 2,    "Peluca"},{18642, 6,    "Taser"},{18645, 2, "Casco con Llamas"},{18913, 2,  "Bandana Verde"},
    {18917, 2,  "Bandana Azul"},{18918, 2,  "Bandana Negro"},{18939, 2, "Jockey Azul"},{18942, 2,   "Jockey Ploma"},{18943, 2,  "Jockey Verde"},{18947, 2,  "Sombrero Negro"},{18961, 2,    "Jockey de Camionero"},
    {18962, 2,  "Sombrero negro"},{18964, 2,    "Gorro Negro"},{18974, 2,   "Antifaz"},{18976, 2,   "Casco Azul"},{18978, 2,    "Casco Blanco"},{18979, 2,  "Casco Morado"},{19033, 2,  "Gafas Negras"},{19036, 2,  "Mascara Blanca"},
    {19064, 2,  "Gorra de Navidad"},{19078, 15, "Loro"},{19079, 16, "Loro"},{19086, 6,  "Vibrador Gigante"},{19093, 2,  "Gorro"},{19136, 2, "Sombrero con Pelo"},{19137, 2, "Mascara de Pollo"},{19138, 2,  "Lentes Negros"},
    {19139, 2,  "Lentes Rojos"},{19140, 2,  "Lentes Azules"},{19142, 1, "Chaleco"},{19352, 2,   "Sombrero Elegante"},{19421, 2, "Audifonos"},{19472, 2, "Mascara de Gas"},{19488, 2,    "Sombrero Gris"},{19559, 1, "Mochila"},
    {19801, 2,  "Mascara"},{18897, 2, "Bandana azul"},{18898, 2, "Bandana verde"},{18899, 2, "Bandana Rosa"},{18971, 2, "Sombrero blanco y negro"},{18972, 2, "Sombrero negro y naranja"},{18893, 2, "Gorra pirata blanca"},
    {18895, 2, "Gorra pirata negra"},{18915, 2, "Cubre boca morado"},{18920, 2, "Cubre boca amarillo"},{18949, 2, "Sombrero verde"},{19022, 2, "Lentes negros"},{19023, 2, "Lentes azules"},{19025, 2, "Lentes morado"},
    {19029, 2, "Lentes verdes"},{19069, 2, "Gorra negra"},{18963, 2, "CJ"},{19317, 1, "Guitarra"},{2404, 5, "Tabla de Suft T1"},{2405, 5, "Tabla de Suft T2"},{2406, 5, "Tabla de Suft T3"},{1210, 5, "Maletín"},{19318, 5, "Bajo"},
    {19351, 2, "Bigote"},{18638, 2, "Casco de seguridad"},{19160, 2, "Casco de seguridad"},{18639, 2, "Sombrero negro"},{18975, 2, "Peluca"},{19274, 2, "Peluca de payaso roja"},{18891, 2, "Bandana"},{18892, 2, "Bandana"},
    {18894, 2, "Bandana"},{18896, 2, "Bandana"},{18900, 2, "Bandana"},{18901, 2, "Bandana"},{18902, 2, "Bandana"},{18903, 2, "Bandana"},{18904, 2, "Bandana"},{18905, 2, "Bandana"},{18906, 2, "Bandana"},{18907, 2, "Bandana"},
    {18908, 2, "Bandana"},{18909, 2, "Bandana"},{18910, 2, "Bandana"},{18911, 2, "Cubre Bocas"},{18912, 2, "Cubre Bocas"},{18914, 2, "Cubre Bocas"},{18916, 2, "Cubre Bocas"},{18919, 2, "Cubre Bocas"},{18921, 2, "Boina"},
    {18922, 2, "Boina"},{18923, 2, "Boina"},{18924, 2, "Boina"},{18925, 2, "Boina"},{18926, 2, "Jockey"},{18927, 2, "Jockey"},{18928, 2, "Jockey"},{18929, 2, "Jockey"},{18930, 2, "Jockey"},{18931, 2, "Jockey"},{18932, 2, "Jockey"},
    {18933, 2, "Jockey"},{18934, 2, "Jockey"},{18935, 2, "Jockey"},{19487, 2, "sombrero de copa"},{18940, 2, "Jockey"},{18941, 2, "Jockey"},{18955, 2, "Jockey"},{18956, 2, "Jockey"},{18957, 2, "Jockey"},{18958, 2, "Jockey"},
    {18959, 2, "Jockey"},{18960, 2, "Jockey"},{18936, 2, "Yelmo"},{18937, 2, "Yelmo"},{18938, 2, "Yelmo"},{18944, 2, "Sombrero rojo"},{18945, 2, "Sombrero gris"},{18946, 2, "Sombrero"},{18948, 2, "Sombrero"},{18950, 2, "Sombrero"},
    {18951, 2, "Sombrero"},{18952, 2, "Casco De Boxeo"},{18953, 2, "Gorro"},{18954, 2, "Gorro"},{18965, 2, "Gorro"},{18966, 2, "Gorro"},{18967, 2, "Gorro"},{18968, 2, "Gorro"},{18969, 2, "Gorro"},{18970, 2, "Sombrero de tigre"},
    {18973, 2, "Sombreo cool"},{19095, 2, "Sombrero de vaquero"},{19096, 2, "Sombrero negro"},{19097, 2, "Sombrero de vaquero"},{19098, 2, "Sombrero oscuro"},{18977, 2, "Casco rojo"},{19006, 2, "Gafas"},{19007, 2, "Gafas"},
    {19008, 2, "Gafas"},{19009, 2, "Gafas"},{19010, 2, "Gafas"},{19011, 2, "Gafas"},{19012, 2, "Gafas"},{19013, 2, "Gafas"},{19014, 2, "Gafas"},{19015, 2, "Gafas"},{19016, 2, "Gafas"},{19017, 2, "Gafas"},{19018, 2, "Gafas"},
    {19019, 2, "Gafas"},{19020, 2, "Gafas"},{19021, 2, "Gafas"},{19024, 2, "Gafas"},{19026, 2, "Gafas"},{19027, 2, "Gafas"},{19028, 2, "Gafas"},{19030, 2, "Gafas"},{19031, 2, "Gafas"},{19032, 2, "Gafas"},{19034, 2, "Gafas"},
    {19035, 2, "Gafas"},{19037, 2, "Mascara roja"},{19038, 2, "Mascara verde"},{19528, 2, "Sombrero de bruja"},{19553, 2, "Sombrero de paja"},{19554, 2, "Gorro"},{19558, 2, "Jockey de Pizza"},{19065, 2, "Gorro navideño"},
    {19085, 2, "Parche en el ojo"},{19094, 2, "Sombrero de amburguesa"},{19039, 5, "Reloj de oro"},{19040, 5, "Reloj"},{19041, 5, "Reloj"},{19042, 5, "Reloj"},{19043, 5, "Reloj"},{19044, 5, "Reloj"},{19045, 5, "Reloj"},
    {19046, 5, "Reloj"},{19047, 5, "Reloj"},{19048, 5, "Reloj"},{19049, 5, "Reloj"},{19050, 5, "Reloj"},{19051, 5, "Reloj"},{19052, 5, "Reloj"},{19053, 5, "Reloj"},{19319, 1, "Guitarra electrica"},{19556, 5, "Guante de boxeo"},
    {19557, 2, "Antifaz"},{19590, 5, "Espada japonesa"},{19591, 6, "Abanico"},{19878, 2, "Patineta"},{18632, 6, "Caña de pescar"},{1607, 2, "Delfin"},{19314, 2, "Cuernos"},{1550, 1, "Bolso con dinero"},{19777, 1, "FBI logo"},
    {19141, 2, "Casco SWAT"},{19515, 2, "Chaleco de SWAT"},{2054, 2, "Capitan Gorro"},{371, 2, "Paracaidas"},{19422, 2, "Audifonos"},{19331, 2, "Sombrero de Bombero1"},{19330, 2, "Sombrero de Bombero2"},{19067, 1, "Jockey de Gangster1"},
    {19068, 2, "Jockey de Gangster2"},{19069, 3, "Jockey de Gangster3"},{11704, 2, "Mascara de Demonio"},{19163, 2, "glimpmask1"},{3524, 1, "Calavera con fuego"},{18689, 1, "Prenda de fuego"}
};
enum E_PLAYER_TEXTDRAW
{
	PlayerText:ptextdraw_HUD[3],PlayerText:ptextdraw_TUNING_SHOP,
};
new PlayerTextdraws[MAX_PLAYERS][E_PLAYER_TEXTDRAW];

enum E_TEXTDRAW
{
	Text:textdraw_HUD[6],Text:textdraw_SHOP_TUNING[5],
};
new Textdraws[E_TEXTDRAW];

enum E_TEMP_INFO
{
    PuedeRobar,
    @TemporalWeapon,
    @pHospital,
    @Specteando,
    @ContraVacia,
    pCuentasIP,
    NAMES[2500],
    pt_RolBasurero,
    bool:pt_Transportista,
    bool:pt_Camionero,
    pOwnerCMD_Use,
    pOwner,
    voIP[32],
    pSeleccion_Regalos,
    pSeleccion_Regalos_Staff,
    pSeleccion_Regalos_Jugador,
    TimerRobar,
    TiendaRobando,
    p_INVITACIONES[15],
    p_INVITACIONES_ID[15],
    BandaOfertada[2],
    jSelectRango,
    pVEHICLES[4],
    pVEHICLES_SLOT[4],
    p_ESCUCHANDO_EMISORA,
    p_PLAYER_LISTITEM[MAX_LISTITEMS],
    pt_PLAYER_PHONE_BOOK_SELECTED,
    pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
    pt_PLAYER_PHONE_NUMBER_SELECTED,
    p_SELECTED_TOY_SLOT,
    p_ADD_ADMIN_ID,
	p_SELECT_ADMIN,
	p_SELECT_ADMIN_LEVEL,
	p_SELECT_ADMIN_ONLINE,
	p_SELECT_ADMIN_ID[30],
	p_SELECT_ADMIN_ID_LEVEL[MAX_LISTITEMS],
	p_SELECT_ADMIN_ID_ONLINE[MAX_LISTITEMS],
    pDELETE_CAR_PLAYERID,
    pt_SELECTED_POLICE_OBJECT_ID,
    LoroHabla,
    pt_DIALOG_ECO_SELECTED,
    pt_INT_ANTITELEPORT_VEH,
    pt_VW_ANTITELEPORT_VEH,
    Float:pt_POS_ANTITELEPORT[3],
    pt_INT_ANTITELEPORT,
    pt_VW_ANTITELEPORT,
}
new PlayerTemp[MAX_PLAYERS][E_TEMP_INFO];

enum pi_info
{
    pi_ID,pi_DB,pi_ESTADO,pt_NAME[25],pt_TIPO[30],pi_TEXT[256],Float:pt_POS[3],pt_TIME
};
new PEDIDO_INFO[MAX_PEDIDOS][pi_info];

enum Times
{
    ParticiparFabrica,
    TimerChupar,
    TimerRevisando,
    RevisadoTime,
    TiempoSacarClub,
    TiempoFumarPorro,
    TiempoCargo,
    TiempoMensajeRobar,
    TiempoBebida,
    TiempoSexoOfrecido,
    TiempoDarDinero,
    TiempoDuda,
    TiempoVenderJ,
    TiempoAnuncio,
    TiempoCombate,
    TiempoComputadora,
    TiempoCLUB,
    TiempoAgresor,
    TiempoCrack,
    TiempoLlenar,
    TiempoMedicamentos,
    TiempoTranquilizantes,
    TiempoMarihuana,
    TiempoBolso,
    TiempoIntentar,
    TiempoGPS,
    TiempoExpulsar,
    TiempoCarrera,
    TiempoCarrera2,
    TiempoAcademia,
    TiempoVenta,
    TiempoMotor,
    TiempoAntiC,
    TiempoCubrir,
    TiempoCaramelos,
    RobadoReciente,
    Advertido,
    Consumible,
    ErrorMensaje,
    Entrando,
    GolpesAdv,
    TiempoAntiTP,
    p_TIME_REF,
    bool:p_REF,
    TIMER_SURFING,
    TIMER_CHALECO,
    TIMER_VIDA,
    TIMER_WEAPONS,
    pTIME_PEDIDO,
    pTIME_LORO
}
new Tiempos[MAX_PLAYERS][Times];

enum
{
    CMD_USER,       //0
    CMD_AYUDANTE,   //1
    CMD_MOD_DUDAS,  //2
    CMD_MOD_JUEGO,  //3
    CMD_MOD_GLOBAL, //4
    CMD_TECNICO,	//5
	CMD_ADM	    	//6
};
ADMIN_RANKS(level)
{
    new adnm[65];
    switch(level)
    {
        case 0: adnm = "Usuario";
        case 1: adnm = "Ayudante";
        case 2: adnm = "Moderador";
        case 3: adnm = "Moderador";
        case 4: adnm = "Moderador";
        case 5: adnm = "ADM";
        case 6: adnm = "Dueño";
    }
    return adnm;
}
enum dInfo
{
    dID,
    dName[128],
    dOwner[MAX_PLAYER_NAME],
    dPickup,
    Float:dExitX,
    Float:dExitY,
    Float:dExitZ,
    Text3D:dLabel,
}
new DoorInfo[512][dInfo];

enum Global_Vehicles_Info
{
    Float:gb_vehicle_POS[3],
    Float:gb_vehicle_SPAWN_X,
    Float:gb_vehicle_SPAWN_Y,
    Float:gb_vehicle_SPAWN_Z,
    pt_INMUTE_VEH_TP,
    gb_vehicle_COLOR_1,
    gb_vehicle_COLOR_2,
    gb_vehicle_WORLD,
    gb_vehicle_PARAMS_ENGINE,
    gb_vehicle_PARAMS_LIGHTS,
    gb_vehicle_PARAMS_ALARM,
    gb_vehicle_PARAMS_DOORS,
    gb_vehicle_PARAMS_BONNET,
    gb_vehicle_PARAMS_BOOT,
    gb_vehicle_PARAMS_OBJECTIVE,
    gb_vehicle_TP_IMMUNITY,
    gb_vehicle_EMISORA_ID,
    Text3D:gb_vehicle_LABEL
};
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum
{
	VOBJECT_TYPE_OBJECT,VOBJECT_TYPE_TEXT,VOBJECT_TYPE_COUNTRY_FLAG,VOBJECT_TYPE_COUNTRY_PANEL
};
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,vobject_TYPE,vobject_NAME[32],vobject_ID,vobject_OBJECT_ID,vobject_MODELID,Float:vobject_OFFSET[3],Float:vobject_ROT[3],vobject_ATTACHED,vobject_COLORS[5],vobject_text_TEXT[32],vobject_text_FONT[24],vobject_text_FONT_SIZE,vobject_text_BOLD,vobject_text_FONT_COLOR
};
new VEHICLE_OBJECTS[MAX_VEHICLES][10][e_VEHICLE_OBJECTS];

enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,tuning_object_NAME[24],tuning_object_PRICE
};

new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
	{1000,"spl_b_mar_m",3000},{1001,"spl_b_bab_m",3000},{1002,"spl_b_bar_m",3000},{1003,"spl_b_mab_m",3000},{1004,"bnt_b_sc_m",9000},{1005,"bnt_b_sc_l",3000},{1007,"wg_l_b_ssk",2000},{1018,"exh_b_ts",3500},{1019,"exh_b_t",3500},{1021,"exh_b_m",3500},{1024,"lgt_b_sspt",2000},{1029,"exh_c_s",3000},{1043,"exh_lr_br2",3500},{1044,"exh_lr_br1",3000},{1047,"wg_l_a_f",2500},{1048,"wg_l_c_f",2500},{1049,"spl_a_f_r",3000},{1050,"spl_c_f_r",3000},{1056,"wg_l_a_st",2500},{1090,"wg_l_a_u",2500},{19078,"TheParrot1",8000},{19917,"CutsceneEngine1",10500},{19893,"LaptopSAMP1",6000},{2768,"CJ_CB_BURG",1000},{19838,"CoffeeCup1",1000},{11736,"MedicCase1",3000},{1247,"bribe",8000},{19147,"PinSpotLight5",5000},{19148,"PinSpotLight6",5000},{19149,"PinSpotLight7",5000},{19151,"PinSpotLight9",5000},{19153,"PinSpotLight11",5000},{19580,"Pizza1",1000},{2690,"CJ_FIRE_EXT",5000},{19308,"taxi01",3000},{1550,"CJ_MONEY_BAG",4000},{19306,"kmb_goflag2",5000},{19307,"kmb_goflag3",5000},{18647,"RedNeonTube1",6000},{18648,"BlueNeonTube1",6000},{18649,"GreenNeonTube1",6000},{18650,"YellowNeonTube1",6000},{18651,"PinkNeonTube1",6000},{18652,"WhiteNeonTube1",6000},{18749,"SAMPLogoSmall",5000},{19054,"XmasBox1",3000},{19133,"ArrowType4",5000},{19471,"forsale02",3000},{19878,"Skateboard1",2000},{19314,"bullhorns01",5000},{2404,"CJ_SURF_BOARD",3000},{2405,"CJ_SURF_BOARD2",3000},{2406,"CJ_SURF_BOARD3",3000},{19317,"bassguitar01",2000},{19318,"flyingv01",2000},{2232,"MED_SPEAKER_4",3000},{1840,"speaker_2",2000},{2229,"SWANK_SPEAKER",4000},{1025,"wheel_or1",2500},{1073,"wheel_sr6",2500},{1074,"wheel_sr3",2500},{1075,"wheel_sr2",2500},{1076,"wheel_lr4",2500},{1077,"wheel_lr1",2500},{1078,"wheel_lr3",2500},{1079,"wheel_sr1",2500},{1080,"wheel_sr5",2500},{1081,"wheel_sr4",2500},{1082,"wheel_gn1",2500},{1083,"wheel_lr2",2500},{1084,"wheel_lr5",2500},{1085,"wheel_gn2",2500},{1096,"wheel_gn3",2500},{1097,"wheel_gn4",2500},{1098,"wheel_gn5",2500},{19894,"laptop",4500},{19873,"toiletpaperroll1",200},{19874,"soapbar1",200},{19624,"case1",600},{19621,"obj1",1500},{19620,"police",10500},{1115,"fbb_lr_slv1",2500},{1046,"exh_a_f",2500},{1153,"fbmp_c_f",2500},{1152,"parachoque",2500},{1160,"fbmp_a_j",2500},{1013,"parachoque",2500},{1171,"fbmp_a_l",2500},{1169,"parachoque",2500},{1184,"rbmp_lr_bl1",2500},{1185,"fbmp_lr_rem2",2500},{1188,"fbmp_lr_sv2",2500},{1189,"fbmp_lr_sv1",2500},{1190,"fbmp_lr_t2",2500},{1191,"fbmp_lr_t1",2500},{1192,"rbmp_lr_t1",2500},
	{1193,"rbmp_lr_t2",2500},{19339,"coffin01",5000},{19320,"pumpkin01",2500},{6865,"steerskull",3000},{3524,"skullpillar01_lvs",8000},{19306,"kmb_goflag2",3000},{19307,"kmb_goflag3",3000},{19308,"taxi01",2000},{19309,"taxi02",3000},{19310,"taxi03",3000},{19311,"taxi04",3000},{19944,"bodybag1",5000},{18646,"policelight1",3000},{1148,"rbmp_c_l",3000},{1159,"rbmp_a_j",3000},{1157,"fbmp_c_st",3000},{1141,"rbmp_a_s",3000},{1006,"rf_b_sc_r",3000},{1014,"spl_b_bar_l",3000},{1002,"spl_b_bar_m",3000}
};

UpdateTuningShop(playerid)
{
	if(PickupTuning[playerid] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PickupTuning[playerid]);
		PickupTuning[playerid] = INVALID_STREAMER_ID;
	}
	PickupTuning[playerid] = CreateDynamicPickup(Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_MODELID], 1, 2564.7029,2738.7820,1601.0859, playerid + MAX_PLAYERS, -1, playerid);
	new td_str[128];
	format(td_str, sizeof td_str, "Objeto:_%d/%d~n~Precio:_%s$", ObjetoTuning[playerid] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{
	SetCameraBehindPlayer(playerid);
	if(PickupTuning[playerid] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PickupTuning[playerid]);
		PickupTuning[playerid] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDraw(playerid);
	EnGaraje[playerid] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_OBJETOS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return 1;
}
UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID) VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = CreateDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],0.0,0.0,0.0,0.0,0.0,0.0);
		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != 5; i ++) SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
				}
				case VOBJECT_TYPE_TEXT: SetDynamicObjectMaterialText(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],0,VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],130,VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],0,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}
		AttachDynamicObjectToVehicle(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],vehicleid,VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}
EditVehicleObject(playerid, vehicleid, slot)
{
	if(ObjetoTuning2[playerid] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, ObjetoTuning2[playerid]);
		ObjetoTuning2[playerid] = INVALID_OBJECT_ID;
	}
	ObjetoSlot[playerid] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2];
	EditandoCoche[playerid][0] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0];
	EditandoCoche[playerid][1] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1];
	EditandoCoche[playerid][2] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2];
	EditandoCoche[playerid][3] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][0];
	EditandoCoche[playerid][4] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][1];
	EditandoCoche[playerid][5] = VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][2];
	ObjetoTuning2[playerid] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, ObjetoTuning2[playerid], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, ObjetoTuning2[playerid], 1, 0, "null", "null");
	Streamer_Update(playerid);
	EditPlayerObject(playerid, ObjetoTuning2[playerid]);
	return 1;
}
enum FabricasMeta
{
	Interferida,
    TiempoPickup,
	TieneGuardia[5],
	Barriles[55],
	Text3D:BarrilesText[55],
    pMapIcon,
    pLocalizacion[80],
	pID,
	Float:pEntradaX,
	Float:pEntradaY,
	Float:pEntradaZ,
	Float:pSalidaX,
	Float:pSalidaY,
	Float:pSalidaZ,
	Float:pEntradaA,
	Float:pEntradaGX,
	Float:pEntradaGY,
	Float:pEntradaGZ,
	Float:pEntradaGA,
	pTanqueUno,
	pTanqueDos,
	pTanqueTres,
	pTanqueCuatro,
	pTanqueCinco,
	pTanqueSeis,
	pTanqueSiete,
	pTanqueOcho,
	pTanqueNueve,
	Float:pSalidaGX,
	Float:pSalidaGY,
	Float:pSalidaGZ,
	Almacen1,
	Almacen2,
	Almacen3,
	Almacen4,
	Almacen5,
	Almacen6,
	Almacen7,
	Almacen8,
	Almacen9,
	Almacen10,
	pCantidadDinero,
	pCantidadBolsas,
	pRecortada,
	pSniper,
	pUzi,
	pTec9,
	pSoborno,
	pBanda,
	pVW,
	pInt,
	pChalecos,
	pEnVenta,
	Text3D:pLabel,
	Text3D:pLabel2,
	Text3D:pLabel3,
	Text3D:pLabel4,
	Text3D:pLabel5,
	Text3D:Cocinero[5],
	pEnVentaPor,
	pPickup,
	pValor,
	pEnUso,
	Text3D:LTanque1,
	Text3D:LTanque2,
	Text3D:LTanque3,
	Text3D:LTanque4,
	Text3D:LTanque5,
	Text3D:LTanque6,
	Text3D:LTanque7,
	Text3D:LTanque8,
	Text3D:LTanque9,
	Text3D:olla1,
	Text3D:olla2,
	Text3D:olla3,
	pPuerta,
	tMoney,
 	MedicoContratado,
	ActorMedico,
	humo1,
 	humo2,
 	humo3,
	Crisol1,
	Crisol2,
	Crisol3,
	tiempoh1,
	tiempoh2,
	tiempoh3,
	tiempoc1,
	tiempoc2,
	tiempoc3,
	tiempoc4,
	tiempoc5,
	Porcentaje1,
	Porcentaje2,
	Porcentaje3,
	Auto1F,
	Auto2F,
	Bolso[32],
	Chalecos[32],
 	bolsospagados,
	Meta1[2],
	Meta2[2],
	Meta3[2],
	Meta4[2],
	Meta5[2],
	Meta6[2],
	Meta7[2],
	Meta8[2],
	Meta9[2],
	Meta10[2],
	EscoObjetos[10],
	SniperObjetos[10],
	Tec9Objetos[10],
	UziObjetos[10],
	PorcentajeCocinero[5],
 	EstadoCocinero[5],
	ActorCocinero[5],
 	TieneCocinero[5],
 	Bloque[5],
	Termino[5],
	EstadoMedico,
	EstadoG[5],
	ActorGuardia[5],
	CantidadActores,
	ActoresMuertos,
	TiempoVaciarFabrica,
};
new Fabricas[MAX_FABRICAS][FabricasMeta];

enum Propiedades
{
    pMapIcon,
    pIDPropietario,
    pGanancias,
    pVW,
    pEnVenta,
    pEnVentaPor,
    pPrecio,
    pNivel,
    Float:pPosX,
    Float:pPosY,
    Float:pPosZ,
    Float:pPosXS,
    Float:pPosYS,
    Float:pPosZS,
    Float:pPosA,
    Float:pPosAS,
    pEnUso,
    pTipo,
    pID,
    Float:pRoperoX,
    Float:pRoperoY,
    Float:pRoperoZ,
    pRoperoAbierto,
    pAK47,
    pM4,
    pEscopetaNormal,
    pEscopetaDeCombate,
    pMP5,
    p9mm,
    p9mmSilenciada,
    pDesertEagle,
    pRifle,
    pGranada,
    pManopla,
    pPaloDeBillar,
    pCuchillo,
    pKatana,
    pPaloDeGolf,
    pBateDeBeisbol,
    pConsoladorRosa,
    pVibradorBlanco,
    pGranVibradorBlanco,
    pVibradorPlateado,
    pBaston,
    pPala,
    pFlores,
    pCamara,
    pMedicamentos,
    pTranquilizantes,
    pMarihuana,
    pCrack,
    pLugarRopero,
    Float:pGX,
    Float:pGY,
    Float:pGZ,
    Float:pGA,
    Text3D:pLabel,
    Text3D:pLabel2,
    Text3D:pLabel3,
    Text3D:pLabel4,
    Text3D:pLabel5,
    Text3D:pLabel6,
    pPickup,
    pPropietario[40],
    pInterior,
    pInteriorID,
    pAbierta,
    pLugarHeladera,
    pSprunk,
    pCerveza,
    pAquarius,
    pPizzas,
    pVino,
    Float:pHeladeraX,
    Float:pHeladeraY,
    Float:pHeladeraZ,
    pLocalizacion[80],
    Amater,
    pEmisora,
    PuertaIT
};
new PropInfo[MAX_PROPIEDADES][Propiedades];

enum Spikes
{
    Float:sX,Float:sY,Float:sZ,sObjectID,sDeployedBy[MAX_PLAYER_NAME],sDeployedAt[MAX_ZONE_NAME]
}
new SpikeStrips[20][Spikes];

enum VI
{
    vID,
    vpropietario,
    vprecio,
    vmodelo,
    Float:vx,
    Float:vy,
    Float:vz,
    Float:va,
    vmoneda,
    vcolor1,
    vcolor2,
    vcomprable,
    vfaccion,
    vtrabajo,
    vpatente
};
new VehiculosInfo[MAX_VEHICLES][VI];

new const ComponentPrice[][] =
{
    {1000, 400},    {1001, 550},    {1002, 200},    {1003, 250},    {1004, 100},    {1005, 150},    {1006, 80},     {1007, 500},
    {1008, 500},    {1009, 200},    {1010, 1000},   {1011, 220},    {1012, 250},    {1013, 100},    {1014, 400},    {1015, 500},
    {1016, 200},    {1017, 500},    {1018, 350},    {1019, 300},    {1020, 250},    {1021, 200},    {1022, 150},    {1023, 350},
    {1024, 50},     {1025, 1000},   {1026, 480},    {1027, 480},    {1028, 770},    {1029, 680},    {1030, 370},    {1031, 370},
    {1032, 170},    {1033, 120},    {1034, 790},    {1035, 150},    {1036, 500},    {1037, 690},    {1038, 190},    {1039, 390},
    {1040, 500},    {1041, 390},    {1042, 1000},   {1043, 500},    {1044, 500},    {1045, 510},    {1046, 710},    {1047, 670},
    {1048, 530},    {1049, 810},    {1050, 620},    {1051, 670},    {1052, 530},    {1053, 130},    {1054, 210},    {1055, 230},
    {1056, 520},    {1057, 430},    {1058, 620},    {1059, 720},    {1060, 530},    {1061, 180},    {1062, 550},    {1063, 430},
    {1064, 830},    {1065, 850},    {1066, 750},    {1067, 250},    {1068, 200},    {1069, 550},    {1070, 450},    {1071, 550},
    {1072, 450},    {1073, 1100},   {1074, 1030},   {1075, 980},    {1076, 1560},   {1077, 1620},   {1078, 1200},   {1079, 1030},
    {1080, 900},    {1081, 1230},   {1082, 820},    {1083, 1560},   {1084, 1350},   {1085, 770},    {1086, 100},    {1087, 1500},
    {1088, 150},    {1089, 650},    {1090, 450},    {1091, 100},    {1092, 750},    {1093, 350},    {1094, 450},    {1095, 350},
    {1096, 1000},   {1097, 620},    {1098, 1140},   {1099, 1000},   {1100, 940},    {1101, 780},    {1102, 830},    {1103, 3250},
    {1104, 1610},   {1105, 1540},   {1106, 780},    {1107, 780},    {1108, 780},    {1109, 1610},   {1110, 1540},   {1111, 0},
    {1112, 0},      {1113, 3340},   {1114, 3250},   {1115, 2130},   {1116, 2050},   {1117, 2040},   {1118, 780},    {1119 , 940},
    {1120, 780},    {1121 , 940},   {1122, 780},    {1123, 860},    {1124, 780},    {1125, 1120},   {1126, 3340},   {1127, 3250},
    {1128, 3340},   {1129, 1650},   {1130, 3380},   {1131, 3290},   {1132, 1590},   {1133, 830},    {1134, 800},    {1135, 1500},
    {1136, 1000},   {1137, 800},    {1138, 580},    {1139, 470},    {1140, 870},    {1141, 980},    {1142, 150},    {1143, 150},
    {1144, 100},    {1145, 100},    {1146, 490},    {1147, 600},    {1148, 890},    {1149, 1000},   {1150, 1090},   {1151, 840},
    {1152, 910},    {1153, 1200},   {1154, 1030},   {1155, 1030},   {1156, 920},    {1157, 930},    {1158, 550},    {1159, 1050},
    {1160, 1050},   {1161, 950},    {1162, 650},    {1163, 450},    {1164, 550},    {1165, 850},    {1166, 950},    {1167, 850},
    {1168, 950},    {1169, 970},    {1170, 880},    {1171, 990},    {1172, 900},    {1173, 950},    {1174, 1000},   {1175, 900},
    {1176, 1000},   {1177, 900},    {1178, 2050},   {1179, 2150},   {1180, 2130},   {1181, 2050},   {1182, 2130},   {1183, 2040},
    {1184, 2150},   {1185, 2040},   {1186, 2095},   {1187, 2175},   {1188, 2080},   {1189, 2200},   {1190, 1200},   {1191, 1040},
    {1192, 940},    {1193, 1100}
};
//==================    FORWARD'S     ==================//
forward L_Objetos(vehicle_id);
forward VehicleLoad(resultid,playerid);
forward Reparando2(playerid,vehicleid,darexp);
forward CargarMapeos();
forward CheckPlayer(playerid);
forward QuitarReporte(playerid);
forward CargarTerritorios();
forward CargarRegistros();
forward ResetAlerta(playerid);
forward OcultarMensajeAlerta(playerid);
forward ComproVehiculo(playerid);
forward ComproVehiculoTienda(playerid, modelo, moneda, precio);
forward LoadBarrelMeta(f);
forward Horno3(f);
forward Horno2(f);
forward Horno1(f);
forward JobCocinero5(f);
forward JobCocinero4(f);
forward JobCocinero3(f);
forward JobCocinero2(f);
forward JobCocinero1(f);
forward CargarFabricas();
forward DanoFabrica(playerid);
forward ActualizarLabelArmas(f);
forward CargarCajasFabrica(id);
forward BorrarStatsFabrica(f);
forward AbrirRejasxd();
forward ReJoinNPC(number);
forward TextoMarcelo(playerid);
forward CargarPlanta(id);
forward CrearPlanta(playerid,id);
forward Forzado(playerid);
forward Forzado2(playerid);
forward Forzado3(playerid);
forward Forzado4(playerid);
forward Forzado5(playerid);
forward CargarBots();
forward Forzado6(playerid);
forward Forzado7(playerid);
forward Forzado8(playerid);
forward Forzado9(playerid);
forward Forzado10(playerid);
forward Forzado11(playerid);
forward Forzado12(playerid);
forward VehiculoRegistrado(playerid,slot);
forward Auto(playerid, slot, tipo);
forward ActualizarUsuariosCortos(playerid, nombre[],type);
forward SelectJugadorABanear(playerid, JugadorBaneado[25], RazonBan[128]);
forward SelectJugadorASan(playerid, tiempo, JugadorSancionado[25], RazonSan[128]);
forward MostrarInfoVehiculo(playerid);
forward CargarCasa1();
forward CargarCasa2();
forward CargarCasa3();
forward CargarCasa4();
forward CargarCasa5();
forward CargarCasa6();
forward CargarCasa7();
forward CargarCasa9();
forward CargarCasa11();
forward CargarCasa12();
forward CargarCasa8();
forward CargarCasa10();
forward CerrarPuerta(casa);
forward DarSlap(playerid);
forward CrearPlanta2(playerid, Float:X, Float:Y, Float:Z,id);
forward CargarEstacionamientos();
forward setEstacionamientoName(id);
forward LoadParkings();
forward Quitar2Cargos(playerid);
forward Quitar1Cargo(playerid);
forward CargarPuertas();
forward LoadDoor();
forward Encerrando2(playerid);
forward CargarActores();
forward ArrestarJugador(actor,playerid,tienda);
forward RobarTiendaTerminado(playerid,actor,tienda);
forward CargadoMensajes(playerid);
forward MostrarAyudaComandos(playerid);
forward SacarAyudaComandos(playerid);
forward cargarRoboTiendas();
forward StopAudioStream(playerid);
forward AntiCJ(playerid);
forward KickPlayerState(playerid);
forward OcultarAnim(playerid);
forward SacarAnimF(playerid);
forward StopCell(playerid);
forward QuitarDinero(playerid,cantidad);
forward DarDinero(playerid,cantidad);
forward DarDineroLogin(playerid);
forward CheckNickName(playerid,result);
forward UsuarioRegistrado(playerid);
forward PayDay(value);
forward Descongelar(playerid);
forward QuitarLogro(playerid);
forward Maneja(playerid);
forward DArmas(playerid);
forward ColorJugadorDefault(playerid);
forward accionesProstitutas();
forward ProstitutaJugador(playerid);
forward UpdateTerritorio(terri_id);
forward TimerPlantas();
forward elSexoOral(playerid);
forward LlamadaAceptada(playerid);
forward LlamadaCancelada(playerid);
forward OfertaPerdida(playerid);
forward TiempoVender(playerid);
forward Autos(playerid);
forward OnPlayerDataLoaded(playerid);
forward OnPlayerAkaLoaded(playerid);
forward OnPlayerRegister(playerid,registro,skin);
forward OnPlayerSpawnLoaded(playerid);
forward cargar_logros(resultid, extraid);
forward Consumiendo(playerid);
forward RespawnearVF2(vehicleid);
forward RespawnearVF(vehicleid);
forward RespawnearV(vehicleid);
forward OcultarLuegoDe(playerid);
forward LimpiarSombrero(playerid);
forward pVomitar(playerid);
forward MostrarAfinidad(playerid);
forward OcultarAfinidad(playerid);
forward QuitandoA(playerid);
forward Revisado(playerid,id);
forward ColgarLlamada(playerid);
forward CurarON(playerid);
forward LlamadaCops(playerid);
forward LlamadaGrua(playerid);
forward LlamadaGrua2(playerid);
forward LlamadaGrua3(playerid);
forward LlamadaGrua4(playerid, idveh);
forward DarGasolina(driver, autoid, petroleo);
forward MostrarLuegoDe(playerid);
forward LlevarClub(playerid,club);
forward SacarClub(playerid);
forward DescongelarCBUG(playerid);
forward MusicaEventos();
forward Conteo(Tiempo);
forward CurandoHospital(playerid);
forward RutraTransportista(playerid);
forward MandarMensajeTransportistas(playerid);
forward RutaTransportista(playerid);
forward ApareceHospital2(playerid);
forward ComprobarDanoMotor(playerid);
forward ApagarMotor(playerid);
forward EstacionarCoche(playerid,type);
forward EncenderMotor(playerid);
forward SinGasolina(playerid);
forward Logeado2(playerid);
forward Logeado(playerid);
forward SaveAccount(playerid);
forward CerrarAviso(playerid);
forward ClearAnim(playerid);
forward BorrarDinero(id);
forward TextoCombate(playerid);
forward CargarFacciones();
forward DesCargarMapeosEx(playerid);
forward llamada2(playerid);
forward llamada(playerid);
forward MostrarMapas(playerid);
forward MostrarBoxMedico(playerid);
forward DestruirDineroColegiala(dinero);
forward CargarCasas();
forward EmpezarCarrera();
forward ConteoCarrera2();
forward TimerFC3();
forward TimerFC2();
forward TimerFC();
forward bool:Buscar(const search[], const find[]);
forward SetPlayerStats(playerid);
forward ReanimarMedico(playerid,ID);
forward RutaCosechador(playerid);
forward CosechasPoints(playerid);
forward PrimerP(playerid);
forward TiempoArresto(playerid);
forward Encerrando(playerid);
forward EnviarJail(playerid);
forward Aviso(playerid);
forward Aviso2(playerid);
forward Aviso3(playerid);
forward Aviso4(playerid);
forward LeaveDancer(id);
forward EncerrandoNombre(playerid,i);
forward TimerLogin(playerid);
forward Forzado(playerid);
forward Forzado2(playerid);
forward LlenarBalde(playerid);
forward TimeMiner(playerid);
forward finllamadax(playerid,i);
forward finllamada(playerid);
forward kicktimer(playerid);
forward PuntoB(playerid);
forward SalonTimer();
forward CargarPropiedades();
forward CancelarLlamada(playerid, tipo);
forward LanzarArpon(playerid,tipo);
forward Recolectar(playerid);
forward QuitarCargando(playerid);
forward MoverAvion();
forward Reparando(playerid,reparaid,vehicleid,darexp);
forward Legal1(playerid);
forward Legal2(playerid);
forward Legal3(playerid);
forward Legal4(playerid);
forward Legal5(playerid);
forward Ilegal1(playerid);
forward Ilegal2(playerid);
forward Ilegal3(playerid);
forward Ilegal4(playerid);
forward Ilegal5(playerid);
forward DescargandoCamion(playerid);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward VerificarPalabra(playerid, string[]);
forward CorreoInvalido(playerid);
forward VolverRobo();
forward DestroyDynamicObjectEx(&objeto);
forward CargarTodo();
forward LevantarMano(playerid,actor);
forward LevantarActor(actor);
forward MatarPolicia(actor);
forward RendirseUsuario(playerid);
forward AplicarAlarma(vehicleid);
//==================    STOCKS     ==================//
DarStatsJugador(playerid)
{
    DarDinero(playerid, 600000);                   PlayerInfo[playerid][pNivel] = 6;
    PlayerInfo[playerid][Moneda] += 500;           PlayerInfo[playerid][pCrack] += 5000;
    PlayerInfo[playerid][pMedicamentos] += 5000;   PlayerInfo[playerid][pMateriales] += 10000;
	PlayerInfo[playerid][pGPS] = 1;                PlayerInfo[playerid][pTranquilizantes] += 30;
    PlayerInfo[playerid][Totems] = 12;             PlayerInfo[playerid][pNivelBasurero] = 3;
    PlayerInfo[playerid][pExperiencia] = 2;        PlayerInfo[playerid][pNivelLadron] = 2;
    PlayerInfo[playerid][pNivelArmero] = 6;
    DarArma(playerid,46);
    Actualizar(playerid);
    RevisarLogro(playerid,1);
    GuardarCuenta(playerid);
    return 1;
}
GetFreeObjectID()
{
	new id = -1;
	for(new i; i < MAX_COP_OBJECTS; i++)
	{
	    if(!CopObjectData[i][ObjCreated])
	    {
	        id = i;
	        break;
	    }
	}
	return id;
}
GetNameAcento(ID)
{
    new name[27];
    switch(ID)
    {
        case 0: name = "Normal";
        case 1: name = "Aleman";
        case 2: name = "Britanico";
        case 3: name = "Japones";
        case 4: name = "Chino";
        case 5: name = "Koreano";
        case 6: name = "Venezolano";
        case 7: name = "Peruano";
        case 8: name = "Ruso";
        case 9: name = "Americano";
        case 10: name = "Español";
        case 11: name = "Colombiano";
        case 12: name = "Francés";
        case 13: name = "Italiano";
        case 14: name = "Gangster";
        case 15: name = "Uruguayo";
        case 16: name = "Brasilero";
        case 17: name = "Argentino";
        case 18: name = "Chileno";
        case 19: name = "Cubano";
        case 20: name = "Israeli";
        case 21: name = "Alemán";
        case 22: name = "Hippie";
        case 23: name = "Escocés";
        case 24: name = "Irlandés";
        case 25: name = "Australiano";
        case 26: name = "Árabe";
        case 27: name = "Canadiense";
        case 28: name = "Mexicano";
        case 29: name = "Dominicano";
        default: name = "Normal";
    }
    return name;
}
IsValidName(const source[])
{
    new length = strlen(source);
    if (!(3 <= length <= 20)) return 0;
    new pos = strfind(source, "_");
    if (pos == -1) return 0;
    new    us_count;
    for (new i; i != length; ++i)
    {
        switch (source[i])
        {
            case '_': ++us_count;
        }
        if (!i || i == pos + 1)
        {
            switch (source[i])
            {
                case 'A' .. 'Z': continue;
                case 'a' .. 'z': continue;
                case '0' .. '9': continue;
                default: return 0;
            }
        }
        else if (i && i != pos && i != pos + 1)
        {
            switch (source[i])
            {
                case 'A' .. 'Z': continue;
                case 'a' .. 'z': continue;
                case '0' .. '9': continue;
                default: return 0;
            }
        }
    }
    return (us_count == 1 && source[length - 1] != '_');
}
GetNewIDPedido()
{
    for(new i = 1; i < MAX_PEDIDOS; i++)
    {
        if(PEDIDO_INFO[i][pi_ID] == 0) return i;
    }
    return 1;
}
CargarPedidos()
{
    for(new i = 1; i < MAX_PEDIDOS; i++)
    {
        if(PEDIDO_INFO[i][pi_ESTADO] == 1) PEDIDO_INFO[i][pi_ID] = 0;
    }
    new Query[128];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `pedidos` WHERE ESTADO = '1'");
    mysql_query(handle_db, Query, true);
    for(new i = 0; i < cache_num_rows(); i++)
    {
        new ID_PEDIDO = GetNewIDPedido();
        PEDIDO_INFO[ID_PEDIDO][pi_ID] = ID_PEDIDO;
        cache_get_value_name_int(i,"ID",PEDIDO_INFO[ID_PEDIDO][pi_DB]);
        cache_get_value_name_int(i,"ESTADO",PEDIDO_INFO[ID_PEDIDO][pi_ESTADO]);
        cache_get_value_name(i,"NOMBRE",PEDIDO_INFO[ID_PEDIDO][pt_NAME]);
        cache_get_value_name(i,"PEDIDO",PEDIDO_INFO[ID_PEDIDO][pi_TEXT]);
        cache_get_value_name(i,"INFO",PEDIDO_INFO[ID_PEDIDO][pt_TIPO]);
        cache_get_value_name_float(i,"X",PEDIDO_INFO[ID_PEDIDO][pt_POS][0]);
        cache_get_value_name_float(i,"Y",PEDIDO_INFO[ID_PEDIDO][pt_POS][1]);
        cache_get_value_name_float(i,"Z",PEDIDO_INFO[ID_PEDIDO][pt_POS][2]);
    }
    return 1;
}
RegistrarPedido(playerid, pedido[], INFO_text[], guardarpos = 0)
{
    new string[200],Query[250+ 24], Float:POS[3];
    format(string, sizeof(string), "%s[%d]: Acaba de enviar un pedido de: %s ",PlayerInfo[playerid][Nickname], playerid, pedido);
    MensajeAdmin(-1,string,3);
    Tiempos[playerid][pTIME_PEDIDO] = gettime() + (60*2);
    if(guardarpos == 1) GetPlayerPos(playerid, POS[0],POS[1],POS[2]);
    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `pedidos`(`nombre`,`PEDIDO`, `INFO`, `X`, `Y`, `Z`) VALUES ('%e','%e','%e','%f','%f','%f')", PlayerInfo[playerid][Nickname], pedido, INFO_text, POS[0],POS[1],POS[2]);
    mysql_query(handle_db, Query, true);
    CargarPedidos();
    return 1;
}
ColocoSi_No(text[])
{
    new len = strlen(text);
    for(new i = 2; i < len; i++)
    {
        if(text[i-1] == ' ' && text[i] == 's' && text[i+1] == 'i') return 1;
        else if(text[i-1] == ' ' && text[i] == 'S' && text[i+1] == 'i') return 1;
        else if(text[i-1] == ' ' && text[i] == 's' && text[i+1] == 'I') return 1;
        else if(text[i-1] == ' ' && text[i] == 'S' && text[i+1] == 'I') return 1;
        else if(text[i-1] == ' ' && text[i] == 'n' && text[i+1] == 'o') return 1;
        else if(text[i-1] == ' ' && text[i] == 'N' && text[i+1] == 'o') return 2;
        else if(text[i-1] == ' ' && text[i] == 'n' && text[i+1] == 'O') return 2;
        else if(text[i-1] == ' ' && text[i] == 'N' && text[i+1] == 'O') return 2;
    }
    return 0;
}

AddPlayerConectats(playerid)
{
    new slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policía");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
    RegisterNewPlayerPhoneBook(playerid, slot);

    slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Asistencia Médica");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 71;
    RegisterNewPlayerPhoneBook(playerid, slot);
    
    slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Servicio de grúas");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 815;
    RegisterNewPlayerPhoneBook(playerid, slot);
    
    slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Asistencia mecánica");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 80;
    RegisterNewPlayerPhoneBook(playerid, slot);
    
    slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Servicio de taxi");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 82;
    RegisterNewPlayerPhoneBook(playerid, slot);
    
    slot = GetEmptyPlayerPhoneBookSlot(playerid);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Servicio de anuncios");
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 430;
    RegisterNewPlayerPhoneBook(playerid, slot);
    return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 4;
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = x;
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = y;
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = z;
    SetVehiclePos(vehicleid, x, y, z);
    return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
    Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 4;
    PlayerTemp[playerid][pt_POS_ANTITELEPORT][0] = x;
    PlayerTemp[playerid][pt_POS_ANTITELEPORT][1] = y;
    PlayerTemp[playerid][pt_POS_ANTITELEPORT][2] = z;
    SetPlayerPos(playerid, x, y, z);
    return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 4;
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 4;
    PutPlayerInVehicle(playerid, vehicleid, seatid);
    return 1;
}

stock BarrasFunciones(playerid, variable)
{
	switch(variable)
	{
	    case 1:
		{
			SetPlayerProgressBarValue(playerid,Progressbar[playerid][Sed], PlayerInfo[playerid][pSed]),SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Sed], 100);
			SetPlayerProgressBarValue(playerid,Progressbar[playerid][Hambre], PlayerInfo[playerid][pHambre]),SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Hambre], 100);
			if(PlayerInfo[playerid][pBarras] == 1)
			{
				ShowPlayerProgressBar(playerid, Progressbar[playerid][Sed]),ShowPlayerProgressBar(playerid, Progressbar[playerid][Hambre]);
				UpdatePlayerProgressBar(playerid,Progressbar[playerid][Sed]),UpdatePlayerProgressBar(playerid,Progressbar[playerid][Hambre]);
			}
			return 1;
		}
	    case 2:
		{
			HidePlayerProgressBar(playerid, Progressbar[playerid][Sed]);
			HidePlayerProgressBar(playerid, Progressbar[playerid][Hambre]);
			return 1;
		}
	}
	return 1;
}
funcion CargandoEx(playerid)
{
	Congelar(playerid);
	GameTextForPlayer(playerid, "~n~~r~Cargando..~n~~w~Espera por favor", 2500, 4);
	SetTimerEx("Descongelar", 2500, false, "i", playerid);
	return 1;
}
stock Barrera1(trenid)
{
    if(PasoTrenBarrera[trenid][0] == 0)
    {
        PasoTrenBarrera[trenid][0] = 1;
        MoveObject(BarreraTren[0],2280.1448, -1155.7435, 26.5826-0.0001,0.0001,0.0000, -90.0000, -94.0000);
        MoveObject(BarreraTren[1],2292.8923, -1144.0405, 26.5826-0.0001,0.0001,0.00000, -90.0000, 90.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2286.9500, -1151.3966, 29.3280) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2286.9500, -1151.3966, 29.3280,50.0,1);
        }
    }
}
stock Barrera2(trenid)
{
    if(PasoTrenBarrera[trenid][1] == 0)
    {
        PasoTrenBarrera[trenid][1] = 1;
        MoveObject(BarreraTren[2],2204.32129, -1652.34021, 15.5075-0.0001,0.0001,   0.00000, 90.00000, 75.00000);
        MoveObject(BarreraTren[3],2220.4956, -1642.2866, 15.5075-0.0001,0.0001,0.0000, 90.0000, -105.0000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2204.49951, -1651.11450, 18.10880) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2204.49951, -1651.11450, 18.10880,50.0,1);
        }
    }
}

stock Barrera3(trenid)
{
    if(PasoTrenBarrera[trenid][2] == 0)
    {
        PasoTrenBarrera[trenid][2] = 1;
        MoveObject(BarreraTren[4],2194.21289, -1725.40625, 13.3035-0.0001,0.0001,   0.00000, -90.00000, 90.00000);
        MoveObject(BarreraTren[5],2207.41235, -1739.35522, 13.3035-0.0001,0.0001,   0.00000, 90.00000, 90.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2194.43652, -1726.57410, 16.39810) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2194.43652, -1726.57410, 16.39810,50.0,1);
        }
    }
}
stock Barrera4(trenid)
{
    if(PasoTrenBarrera[trenid][3] == 0)
    {
        PasoTrenBarrera[trenid][3] = 1;
        MoveObject(BarreraTren[6], 2267.56689, -1489.89795, 22.7738-0.0001,0.0001,   0.00000, 90.00000, 75.36785);
        MoveObject(BarreraTren[7], 2282.61084, -1478.29395, 22.7738-0.0001,0.0001,   0.00000, 90.00000, 256.91840);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2275.0005,-1484.0256,22.5848) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2275.0005,-1484.0256,22.5848,50.0,1);
        }
    }
}
stock Barrera5(trenid)
{
    if(PasoTrenBarrera[trenid][4] == 0)
    {
        PasoTrenBarrera[trenid][4] = 1;
        MoveObject(BarreraTren[8],  -1938.84546, -58.41910, 25.62800-0.0001,0.0001,   0.00000, -90.69220, 92.00000);
        MoveObject(BarreraTren[9], -1960.57544, -70.76190, 25.77820-0.0001,0.0001,   0.00000, -90.00000, -92.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1949.6910,-64.7755,25.9141) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",-1949.6910,-64.7755,25.9141,50.0,1);
        }
    }
}
stock Barrera6(trenid)
{
    if(PasoTrenBarrera[trenid][5] == 0)
    {
        PasoTrenBarrera[trenid][5] = 1;
        MoveObject(BarreraTren[10], -1946.05603, -234.05450, 25.66820-0.0001,0.0001, 0.00000, -90.00000, 90.60900);
        MoveObject(BarreraTren[11], -1960.84656, -246.08670, 25.83600-0.0001,0.0001, 0.00000, 90.00000, 85.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1953.2451,-239.0087,25.9141) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",-1953.2451,-239.0087,25.9141,50.0,1);
        }
    }
}

stock Barrera7(trenid)
{
    if(PasoTrenBarrera[trenid][6] == 0)
    {
        PasoTrenBarrera[trenid][6] = 1;
        MoveObject(BarreraTren[12], -1988.13452, -587.05579, 25.92080-0.0001,0.0001, 0.00000, 90.00000, 88.00000);
        MoveObject(BarreraTren[13], -1976.24756, -573.14539, 25.94860-0.0001,0.0001, 0.00000, -90.00000, 90.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1981.9061,-579.7641,25.9141) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",-1981.9061,-579.7641,25.9141,50.0,1);
        }
    }
}

stock Barrera8(trenid)
{
    if(PasoTrenBarrera[trenid][7] == 0)
    {
        PasoTrenBarrera[trenid][7] = 1;
        MoveObject(BarreraTren[28], 733.80109, 1844.15637, 5.71150-0.0001,0.0001, 0.00000, -90.00000, 270.00000);
        MoveObject(BarreraTren[29], 746.41858, 1854.80066, 5.70080*0.0001,0.0001, 0.00000,  90.00000, 270.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,740.1066,1850.4612,5.5391) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",740.1066,1850.4612,5.5391,50.0,1);
        }
    }
}

stock Barrera9(trenid)
{
    if(PasoTrenBarrera[trenid][8] == 0)
    {
        PasoTrenBarrera[trenid][8] = 1;
        MoveObject(BarreraTren[26], 746.04712, 1922.20959, 5.75130-0.0001,0.0001, 0.00000, 90.00000, 270.00000);
        MoveObject(BarreraTren[27], 733.56360, 1908.15247, 5.62180-0.0001,0.0001, 0.00000, -90.00000, 270.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,739.1187,1915.3665,5.5391) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",739.1187,1915.3665,5.5391,50.0,1);
        }
    }
}

stock Barrera10(trenid)
{
    if(PasoTrenBarrera[trenid][9] == 0)
    {
        PasoTrenBarrera[trenid][9] = 1;
        MoveObject(BarreraTren[24], 1241.58447, 2639.52222, 11.34460-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        MoveObject(BarreraTren[25], 1252.98523, 2628.83496, 11.34460-0.0001,0.0001, 0.00000, -90.00000, 0.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1247.3439,2634.7036,11.0234) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",1247.3439,2634.7036,11.0234,50.0,1);
        }
    }
}

stock Barrera11(trenid)
{
    if(PasoTrenBarrera[trenid][10] == 0)
    {
        PasoTrenBarrera[trenid][10] = 1;
        MoveObject(BarreraTren[22], 1593.03247, 2628.83691, 11.20350-0.0001,0.0001, 0.00000, -90.00000, 0.00000);
        MoveObject(BarreraTren[23], 1581.61389, 2639.52002, 11.26740-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1588.5284,2633.3550,11.0234) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",1588.5284,2633.3550,11.0234,50.0,1);
        }
    }
}
stock Barrera12(trenid)
{
    if(PasoTrenBarrera[trenid][11] == 0)
    {
        PasoTrenBarrera[trenid][11] = 1;
        MoveObject(BarreraTren[20], 1901.88989, 2697.34424, 11.19190-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        MoveObject(BarreraTren[21], 1913.32861, 2690.97827, 11.06280-0.0001,0.0001, 0.00000, -90.00000, 0.000000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1907.9000,2694.1760,11.0234) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",1907.9000,2694.1760,11.0234,50.0,1);
        }
    }
}
stock Barrera13(trenid)
{
    if(PasoTrenBarrera[trenid][12] == 0)
    {
        PasoTrenBarrera[trenid][12] = 1;
        MoveObject(BarreraTren[18], 2093.01245, 2690.96704, 11.21150-0.0001,0.0001, 0.00000, -90.00000, 0.00000);
        MoveObject(BarreraTren[19], 2081.60083, 2697.34692, 11.21150-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2275.0005,-1484.0256,22.5848) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2275.0005,-1484.0256,22.5848,50.0,1);
        }
    }
}
stock Barrera14(trenid)
{
    if(PasoTrenBarrera[trenid][13] == 0)
    {
        PasoTrenBarrera[trenid][13] = 1;
        MoveObject(BarreraTren[17], 2380.52832, 2699.47437, 11.17500-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        MoveObject(BarreraTren[16], 2394.18726, 2684.83057, 11.14120-0.0001,0.0001, 0.00000, -90.00000, 0.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2387.2339,2692.1829,11.0156) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2387.2339,2692.1829,11.0156,50.0,1);
        }
    }
}
stock Barrera15(trenid)
{
    if(PasoTrenBarrera[trenid][14] == 0)
    {
        PasoTrenBarrera[trenid][14] = 1;
        MoveObject(BarreraTren[14], 2757.77783, 907.54089, 11.11410-0.0001,0.0001, 0.00000, 90.00000, 90.00000);
        MoveObject(BarreraTren[15], 2773.50049, 920.89032, 10.98780-0.0001,0.0001, 0.00000, -90.00000, 90.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2766.7795,913.2679,11.0860) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2766.7795,913.2679,11.0860,50.0,1);
        }
    }
}

stock Barrera16(trenid)
{
    if(PasoTrenBarrera[trenid][15] == 0)
    {
        PasoTrenBarrera[trenid][15] = 1;
        MoveObject(BarreraTren[30],1967.45911, -1961.88232, 14.07840-0.0001,0.0001, 0.00000, -90.00000, 0.00000);
        MoveObject(BarreraTren[31], 1955.82043, -1950.12793, 14.07840-0.0001,0.0001, 0.00000, 90.00000, 0.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1962.18005, -1955.87402, 12.74272) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",1962.18005, -1955.87402, 12.74272,50.0,1);
        }
    }
}
stock Barrera17(trenid)
{
    if(PasoTrenBarrera[trenid][16] == 0)
    {
        PasoTrenBarrera[trenid][16] = 1;
        MoveObject(BarreraTren[32], 2194.45605, -1901.16833, 13.87780-0.0001,0.0001, 0.00000, 90.00000, 90.00000);
        MoveObject(BarreraTren[33], 2206.67432, -1887.77466, 13.87780-0.0001,0.0001, 0.00000, 90.00000, 270.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2200.88208, -1894.00085, 12.74667) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2200.88208, -1894.00085, 12.74667,50.0,1);
        }
    }
}

stock Barrera18(trenid)
{
    if(PasoTrenBarrera[trenid][17] == 0)
    {
        PasoTrenBarrera[trenid][17] = 1;
        MoveObject(BarreraTren[34],  2292.21802, -1378.91211, 24.45740-0.0001,0.0001, 0.00000, -90.00000, 90.00000);
        MoveObject(BarreraTren[35], 2280.96069, -1390.03418, 24.4574-0.0001,0.0001, 0.00000, -90.00000, -90.00000);
        foreach(new i : Player)
        {
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2286.85571, -1383.80054, 23.11068) && PlayerInfo[i][pSonidos] == 1) PlayAudioStreamForPlayer(i,"https://"AUDIO_CAMPANAS"",2286.85571, -1383.80054, 23.11068,50.0,1);
        }
    }
}

stock Barreras(TrenX,trenid)
{
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2286.9500, -1151.3966, 29.3280)) Barrera1(trenid);
    else if(PasoTrenBarrera[trenid][0] == 1)
    {
        PasoTrenBarrera[trenid][0] = 0;
        MoveObject(BarreraTren[0],2280.1448, -1155.7435, 26.5826+0.0001,0.0001,0.0000, -28.0000, -94.0000);
        MoveObject(BarreraTren[1],2292.8923, -1144.0405, 26.5826+0.0001,0.0001,0.00000, -28.0000, 90.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2286.9500, -1151.3966, 29.3280))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2204.49951, -1651.11450, 18.10880)) Barrera2(trenid);
    else if(PasoTrenBarrera[trenid][1] == 1)
    {
        PasoTrenBarrera[trenid][1] = 0;
        MoveObject(BarreraTren[2],2204.32129, -1652.34021, 15.5075+0.0001,0.0001,   0.00000, 28.00000, 75.00000);
        MoveObject(BarreraTren[3],2220.4956, -1642.2866, 15.5075+0.0001,0.0001,0.0000, 28.0000, -105.0000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2204.49951, -1651.11450, 18.10880))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2194.43652, -1726.57410, 16.39810)) Barrera3(trenid);
    else if(PasoTrenBarrera[trenid][2] == 1)
    {
        PasoTrenBarrera[trenid][2] = 0;
        MoveObject(BarreraTren[4],2194.21289, -1725.40625, 13.3035+0.0001,0.0001,   0.00000, -28.00000, 90.00000);
        MoveObject(BarreraTren[5],2207.41235, -1739.35522, 13.3035+0.0001,0.0001,   0.00000, 28.00000, 90.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2194.43652, -1726.57410, 16.39810))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2275.0005,-1484.0256,22.5848)) Barrera4(trenid);
    else if(PasoTrenBarrera[trenid][3] == 1)
    {
        PasoTrenBarrera[trenid][3] = 0;
        MoveObject(BarreraTren[6], 2267.56689, -1489.89795, 22.7738+0.0001,0.0001,   0.00000, 28.00000, 75.36785);
        MoveObject(BarreraTren[7], 2282.61084, -1478.29395, 22.7738+0.0001,0.0001,   0.00000, 28.00000, 256.91840);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2275.0005,-1484.0256,22.5848))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,-1949.6910,-64.7755,25.9141)) Barrera5(trenid);
    else if(PasoTrenBarrera[trenid][4] == 1)
    {
        PasoTrenBarrera[trenid][4] = 0;
        MoveObject(BarreraTren[8],  -1938.84546, -58.41910, 25.62800+0.0001,0.0001,   0.00000, -28.69220, 92.00000);
        MoveObject(BarreraTren[9], -1960.57544, -70.76190, 25.77820+0.0001,0.0001,   0.00000, -28.00000, -92.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1949.6910,-64.7755,25.9141))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,-1953.2451,-239.0087,25.9141)) Barrera6(trenid);
    else if(PasoTrenBarrera[trenid][5] == 1)
    {
        PasoTrenBarrera[trenid][5] = 0;
        MoveObject(BarreraTren[10], -1946.05603, -234.05450, 25.66820+0.0001,0.0001, 0.00000, -28.00000, 90.60900);
        MoveObject(BarreraTren[11], -1960.84656, -246.08670, 25.83600+0.0001,0.0001, 0.00000, 28.00000, 85.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1953.2451,-239.0087,25.9141))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,-1981.9061,-579.7641,25.9141)) Barrera7(trenid);
    else if(PasoTrenBarrera[trenid][6] == 1)
    {
        PasoTrenBarrera[trenid][6] = 0;
        MoveObject(BarreraTren[12], -1988.13452, -587.05579, 25.92080+0.0001,0.0001, 0.00000, 28.00000, 88.00000);
        MoveObject(BarreraTren[13], -1976.24756, -573.14539, 25.94860+0.0001,0.0001, 0.00000, -28.00000, 90.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,-1981.9061,-579.7641,25.9141))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,740.1066,1850.4612,5.5391)) Barrera8(trenid);
    else if(PasoTrenBarrera[trenid][7] == 1)
    {
        PasoTrenBarrera[trenid][7] = 0;
        MoveObject(BarreraTren[28], 733.80109, 1844.15637, 5.71150+0.0001,0.0001, 0.00000, -28.00000, 270.00000);
        MoveObject(BarreraTren[29], 746.41858, 1854.80066, 5.70080+0.0001,0.0001, 0.00000,  28.00000, 270.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,740.1066,1850.4612,5.5391))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,739.1187,1915.3665,5.5391)) Barrera9(trenid);
    else if(PasoTrenBarrera[trenid][8] == 1)
    {
        PasoTrenBarrera[trenid][8] = 0;
        MoveObject(BarreraTren[26], 746.04712, 1922.20959, 5.75130+0.0001,0.0001, 0.00000, 28.00000, 270.00000);
        MoveObject(BarreraTren[27], 733.56360, 1908.15247, 5.62180+0.0001,0.0001, 0.00000, -28.00000, 270.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,739.1187,1915.3665,5.5391))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,1247.3439,2634.7036,11.0234)) Barrera10(trenid);
    else if(PasoTrenBarrera[trenid][9] == 1)
    {
        PasoTrenBarrera[trenid][9] = 0;
        MoveObject(BarreraTren[24], 1241.58447, 2639.52222, 11.34460+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        MoveObject(BarreraTren[25], 1252.98523, 2628.83496, 11.34460+0.0001,0.0001, 0.00000, -28.00000, 0.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1247.3439,2634.7036,11.0234))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,1588.5284,2633.3550,11.0234)) Barrera11(trenid);
    else if(PasoTrenBarrera[trenid][10] == 1)
    {
        PasoTrenBarrera[trenid][10] = 0;
        MoveObject(BarreraTren[22], 1593.03247, 2628.83691, 11.20350+0.0001,0.0001, 0.00000, -28.00000, 0.00000);
        MoveObject(BarreraTren[23], 1581.61389, 2639.52002, 11.26740+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1588.5284,2633.3550,11.0234))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,1907.9000,2694.1760,11.0234)) Barrera12(trenid);
    else if(PasoTrenBarrera[trenid][11] == 1)
    {
        PasoTrenBarrera[trenid][11] = 0;
        MoveObject(BarreraTren[20], 1901.88989, 2697.34424, 11.19190+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        MoveObject(BarreraTren[21], 1913.32861, 2690.97827, 11.06280+0.0001,0.0001, 0.00000, -28.00000, 0.000000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1907.9000,2694.1760,11.0234))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2275.0005,-1484.0256,22.5848)) Barrera13(trenid);
    else if(PasoTrenBarrera[trenid][12] == 1)
    {
        PasoTrenBarrera[trenid][12] = 0;
        MoveObject(BarreraTren[18], 2093.01245, 2690.96704, 11.21150+0.0001,0.0001, 0.00000, -28.00000, 0.00000);
        MoveObject(BarreraTren[19], 2081.60083, 2697.34692, 11.21150+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2275.0005,-1484.0256,22.5848))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2387.2339,2692.1829,11.0156)) Barrera14(trenid);
    else if(PasoTrenBarrera[trenid][13] == 1)
    {
        PasoTrenBarrera[trenid][13] = 0;
        MoveObject(BarreraTren[17], 2380.52832, 2699.47437, 11.17500+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        MoveObject(BarreraTren[16], 2394.18726, 2684.83057, 11.14120+0.0001,0.0001, 0.00000, -28.00000, 0.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2387.2339,2692.1829,11.0156))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,2766.7795,913.2679,11.0860)) Barrera15(trenid);
    else if(PasoTrenBarrera[trenid][14] == 1)
    {
        PasoTrenBarrera[trenid][14] = 0;
        MoveObject(BarreraTren[14], 2757.77783, 907.54089, 11.11410+0.0001,0.0001, 0.00000, 28.00000, 90.00000);
        MoveObject(BarreraTren[15], 2773.50049, 920.89032, 10.98780+0.0001,0.0001, 0.00000, -28.00000, 90.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2766.7795,913.2679,11.0860))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren,1962.18005, -1955.87402, 12.74272)) Barrera16(trenid);
    else if(PasoTrenBarrera[trenid][15] == 1)
    {
        PasoTrenBarrera[trenid][15] = 0;
        MoveObject(BarreraTren[30], 1967.45911, -1961.88232, 14.07840+0.0001,0.0001, 0.00000, -28.00000, 0.00000);
        MoveObject(BarreraTren[31], 1955.82043, -1950.12793, 14.07840+0.0001,0.0001, 0.00000, 28.00000, 0.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,1962.18005, -1955.87402, 12.74272))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren, 2200.88208, -1894.00085, 12.74667)) Barrera17(trenid);
    else if(PasoTrenBarrera[trenid][16] == 1)
    {
        PasoTrenBarrera[trenid][16] = 0;
        MoveObject(BarreraTren[32], 2194.45605, -1901.16833, 13.87780+0.0001,0.0001, 0.00000, 28.00000, 90.00000);
        MoveObject(BarreraTren[33], 2206.67432, -1887.77466, 13.87780+0.0001,0.0001, 0.00000, 28.00000, 270.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2200.88208, -1894.00085, 12.74667))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(TrenX,RangoBarrerasTren, 2286.85571, -1383.80054, 23.11068)) Barrera18(trenid);
    else if(PasoTrenBarrera[trenid][17] == 1)
    {
        PasoTrenBarrera[trenid][17] = 0;
        MoveObject(BarreraTren[34], 2292.21802, -1378.91211, 24.45740+0.0001,0.0001, 0.00000, -28.00000, 90.00000);
        MoveObject(BarreraTren[35], 2280.96069, -1390.03418, 24.4574+0.0001,0.0001, 0.00000, -28.00000, -90.00000);
        foreach(new i : Player){
            if(IsPlayerInRangeOfPoint(i,RangoSonidoPlayer,2286.85571, -1383.80054, 23.11068))  {
                StopAudioStreamForPlayer(i);
            }
        }
        return 1;
    }
    return 1;
}
stock DarPrendas(playerid)
{
    for(new i = 0; i != MAX_PTOYS; i ++) RemovePlayerAttachedObject(playerid, i);
    for(new i = 0; i != MAX_PTOYS; i ++)
    {
        if(i >= 3 && !PlayerInfo[playerid][pVip]) break;
        if(PlayerToys[playerid][i][pToyValid])
        {
            if(PlayerToys[playerid][i][pUsando]) SetPlayerAttachedObject(playerid,i,PlayerToys[playerid][i][pModelID],PlayerToys[playerid][i][pBone],PlayerToys[playerid][i][pOffsetX],PlayerToys[playerid][i][pOffsetY],PlayerToys[playerid][i][pOffsetZ],PlayerToys[playerid][i][pRotX],PlayerToys[playerid][i][pRotY],PlayerToys[playerid][i][pRotZ],PlayerToys[playerid][i][pScaleX],PlayerToys[playerid][i][pScaleY],PlayerToys[playerid][i][pScaleZ],PlayerToys[playerid][i][pColor1],PlayerToys[playerid][i][pColor2]);
        }
    }
    return 1;
}
GetNameObjeto(ID)
{
    new name[32] = "Vacío";
    for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
    {
        if(OBJETOS_INFO[i][obj_ID] == ID)
        {
            format(name, sizeof name, "%s", OBJETOS_INFO[i][obj_NAME]);
            break;
        }
    }
    return name;
}
new Toys_Bones[][24] =
{
    {"Espalda"},
    {"Cabeza"},
    {"Brazo izquierdo"},
    {"Brazo derecho"},
    {"Mano izquierda"},
    {"Mano derecha"},
    {"Muslo izquierdo"},
    {"Muslo derecho"},
    {"Pie izquierdo"},
    {"Pie derecho"},
    {"Pantorrilla derecha"},
    {"Pantorrilla izquierda"},
    {"Antebrazo izquierdo"},
    {"Antebrazo derecho"},
    {"Hombro izquierdo"},
    {"Hombro derecho"},
    {"Cuello"},
    {"Boca"}
};

stock GuardarPrendas(playerid)
{
    new Query[1000];
    for(new i = 0; i != MAX_PTOYS; i++)
    {
        if(!PlayerToys[playerid][i][pToyValid]) continue;
        mysql_format(handle_db, Query, sizeof(Query), "UPDATE `prendas` SET `Nombre` = '%s',`ObjUsed` = '%d',`Objeto` = '%d',`ATH` = '%d',`fOffsetX` = '%f',`fOffsetY` = '%f',`fOffsetZ` = '%f',`fRotX` = '%f',`fRotY` = '%f',`fRotZ` = '%f',`fScaleX` = '%f',`fScaleY` = '%f',`fScaleZ` = '%f',`Color1` = '%d',`Color2` = '%d' WHERE `ID` = '%d'", PlayerToys[playerid][i][pToyName], PlayerToys[playerid][i][pUsando],PlayerToys[playerid][i][pModelID], PlayerToys[playerid][i][pBone],PlayerToys[playerid][i][pOffsetX], PlayerToys[playerid][i][pOffsetY], PlayerToys[playerid][i][pOffsetZ],PlayerToys[playerid][i][pRotX], PlayerToys[playerid][i][pRotY], PlayerToys[playerid][i][pRotZ],PlayerToys[playerid][i][pScaleX], PlayerToys[playerid][i][pScaleY], PlayerToys[playerid][i][pScaleZ],PlayerToys[playerid][i][pColor1], PlayerToys[playerid][i][pColor2],PlayerToys[playerid][i][pToyID]);
        mysql_tquery(handle_db, Query);
    }
    return 1;
}
LoadPrendas(playerid)
{
    new Query[560],index;
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `prendas` WHERE `Propietario` = '%s' AND `Web` = '0' LIMIT %d", PlayerInfo[playerid][Nickname], MAX_PTOYS);
    mysql_query(handle_db, Query,true);

    for(new i; i < cache_num_rows(); i++)
    {
        PlayerToys[playerid][index][pToyValid] = true;
        cache_get_value_name_int(i, "ID", PlayerToys[playerid][index][pToyID]);
        cache_get_value_name(i, "Nombre", PlayerToys[playerid][index][pToyName], 24);
        cache_get_value_name_int(i, "ObjUsed", PlayerToys[playerid][index][pUsando]);
        cache_get_value_name_int(i, "Objeto", PlayerToys[playerid][index][pModelID]);
        cache_get_value_name_int(i, "ATH", PlayerToys[playerid][index][pBone]);
        cache_get_value_name_float(i, "fOffsetX", PlayerToys[playerid][index][pOffsetX]);
        cache_get_value_name_float(i, "fOffsetY", PlayerToys[playerid][index][pOffsetY]);
        cache_get_value_name_float(i, "fOffsetZ", PlayerToys[playerid][index][pOffsetZ]);
        cache_get_value_name_float(i, "fRotX", PlayerToys[playerid][index][pRotX]);
        cache_get_value_name_float(i, "fRotY", PlayerToys[playerid][index][pRotY]);
        cache_get_value_name_float(i, "fRotZ", PlayerToys[playerid][index][pRotZ]);
        cache_get_value_name_float(i, "fScaleX", PlayerToys[playerid][index][pScaleX]);
        cache_get_value_name_float(i, "fScaleY", PlayerToys[playerid][index][pScaleY]);
        cache_get_value_name_float(i, "fScaleZ", PlayerToys[playerid][index][pScaleZ]);
        cache_get_value_name_int(i, "Color1", PlayerToys[playerid][index][pColor1]);
        cache_get_value_name_int(i, "Color2", PlayerToys[playerid][index][pColor2]);
        index ++;
    }
    DarPrendas(playerid);
    return 1;
}

ContarPrendas(playerid)
{
    new toys;
    for(new i = 0; i != MAX_PTOYS; i ++)
    {
        if(PlayerToys[playerid][i][pToyValid]) toys ++;
    }
    return toys;
}

LoadPlayerPhoneBook(playerid)
{
    if(PlayerInfo[playerid][pNumero] == 0) return 1;
    new query[520];
    mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `player_book` WHERE `PHONE_ID` = '%d' LIMIT %d;", PlayerInfo[playerid][pNumero], MAX_PHONE_CONTACTS);
    new Cache:result = mysql_query(handle_db, query, true);
    new count;
    for(new i; i < cache_num_rows(); i++)
    {
        if(count >= MAX_PHONE_CONTACTS) break;
        PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_VALID] = true;
        cache_get_value_name_int(i, "ID", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_ID]);
        cache_get_value_name(i, "NAME", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_NAME]);
        cache_get_value_name_int(i, "PHONE_NUMBER", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_PHONE_NUMBER]);
        count ++;
    }
    cache_delete(result);
    return 1;
}

convertPhoneNumber(playerid, number, ID = INVALID_PLAYER_ID)
{
    new f_string[24+50], bool:exists;
    for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
    {
        if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
        if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
        {
            exists = true;
            format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
            break;
        }
    }
    if(!exists)
    {
        if(ID != INVALID_PLAYER_ID) format(f_string, sizeof f_string, "%s[%d]",PlayerInfo[ID][Nickname], number);
        else format(f_string, sizeof f_string, "%d", number);
    }
    return f_string;
}

GetPlayerPhoneBookCount(playerid)
{
    new count;
    for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
    {
        if(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) count ++;
    }
    return count;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
    for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
    {
        if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
    }
    return -1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
    new query[520];
    mysql_format(handle_db, query, sizeof(query), "INSERT INTO `player_book`(`NAME`, `PHONE_NUMBER`, `PHONE_ID`) VALUES ('%s', '%d', '%d')",PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER], PlayerInfo[playerid][pNumero]);
    new Cache:result = mysql_query(handle_db, query, true);
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = cache_insert_id();
    cache_delete(result);
    return 1;
}
CerrarEmisora(cabinaid)
{
    new emisora, trans, stringa[264];
    if(cabinaid == 1) emisora = 1, trans = 1;
    if(cabinaid == 2) emisora = 2, trans = 1;
    if(cabinaid == 3) emisora = 3, trans = 1;
    if(cabinaid == 4) emisora = 4, trans = 1;
    if(emisora > 0)
    {
        CabinasOcupadasEmisoras[emisora][0] = 0;
        CabinasOcupadasEmisoras[emisora][1] = -1;
        CabinasOcupadasEmisoras[emisora][2] = 0;
        format(stringa, sizeof(stringa), "{FFFFFF}Radio disponible {C0C0C0}[N%d]", emisora);
        UpdateDynamic3DTextLabelText(CabinasTextos[emisora], 0xFFFFFFFF, stringa);
        foreach(new id : Player)
        {
            if(Emisoras[id][CabinaOcupada] == emisora && Emisoras[id][TransEmisora] == trans)
            {
                Emisoras[id][TransEmisora] = 0;
                Emisoras[id][CabinaOcupada] = 0;
            }
            if(TieneMicrofono[id] == emisora)
            {
                RemovePlayerAttachedObject(id, 4);
                TieneMicrofono[id] = 0;
            }
            if(IsPlayerInDynamicArea(id, AreaCabinas[emisora]) || IsPlayerInAnyVehicle(id) && GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] == emisora)
            {
                SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
                GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] = 0;
                PararEmisora(id);
            }
        }
    }
    return 1;
}
PararEmisora(playerid)
{
    PlayerTemp[playerid][p_ESCUCHANDO_EMISORA] = 0;
    return StopAudioStreamForPlayer(playerid);
}
ReproducirEmisora(playerid, emisoraid, url[])
{
    if(PlayerInfo[playerid][pSonidos] == 1) PlayerTemp[playerid][p_ESCUCHANDO_EMISORA] = emisoraid;
    else PlayerTemp[playerid][p_ESCUCHANDO_EMISORA] = 0;
    return PlayAudioStreamForPlayer(playerid, url);
}
PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
    if(PlayerInfo[playerid][pSonidos] == 1) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
    else StopAudioStreamForPlayer(playerid);
    return 1;
}
PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
    if(PlayerInfo[playerid][pSonidos] == 1)  PlayerPlaySound(playerid, sound, X, Y, Z);
    return 1;
}
GetVehicleComponentPrice(componentid)
{
    for(new i = 0; i < sizeof(ComponentPrice); i++)
    {
        if(ComponentPrice[i][0] == componentid) return ComponentPrice[i][1];
    }
    return 0;
}
PuedeExpulsar(playerid)
{
    new banda = PlayerInfo[playerid][pFaccion];
    if(BandasInfo[banda][RANK_EXP][6] == 0 && PlayerInfo[playerid][pRango] == 7) return 1;
    else if(BandasInfo[banda][RANK_EXP][5] == 0 && PlayerInfo[playerid][pRango] == 6) return 1;
    else if(BandasInfo[banda][RANK_EXP][4] == 0 && PlayerInfo[playerid][pRango] == 5) return 1;
    else if(BandasInfo[banda][RANK_EXP][3] == 0 && PlayerInfo[playerid][pRango] == 4) return 1;
    else if(BandasInfo[banda][RANK_EXP][3] == 0 && PlayerInfo[playerid][pRango] == 3) return 1;
    else if(BandasInfo[banda][RANK_EXP][1] == 0 && PlayerInfo[playerid][pRango] == 2) return 1;
    else if(BandasInfo[banda][RANK_EXP][0] == 0 && PlayerInfo[playerid][pRango] == 1) return 1;
    return 0;
}
PuedeAscDes(playerid)
{
    new banda = PlayerInfo[playerid][pFaccion];
    if(BandasInfo[banda][RANK_EDIT][6] == 0 && PlayerInfo[playerid][pRango] == 7) return 1;
    else if(BandasInfo[banda][RANK_EDIT][5] == 0 && PlayerInfo[playerid][pRango] == 6) return 1;
    else if(BandasInfo[banda][RANK_EDIT][4] == 0 && PlayerInfo[playerid][pRango] == 5) return 1;
    else if(BandasInfo[banda][RANK_EDIT][3] == 0 && PlayerInfo[playerid][pRango] == 4) return 1;
    else if(BandasInfo[banda][RANK_EDIT][2] == 0 && PlayerInfo[playerid][pRango] == 3) return 1;
    else if(BandasInfo[banda][RANK_EDIT][1] == 0 && PlayerInfo[playerid][pRango] == 2) return 1;
    else if(BandasInfo[banda][RANK_EDIT][0] == 0 && PlayerInfo[playerid][pRango] == 1) return 1;
    return 0;
}
PuedeInvitar(playerid)
{
    new banda = PlayerInfo[playerid][pFaccion];
    if(BandasInfo[banda][RANK_INV][6] == 0 && PlayerInfo[playerid][pRango] == 7) return 1;
    else if(BandasInfo[banda][RANK_INV][5] == 0 && PlayerInfo[playerid][pRango] == 6) return 1;
    else if(BandasInfo[banda][RANK_INV][4] == 0 && PlayerInfo[playerid][pRango] == 5) return 1;
    else if(BandasInfo[banda][RANK_INV][3] == 0 && PlayerInfo[playerid][pRango] == 4) return 1;
    else if(BandasInfo[banda][RANK_INV][2] == 0 && PlayerInfo[playerid][pRango] == 3) return 1;
    else if(BandasInfo[banda][RANK_INV][1] == 0 && PlayerInfo[playerid][pRango] == 2) return 1;
    else if(BandasInfo[banda][RANK_INV][0] == 0 && PlayerInfo[playerid][pRango] == 1) return 1;
    return 0;
}
RangoBanda(famid, rangoid)
{
    new string[24];
    if(rangoid == 1) format(string, sizeof(string), "%s", BandasInfo[famid][bRango1]);
    else if(rangoid == 2) format(string, sizeof(string), "%s", BandasInfo[famid][bRango2]);
    else if(rangoid == 3) format(string, sizeof(string), "%s", BandasInfo[famid][bRango3]);
    else if(rangoid == 4) format(string, sizeof(string), "%s", BandasInfo[famid][bRango4]);
    else if(rangoid == 5) format(string, sizeof(string), "%s", BandasInfo[famid][bRango5]);
    else if(rangoid == 6) format(string, sizeof(string), "%s", BandasInfo[famid][bRango6]);
    else if(rangoid == 7) format(string, sizeof(string), "%s", BandasInfo[famid][bRango7]);
    else if(rangoid == 8) format(string, sizeof(string), "%s", BandasInfo[famid][bRango8]);
    return string;
}
RangoYaCreado(famid, rango[])
{
    if(!strcmp(BandasInfo[famid][bRango1], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango2], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango3], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango4], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango5], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango6], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango7], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango8], rango, true)) return 0;
    return 1;
}
DarPropietarioBanda(playerid, nombrebanda[], bandaid)
{
	if(!strcmp(BandasInfo[bandaid][BNombre], nombrebanda, true))
	{
		PlayerInfo[playerid][pFaccion] = bandaid;
		PlayerInfo[playerid][pRango] = 8;
	}
	return 1;
}
GetInvitacionesPlayerid(playerid)
{
    new Query[150];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s'",PlayerInfo[playerid][Nickname]);
    mysql_query(handle_db, Query, true);
    return cache_num_rows();
}
PlantaLibre()
{
    for(new p = 0; p < MAX_MARIHUANA; p++)
    {
        if(Marihuana[p][Created] == 0 && Marihuana[p][Status] == 0 && p != 0) return p;
    }
    return -1;
}
DarObjetoBaul(playerid,baul)
{
	switch(baul)
	{
		case 1000: { SetPlayerAttachedObject(playerid,4,2060,6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999); Objeto[playerid] = 1000; }
		case 1001: { SetPlayerAttachedObject(playerid,4,3800,6, 0.262000,0.070999,0.021000,106.599998,-1.999999,171.599975,0.372999,0.239999,0.166000); Objeto[playerid] = 1001;  }
		case 1002: { SetPlayerAttachedObject(playerid,4,2900,6, 0.256000,0.074999,0.019000,94.400001,0.000000,1.300018,0.376999,0.207000,0.164999); Objeto[playerid] = 1002; }
		case 1429: { SetPlayerAttachedObject(playerid,4,1429,5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149 ); Objeto[playerid] = 1429; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 1518: { SetPlayerAttachedObject(playerid,4,1518,5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104 ); Objeto[playerid] = 1518; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 2912: { SetPlayerAttachedObject(playerid,4,2912,5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000 ); Objeto[playerid] = 2912; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 2190: { SetPlayerAttachedObject(playerid,4,2190,5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000 ); Objeto[playerid] = 2190; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 1788: { SetPlayerAttachedObject(playerid,4,1788,5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000 ); Objeto[playerid] = 1788; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 1790: { SetPlayerAttachedObject(playerid,4,1790,5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000 ); Objeto[playerid] = 1790; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 2028: { SetPlayerAttachedObject(playerid,4,2028,5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 ); Objeto[playerid] = 2028; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 2226: { SetPlayerAttachedObject(playerid,4,2226,5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 ); Objeto[playerid] = 2226; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 1650: { SetPlayerAttachedObject(playerid,4,1650,5,0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000); Bidon[playerid] = 1; }
		case 2404: { SetPlayerAttachedObject(playerid,4,2404,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000); Objeto[playerid] = 2404; }
		case 1210: { SetPlayerAttachedObject(playerid,4,1210,6, 0.289999, 0.079999, -0.000000, 0.000000, -100.000000, 1.000000); Objeto[playerid] = 1210; }
		case 2405: { SetPlayerAttachedObject(playerid,4,2405,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000); Objeto[playerid] = 2405; }
		case 9003: { SetPlayerAttachedObject(playerid,4,19468,5, 0.126999,-0.089000,0.127998,101.199981,-164.499847,82.999900,1.032001,0.972000,1.002997); BaldeAgua[playerid] = 1; Objeto[playerid] = 9003; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 10000: { SetPlayerAttachedObject(playerid,4,2969,6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998); Objeto[playerid] = 10000; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 10001: { SetPlayerAttachedObject(playerid,4,2969,6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998); Objeto[playerid] = 10001; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 10002: { SetPlayerAttachedObject(playerid,4,2969,6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998); Objeto[playerid] = 10002; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 10003: { SetPlayerAttachedObject(playerid,4,2969,6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998); Objeto[playerid] = 10003; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 10004: { SetPlayerAttachedObject(playerid,4,19571,6, 0.263000,0.039999,-0.141999,116.299987,-76.799858,136.799835,0.800998,1.016000,0.866998); Objeto[playerid] = 10004; SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
		case 19317: { SetPlayerAttachedObject(playerid,4,19317,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000); Objeto[playerid] = 19317; }
		case 19318: { SetPlayerAttachedObject(playerid,4,19318,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000); Objeto[playerid] = 19318; }
	}
}
EnRobarCasa(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,-2279.5313,-15.7742,38.2993)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,940.9877,1975.9991,11.6227)) return 2;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2395.1436,-17.9285,36.0232)) return 3;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,2369.1536,-1129.9429,30.0510)) return 4;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2730.4773,-58.2881,7.0453)) return 5;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2731.7236,-163.1700,7.2174)) return 6;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,1757.8156,-2093.0769,13.9916)) return 7;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,2481.8132,-1988.2745,13.6347)) return 8;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,1843.2115,767.0028,11.5541)) return 9;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-1449.6107,2644.2051,56.5616)) return 10;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,1355.4598,2612.6050,11.5559)) return 11;
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,1676.9354,2612.3923,11.5559)) return 12;
    return 0;
}
stock MostrarLogro(playerid, titulo[], textoarriba[], puntos[])
{
    PlayerTextDrawSetString(playerid,LogroNumero[playerid],puntos);
    PlayerTextDrawSetString(playerid,LogroTitulo[playerid],titulo);
    PlayerTextDrawSetString(playerid,LogroTexto[playerid],textoarriba);
    PlayerTextDrawShow(playerid,LogroTexto[playerid]);
    PlayerTextDrawShow(playerid,LogroTitulo[playerid]);
    PlayerTextDrawShow(playerid,LogroLinea[playerid] );
    PlayerTextDrawShow(playerid,LogroRueda[playerid] );
    PlayerTextDrawShow(playerid,LogroNumero[playerid]);
    return 1;
}
stock MandarMensajeAlerta(playerid, string[])
{
    PlayerTextDrawSetString(playerid, MensajeBox[playerid],string);
    PlayerTextDrawShow(playerid,MensajeBox[playerid]);
    return 1;
}
stock GuardarHerramienta(playerid)
{
    switch(PlayerInfo[playerid][pNivelLadron])
    {
        case 1: SendClientMessage(playerid,-1,"Tu martillo fue guardado en el inventario.");
        case 2: SendClientMessage(playerid,-1,"Tu barreta fue guardado en el inventario.");
        default: SendClientMessage(playerid,-1,"Tu destornillador fue guardado en el inventario.");
    }
    Descongelar(playerid);
    TieneHerramientaEnMano[playerid] = 0;
    RemovePlayerAttachedObject(playerid, 4);
    Forzando[playerid] = 0;
    return 1;
}
stock ExperienciaMaximaLadron(playerid)
{
    if(PlayerInfo[playerid][pExpLadron] < 49) { SendClientMessage(playerid,0x2d8cecFF,"Habilidad de ladrón de casas aumentada +1 punto."); PlayerInfo[playerid][pExpLadron]++; }
    else if(PlayerInfo[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,0x00CC00FF,"Llegaste al nivel máximo como ladrón de casas.");
    return 1;
}
stock AudioAlarma(Float:x,Float:y,Float:z)
{
    foreach(new i : Player)
    {
        if(IsPlayerInRangeOfPoint(i,15.0,x,y,z)) PlayAudioStreamForPlayerEx(i,"https://"AUDIO_ALARMA"",x,y,z,50.0,1);
    }
    return 1;
}
stock AudioLadron(playerid,i, Float:x,Float:y,Float:z)
{
    if(IsPlayerInRangeOfPoint(i,20.0,x,y,z))
    {
        if(PlayerInfo[playerid][pNivelLadron] == 1) PlayAudioStreamForPlayerEx(i,"https://"AUDIO_GOLPES"",x,y,z,20.0,1);
        if(PlayerInfo[playerid][pNivelLadron] == 2) PlayAudioStreamForPlayerEx(i,"https://"AUDIO_BARRETA"",x,y,z,20.0,1);
        if(PlayerInfo[playerid][pNivelLadron] > 2) PlayAudioStreamForPlayerEx(i,"https://"AUDIO_DESTORNILLADOR"",x,y,z,20.0,1);
    }
    return 1;
}
stock DarHabilidadLadron1(playerid)
{
    new exp = random(4);
    switch(exp)
    {
        case 0 .. 2: { SendClientMessage(playerid,-1,"Esta vez no ganaste ningún punto de habilidad."); }
        case 3:
        {
            if(PlayerInfo[playerid][pNivelLadron] >= 3 && PlayerInfo[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,-1,"Has llegado al máximo nivel de este trabajo.");
            if(PlayerInfo[playerid][pExpLadron] < 49) { SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); PlayerInfo[playerid][pExpLadron]++; }
            else if(PlayerInfo[playerid][pExpLadron] >= 49)
            {
                SendClientMessage(playerid,-1,"Felicidades, has aumentado tu nivel en este trabajo.");
                PlayerInfo[playerid][pExpLadron] = 0;
                PlayerInfo[playerid][pNivelLadron]++;
            }
        }
    }
    return true;
}
stock DarHabilidadLadron2(playerid)
{
    new exp = random(3);
    switch(exp)
    {
        case 0 .. 1: { SendClientMessage(playerid,-1,"Esta vez no ganaste ningún punto de habilidad."); }
        case 2:
        {
            if(PlayerInfo[playerid][pNivelLadron] >= 3 && PlayerInfo[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,-1,"Has llegado al máximo nivel de este trabajo.");
            if(PlayerInfo[playerid][pExpLadron] < 49) { SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); PlayerInfo[playerid][pExpLadron]++; }
            else if(PlayerInfo[playerid][pExpLadron] >= 49)
            {
                SendClientMessage(playerid,-1,"Felicidades, has aumentado tu nivel en este trabajo.");
                PlayerInfo[playerid][pExpLadron] = 0;
                PlayerInfo[playerid][pNivelLadron]++;
            }
        }
    }
    return true;
}
stock AnimacionRobar(playerid,tiempo)
{
	SetCameraBehindPlayer(playerid);
	Forzando[playerid] = 1;
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1: LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, tiempo*1000+500),SetPlayerAttachedObject(playerid,2,18635,6,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); //Martillo 1
		case 2: ApplyAnimation(playerid, "BASEBALL", "BAT_M", 4.0, 1, 1, 1, 1, tiempo*1000+500),SetPlayerAttachedObject(playerid,2,18634,6,0.074999,0.014999,-0.002000,90.999969,-104.199966,7.999999,1.000000,1.000000,1.000000); //Barreta 2
		default: LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, tiempo*1000+500),SetPlayerAttachedObject(playerid,2,18644,6,0.073999,0.022000,0.000000,-167.300018,0.000000,0.000000,1.000000,1.000000,1.000000); //Destornillador 3
	}
	TieneHerramientaEnMano[playerid] = 1;
}
public Reparando2(playerid,vehicleid,darexp)
{
	if(darexp == 1)
	{
		if(PlayerInfo[playerid][pExpMecanico] < 49)
		{
			if(PlayerInfo[playerid][pVip] > 0)
			{
				new pago = random(3);
				switch(pago)
				{
					case 0,1:
					{
						PlayerInfo[playerid][pExpMecanico]++;
						SendClientMessage(playerid,0x2d8cecFF,"Habilidad de mecánico aumentada +1 punto.");
					}
					case 2:
					{
						PlayerInfo[playerid][pExpMecanico]+= 2;
						SendClientMessage(playerid,0x2d8cecFF,"Habilidad de mecánico aumentada +2 puntos.");
					}
				}
			}
			else { PlayerInfo[playerid][pExpMecanico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de mecánico aumentada +1 punto."); }
		}
		else if(PlayerInfo[playerid][pExpMecanico] >= 49)
		{
			PlayerInfo[playerid][pExpMecanico] = 0;
			PlayerInfo[playerid][pNivelMecanico]++;
			SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones! {FFFFFF}Aumentaste un nivel como mecánico.");
		}
	}
	vehaveriado[vehicleid] = 0;
	SetVehicleHealth(vehicleid, 1000.0);
	RepairVehicle(vehicleid);
	LoopingAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
}

public ResetAlerta(playerid)
{
    return YaMostroAlertaSed[playerid] = 0;
}

stock DarTrabajo(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1178.1359,-1361.3021,14.2302)) callcmd::trabajo(playerid,"medico");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2122.9236,-2275.1238,20.6719)) callcmd::trabajo(playerid,"armero");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -1715.0378,-63.1466,3.6340)) callcmd::trabajo(playerid,"camionero");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2226.2988,-1718.7993,13.5236)) callcmd::trabajo(playerid,"guardaespaldas");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2583.8274,1644.3837,1087.5602)) callcmd::trabajo(playerid,"transportista");
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-177.6093,-1549.4420,6.3284)) callcmd::trabajo(playerid,"basurero");
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2024.7489,-113.9102,1038.8187)) callcmd::trabajo(playerid,"taxi");
    if(IsPlayerInRangeOfPoint(playerid, 2.0,114.7220,-151.4292,1.5781)) callcmd::trabajo(playerid,"mecanico");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2789.3672,-2574.6675,3.1683)) callcmd::trabajo(playerid,"pescador");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -382.5980,2199.3918,25.4105)) callcmd::trabajo(playerid,"minero");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 958.2482,-54.3517,1001.1172)) callcmd::trabajo(playerid,"prostitucion");
    return 1;
}
AsignarTrabajo(playerid,trabajo,id)
{
    if(id == 0) { PlayerInfo[playerid][pTrabajo] = trabajo;   }
    else if(id == 1) { PlayerInfo[playerid][pTrabajo2] = trabajo; }
    SendClientMessage(playerid, COLOR_WHITE, "¡Felicitaciones! Conseguiste un nuevo trabajo, para ver tus comandos disponibles usa {DBED15}/ayuda trabajos");
    PlayerPlaySoundEx(playerid,1055,0.0,0.0,0.0);
    return true;
}
YaTiene2Jobs(playerid)
{
    new string[200];
    SendClientMessage(playerid,-1,"Ya tienes 2 trabajos, renuncia a uno.");
    format(string, sizeof(string), "Escribe {DBED15}/dejar trabajo %d{FFFFFF} para dejar el trabajo de %s", PlayerInfo[playerid][pTrabajo],NombreTrabajo(PlayerInfo[playerid][pTrabajo]));
    return SendClientMessage(playerid,-1,string);
}
stock NoPuedeTrabajo(playerid)
{
    new string[200];
    SendClientMessage(playerid,-1,"No puedes tener dos trabajos. Las cuentas VIP2 o superior, pueden tener dos trabajos.");
    format(string, sizeof(string), "Escribe {DBED15}/dejar trabajo %d{FFFFFF} para dejar el trabajo de %s", PlayerInfo[playerid][pTrabajo],NombreTrabajo(PlayerInfo[playerid][pTrabajo]));
    return SendClientMessage(playerid,-1,string);
}
public SelectJugadorASan(playerid, tiempo, JugadorSancionado[25], RazonSan[128])
{
    if(cache_num_rows())
    {
        new DBID, DB_Query[256];
        cache_get_value_index_int(0, 0, DBID);
        new string[145];
        format(string, sizeof(string), "%s fue sancionado por %s.", JugadorSancionado, RazonSan);
        SendClientMessageToAll(0xAA3333FF, string);
        format(string, 128, "Administrador: %s sanciono off-line a %s",PlayerInfo[playerid][Nickname], JugadorSancionado);
        MensajeAdmin(COLOR_GREY, string, 3);
        mysql_format(handle_db, DB_Query, sizeof DB_Query, "UPDATE `usuarios` SET `TiempoJail`='%d',`RazonSan`='%e', Sanciones=Sanciones+1 WHERE `ID`='%d'", tiempo * 60, RazonSan, DBID);
        mysql_pquery(handle_db, DB_Query);
    }
    else SendClientMessage(playerid, -1, "No se encontro al jugador que deseas sancionar.");
    return 1;
}
public MostrarAyudaComandos(playerid)
{
	TextDrawShowForPlayer(playerid, NewPlayer[0]);
	PlayerTextDrawShow(playerid, NewPlayerr[playerid]);
	return 1;
}
public SacarAyudaComandos(playerid)
{
	TextDrawHideForPlayer(playerid, NewPlayer[0]);
	PlayerTextDrawHide(playerid, NewPlayerr[playerid]);
	return 1;
}
public SelectJugadorABanear(playerid, JugadorBaneado[25], RazonBan[128])
{
    if(cache_num_rows())
    {
        new DBID, DB_Query[256];
        cache_get_value_index_int(0, 0, DBID);
        new string[145];
        format(string, sizeof(string), "El jugador {FF3300}%s{FFFFFF} fue baneado por un admin. Razón: {FF3300}%s{FFFFFF}.", JugadorBaneado, RazonBan);
        SendClientMessageToAll(-1, string);
        format(string, 128, "Administrador: %s baneo off-line a %s",PlayerInfo[playerid][Nickname], JugadorBaneado);
        MensajeAdmin(COLOR_GREY, string, 3);
        mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Baneado` = '1', `razon` = '%e', `Banpor` = '%e' WHERE `ID` = '%d'", RazonBan, PlayerInfo[playerid][Nickname], DBID);
        mysql_pquery(handle_db, DB_Query);
        mysql_format(handle_db, DB_Query, sizeof(DB_Query), "INSERT INTO `registros_admin` (Responsable, Jugador, Razon, Accion) VALUES ('%e','%e','%e','3')",PlayerInfo[playerid][Nickname],JugadorBaneado,RazonBan);
        mysql_pquery(handle_db, DB_Query);
    }
    else SendClientMessage(playerid, -1, "No se encontro al jugador que deseas banear.");
    return 1;
}
public JobCocinero1(f)
{
	if(Fabricas[f][EstadoCocinero][0] == 1)
	{
		if(Fabricas[f][PorcentajeCocinero][0] >= 100)
		{
			Fabricas[f][Bloque][0] = CreateDynamicObject(1271, -2017.67334, 227.02380, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
			Fabricas[f][Termino][0] = 1;
			Fabricas[f][EstadoCocinero][0] = 4;
			Fabricas[f][PorcentajeCocinero][0] = 0;
			ActualizarLabelMoledores(f,1);
			KillTimer(Fabricas[f][tiempoc1]);
			GuardarFabrica(f);
			return 1;
		}
		Fabricas[f][PorcentajeCocinero][0] ++;
		ActualizarLabelMoledores(f,1);
		GuardarFabrica(f);
	}
	return 1;
}

public JobCocinero2(f)
{
	if(Fabricas[f][EstadoCocinero][1] == 1)
	{
		if(Fabricas[f][PorcentajeCocinero][1] >= 100)
		{
			Fabricas[f][Bloque][1] = CreateDynamicObject(1271, -2013.86060, 227.05284, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
			Fabricas[f][Termino][1] = 1;
			Fabricas[f][EstadoCocinero][1] = 4;
			Fabricas[f][PorcentajeCocinero][1] = 0;
			ActualizarLabelMoledores(f,2);
			KillTimer(Fabricas[f][tiempoc2]);
			GuardarFabrica(f);
			return 1;
		}
		Fabricas[f][PorcentajeCocinero][1] ++;
		ActualizarLabelMoledores(f,2);
		GuardarFabrica(f);
	}
	return 1;
}

public JobCocinero3(f)
{
	if(Fabricas[f][EstadoCocinero][2] == 1)
	{
		if(Fabricas[f][PorcentajeCocinero][2] >= 100)
		{
			Fabricas[f][Bloque][2] = CreateDynamicObject(1271, -2009.98157, 227.00481, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
			Fabricas[f][Termino][2] = 1;
			Fabricas[f][EstadoCocinero][2] = 4;
			Fabricas[f][PorcentajeCocinero][2] = 0;
			ActualizarLabelMoledores(f,3);
			KillTimer(Fabricas[f][tiempoc3]);
			GuardarFabrica(f);
			return 1;
		}
		Fabricas[f][PorcentajeCocinero][2] ++;
		ActualizarLabelMoledores(f,3);
		GuardarFabrica(f);
	}
	return 1;
}

public JobCocinero4(f)
{
	if(Fabricas[f][EstadoCocinero][3] == 1)
	{
		if(Fabricas[f][PorcentajeCocinero][3] >= 100)
		{
			Fabricas[f][Bloque][3] = CreateDynamicObject(1271, -2006.16040, 226.99612, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
			Fabricas[f][Termino][3] = 1;
			Fabricas[f][EstadoCocinero][3] = 4;
			Fabricas[f][PorcentajeCocinero][3] = 0;
			ActualizarLabelMoledores(f,4);
			KillTimer(Fabricas[f][tiempoc4]);
			GuardarFabrica(f);
			return 1;
		}
		Fabricas[f][PorcentajeCocinero][3] ++;
		ActualizarLabelMoledores(f,4);
		GuardarFabrica(f);
	}
	return 1;
}

public JobCocinero5(f)
{
	if(Fabricas[f][EstadoCocinero][4] == 1)
	{
		if(Fabricas[f][PorcentajeCocinero][4] >= 100)
		{
			Fabricas[f][Bloque][4] = CreateDynamicObject(1271, -2002.34033, 227.01234, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
			Fabricas[f][Termino][4] = 1;
			Fabricas[f][EstadoCocinero][4] = 4;
			Fabricas[f][PorcentajeCocinero][4] = 0;
			ActualizarLabelMoledores(f,5);
			KillTimer(Fabricas[f][tiempoc5]);
			GuardarFabrica(f);
			return 1;
		}
		Fabricas[f][PorcentajeCocinero][4] ++;
		ActualizarLabelMoledores(f,5);
		GuardarFabrica(f);
	}
	return 1;
}

public Horno1(f)
{
	new string[360];
    if(HornoEncendido1[f] == 1)
	{
		if(Fabricas[f][Crisol1] == 0)
		{
		    if(Fabricas[f][Porcentaje1] >= 100)
		    {
		        Fabricas[f][Crisol1] = 1;
		        Fabricas[f][Porcentaje1] = 0;
				ApagarEstufaUno(f);
				GuardarFabrica(f);
				return 1;
		    }
   			if(Fabricas[f][pTanqueUno] != 0) Fabricas[f][pTanqueUno] --;
   			else if(Fabricas[f][pTanqueDos] != 0) Fabricas[f][pTanqueDos] --;
   			else if(Fabricas[f][pTanqueTres] != 0) Fabricas[f][pTanqueTres] --;
     		else return ApagarEstufaUno(f);
			Fabricas[f][Porcentaje1] ++;
			//Actualizar cocina 1
			format(string,sizeof(string),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje1],EstadoH(HornoEncendido1[f]),EstadoHo(HornoEncendido1[f]),EstadoCristal(Fabricas[f][Crisol1]));
			UpdateDynamic3DTextLabelText(Fabricas[f][olla1], COLOR_ROJO, string);
			//ActualizarTanques
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueUno]);
   			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque1], COLOR_ROJO, string);
   			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueDos]);
   			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque2], COLOR_ROJO, string);
   			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueTres]);
   			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque3], COLOR_ROJO, string);
			GuardarFabrica(f);
		}
    }
    return 1;
}

public Horno2(f)
{
	new string[360];
    if(HornoEncendido2[f] == 1)
	{
		if(Fabricas[f][Crisol2] == 0)
		{
		    if(Fabricas[f][Porcentaje2] >= 100)
		    {
		        Fabricas[f][Crisol2] = 1;
		    	HornoEncendido2[f] = 0;
				KillTimer(Fabricas[f][tiempoh2]);
				DestroyDynamicObject(Fabricas[f][humo2]);
				Fabricas[f][Porcentaje2] = 0;
		        format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
				UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, string);
				GuardarFabrica(f);
				return 1;
			}
   			if(Fabricas[f][pTanqueCuatro] != 0) Fabricas[f][pTanqueCuatro] --;
   			else if(Fabricas[f][pTanqueCinco] != 0) Fabricas[f][pTanqueCinco] --;
   			else if(Fabricas[f][pTanqueSeis] != 0) Fabricas[f][pTanqueSeis] --;
     		else
			{
				HornoEncendido2[f] = 0;
				KillTimer(Fabricas[f][tiempoh2]);
				DestroyDynamicObject(Fabricas[f][humo2]);
		        format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
				UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, string);
				GuardarFabrica(f);
				return 1;
			}
			Fabricas[f][Porcentaje2] ++;
			//Actualizar cocina 2
			format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
			UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, string);
			//ActualizarTanques
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueCuatro]);
            UpdateDynamic3DTextLabelText(Fabricas[f][LTanque4], COLOR_ROJO, string);
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueCinco]);
			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque5], COLOR_ROJO, string);
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueSeis]);
			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque6], COLOR_ROJO, string);
			GuardarFabrica(f);
		}
    }
    return 1;
}

public Horno3(f)
{
	new string[360];
    if(HornoEncendido3[f] == 1)
	{
		if(Fabricas[f][Crisol3] == 0)
		{
		    if(Fabricas[f][Porcentaje3] >= 100)
		    {
		        Fabricas[f][Crisol3] = 1;
                HornoEncendido3[f] = 0;
				KillTimer(Fabricas[f][tiempoh3]);
				DestroyDynamicObject(Fabricas[f][humo3]);
				Fabricas[f][Porcentaje3] = 0;
		        format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
				UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, string);
				GuardarFabrica(f);
				return 1;
			}
   			if(Fabricas[f][pTanqueSiete] != 0) Fabricas[f][pTanqueSiete] --;
   			else if(Fabricas[f][pTanqueOcho] != 0) Fabricas[f][pTanqueOcho] --;
   			else if(Fabricas[f][pTanqueNueve] != 0) Fabricas[f][pTanqueNueve] --;
     		else
			{
				HornoEncendido3[f] = 0;
				KillTimer(Fabricas[f][tiempoh3]);
				DestroyDynamicObject(Fabricas[f][humo3]);
		        format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
				UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, string);
				GuardarFabrica(f);
				return 1;
			}
			Fabricas[f][Porcentaje3] ++;
			//Actualizar cocina 3
			format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
			UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, string);
			//ActualizarTanques
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueSiete]);
			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque7], COLOR_ROJO, string);
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueOcho]);
			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque8], COLOR_ROJO, string);
			format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueNueve]);
			UpdateDynamic3DTextLabelText(Fabricas[f][LTanque9], COLOR_ROJO, string);
			GuardarFabrica(f);
		}
    }
    return 1;
}
public OnPlayerGiveDamageDynamicActor(playerid, actorid, Float:amount, weaponid, bodypart)
{
	for(new f = 0; f<MAX_FABRICAS; f++)
	{
		if(Fabricas[f][pEnUso] == 1)
		{
			if(PlayerInfo[playerid][pFaccion] == 1)
			{
				if(GetPlayerInterior(playerid) == Fabricas[f][pInt])
				{
					if(actorid == Fabricas[f][ActorMedico] && IsValidDynamicActor(Fabricas[f][ActorMedico]) && Fabricas[f][EstadoMedico] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorMedico], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoMedico] = 3;
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorGuardia][0] && IsValidDynamicActor(Fabricas[f][ActorGuardia][0]) && Fabricas[f][EstadoG][0] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorGuardia][0], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoG][0] = 3;
						RestarVida(playerid,20);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorGuardia][1] && IsValidDynamicActor(Fabricas[f][ActorGuardia][1]) && Fabricas[f][EstadoG][1] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorGuardia][1], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoG][1] = 3;
						RestarVida(playerid,20);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorGuardia][2] && IsValidDynamicActor(Fabricas[f][ActorGuardia][2]) && Fabricas[f][EstadoG][2] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorGuardia][2], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoG][2] = 3;
						RestarVida(playerid,20);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorGuardia][3] && IsValidDynamicActor(Fabricas[f][ActorGuardia][3]) && Fabricas[f][EstadoG][3] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorGuardia][3], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoG][3] = 3;
						RestarVida(playerid,20);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
						    Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorGuardia][4] && IsValidDynamicActor(Fabricas[f][ActorGuardia][4]) && Fabricas[f][EstadoG][4] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorGuardia][4], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoG][4] = 3;
						RestarVida(playerid,20);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorCocinero][0] && IsValidDynamicActor(Fabricas[f][ActorCocinero][0]) && Fabricas[f][EstadoCocinero][0] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][0], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoCocinero][0] = 3;
						ActualizarLabelMoledores(f,1);
						KillTimer(Fabricas[f][tiempoc1]);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorCocinero][1] && IsValidDynamicActor(Fabricas[f][ActorCocinero][1]) && Fabricas[f][EstadoCocinero][1] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][1], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoCocinero][1] = 3;
						ActualizarLabelMoledores(f,2);
						KillTimer(Fabricas[f][tiempoc2]);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorCocinero][2] && IsValidDynamicActor(Fabricas[f][ActorCocinero][2]) && Fabricas[f][EstadoCocinero][2] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][2], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoCocinero][2] = 3;
						ActualizarLabelMoledores(f,3);
						KillTimer(Fabricas[f][tiempoc3]);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorCocinero][3] && IsValidDynamicActor(Fabricas[f][ActorCocinero][3]) && Fabricas[f][EstadoCocinero][3] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][3], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoCocinero][3] = 3;
						ActualizarLabelMoledores(f,4);
						KillTimer(Fabricas[f][tiempoc4]);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
					if(actorid == Fabricas[f][ActorCocinero][4] && IsValidDynamicActor(Fabricas[f][ActorCocinero][4]) && Fabricas[f][EstadoCocinero][4] != 3)
					{
						ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][4], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
						Fabricas[f][EstadoCocinero][4] = 3;
						ActualizarLabelMoledores(f,5);
						KillTimer(Fabricas[f][tiempoc5]);
						GuardarFabrica(f);
						Fabricas[f][ActoresMuertos] ++;
						Fabricas[f][TiempoVaciarFabrica] = gettime()+86400;
						if(Fabricas[f][ActoresMuertos] > 0 && Fabricas[f][TiempoPickup] <= gettime())
						{
							Fabricas[f][TiempoPickup] = gettime()+300;
							if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
							Fabricas[f][pPickup] = CreateDynamicPickup(19522,23,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ],0);
						}
					}
				}
			}
		}
	}
	return true;
}
puedeCrearArmas(playerid)
{
    new vw = GetPlayerVirtualWorld(playerid), intt = GetPlayerInterior(playerid);
    if(intt == 6 && vw == 6) return 0; //Hospital Los Santos.
    if(intt == 5 && vw == 5) return 0; //Estudio de radio y televisión.
    if(intt == 9 && vw == 9) return 0; //Mina castillo del diablo.
    if(intt == 7 && vw == 7) return 0; //Estadio de Las Venturas.
    if(intt == 1 && vw == 19) return 0; //Albergue de indigentes
    if(intt == 6 && vw == 7) return 0; //Hospital Groove
    if(intt == 17 && vw == 3) return 0; //Club Alhambra
    if(intt == 2 && vw == 5) return 0; //Club de striptease
    if(intt == 1 && vw == 9) return 0; //Academia de agentes (LV)
    if(intt == 6 && vw == 9) return 0; //Hospital Las Venturas
    if(intt == 6 && vw == 8) return 0; //Hospital San Fierro
    if(intt == 13 && vw == 1) return 0; //Salón de eventos
    return 1;
}
MandarMensajeTodos(string[])
{
    foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
        {
            if(PlayerInfo[i][pMuteos] == 1) SendClientMessage(i,-1,string);
        }
    }
    return 1;
}
SacarVehiculo(playerid)
{
    NoTeleportHack(playerid);
    RemovePlayerFromVehicle(playerid);
    new Float:sx, Float:sy, Float:sz;
    GetPlayerPos(playerid, sx, sy, sz);
    SetPlayerPosEx(playerid, sx, sy, sz);
    EnAuto[playerid] = INVALID_VEHICLE_ID;
    return 1;
}
GetPolicesOn()
{
    new count;
    foreach(new i : Player)
    {
        if(!IsPlayerNPC(i))
        {
            if(PlayerInfo[i][pDuty] > 0) count ++;
        }
    }
    return count;
}
stock Float:GetPlayerDistanceToVehicle(playerid, vehicleid)
{
    new Float:PCoords[3], Float:VCoords[3];
    GetPlayerPos(playerid, PCoords[0], PCoords[1], PCoords[2]);
    GetVehiclePos(vehicleid, VCoords[0], VCoords[1], VCoords[2]);
    new Float:Distance[4];
    for(new n=0; n<3; n++) Distance[n] = floatabs(PCoords[n]) - floatabs(VCoords[n]);
    Distance[3] = floatsqroot((Distance[0] * Distance[0]) + (Distance[1] * Distance[1]) + (Distance[2] * Distance[2]));
    return Distance[3];
}
stock GetPlayerNearestVehicle(playerid)
{
    new nearest[2] = {-1, -1};
    for(new v=0; v < MAX_VEHICLES; v++) {
        if(GetVehicleModel(v) == 453) {
            if(nearest[0] == -1) {
                nearest[0] = v;
                nearest[1] = floatround(GetPlayerDistanceToVehicle(playerid, v));
            } else {
                if(floatround(GetPlayerDistanceToVehicle(playerid, v)) < nearest[1])
                {
                    nearest[0] = v;
                    nearest[1] = floatround(GetPlayerDistanceToVehicle(playerid, v));
                }
            }
        }
    }
    return nearest[0];
}
GivePlayerHealth(playerid, Float:health)
{
    Tiempos[playerid][TIMER_VIDA] = gettime() + 3;
    PlayerInfo[playerid][j_HEALTH] += health;
    if(PlayerInfo[playerid][j_HEALTH] > 100.0) PlayerInfo[playerid][j_HEALTH] = 100.0;
    return SetPlayerHealth(playerid, PlayerInfo[playerid][j_HEALTH]);
}
GivePlayerArmour(playerid, Float:chaleco)
{
    Tiempos[playerid][TIMER_CHALECO] = gettime() + 3;
    PlayerInfo[playerid][j_ARMOUR] += chaleco;
    if(PlayerInfo[playerid][j_ARMOUR] > 100.0) PlayerInfo[playerid][j_ARMOUR] = 100.0;
    return SetPlayerArmour(playerid, PlayerInfo[playerid][j_ARMOUR]);
}
SetPlayerHealthEx(playerid, Float:vida)
{
    Tiempos[playerid][TIMER_VIDA] = gettime() + 3;
    PlayerInfo[playerid][j_HEALTH] = vida;
    if(PlayerInfo[playerid][j_HEALTH] > 100.0) PlayerInfo[playerid][j_HEALTH] = 100.0;
    return SetPlayerHealth(playerid, PlayerInfo[playerid][j_HEALTH]);
}
SetPlayerArmourEx(playerid, Float:chaleco)
{
    Tiempos[playerid][TIMER_CHALECO] = gettime() + 3;
    PlayerInfo[playerid][j_ARMOUR] = chaleco;
    if(PlayerInfo[playerid][j_ARMOUR] > 100.0) PlayerInfo[playerid][j_ARMOUR] = 100.0;
    return SetPlayerArmour(playerid, PlayerInfo[playerid][j_ARMOUR]);
}
MotorMalogrado(playerid)
{
    AccionesRol(playerid,"intenta encender el motor de su vehículo pero no puede.", 20);
    return SendClientMessage(playerid, -1, "El motor del vehículo está dañado, escribe {DBED15}/servicio mecanico");
}
SaveParking(id)
{
    new query[1024];
    mysql_format(handle_db, query, sizeof(query), "UPDATE estacionamientos SET EnUso = '%d', Propietario = '%d', Precio = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaA = '%f', SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaA = '%f', Interior = '%d', VirtualWorld = '%d', Nivel = '%d', Precio = '%d' WHERE ID = '%d'",Estacionamientos[id][eEnUso],Estacionamientos[id][Dueno],Estacionamientos[id][ePrecio],Estacionamientos[id][SalidX],Estacionamientos[id][SalidY],Estacionamientos[id][SalidZ],Estacionamientos[id][SalidA],Estacionamientos[id][PosX],Estacionamientos[id][PosY],Estacionamientos[id][PosZ],Estacionamientos[id][PosA],Estacionamientos[id][eInterior],Estacionamientos[id][eMundoVirtual],Estacionamientos[id][Nivel],Estacionamientos[id][ePrecio],id);
    mysql_pquery(handle_db, query);
    return 1;
}
Error(playerid)
{
    ExpulsarJugador(playerid, "Ingresa nuevamente y ten cuidado con lo que escribes.");
    return 1;
}

forward LlamadaAnuncios(playerid);
public LlamadaAnuncios(playerid)
{
    SendClientMessage(playerid,-1,"{33CCFF}[Servicio de anuncios]{FFFFFF} Ana: Hola, ¿Que tipo de anuncio deseas realizar?");
    ShowPlayerDialog(playerid, DIALOG_ANUNCIO1, DIALOG_STYLE_LIST, "Información sobre el servicio de anuncios" , "{FFFFFF}Compras\nVentas\nAnuncios" , "Siguiente" , "Cancelar" ) ;
}

forward AnuncioPlayer2(playerid);
public AnuncioPlayer2(playerid)
{
    SendClientMessage(playerid,-1,"{33CCFF}[Servicio de anuncios]{FFFFFF} Ana: Perfecto, indíquenos el contenido de su anuncio.");
    ShowPlayerDialog(playerid, DIALOG_ANUNCIO2, DIALOG_STYLE_INPUT, "Información sobre el servicio de anuncios" , "A continuación, usa el siguiente campo para ingresar el contenido de tu anuncio:" , "Siguiente" , "Cancelar" ) ;
}
stock CancelarLlamadaAnuncio(playerid)
{
    new string[128];
    format(string, sizeof(string), "%s (por celular) dice: Ya no, muchas gracias.",PlayerInfo[playerid][Nickname]);
    if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    ColgarLaLlamada(playerid);
}

public OnPlayerUnpause(playerid)
{
    Tiempos[playerid][TiempoAntiTP] = gettime() + 3;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 3;
    return 1;
}
public ColorJugadorDefault(playerid)
{
    if(IsPlayerConnected(playerid)) SetPlayerColor(playerid, DEFAULT_COLOR);
}
ObtenerEstacionamientos(playerid)
{
    new count;
    for(new i = 0; i < MAX_GARAGES; i++)
    {
        if(Estacionamientos[i][eEnUso] > 0)
        {
            if(strcmp(Estacionamientos[i][DuenoName],PlayerInfo[playerid][Nickname], true) == 0) count ++;
        }
    }
    return count;
}
ObtenerCoordenadasPaciente(playerid, &Float:X, &Float:Y, &Float:Z)
{
    X = PlayerInfo[playerid][jPosE_x];
    Y = PlayerInfo[playerid][jPosE_y];
    Z = PlayerInfo[playerid][jPosE_z];
    return 1;
}
AccesoDenegado(playerid)
{
    if(Tiempos[playerid][ErrorMensaje] - gettime() <= 0)
    {
        SendClientMessage(playerid,-1,"Acceso Denegado.");
        Tiempos[playerid][ErrorMensaje] = gettime() + 1;
    }
    return 1;
}
PonerRopaMedico(playerid, hospital)
{
    if(RopaMedi[playerid] == 0)
    {
        switch(hospital)
        {
            case 1:
            {
                switch(PlayerInfo[playerid][pSexo])
                {
                    case 1: SetPlayerSkin(playerid,276);
                    case 2: SetPlayerSkin(playerid,308);
                }
            }
            case 2:
            {
                switch(GetPlayerVirtualWorld(playerid))
                {
                    case 7: // LS Groove
                    {
                        switch(PlayerInfo[playerid][pSexo])
                        {
                            case 1: SetPlayerSkin(playerid,276);
                            case 2: SetPlayerSkin(playerid,308);
                        }
                    }
                    case 9: // LV
                    {
                        switch(PlayerInfo[playerid][pSexo])
                        {
                            case 1: SetPlayerSkin(playerid,274);
                            case 2: SetPlayerSkin(playerid,308);
                        }
                    }
                }
            }
            case 3:
            {
                switch(PlayerInfo[playerid][pSexo])
                {
                    case 1: SetPlayerSkin(playerid,275);
                    case 2: SetPlayerSkin(playerid,308);
                }
            }
        }
        PlayerInfo[playerid][pModelo] = GetPlayerSkin(playerid);
        RopaMedi[playerid] = 1, RopaBasu[playerid] = 0;
        SendClientMessage(playerid,-1,"Te has colocado el uniforme correctamente.");
    }
    else if(RopaMedi[playerid] == 1)
    {
        RopaMedi[playerid] = 0, RopaBasu[playerid] = 0;
        SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
        SendClientMessage(playerid,-1,"Te has quitado el uniforme correctamente.");
    }
    foreach(new i : Player) RemovePlayerMapIcon(playerid, i);
    return 1;
}
HexToInt(string[])
{
    if(!string[0]) return 0;
    new cur = 1, res = 0;
    for(new i = strlen(string); i > 0; i--)
    {
        res += cur * (string[i - 1] - ((string[i - 1] < 58) ? (48) : (55)));
        cur = cur * 16;
    }
    return res;
}
Borracho(playerid)
{
    new restased = 100-PlayerInfo[playerid][pSed];
	if(restased >= 15)	PlayerInfo[playerid][pSed] += 15;
	else if(restased < 15) PlayerInfo[playerid][pSed] += restased;
	new restahambre = 100-PlayerInfo[playerid][pHambre];
	if(restahambre >= 10) PlayerInfo[playerid][pHambre] += 10;
	else if(restahambre < 10) PlayerInfo[playerid][pHambre] += restahambre;
	if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
    AccionesRol(playerid,"comienza a sentirse mal.", 20);
    return 1;
}
HasWeapon(playerid,arma)
{
    if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(arma)] == arma) return 1;
    return 0;
}
DarDineroRoboTienda(playerid)
{
    ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
    MensajeEx(playerid, -1, "Acabas de robar {00CC00}$%d{FFFFFF} del negocio, escapa o serás arrestado.",valortotal[playerid]);
    DarDinero(playerid,valortotal[playerid]);
    valortotal[playerid] = 0;
    PlayerTemp[playerid][PuedeRobar] = 0;
    if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
    if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
    return 1;
}
main()
{
	print(" ");
	return 1;
}
TraerPolicia(playerid)
{
    new Float:x,Float:y,Float:z,Float:a;
    for(new i = 0; i < MAX_NPC_ROBOS; i++)
    {
        if(UltimoRobado[playerid] == RoboTiendas[i][rID])
        {
            new actor = RoboTiendas[i][Actor];
            GetDynamicActorPos(actor,x,y,z);
            new vw = GetDynamicActorVirtualWorld(actor);
            if(IsPlayerInRangeOfPoint(playerid,30.0,x,y,z))
            {
                if(IsPlayerInRangeOfPoint(playerid,30,-30.6934,-90.8069,1003.5469)) { x = -30.6934; y = -90.8069; z = 1003.5469; a = 318.9343; }
                if(IsPlayerInRangeOfPoint(playerid,30,-26.1474,-187.0378,1007.7300)) { x = -26.1474; y = -187.0378; z = 1007.7300; a = 67.7816; }
                if(IsPlayerInRangeOfPoint(playerid,30,370.4197,-123.0341,1001.4995)) { x = 372.0728; y = -130.9169; z = 1001.4922; a = 14.4730; }
                if(x == 0) return 1;
                if(IsValidDynamicActor(RoboTiendas[i][rPolicia])) DestroyDynamicActor(RoboTiendas[i][rPolicia]);
                RoboTiendas[i][rPolicia] = CreateDynamicActor(280, x, y, z, a,1,100.0,vw);
                ApplyDynamicActorAnimation(RoboTiendas[i][rPolicia],"ped", "ARRESTgun", 4.000000, 0, 0, 0, 1, 0);
                SetTimerEx("RendirseUsuario",500,false,"d",playerid);
                SetTimerEx("MatarPolicia",8000,false,"d",RoboTiendas[i][rPolicia]);
                SetTimerEx("Encerrando2",7000,false,"d",playerid);
            }
        }
    }
    return 1;
}
UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}
stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}
stock number_format_thousand(e_number)
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}
	if(negative) strins(f_string, "-", 0);
	return f_string;
}
GetOyentesEmisora(emisora)
{
    new count;
    foreach(new i : Player)
    {
        if(PlayerTemp[i][p_ESCUCHANDO_EMISORA] == emisora) count++;
    }
    return count;
}
stock EnRadio(playerid)
{
    for(new i = 0; i < sizeof(RadiosPos);i++)
    if(IsPlayerInRangeOfPoint(playerid,2.0, RadiosPos[i][0], RadiosPos[i][1], RadiosPos[i][2])) return 1;
    return 0;
}
stock IsValidVehicleTunning(vehicleid)
{
	new bool:valid;
    switch(GetVehicleModel(vehicleid))
    {
        case 407..408:  valid = false; 	//FireTruck - Trashmaster
        case 416:       valid = false; 	//Ambulance
        case 427:       valid = false;  //Enforcer
        case 471:		valid = false;  //Quad
        case 481:		valid = false;  //BMX
        case 490:       valid = false;  //FBI Rancher
        case 498:       valid = false;  //Boxville
        case 509..510:	valid = false;  //Bike - MountainBike
        case 528:       valid = false;  //FBI Truck
        case 544:       valid = false; 	//FireTruck
        case 573:       valid = false;  //Dune
        case 578:       valid = false;   //DFT
        case 596..599:  valid = false; 	//Police Car (LS-SF-LV) - Police Ranger
		case 601:       valid = false;  //S.W.A.T
		case 609:       valid = false;  //Boxville
        default: 		valid = true;
    }
	return valid;
}
stock CercaDeObjeto(Float:rango,playerid,objectid)
{
    new Float:Pos[3];
    GetObjectPos(objectid,Pos[0],Pos[1],Pos[2]);
    if(IsPlayerInRangeOfPoint(playerid,rango,Pos[0],Pos[1],Pos[2])) return 1;
    return 0;
}
ptask cargarhora[1000 * 60](i)
{
    new Float:vida;
    gettime(Hora, Minuto);
	if(JugadorLogeado[i] == 1)
	{
		if(IsPlayerConnected(i)) SetPlayerTime(i,Hora,Minuto);
		if(PlayerInfo[i][pSed] == 100)
		{
			GetPlayerHealth(i,vida);
			SetPlayerHealthEx(i,vida-3);
			SendClientMessage(i, COLOR_WHITE, "Te estás muriendo de sed...");
		}
		if(PlayerInfo[i][pHambre] == 100)
		{
			GetPlayerHealth(i,vida);
			SetPlayerHealthEx(i,vida-3);
			SendClientMessage(i, COLOR_WHITE, "Te estás muriendo de hambre...");
		}
	}
	return 1;
}
ptask DarNecesidad[480000](i)
{
	if(JugadorLogeado[i] == 1)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pVip] > 0) { PlayerInfo[i][pSed] += 2; PlayerInfo[i][pHambre] += 1; }
			else { PlayerInfo[i][pSed] += 4; PlayerInfo[i][pHambre] += 2; }
			if(PlayerInfo[i][pBarras] == 1) BarrasFunciones(i, 1);
		}
		if(PlayerInfo[i][pNivel] > 0 && PlayerInfo[i][pNivel] <= 6 && YaMostroAlertaSed[i] == 0)
		{
			OcultarMensajeAlerta(i);
			YaMostroAlertaSed[i] = 1;
			MandarMensajeAlerta(i,"Tu personaje necesita hidratarse, la barra superior azul indica el nivel de sed.");
			SetTimerEx("OcultarMensajeAlerta",6000,false,"d",i);
			SetTimerEx("MandarMensajeAlerta",10000,false,"d",i,"Puedes comprar bebidas en los ~g~supermercados 24/7~w~ . Para mas informacion usa ~y~ayuda sed");
			ResetearYaMostro[i] = SetTimerEx("ResetAlerta",minutos(40),false,"d",i);
		}
		if(PlayerInfo[i][pNivel] > 0 && PlayerInfo[i][pHambre] > 49 && PlayerInfo[i][pHambre] < 60)
		{
			OcultarMensajeAlerta(i);
			YaMostroAlertaSed[i] = 1;
			MandarMensajeAlerta(i,"Tu hambre llego al 50 porciento, tienes que comer algo.");
			SetTimerEx("OcultarMensajeAlerta",8000,false,"d",i);
			SetTimerEx("MandarMensajeAlerta",10000,false,"d",i,"Tu personaje necesita alimentarse, la barra superior naranja indica el nivel de hambre.");
			SetTimerEx("OcultarMensajeAlerta",16000,false,"d",i);
			SetTimerEx("MandarMensajeAlerta",20000,false,"d",i,"Puedes comprar comidas en las ~r~franquicias de pizza.~w~ Para mas informacion usa ~y~/ayuda hambre~w~.");
			ResetearYaMostro[i] = SetTimerEx("ResetAlerta",minutos(40),false,"d",i);
		}
		if(PlayerInfo[i][pNivel] > 0 && PlayerInfo[i][pSed] > 49 && PlayerInfo[i][pSed] < 60)
		{
			OcultarMensajeAlerta(i);
			YaMostroAlertaSed[i] = 1;
			MandarMensajeAlerta(i,"Tu nivel de sed llego al 50 porciento y necesitas beber algo.");
			SetTimerEx("OcultarMensajeAlerta",8000,false,"d",i);
			ResetearYaMostro[i] = SetTimerEx("ResetAlerta",minutos(25),false,"d",i);
		}
	}
	return 1;
}
public MostrarInfoVehiculo(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        MandarMensajeAlerta(playerid,"Compraste un vehiculo, ahora comprale una traba de seguridad en algun ~g~24/7 ~w~para que no te lo roben.");
        SetTimerEx("OcultarMensajeAlerta", 15000, 0, "i", playerid);
    }
    return 1;
}
public OcultarMensajeAlerta(playerid)
{
    PlayerTextDrawHide(playerid,MensajeBox[playerid]);
    return 1;
}
ShowDialog(playerid, dialogid)
{
    switch(dialogid)
    {
        case DIALOG_PHONE:
        {
            new caption[50],dialog[200];
            format(caption, sizeof caption, "Mi teléfono - %d", PlayerInfo[playerid][pNumero]);
            if(TelefonoEstado[playerid] == 0) format(dialog, sizeof dialog, "{FFFFFF}1. Agenda\n2. Llamar\n3. Enviar mensaje\n4. Apagar teléfono");
            else format(dialog, sizeof dialog, "{FFFFFF}1. Encender teléfono\n2. Agenda\n3. Llamar\n4. Enviar mensaje");
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seleccionar", "Salir");
            return 1;
        }
        case DIALOG_PHONE_BOOK:
        {
            for(new i = 0; i != MAX_LISTITEMS; i++ ) PlayerTemp[playerid][p_PLAYER_LISTITEM][i] = -1;
            new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
            format(dialog, sizeof dialog, "{FFFFFF}Nombre\tNúmero\n");
            new line_str[80], contacts, listitem;
            for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
            {
                if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
                format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
                strcat(dialog, line_str);
                PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] = i;
                contacts ++; listitem ++;
            }
            if(contacts < MAX_PHONE_CONTACTS)
            {
                PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
                strcat(dialog, "{CCCCCC}+ Añadir contacto\n"); listitem ++;
            }
            if(contacts > 0)
            {
                PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
                strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
            }
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mi teléfono - Agenda", dialog, "Siguiente", "Atrás");
            return 1;
        }
        case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "{FFFFFF}Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "Siguiente", "Atrás");
        case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "{FFFFFF}Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "Siguiente", "Atrás");
        case DIALOG_PHONE_BOOK_OPTIONS:
        {
            new caption[40];
            format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{CCCCCC}1. Llamar\n{CCCCCC}2. Enviar mensaje\n{CCCCCC}3. Cambiar nombre del contacto\n{CCCCCC}4. Eliminar este contacto", "Siguiente", "Atrás");
            return 1;
        }
        case DIALOG_PHONE_BOOK_CHANGE_NAME:
        {
            new caption[40],dialog[140];
            format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
            format(dialog, sizeof dialog, "{FFFFFF}Nombre actual: %s\n{FFFFFF}Teléfono: %d\n\n{FFFFFF}Indica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");
            return 1;
        }
        case DIALOG_PHONE_BOOK_CONFIRM_DELET:
        {
            new caption[40],dialog[140];
            format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
            format(dialog, sizeof dialog, "{FFFFFF}¿Está seguro de que desea eliminar el siguiente contacto?\n\n{FFFFFF}Nombre: %s\n{FFFFFF}Teléfono: %d", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");
            return 1;
        }
        case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "{FFFFFF}¿Está seguro de que quiere eliminar todos sus contactos?\n{FFFFFF}Esta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");
        case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Realizar una llamada", "{FFFFFF}¿A quién quieres llamar?\n{FFFFFF}Indique el número al que desea llamar.", "Siguiente", "Atrás");
        case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}¿A quién quieres enviarle el mensaje?\n{FFFFFF}Indique el número al que desea enviar el mensaje.", "Siguiente", "Atrás");
        case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}Escribe el mensaje que quieres enviar\n{FFFFFF}Caracteres: 1-145.", "Siguiente", "Atrás");
        case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}Escribe el mensaje que quieres enviar\n{FFFFFF}Caracteres: 1-145.", "Siguiente", "Atrás");
        case DIALOG_PLAYER_TOYS:
        {
            new dialog[96 * (MAX_PTOYS + 2)], line_str[64];
            format(dialog, sizeof dialog, "{CCCCCC}Prenda\t{90C3D4}Colocada\n");
            for(new i; i != MAX_PTOYS; i ++)
            {
                if(PlayerInfo[playerid][pVip])
                {
                    if(PlayerToys[playerid][i][pToyValid])
                    {
                        if(PlayerToys[playerid][i][pUsando]) format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}Sí\n", i + 1, PlayerToys[playerid][i][pToyName]);
                        else format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}No\n", i + 1, PlayerToys[playerid][i][pToyName]);
                    }
                    else format(line_str, sizeof line_str, "{666666}%d. Espacio vacío\n", i + 1);
                }
                else
                {
                    if(i >= 3)
                    {
                        if(PlayerToys[playerid][i][pToyValid]) format(line_str, sizeof line_str, "{666666}%d. %s\t{90C3D4}No\n", i + 1, PlayerToys[playerid][i][pToyName]);
                        else format(line_str, sizeof line_str, "{666666}%d. Espacio vacío\n", i + 1);
                    }
                    else
                    {
                        if(PlayerToys[playerid][i][pToyValid])
                        {
                            if(PlayerToys[playerid][i][pUsando]) format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}Sí\n", i + 1, PlayerToys[playerid][i][pToyName]);
                            else format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}No\n", i + 1, PlayerToys[playerid][i][pToyName]);
                        }
                        else format(line_str, sizeof line_str, "{666666}%d. Espacio vacío\n", i + 1);
                    }
                }
                strcat(dialog, line_str);
            }
            strcat(dialog, "{c4290d}- Eliminar todo\n");
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""SERVER_NAME" - Mis prendas", dialog, ">>", "-");
            return 1;
        }
        case DIALOG_PLAYER_TOY_MENU:
        {
            new caption[48],dialog[256];
            if(!PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyValid]) return SendClientMessage(playerid, -1, "{CCCCCC}Este espacio está vacío, puedes comprar prendas en cualquier tienda de ropa.");
            format(caption, sizeof caption, "{CCCCCC}Prenda '%s'", PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName]);
            if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) format(dialog, sizeof dialog, "{CCCCCC}Guardar prenda\n{CCCCCC}Cambiar el nombre de la prenda\n{CCCCCC}Configurar prenda\n{CCCCCC}Color primario\n{CCCCCC}Color secundario\n{CCCCCC}Eliminar prenda");
            else
            {
                if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone] == -1)
                {
                    SendClientMessage(playerid, -1, "{CCCCCC}Esta prenda es nueva y aún no ha sido configurada, configurala desde 'Configurar prenda'.");
                    format(dialog, sizeof dialog, "{999999}Usar Prenda\n{CCCCCC}Cambiar el nombre de la prenda\n{CCCCCC}Configurar prenda\n{CCCCCC}Color primario\n{CCCCCC}Color secundario\n{CCCCCC}Eliminar prenda");
                }
                else format(dialog, sizeof dialog, "{CCCCCC}Usar Prenda\n{CCCCCC}Cambiar el nombre de la prenda\n{CCCCCC}Configurar prenda\n{CCCCCC}Color primario\n{CCCCCC}Color secundario\n{CCCCCC}Eliminar prenda");
            }
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
            return 1;
        }
        case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{CCCCCC}Prenda - Modificar nombre", dialog, ">>", "Atrás");
			return 1;
		}
        case DIALOG_PLAYER_TOY_CONFIRMDELETE:
        {
            new dialog[145];
            format(dialog, sizeof(dialog), "¿Estás seguro que quieres borrar la siguiente prenda?\nVas a borrar la prenda: %s", PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName]);
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{CCCCCC}Prenda - Eliminar prenda", dialog, "Eliminar", "Atrás");
            return 1;
        }
        case DIALOG_PLAYER_TOY_SELECT_BONE:
        {
            new caption[48], dialog[45 * sizeof Toys_Bones], line_str[45];
            SendClientMessage(playerid, -1, "{CCCCCC}Selecciona en que parte del cuerpo quieres colocar esta prenda.");
            format(caption, sizeof caption, "{CCCCCC}Prenda '%s'", PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName]);
            for(new i = 0; i != sizeof Toys_Bones; i ++)
            {
                format(line_str, sizeof(line_str), "{90C3D4}%d. %s\n", i + 1, Toys_Bones[i]);
                strcat(dialog, line_str);
            }
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
            return 1;
        }
        case DIALOG_PLAYER_TOY_EDIT_BONE:
        {
            new caption[48], dialog[145];
            format(caption, sizeof caption, "{CCCCCC}Prenda '%s'", PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName]);
            format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca esta prenda?\nActualmente está colocada en: %s", Toys_Bones[ PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone] - 1 ]);
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
            return 1;
        }
        case DIALOG_PLAYER_TOY_COLOR_1: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
        case DIALOG_PLAYER_TOY_COLOR_2: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
        case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Prendas - Eliminar todo", "¿Está seguro de que quiere eliminar todas tus prendas?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
	    case DIALOG_MENU_DESBAN:
		{
		    new Query[250];
		    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Baneado`='1'");
			mysql_query(handle_db, Query, true);
		    new dialog[300 * 50 + 83], line_str[300],name[24],time, razon[32],ban_admin[24],count;
			dialog = "Nombre\tAdmin\tRazón\tÚlt. conexión\n";
		  	for(new i = 0; i < cache_num_rows(); i++)
			{
			    cache_get_value_name_int(i, "ID", PlayerTemp[playerid][p_SELECT_ADMIN_ID][count]);
			    cache_get_value_name(i, "Username", name);
		        cache_get_value_name_int(i, "TiempoOffline", time);
		        cache_get_value_name(i, "razon", razon);
		        cache_get_value_name(i, "Banpor", ban_admin);
				if(time >= (gettime() - 604800))
				{
			        format(line_str, sizeof line_str, "%s\t%s\t%s\t%s\n", name, ban_admin, razon, FormatTimeleft(gettime() - time));
					strcat(dialog, line_str);
					count ++;
				}
			}
			if(count == 0) return SendClientMessage(playerid, -1,"No hay registros de usuarios baneados los últimos 7 días.");
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administración - Baneados", dialog, "Desban", "Salir");
		}
        case CONFIG_BANDA:
        {
            new dialog[] = "{FFFFFF}- Cambiar el nombre de la banda\n{FFFFFF}- Cambiar el nombre de los rangos\n{FFFFFF}- Ajustar permisos de la banda\n{ffffff}- Cambiar color de la banda\n{ffffff}- Ver Miembros\n{FFFFFF}- Eliminar tu banda";
            return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Administrar tu banda",dialog,"Seleccionar", "Salir");
        }
        case CHANGE_NAME_CREW:
        {
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banda: Nuevo nombre", "{FFFFFF}El costo para cambiar el nombre es de {00CC00}$150.000{ffffff}.\nSi estás seguro de cambiar el nombre, indica cual será", "Continuar", "Volver");
            return 1;
        }
        case VIEW_RANK_NAME:
        {
            new DIALOG[676], string[150];
            format(string, sizeof(string), "{FFFFFF}1. %s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango1]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}2. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango2]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}3. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango3]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}4. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango4]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}5. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango5]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}6. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango6]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}7. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango7]);
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}8. %s\n",BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango8]);
            strcat(DIALOG, string);
            return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Rangos de la banda",DIALOG, "Cambiar", "Volver");
        }
        case CHANGE_PROP_RANK:
        {
            new dialog[] = "{FFFFFF}- Ajustar permiso de invitaciones\n{FFFFFF}- Ajustar permiso de expulsiones\n{FFFFFF}- Ajustar permiso de ascender/descender";
            return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Administra tu banda", dialog, "Cambiar", "Volver");
        }
        case CREW_VIEW_MEMBERS:
        {
            new Query[150],dialog[115 * 25 + 1], line_str[115],rango,name[24],online,time;
            mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Faccion`='%d'",PlayerInfo[playerid][pFaccion]);
            mysql_query(handle_db, Query, true);
            dialog = "Nombre\tRango\tÚlt. conexión\n";
            for(new i = 0; i < cache_num_rows(); i++)
            {
                cache_get_value_name(i, "Username", name);
                cache_get_value_name_int(i, "Rango", rango);
                cache_get_value_name_int(i, "Online",online);
                cache_get_value_name_int(i, "TiempoOffline", time);
                if(online == 0) format(line_str, sizeof line_str, "%s\t%s\t%s\n", name, RangoBanda(PlayerInfo[playerid][pFaccion], rango),FormatTimeleft(gettime() - time));
                else format(line_str, sizeof line_str, "%s\t%s\t{0CFF00}Conectado{FFFFFF}\n", name, RangoBanda(PlayerInfo[playerid][pFaccion], rango));
                strcat(dialog, line_str);
            }
            if(PlayerInfo[playerid][pRango] == 8) return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Bandas: Miembros", dialog, "Aceptar", "Volver");
            else return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Bandas: Miembros", dialog, "Aceptar", "");
        }
        case CREW_RANK_INV:
        {
            new DIALOG[676], string[130];
            strcat(DIALOG, "Rango\tEstado actual\n");
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango1], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango2], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango3], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango4], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango5], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango6], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango7], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_INV][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            return ShowPlayerDialog(playerid, CREW_RANK_INV, DIALOG_STYLE_TABLIST_HEADERS, "Configuración de invitaciones", DIALOG, "Cambiar", "Volver");
        }
        case CREW_RANK_EXP:
        {
            new DIALOG[676], string[130];
            strcat(DIALOG, "Rango\tEstado actual\n");
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango1], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango2], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango3], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango4], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango5], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango6], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango7], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EXP][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            return ShowPlayerDialog(playerid, CREW_RANK_EXP, DIALOG_STYLE_TABLIST_HEADERS, "Configuración de expulsiones", DIALOG, "Cambiar", "Volver");
        }
        case CREW_RANK_EDI:
        {
            new DIALOG[676], string[130];
            strcat(DIALOG, "Rango\tEstado actual\n");
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango1], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango2], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango3], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango4], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango5], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango6], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PlayerInfo[playerid][pFaccion] ][bRango7], (BandasInfo[ PlayerInfo[playerid][pFaccion] ][RANK_EDIT][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
            strcat(DIALOG, string);
            return ShowPlayerDialog(playerid, CREW_RANK_EDI, DIALOG_STYLE_TABLIST_HEADERS, "Configuración de ascenso u descenso", DIALOG, "Cambiar", "Volver");
        }
		case CREW_DELETE:
		{
			new Query[190], affected_members, crew_territories, dialog[450];
		    if(PlayerInfo[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Faccion`='%d';", PlayerInfo[playerid][pFaccion]);
			mysql_query(handle_db, Query, true);
			affected_members = cache_num_rows();
            mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `territorios` WHERE `Z_Activa` = '1' AND `Banda`='%d';", PlayerInfo[playerid][pFaccion]);
            mysql_query(handle_db, Query, true);
   			crew_territories = cache_num_rows();
			format(dialog, sizeof dialog,"Banda: %s\nMiembros: %d\nTerritorios: %d\n\n¿De verdad quieres borrar la banda?",BandasInfo[ PlayerInfo[playerid][pFaccion] ][BNombre], affected_members, crew_territories);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Si", "Volver");
		}
        case CREW_MODIFY_COLOR: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Volver");
        case DIALOG_ACENTO:
        {
            new dialog[40 * 30 + 1], line_str[300];
            for(new i = 0; i != MAX_LISTITEMS; i++ ) PlayerTemp[playerid][p_PLAYER_LISTITEM][i] = -1;
            for(new i = 0; i < 30; i++)
            {
                if(PlayerInfo[playerid][pAcento] == i) format(line_str, sizeof line_str, "{dbed15}%d. %s\n", i, GetNameAcento(i));
                else format(line_str, sizeof line_str, "{dbed15}%d. %s\n", i, GetNameAcento(i));
                strcat(dialog, line_str);
                PlayerTemp[playerid][p_PLAYER_LISTITEM][i] = i;
            }
            ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona tu nuevo acento", dialog, "Seleccionar", "Salir");
        }
    }
    return 1;
}

public DarSlap(playerid)
{
    new szMessage[128];
    format(szMessage, sizeof(szMessage), "Jugador {00CC00}%s{FFFFFF} después del slap: {00CC00}%f", PlayerInfo[Slapeo[playerid]][Nickname], PlayerInfo[Slapeo[playerid]][j_HEALTH]);
    SendClientMessage(playerid, -1, szMessage);
    return 1;
}
public DanoFabrica(playerid)
{
	new Float:Vida;
	GetPlayerHealth(playerid,Vida);
	SetPlayerHealthEx(playerid,Vida-10);
	return 1;
}
public RendirseUsuario(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,30,-30.6934,-90.8069,1003.5469))
    {
        SetPlayerCameraPos(playerid, -22.6988, -88.2985, 1006.2784);
        SetPlayerCameraLookAt(playerid, -23.5363, -88.8423, 1005.8837);
    }
    if(IsPlayerInRangeOfPoint(playerid,30,-26.1474,-187.0378,1007.7300))
    {
        SetPlayerCameraPos(playerid, -23.0768, -86.9407, 1006.6096);
        SetPlayerCameraLookAt(playerid, -23.7740, -87.6557, 1006.1846);
    }
    CongelarPlayerID(playerid);
    new Float:x1,Float:y1,Float:z1,Float:a1;
    GetPlayerArrestedPositions(playerid,x1,y1,z1,a1);
    NoTeleportHack(playerid);
    SetPosEntrar(playerid,x1,y1,z1,a1,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid));
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    GameTextForPlayer(playerid,"~r~ARRESTADO",6500,3);
}
public MatarPolicia(actor)
{
    if(IsValidDynamicActor(actor)) DestroyDynamicActor(actor);
    return 1;
}
stock Actualizar(playerid)
{
    CalcularNivel(playerid);
   	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Experiencia], PlayerInfo[playerid][ExperienciaTotal]);
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][Experiencia], PlayerInfo[playerid][pExperiencia]);
	UpdatePlayerProgressBar(playerid,Progressbar[playerid][Experiencia]);
    SetPlayerScore(playerid, PlayerInfo[playerid][pNivel]);
    SetPlayerStats(playerid);
}
AnimacionVenta(playerid)
{
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		new actor = RoboTiendas[i][Actor];
		if(IsValidDynamicActor(actor))
		{
			new Float:x,Float:y,Float:z;
			GetDynamicActorPos(actor, x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,10.0,x,y,z))
			{
				if(GetDynamicActorVirtualWorld(actor) == GetPlayerVirtualWorld(playerid))
				{
					if(RoboTiendas[i][TiendaRobada] == 0) ApplyDynamicActorAnimation(actor,"BAR","Barserve_give", 4.000000, 0, 0, 0, 1, 0);
				}
			}
		}
	}
}
stock CanDoAnims(playerid)
{
    if(PlayerInfo[playerid][pCama] > 0) return 1;
    if(rocajugador[playerid] == 897) return 1;
    if(Forzando[playerid] == 1) return 1;
    if(FabricaMedica[playerid] == 1) return 1;
    if(EnClub[playerid] > 0) return 1;
    if(Muriendo[playerid] == 1) return 1;
    if((Tiempos[playerid][Consumible] - gettime()) > 0) return 1;
    if(PlayerInfo[playerid][Agonizando] != 0) return 1;
    if(Esposando[playerid] == 2) return 1;
    if(recogiendo[playerid] > 0) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(GetPVarInt(playerid,"IsFrozen") == 0) return 1;
    return 0;
}

stock ActualizarDineroPared(f)
{
    new moneytext[200];
	format(moneytext,sizeof(moneytext),"Dinero guardado:\n $%s", Numeros(Fabricas[f][pCantidadDinero]));
	if(IsValidDynamicObject(Fabricas[f][tMoney])) SetDynamicObjectMaterialText(Fabricas[f][tMoney], 0, moneytext, 90, "Comic Sans MS", 26, 0, 0xFFFFFFFF, 0, 1);
}

stock TieneFabrica(bandaid)
{
    for(new i =0; i < MAX_FABRICAS; i++)
    {
        if(Fabricas[i][pBanda] == bandaid) return 1;
    }
	return 0;
}

stock ActualizarCantidadChalecos(f)
{
	new stringas[360];
	format(stringas,sizeof(stringas),"{3399FF}Chalecos antibalas{FFFFFF}\nCantidad disponible: {00CC00}%s{FFFFFF}\n\nPulsa {DBED16}'H'{FFFFFF} para equipar uno.",Numeros(Fabricas[f][pChalecos]));
    UpdateDynamic3DTextLabelText(Fabricas[f][pLabel5], COLOR_ROJO, stringas);
}

stock E_Cocinero(var,actor)
{
	new str[52];
	switch(var)
	{
	    case 0: str = " {3399FF}falta trabajador{FFFFFF}";
		case 1: str = " {00CC00}procesando{FFFFFF}",ApplyDynamicActorAnimation(actor,"SMOKING", "M_smkstnd_loop", 4.1, 1, 0, 0, 1, 0);
		case 2: str = " {DBED16}faltan materiales{FFFFFF}",ApplyDynamicActorAnimation(actor, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		case 3: str = " {EB0000}asesinado{FFFFFF}",ApplyDynamicActorAnimation(actor, "WUZI","CS_Dead_Guy", 4.1, 1, 0, 0, 1, 0);
		case 4: str = " {3D83CE}esperando recolección{FFFFFF}",ApplyDynamicActorAnimation(actor, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	}
	return str;
}
stock EstadoHo(var)
{
	new str[200];
	switch(var) { case 0: str = "{FFFFFF}Pulsa {00CC00}'Y' {FFFFFF}para encender."; case 1: str = "{FFFFFF}Pulsa {EB0000}'Y' {FFFFFF}para apagar."; }
	return str;
}
stock EstadoCristal(var)
{
	new str[200];
	switch(var) { case 0: str = ""; case 1: str = "\nPulsa {3d83ce}'H'{FFFFFF} para recolectar el cristal"; }
	return str;
}
stock EstadoH(var)
{
	new str[32];
	switch(var) { case 0: str = "{EB0000}apagada"; case 1: str = "{00CC00}encendida"; }
	return str;
}
stock EnRecorrido(playerid)
{
	for(new i = 0; i < sizeof(FabricasRecos);i++)
	if(IsPlayerInRangeOfPoint(playerid,5.0, FabricasRecos[i][0], FabricasRecos[i][1], FabricasRecos[i][2])) return 1;
	return 0;
}
AbrirVehiculo(playerid)
{
	new Float:Pos[3];
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(!IsValidVehicle(autos[i][playerid])) continue;
		GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
		{
			if(VehicleInfo[playerid][i][vTraba] == 0) return SendClientMessage(playerid, COLOR_BLANCO, "Para poder abrir el vehículo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
			if(bloqueado[autos[i][playerid]] == 1)
			{
				AccionesRol(playerid,"destrabó las puertas de su vehículo.", 20);
				GameTextForPlayer(playerid, "~g~Abierto", 1000, 5);
				SendClientMessage(playerid,-1,"{FFFFFF}Usa {DBED15}/cerrar{FFFFFF} o '{DBED15}ESPACIO{FFFFFF} + {DBED15}Y{FFFFFF}' para trabar las puertas de tu vehículo.");
				PlayerPlaySoundEx(playerid, 1145, Pos[0], Pos[1], Pos[2]);
				bloqueado[autos[i][playerid]] = 0;
				VehicleInfo[playerid][i][vSeguro] = 0;
			}
			else
			{
				AccionesRol(playerid,"trabó las puertas de su vehículo.", 20);
				GameTextForPlayer(playerid, "~r~Cerrado", 1000, 5);
				SendClientMessage(playerid,-1,"{FFFFFF}Usa {DBED15}/abrir{FFFFFF} o '{DBED15}ESPACIO{FFFFFF} + {DBED15}Y{FFFFFF}' para destrabar las puertas de tu vehículo.");
				PlayerPlaySoundEx(playerid, 1145, Pos[0], Pos[1], Pos[2]);
				bloqueado[autos[i][playerid]] = 1;
				VehicleInfo[playerid][i][vSeguro] = 1;
			}
			GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, bloqueado[autos[i][playerid]], bonnet, boot, objective);
		}
	}
	return 1;
}
AbrirBaul(playerid)
{
	new Float:Pos[3];
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(!IsValidVehicle(autos[i][playerid])) continue;
		GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
		{
			switch(Baul[autos[i][playerid]])
			{
				case 0: Baul[autos[i][playerid]] = 1,AccionesRol(playerid,"abre el maletero de su vehículo.", 20),GameTextForPlayer(playerid, "Maletero ~g~Abierto", 1000, 5);
				case 1: Baul[autos[i][playerid]] = 0,AccionesRol(playerid,"cierra el maletero de su vehículo.", 20),GameTextForPlayer(playerid, "Maletero ~r~Cerrado", 1000, 5);
			}
			GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, Baul[autos[i][playerid]], objective);
		}
	}
	return 1;
}
GetMedicalWorking()
{
    new count = 0;
    foreach(new i : Player) { if(JugadorLogeado[i] > 0) { if(RopaMedi[i] == 1) count ++; } }
    return count;
}
GetTerritorios(banda)
{
	new count;
	for(new i = 0; i < MAX_TERRITORIOS; i++) { if(TerritorioInfo[i][Territorio_Valido] && TerritorioInfo[i][Territorio_BandaID] == banda) count ++; }
	return count;
}
stock QuitarSombreroH(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(PuestoUnityTiene[playerid][0] == 1) { PuestoUnity[0] = 0; E_Halloween[sombreros][0] = CreateDynamicObject(19528, 1700.06006, -1871.18872, 13.39730,   4.00000, -127.00000, 0.00000); }  //puesto unity arriba
    if(PuestoUnityTiene[playerid][1] == 1) { PuestoUnity[1] = 0; E_Halloween[sombreros][1] = CreateDynamicObject(19528, 1700.06006, -1871.18872, 14.15730,   4.00000, -127.00000, 0.00000); }
    if(PuestoUnityTiene[playerid][2] == 1) { PuestoUnity[2] = 0; E_Halloween[sombreros][2] = CreateDynamicObject(19528, 1700.58008, -1871.16870, 13.81730,   4.00000, -47.00000, 0.00000); }
    if(PuestoUnityTiene[playerid][3] == 1) { PuestoUnity[3] = 0; E_Halloween[sombreros][3] = CreateDynamicObject(19528, 1700.58008, -1871.16870, 13.07730,   4.00000, -47.00000, 0.00000); }
    if(PuestoUnityxTiene[playerid][0] == 1) { PuestoUnityx[0] = 0; E_Halloween[sombreros][4] = CreateDynamicObject(19528, 1689.25574, -1974.74915, 9.41220,   4.00000, -127.00000, 0.00000); } //puesto unity abajo
    if(PuestoUnityxTiene[playerid][1] == 1) { PuestoUnityx[1] = 0; E_Halloween[sombreros][5] = CreateDynamicObject(19528, 1689.25574, -1974.74915, 8.65220,   4.00000, -127.00000, 0.00000); }
    if(PuestoUnityxTiene[playerid][2] == 1) { PuestoUnityx[2] = 0; E_Halloween[sombreros][6] = CreateDynamicObject(19528, 1689.77576, -1974.72913, 9.07220,   4.00000, -47.00000, 0.00000); }
    if(PuestoUnityxTiene[playerid][3] == 1) { PuestoUnityx[3] = 0; E_Halloween[sombreros][7] = CreateDynamicObject(19528, 1689.77576, -1974.72913, 8.33220,   4.00000, -47.00000, 0.00000); }
    if(PuestoEstMuniTiene[playerid][0] == 1) { PuestoEstMuni[0] = 0; E_Halloween[sombreros][8] = CreateDynamicObject(19528, 151.84090, -288.70340, 2.16560,   4.00000, -127.00000, 0.00000); } //PUESTO ESTACIONAMIENTO MUNICIPAL
    if(PuestoEstMuniTiene[playerid][1] == 1) { PuestoEstMuni[1] = 0; E_Halloween[sombreros][9] = CreateDynamicObject(19528, 151.84090, -288.70340, 1.40560,   4.00000, -127.00000, 0.00000); }
    if(PuestoEstMuniTiene[playerid][2] == 1) { PuestoEstMuni[2] = 0; E_Halloween[sombreros][10] = CreateDynamicObject(19528, 152.36090, -288.68341, 1.83470,   4.00000, -47.00000, 0.00000); }
    if(PuestoEstMuniTiene[playerid][3] == 1) { PuestoEstMuni[3] = 0; E_Halloween[sombreros][11] = CreateDynamicObject(19528, 152.36090, -288.68341, 1.08560,   4.00000, -47.00000, 0.00000); }
    if(PuestoAGTiene[playerid][0] == 1) { PuestoAG[0] = 0; E_Halloween[sombreros][12] = CreateDynamicObject(19528, 2023.01196, -1781.04272, 13.05440,   4.00000, -47.00000, 0.00000); } //PUESTO DELANTE DE LA PIZZERIA DE LS - GANTON
    if(PuestoAGTiene[playerid][1] == 1) { PuestoAG[1] = 0; E_Halloween[sombreros][13] = CreateDynamicObject(19528, 2023.01196, -1781.04272, 13.79440,   4.00000, -47.00000, 0.00000); }
    if(PuestoAGTiene[playerid][2] == 1) { PuestoAG[2] = 0; E_Halloween[sombreros][14] = CreateDynamicObject(19528, 2022.49194, -1781.06274, 13.37440,   4.00000, -127.00000, 0.00000); }
    if(PuestoAGTiene[playerid][3] == 1) { PuestoAG[3] = 0; E_Halloween[sombreros][15] = CreateDynamicObject(19528, 2022.49194, -1781.06274, 14.13440,   4.00000, -127.00000, 0.00000); }
    if(PuestoPGTiene[playerid][0] == 1) { PuestoPG[0] = 0; E_Halloween[sombreros][16] = CreateDynamicObject(19528, 2104.33765, -1940.98132, 13.05440,   4.00000, -47.00000, 0.00000); } //PUESTO ATRAS DE LA PIZZERIA GANTON
    if(PuestoPGTiene[playerid][1] == 1) { PuestoPG[1] = 0; E_Halloween[sombreros][17] = CreateDynamicObject(19528, 2104.33765, -1940.98132, 13.79440,   4.00000, -47.00000, 0.00000); }
    if(PuestoPGTiene[playerid][2] == 1) { PuestoPG[2] = 0; E_Halloween[sombreros][18] = CreateDynamicObject(19528, 2103.81787, -1941.00134, 13.37440,   4.00000, -127.00000, 0.00000); }
    if(PuestoPGTiene[playerid][3] == 1) { PuestoPG[3] = 0; E_Halloween[sombreros][19] = CreateDynamicObject(19528, 2103.81787, -1941.00134, 14.13440,   4.00000, -127.00000, 0.00000); }
    if(PuestoColinasTiene[playerid][0] == 1) { PuestoColinas[0] = 0; E_Halloween[sombreros][20] = CreateDynamicObject(19528, 2182.14380, -1344.85938, 24.57190,   4.00000, -127.00000, 0.00000); } //PUESTO POR COLINAS
    if(PuestoColinasTiene[playerid][1] == 1) { PuestoColinas[1] = 0; E_Halloween[sombreros][21] = CreateDynamicObject(19528, 2182.14380, -1344.85938, 23.81190,   4.00000, -127.00000, 0.00000); }
    if(PuestoColinasTiene[playerid][2] == 1) { PuestoColinas[2] = 0; E_Halloween[sombreros][22] = CreateDynamicObject(19528, 2182.66357, -1344.83936, 24.23190,   4.00000, -47.00000, 0.00000); }
    if(PuestoColinasTiene[playerid][3] == 1) { PuestoColinas[3] = 0; E_Halloween[sombreros][23] = CreateDynamicObject(19528, 2182.66357, -1344.83936, 23.49190,   4.00000, -47.00000, 0.00000); }
    if(PuestoCamioneroTiene[playerid][0] == 1) { PuestoCamionero[0] = 0; E_Halloween[sombreros][24] = CreateDynamicObject(19528, -1717.87402, -41.27636, 3.06317,   0.00000, -47.00000, 0.00000); } //PUESTO CAMIONEROS
    if(PuestoCamioneroTiene[playerid][1] == 1) { PuestoCamionero[1] = 0; E_Halloween[sombreros][25] = CreateDynamicObject(19528, -1717.87402, -41.27636, 3.76617,   0.00000, -47.00000, 0.00000); }
    if(PuestoCamioneroTiene[playerid][2] == 1) { PuestoCamionero[2] = 0; E_Halloween[sombreros][26] = CreateDynamicObject(19528, -1718.40002, -41.27060, 4.12820,   0.00000, -127.00000, 0.00000); }
    if(PuestoCamioneroTiene[playerid][3] == 1) { PuestoCamionero[3] = 0; E_Halloween[sombreros][27] = CreateDynamicObject(19528, -1718.40002, -41.27060, 3.38120,   0.00000, -127.00000, 0.00000); }
    if(GorrosSFBridgeTiene[playerid][0] == 1) { GorrosSFBridge[0] = 0; E_Halloween[sombreros][28] = CreateDynamicObject(19528, -2675.27832, 1372.14355, 6.59570,   0.00000, -47.00000, 0.00000); } //PUESTO PUENTE A BAYSIDE DEBAJO
    if(GorrosSFBridgeTiene[playerid][1] == 1) { GorrosSFBridge[1] = 0; E_Halloween[sombreros][29] = CreateDynamicObject(19528, -2675.27832, 1372.14355, 7.30174,   0.00000, -47.00000, 0.00000); }
    if(GorrosSFBridgeTiene[playerid][2] == 1) { GorrosSFBridge[2] = 0; E_Halloween[sombreros][30] = CreateDynamicObject(19528, -2675.79858, 1372.14355, 7.68170,   0.00000, -127.00000, 0.00000); }
    if(GorrosSFBridgeTiene[playerid][3] == 1) { GorrosSFBridge[3] = 0; E_Halloween[sombreros][31] = CreateDynamicObject(19528, -2675.79858, 1372.14355, 6.93570,   0.00000, -127.00000, 0.00000); }
    if(PuestoMountTiene[playerid][0] == 1) { PuestoMount[0] = 0; E_Halloween[sombreros][32] = CreateDynamicObject(19528, 2352.00879, -645.05890, 127.59730,   4.00000, -47.00000, 0.00000); } //PUESTO MONTAÑA LS
    if(PuestoMountTiene[playerid][1] == 1) { PuestoMount[1] = 0; E_Halloween[sombreros][33] = CreateDynamicObject(19528, 2352.00879, -645.05890, 128.33730,   4.00000, -47.00000, 0.00000); }
    if(PuestoMountTiene[playerid][2] == 1) { PuestoMount[2] = 0; E_Halloween[sombreros][34] = CreateDynamicObject(19528, 2351.48901, -645.07886, 127.91730,   4.00000, -127.00000, 0.00000); }
    if(PuestoMountTiene[playerid][3] == 1) { PuestoMount[3] = 0; E_Halloween[sombreros][35] = CreateDynamicObject(19528, 2351.48901, -645.07886, 128.67729,   4.00000, -127.00000, 0.00000); }
    if(GorrosBridgeTiene[playerid][0] == 1) { GorrosBridge[0] = 0; E_Halloween[sombreros][36] = CreateDynamicObject(19528, -2548.52100, 1213.80835, 36.96060,   0.00000, -45.00000, 0.00000); } //PUESTO PUENTE A BAYSIDE LEJOS
    if(GorrosBridgeTiene[playerid][1] == 1) { GorrosBridge[1] = 0; E_Halloween[sombreros][37] = CreateDynamicObject(19528, -2548.52100, 1213.80835, 37.63890,   0.00000, -45.00000, 359.79901); }
    if(GorrosBridgeTiene[playerid][2] == 1) { GorrosBridge[2] = 0; E_Halloween[sombreros][38] = CreateDynamicObject(19528, -2548.98096, 1213.80835, 37.27596,   0.00000, -135.00000, 0.00000); }
    if(GorrosBridgeTiene[playerid][3] == 1) { GorrosBridge[3] = 0; E_Halloween[sombreros][39] = CreateDynamicObject(19528, -2548.98096, 1213.80835, 37.98097,   0.00000, -135.00000, 0.00000); }
    if(PuestoAATiene[playerid][0] == 1) { PuestoAA[0] = 0; E_Halloween[sombreros][40] = CreateDynamicObject(19528, 418.15610, 2543.38354, 16.66830,   4.00000, -47.00000, 0.00000); } //PUESTO AEREOPUERTO ABANDONADO
    if(PuestoAATiene[playerid][1] == 1) { PuestoAA[1] = 0; E_Halloween[sombreros][41] = CreateDynamicObject(19528, 418.15610, 2543.38354, 15.92830,   4.00000, -47.00000, 0.00000); }
    if(PuestoAATiene[playerid][2] == 1) { PuestoAA[2] = 0; E_Halloween[sombreros][42] = CreateDynamicObject(19528, 417.63608, 2543.36353, 16.24830,   4.00000, -127.00000, 0.00000); }
    if(PuestoAATiene[playerid][3] == 1) { PuestoAA[3] = 0; E_Halloween[sombreros][43] = CreateDynamicObject(19528, 417.63608, 2543.36353, 17.00830,   4.00000, -127.00000, 0.00000); }
    if(PuestoTransTiene[playerid][0] == 1) { PuestoTrans[0] = 0; E_Halloween[sombreros][44] = CreateDynamicObject(19528, 1031.46375, 2096.26099, 10.32780,   4.00000, -47.00000, 0.00000); } //PUESTO ENTREGA LV TRANSPORTISTA
    if(PuestoTransTiene[playerid][1] == 1) { PuestoTrans[1] = 0; E_Halloween[sombreros][45] = CreateDynamicObject(19528, 1031.46375, 2096.26099, 11.06780,   4.00000, -47.00000, 0.00000); }
    if(PuestoTransTiene[playerid][2] == 1) { PuestoTrans[2] = 0; E_Halloween[sombreros][46] = CreateDynamicObject(19528, 1030.94373, 2096.24097, 10.64780,   4.00000, -127.00000, 0.00000); }
    if(PuestoTransTiene[playerid][3] == 1) { PuestoTrans[3] = 0; E_Halloween[sombreros][47] = CreateDynamicObject(19528, 1030.94373, 2096.24097, 11.40780,   4.00000, -127.00000, 0.00000); }
    if(PuestoCBTiene[playerid][0] == 1) { PuestoCB[0] = 0; E_Halloween[sombreros][48] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.16910,   4.00000, -127.00000, 0.00000); } //PUESTO CLUCKIN BELL SF
    if(PuestoTransTiene[playerid][1] == 1) { PuestoCB[1] = 0; E_Halloween[sombreros][49] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.92910,   4.00000, -127.00000, 0.00000); }
    if(PuestoCBTiene[playerid][2] == 1) { PuestoCB[2] = 0; E_Halloween[sombreros][50] = CreateDynamicObject(19528, -2673.87793, 228.89400, 3.84910,   4.00000, -47.00000, 0.00000); }
    if(PuestoCBTiene[playerid][3] == 1) { PuestoCB[3] = 0; E_Halloween[sombreros][51] = CreateDynamicObject(19528, -2673.87793, 228.89400, 4.58910,   4.00000, -47.00000, 0.00000); }
    if(PuestoAESFTiene[playerid][0] == 1) { PuestoAESF[0] = 0; E_Halloween[sombreros][52] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.16910,   4.00000, -127.00000, 0.00000); } //PUESTO AEREOPUERTO SAN FIERRO PARKING
    if(PuestoAESFTiene[playerid][1] == 1) { PuestoAESF[1] = 0; E_Halloween[sombreros][53] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.92910,   4.00000, -127.00000, 0.00000); }
    if(PuestoAESFTiene[playerid][2] == 1) { PuestoAESF[2] = 0; E_Halloween[sombreros][54] = CreateDynamicObject(19528, -2673.87793, 228.89400, 3.84910,   4.00000, -47.00000, 0.00000); }
    if(PuestoAESFTiene[playerid][3] == 1) { PuestoAESF[3] = 0; E_Halloween[sombreros][55] = CreateDynamicObject(19528, -2673.87793, 228.89400, 4.58910,   4.00000, -47.00000, 0.00000); }
    if(PuestoBaysideTiene[playerid][0] == 1) { PuestoBayside[0] = 0; E_Halloween[sombreros][56] = CreateDynamicObject(19528, -2491.98071, 2356.53613, 10.86170,   4.00000, -127.00000, 0.00000); }  //PUESTO PuestoBayside
    if(PuestoBaysideTiene[playerid][1] == 1) { PuestoBayside[1] = 0; E_Halloween[sombreros][57] = CreateDynamicObject(19528, -2491.98071, 2356.53613, 10.10170,   4.00000, -127.00000, 0.00000); }
    if(PuestoBaysideTiene[playerid][2] == 1) { PuestoBayside[2] = 0; E_Halloween[sombreros][58] = CreateDynamicObject(19528, -2491.46094, 2356.55615, 9.78170,   4.00000, -47.00000, 0.00000); }
    if(PuestoBaysideTiene[playerid][3] == 1) { PuestoBayside[3] = 0; E_Halloween[sombreros][59] = CreateDynamicObject(19528, -2491.46094, 2356.55615, 10.52170,   4.00000, -47.00000, 0.00000); }
    if(PuestoWeelsTiene[playerid][0] == 1) { PuestoWeels[0] = 0; E_Halloween[sombreros][60] = CreateDynamicObject(19528, -2751.26343, 196.60699, 6.61540,   4.00000, -47.00000, 0.00000); }  //PUESTO TUNING SF WEELS
    if(PuestoWeelsTiene[playerid][1] == 1) { PuestoWeels[1] = 0; E_Halloween[sombreros][61] = CreateDynamicObject(19528, -2751.26343, 196.60699, 7.35540,   4.00000, -47.00000, 0.00000); }
    if(PuestoBaysideTiene[playerid][2] == 1) { PuestoWeels[2] = 0; E_Halloween[sombreros][62] = CreateDynamicObject(19528, -2751.78320, 196.58699, 6.93540,   4.00000, -127.00000, 0.00000); }
    if(PuestoBaysideTiene[playerid][3] == 1) { PuestoWeels[3] = 0; E_Halloween[sombreros][63] = CreateDynamicObject(19528, -2751.78320, 196.58699, 7.69540,   4.00000, -127.00000, 0.00000); }
    if(PuestoCNNTiene[playerid][0] == 1) { PuestoCNN[0] = 0; E_Halloween[sombreros][64] = CreateDynamicObject(19528, -2491.93896, -718.41589, 139.90779,   4.00000, -127.00000, 0.00000); }  //PUESTO CNN SF
    if(PuestoCNNTiene[playerid][1] == 1) { PuestoCNN[1] = 0; E_Halloween[sombreros][65] = CreateDynamicObject(19528, -2491.41919, -718.39594, 139.53987,   4.00000, -47.00000, 0.00000); }
    if(PuestoCNNTiene[playerid][2] == 1) { PuestoCNN[2] = 0; E_Halloween[sombreros][66] = CreateDynamicObject(19528, -2491.93896, -718.41589, 139.14780,   4.00000, -127.00000, 0.00000); }
    if(PuestoCNNTiene[playerid][3] == 1) { PuestoCNN[3] = 0; E_Halloween[sombreros][67] = CreateDynamicObject(19528, -2491.41919, -718.39594, 138.82780,   4.00000, -47.00000, 0.00000); }
    if(PuestoQuebradoTiene[playerid][0] == 1) { PuestoQuebrado[0] = 0; E_Halloween[sombreros][68] = CreateDynamicObject(19528, -1318.51648, 2508.76489, 86.86950,   4.00000, -127.00000, 0.00000); } //PUESTO PuestoQuebrado MONTAÑA
    if(PuestoQuebradoTiene[playerid][1] == 1) { PuestoQuebrado[1] = 0; E_Halloween[sombreros][69] = CreateDynamicObject(19528, -1318.51648, 2508.76489, 87.62950,   4.00000, -127.00000, 0.00000); }
    if(PuestoQuebradoTiene[playerid][2] == 1) { PuestoQuebrado[2] = 0; E_Halloween[sombreros][70] = CreateDynamicObject(19528, -1317.99646, 2508.78491, 86.54950,   4.00000, -47.00000, 0.00000); }
    if(PuestoQuebradoTiene[playerid][3] == 1) { PuestoQuebrado[3] = 0; E_Halloween[sombreros][71] = CreateDynamicObject(19528, -1317.99646, 2508.78491, 87.28950,   4.00000, -47.00000, 0.00000); }
    if(PuestoEmeTiene[playerid][0] == 1) { PuestoEme[0] = 0; E_Halloween[sombreros][72] = CreateDynamicObject(19528, 2105.52930, 2204.11621, 10.32780,   4.00000, -47.00000, 0.00000); } //PUESTO emerald LV
    if(PuestoEmeTiene[playerid][1] == 1) { PuestoEme[1] = 0; E_Halloween[sombreros][73] = CreateDynamicObject(19528, 2105.52930, 2204.11621, 11.06780,   4.00000, -47.00000, 0.00000); }
    if(PuestoEmeTiene[playerid][2] == 1) { PuestoEme[2] = 0; E_Halloween[sombreros][74] = CreateDynamicObject(19528, 2105.00952, 2204.09619, 10.64780,   4.00000, -127.00000, 0.00000); }
    if(PuestoEmeTiene[playerid][3] == 1) { PuestoEme[3] = 0; E_Halloween[sombreros][75] = CreateDynamicObject(19528, 2105.00952, 2204.09619, 11.40780,   4.00000, -127.00000, 0.00000); }
    if(PuestoFaDoTiene[playerid][0] == 1) { PuestoFaDo[0] = 0; E_Halloween[sombreros][76] = CreateDynamicObject(19528, -2131.34888, 260.07220, 35.68670,   4.00000, -127.00000, 0.00000); } //PUESTO FABRICA DOHERTY
    if(PuestoFaDoTiene[playerid][1] == 1) { PuestoFaDo[1] = 0; E_Halloween[sombreros][77] = CreateDynamicObject(19528, -2131.34888, 260.07220, 36.44670,   4.00000, -127.00000, 0.00000); }
    if(PuestoFaDoTiene[playerid][2] == 1) { PuestoFaDo[2] = 0; E_Halloween[sombreros][78] = CreateDynamicObject(19528, -2130.82910, 260.09219, 35.36670,   4.00000, -47.00000, 0.00000); }
    if(PuestoFaDoTiene[playerid][3] == 1) { PuestoFaDo[3] = 0; E_Halloween[sombreros][79] = CreateDynamicObject(19528, -2130.82910, 260.09219, 36.10670,   4.00000, -47.00000, 0.00000); }
    if(PuestoC1Tiene[playerid][0] == 1) { PuestoC1[0] = 0; E_Halloween[sombreros][80] = CreateDynamicObject(19528, -2223.07666, -146.43221, 35.14780,   4.00000, -127.00000, 0.00000); } //PUESTO c1
    if(PuestoC1Tiene[playerid][1] == 1) { PuestoC1[1] = 0; E_Halloween[sombreros][81] = CreateDynamicObject(19528, -2223.07666, -146.43221, 35.90780,   4.00000, -127.00000, 0.00000); }
    if(PuestoC1Tiene[playerid][2] == 1) { PuestoC1[2] = 0; E_Halloween[sombreros][82] = CreateDynamicObject(19528, -2222.55688, -146.41220, 34.82780,   4.00000, -47.00000, 0.00000); }
    if(PuestoC1Tiene[playerid][3] == 1) { PuestoC1[3] = 0; E_Halloween[sombreros][83] = CreateDynamicObject(19528, -2222.55688, -146.41220, 35.56780,   4.00000, -47.00000, 0.00000); }
    if(PuestoLeSFTiene[playerid][0] == 1) { PuestoLeSF[0] = 0; E_Halloween[sombreros][84] = CreateDynamicObject(19528, -1848.92102, 1280.15979, 22.07000,   4.00000, -47.00000, 0.00000); } //PUESTO LEGOS SF
    if(PuestoLeSFTiene[playerid][1] == 1) { PuestoLeSF[1] = 0; E_Halloween[sombreros][85] = CreateDynamicObject(19528, -1848.92102, 1280.15979, 22.81000,   4.00000, -47.00000, 0.00000); }
    if(PuestoLeSFTiene[playerid][2] == 1) { PuestoLeSF[2] = 0; E_Halloween[sombreros][86] = CreateDynamicObject(19528, -1849.44104, 1280.13977, 22.39000,   4.00000, -127.00000, 0.00000); }
    if(PuestoLeSFTiene[playerid][3] == 1) { PuestoLeSF[3] = 0; E_Halloween[sombreros][87] = CreateDynamicObject(19528, -1849.44104, 1280.13977, 23.15000,   4.00000, -127.00000, 0.00000); }
    if(PuestoEstaLVTiene[playerid][0] == 1) { PuestoEstaLV[0] = 0; E_Halloween[sombreros][88] = CreateDynamicObject(19528, 1096.65210, 1399.41675, 7.22030,   4.00000, -127.00000, 0.00000); } //PUESTO ESTADIO Lv
    if(PuestoEstaLVTiene[playerid][1] == 1) { PuestoEstaLV[1] = 0; E_Halloween[sombreros][89] = CreateDynamicObject(19528, 1096.65210, 1399.41675, 6.46030,   4.00000, -127.00000, 0.00000); }
    if(PuestoEstaLVTiene[playerid][2] == 1) { PuestoEstaLV[2] = 0; E_Halloween[sombreros][90] = CreateDynamicObject(19528, 1097.17212, 1399.43677, 6.88030,   4.00000, -47.00000, 0.00000); }
    if(PuestoEstaLVTiene[playerid][3] == 1) { PuestoEstaLV[3] = 0; E_Halloween[sombreros][91] = CreateDynamicObject(19528, 1097.17212, 1399.43677, 6.14030,   4.00000, -47.00000, 0.00000); }
    if(PuestoMarketTiene[playerid][0] == 1) { PuestoMarket[0] = 0; E_Halloween[sombreros][92] = CreateDynamicObject(19528, 961.43488, -1544.11218, 13.43140,   4.00000, -127.00000, 0.00000); } //PUESTO ESTADIO Lv
    if(PuestoEstaLVTiene[playerid][1] == 1) { PuestoMarket[1] = 0; E_Halloween[sombreros][93] = CreateDynamicObject(19528, 961.43488, -1544.11218, 14.19140,   4.00000, -127.00000, 0.00000); }
    if(PuestoEstaLVTiene[playerid][2] == 1) { PuestoEstaLV[2] = 0; E_Halloween[sombreros][94] = CreateDynamicObject(19528, 961.95490, -1544.09216, 13.11140,   4.00000, -47.00000, 0.00000); }
    if(PuestoMarketTiene[playerid][3] == 1) { PuestoMarket[3] = 0; E_Halloween[sombreros][95] = CreateDynamicObject(19528, 961.95490, -1544.09216, 13.85140,   4.00000, -47.00000, 0.00000); }
    if(PuestoSMBTiene[playerid][0] == 1) { PuestoSMB[0] = 0; E_Halloween[sombreros][96] = CreateDynamicObject(19528, 321.67239, -1756.69836, 5.09360,   4.00000, -127.00000, 0.00000); } //PUESTO SANTA MARIA BEACH
    if(PuestoSMBTiene[playerid][1] == 1) { PuestoSMB[1] = 0; E_Halloween[sombreros][97] = CreateDynamicObject(19528, 321.67239, -1756.69836, 4.33360,   4.00000, -127.00000, 0.00000); }
    if(PuestoSMBTiene[playerid][2] == 1) { PuestoSMB[2] = 0; E_Halloween[sombreros][98] = CreateDynamicObject(19528, 322.19241, -1756.67834, 4.75360,   4.00000, -47.00000, 0.00000); }
    if(PuestoSMBTiene[playerid][3] == 1) { PuestoSMB[3] = 0; E_Halloween[sombreros][99] = CreateDynamicObject(19528, 322.19241, -1756.67834, 4.01360,   4.00000, -47.00000, 0.00000); }
    if(PuestoMCTiene[playerid][0] == 1) { PuestoMC[0] = 0; E_Halloween[sombreros][100] = CreateDynamicObject(19528, -2817.55005, -1530.19592, 141.43129,   4.00000, -127.00000, 0.00000); } //PUESTO MONTE CHILLIAD
    if(PuestoMCTiene[playerid][1] == 1) { PuestoMC[1] = 0; E_Halloween[sombreros][101] = CreateDynamicObject(19528, -2817.55005, -1530.19592, 140.67130,   4.00000, -127.00000, 0.00000); }
    if(PuestoMCTiene[playerid][2] == 1) { PuestoMC[2] = 0; E_Halloween[sombreros][102] = CreateDynamicObject(19528, -2817.03027, -1530.17590, 141.09129,   4.00000, -47.00000, 0.00000); }
    if(PuestoMCTiene[playerid][3] == 1) { PuestoMC[3] = 0; E_Halloween[sombreros][103] = CreateDynamicObject(19528, -2817.03027, -1530.17590, 140.35130,   4.00000, -47.00000, 0.00000); }
    if(PuestoPPTiene[playerid][0] == 1) { PuestoPP[0] = 0; E_Halloween[sombreros][104] = CreateDynamicObject(19528, 2109.62354, 2736.95850, 10.64780,   4.00000, -127.00000, 0.00000); } //PUESTO PICKE PINE LAS VENTURAS
    if(PuestoPPTiene[playerid][1] == 1) { PuestoPP[1] = 0; E_Halloween[sombreros][105] = CreateDynamicObject(19528, 2109.62354, 2736.95850, 11.40780,   4.00000, -127.00000, 0.00000); }
    if(PuestoPPTiene[playerid][2] == 1) { PuestoPP[2] = 0; E_Halloween[sombreros][106] = CreateDynamicObject(19528, 2110.14331, 2736.97852, 10.32780,   4.00000, -47.00000, 0.00000); }
    if(PuestoPPTiene[playerid][3] == 1) { PuestoPP[3] = 0; E_Halloween[sombreros][107] = CreateDynamicObject(19528, 2110.14331, 2736.97852, 11.06780,   4.00000, -47.00000, 0.00000); }
    if(PuestoBasuTiene[playerid][0] == 1) { PuestoBasu[0] = 0; E_Halloween[sombreros][108] = CreateDynamicObject(19528, -53.87440, -1398.46875, 2.96140,   4.00000, -127.00000, 0.00000); } //PUESTO BASURERO
    if(PuestoBasuTiene[playerid][1] == 1) { PuestoBasu[1] = 0; E_Halloween[sombreros][109] = CreateDynamicObject(19528, -53.87440, -1398.46875, 2.20140,   4.00000, -127.00000, 0.00000); }
    if(PuestoBasuTiene[playerid][2] == 1) { PuestoBasu[2] = 0; E_Halloween[sombreros][110] = CreateDynamicObject(19528, -53.35440, -1398.44873, 2.62140,   4.00000, -47.00000, 0.00000); }
    if(PuestoBasuTiene[playerid][3] == 1) { PuestoBasu[3] = 0; E_Halloween[sombreros][111] = CreateDynamicObject(19528, -53.35440, -1398.44873, 1.88140,   4.00000, -47.00000, 0.00000); }
    if(PuestoJTTiene[playerid][0] == 1) { PuestoJT[0] = 0; E_Halloween[sombreros][112] = CreateDynamicObject(19528, 2621.71606, 2416.81836, 10.64780,   4.00000, -127.00000, 0.00000); } //PUESTO JuliusTursway Las venturas
    if(PuestoJTTiene[playerid][1] == 1) { PuestoJT[1] = 0; E_Halloween[sombreros][113] = CreateDynamicObject(19528, 2621.71606, 2416.81836, 11.40780,   4.00000, -127.00000, 0.00000); }
    if(PuestoJTTiene[playerid][2] == 1) { PuestoJT[2] = 0; E_Halloween[sombreros][114] = CreateDynamicObject(19528, 2622.23584, 2416.83838, 10.32780,   4.00000, -47.00000, 0.00000); }
    if(PuestoJTTiene[playerid][3] == 1) { PuestoJT[3] = 0; E_Halloween[sombreros][115] = CreateDynamicObject(19528, 2622.23584, 2416.83838, 11.06780,   4.00000, -47.00000, 0.00000); }
    if(PuestoElqTiene[playerid][0] == 1) { PuestoElq[0] = 0; E_Halloween[sombreros][116] = CreateDynamicObject(19528, -1479.92395, 2612.61963, 58.28880,   4.00000, -47.00000, 0.00000); } //PUESTO El quebrado abajo.
    if(PuestoElqTiene[playerid][1] == 1) { PuestoElq[1] = 0; E_Halloween[sombreros][117] = CreateDynamicObject(19528, -1479.92395, 2612.61963, 59.02880,   4.00000, -47.00000, 0.00000); }
    if(PuestoElqTiene[playerid][2] == 1) { PuestoElq[2] = 0; E_Halloween[sombreros][118] = CreateDynamicObject(19528, -1480.44397, 2612.59961, 58.60880,   4.00000, -127.00000, 0.00000); }
    if(PuestoElqTiene[playerid][3] == 1) { PuestoElq[3] = 0; E_Halloween[sombreros][119] = CreateDynamicObject(19528, -1480.44397, 2612.59961, 59.36880,   4.00000, -127.00000, 0.00000); }
    if(PuestoPayaTiene[playerid][0] == 1) { PuestoPaya[0] = 0; E_Halloween[sombreros][120] = CreateDynamicObject(19528, -280.61209, 2654.41797, 62.98410,   4.00000, -47.00000, 0.00000); } //PUESTO LAS PAYASADAS.
    if(PuestoPayaTiene[playerid][1] == 1) { PuestoPaya[1] = 0; E_Halloween[sombreros][121] = CreateDynamicObject(19528, -280.61209, 2654.41797, 62.24410,   4.00000, -47.00000, 0.00000); }
    if(PuestoPayaTiene[playerid][2] == 1) { PuestoPaya[2] = 0; E_Halloween[sombreros][122] = CreateDynamicObject(19528, -281.13211, 2654.39795, 63.32410,   4.00000, -127.00000, 0.00000); }
    if(PuestoPayaTiene[playerid][3] == 1) { PuestoPaya[3] = 0; E_Halloween[sombreros][123] = CreateDynamicObject(19528, -281.13211, 2654.39795, 62.56410,   4.00000, -127.00000, 0.00000); }
    if(PuestoLSFTiene[playerid][0] == 1) { PuestoLSF[0] = 0; E_Halloween[sombreros][124] = CreateDynamicObject(19528, -348.57159, -1035.08228, 58.82000,   4.00000, -47.00000, 0.00000); } //PUESTO GRANJA RUTA LS SF
    if(PuestoLSFTiene[playerid][1] == 1) { PuestoLSF[1] = 0; E_Halloween[sombreros][125] = CreateDynamicObject(19528, -348.57159, -1035.08228, 59.56000,   4.00000, -47.00000, 0.00000); }
    if(PuestoLSFTiene[playerid][2] == 1) { PuestoLSF[2] = 0; E_Halloween[sombreros][126] = CreateDynamicObject(19528, -349.09161, -1035.10229, 59.14000,   4.00000, -127.00000, 0.00000); }
    if(PuestoLSFTiene[playerid][3] == 1) { PuestoLSF[3] = 0; E_Halloween[sombreros][127] = CreateDynamicObject(19528, -349.09161, -1035.10229, 59.90000,   4.00000, -127.00000, 0.00000); }
    return LimpiarSombrero(playerid);
}
stock DarSombrero(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(TieneSombrero[playerid] == 1 || ContarPrendas(playerid) >= 4) return SendClientMessage(playerid,-1,"No puedes llevar un sombrero ahora mismo.");
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1700.2800, -1871.2286, 13.4173)) //puesto UNITY - verdes
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PlayerInfo[playerid][pNivel] > 1) return SendClientMessage(playerid,-1,"Los sombreros de este puesto son únicamente para turistas o nuevos residentes.");
        if(PuestoUnity[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][0]); comprarsombrero(playerid); PuestoUnity[0] = 1; PuestoUnityTiene[playerid][0] = 1; }
        else if(PuestoUnity[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][1]); comprarsombrero(playerid); PuestoUnity[1] = 1; PuestoUnityTiene[playerid][1] = 1; }
        else if(PuestoUnity[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][2]); comprarsombrero(playerid); PuestoUnity[2] = 1; PuestoUnityTiene[playerid][2] = 1; }
        else if(PuestoUnity[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][3]); comprarsombrero(playerid); PuestoUnity[3] = 1; PuestoUnityTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1689.4757, -1974.7891, 8.6722)) //puesto unity abajo
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoUnityx[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][4]); comprarsombrero(playerid); PuestoUnityx[0] = 1; PuestoUnityxTiene[playerid][0] = 1; }
        else if(PuestoUnityx[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][5]); comprarsombrero(playerid); PuestoUnityx[1] = 1; PuestoUnityxTiene[playerid][1] = 1; }
        else if(PuestoUnityx[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][6]); comprarsombrero(playerid); PuestoUnityx[2] = 1; PuestoUnityxTiene[playerid][2] = 1; }
        else if(PuestoUnityx[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][7]); comprarsombrero(playerid); PuestoUnityx[3] = 1; PuestoUnityxTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1718.1821, -41.3076, 3.4022)) //camionero
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoCamionero[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][24]); comprarsombrero(playerid); PuestoCamionero[0] = 1; PuestoCamioneroTiene[playerid][0] = 1; }
        else if(PuestoCamionero[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][25]); comprarsombrero(playerid); PuestoCamionero[1] = 1; PuestoCamioneroTiene[playerid][1] = 1; }
        else if(PuestoCamionero[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][26]); comprarsombrero(playerid); PuestoCamionero[2] = 1; PuestoCamioneroTiene[playerid][2] = 1; }
        else if(PuestoCamionero[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][27]); comprarsombrero(playerid); PuestoCamionero[3] = 1; PuestoCamioneroTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,152.0609, -288.7434, 1.4256)) //puesto estacionamiento municipal
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoEstMuni[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][8]); comprarsombrero(playerid); PuestoEstMuni[0] = 1; PuestoEstMuniTiene[playerid][0] = 1; }
        else if(PuestoEstMuni[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][9]); comprarsombrero(playerid); PuestoEstMuni[1] = 1; PuestoEstMuniTiene[playerid][1] = 1; }
        else if(PuestoEstMuni[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][10]); comprarsombrero(playerid); PuestoEstMuni[2] = 1; PuestoEstMuniTiene[playerid][2] = 1; }
        else if(PuestoEstMuni[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][11]); comprarsombrero(playerid); PuestoEstMuni[3] = 1; PuestoEstMuniTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2675.5508, 1372.1134, 6.9363)) //PUENTE A BAYSIDE ABAJO
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(GorrosSFBridge[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][28]); comprarsombrero(playerid); GorrosSFBridge[0] = 1; GorrosSFBridgeTiene[playerid][0] = 1; }
        else if(GorrosSFBridge[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][29]); comprarsombrero(playerid); GorrosSFBridge[1] = 1; GorrosSFBridgeTiene[playerid][1] = 1; }
        else if(GorrosSFBridge[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][30]); comprarsombrero(playerid); GorrosSFBridge[2] = 1; GorrosSFBridgeTiene[playerid][2] = 1; }
        else if(GorrosSFBridge[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][31]); comprarsombrero(playerid); GorrosSFBridge[3] = 1; GorrosSFBridgeTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2351.7090, -645.1189, 127.9373))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoMount[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][32]); comprarsombrero(playerid); PuestoMount[0] = 1; PuestoMountTiene[playerid][0] = 1; }
        else if(PuestoMount[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][33]); comprarsombrero(playerid); PuestoMount[1] = 1; PuestoMountTiene[playerid][1] = 1; }
        else if(PuestoMount[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][34]); comprarsombrero(playerid); PuestoMount[2] = 1; PuestoMountTiene[playerid][2] = 1; }
        else if(PuestoMount[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][35]); comprarsombrero(playerid); PuestoMount[3] = 1; PuestoMountTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2548.7896, 1213.7742, 37.2694)) //ARRIBA PUESTO BAYSIDE PUENTE
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(GorrosBridge[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][36]); comprarsombrero(playerid); GorrosBridge[0] = 1; GorrosBridgeTiene[playerid][0] = 1; }
        else if(GorrosBridge[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][37]); comprarsombrero(playerid); GorrosBridge[1] = 1; GorrosBridgeTiene[playerid][1] = 1; }
        else if(GorrosBridge[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][38]); comprarsombrero(playerid); GorrosBridge[2] = 1; GorrosBridgeTiene[playerid][2] = 1; }
        else if(GorrosBridge[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][39]); comprarsombrero(playerid); GorrosBridge[3] = 1; GorrosBridgeTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2674.1777, 228.8340, 4.1891))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoCB[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][48]); comprarsombrero(playerid); PuestoCB[0] = 1; PuestoCBTiene[playerid][0] = 1; }
        else if(PuestoCB[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][49]); comprarsombrero(playerid); PuestoCB[1] = 1; PuestoCBTiene[playerid][1] = 1; }
        else if(PuestoCB[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][50]); comprarsombrero(playerid); PuestoCB[2] = 1; PuestoCBTiene[playerid][2] = 1; }
        else if(PuestoCB[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][51]); comprarsombrero(playerid); PuestoCB[3] = 1; PuestoCBTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2751.5632, 196.5470, 6.9554))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoWeels[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][60]); comprarsombrero(playerid); PuestoWeels[0] = 1; PuestoWeelsTiene[playerid][0] = 1; }
        else if(PuestoWeels[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][61]); comprarsombrero(playerid); PuestoCB[1] = 1; PuestoWeelsTiene[playerid][1] = 1; }
        else if(PuestoWeels[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][62]); comprarsombrero(playerid); PuestoWeels[2] = 1; PuestoWeelsTiene[playerid][2] = 1; }
        else if(PuestoWeels[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][63]); comprarsombrero(playerid); PuestoWeels[3] = 1; PuestoWeelsTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2182.3638, -1344.8993, 23.8319))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoColinas[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][20]); comprarsombrero(playerid); PuestoColinas[0] = 1; PuestoColinasTiene[playerid][0] = 1; }
        else if(PuestoColinas[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][21]); comprarsombrero(playerid); PuestoColinas[1] = 1; PuestoColinasTiene[playerid][1] = 1; }
        else if(PuestoColinas[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][22]); comprarsombrero(playerid); PuestoColinas[2] = 1; PuestoColinasTiene[playerid][2] = 1; }
        else if(PuestoColinas[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][23]); comprarsombrero(playerid); PuestoColinas[3] = 1; PuestoColinasTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2491.7190, -718.4559, 139.1678))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoCNN[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][64]); comprarsombrero(playerid); PuestoCNN[0] = 1; PuestoCNNTiene[playerid][0] = 1; }
        else if(PuestoCNN[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][65]); comprarsombrero(playerid); PuestoCNN[1] = 1; PuestoCNNTiene[playerid][1] = 1; }
        else if(PuestoCNN[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][66]); comprarsombrero(playerid); PuestoCNN[2] = 1; PuestoCNNTiene[playerid][2] = 1; }
        else if(PuestoCNN[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][67]); comprarsombrero(playerid); PuestoCNN[3] = 1; PuestoCNNTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2491.7607, 2356.4961, 10.1217))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoBayside[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][56]); comprarsombrero(playerid); PuestoBayside[0] = 1; PuestoBaysideTiene[playerid][0] = 1; }
        else if(PuestoBayside[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][57]); comprarsombrero(playerid); PuestoBayside[1] = 1; PuestoBaysideTiene[playerid][1] = 1; }
        else if(PuestoBayside[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][58]); comprarsombrero(playerid); PuestoBayside[2] = 1; PuestoBaysideTiene[playerid][2] = 1; }
        else if(PuestoBayside[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][59]); comprarsombrero(playerid); PuestoBayside[3] = 1; PuestoBaysideTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1318.2965, 2508.7249, 86.8895))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoQuebrado[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][68]); comprarsombrero(playerid); PuestoQuebrado[0] = 1; PuestoQuebradoTiene[playerid][0] = 1; }
        else if(PuestoQuebrado[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][69]); comprarsombrero(playerid); PuestoQuebrado[1] = 1; PuestoQuebradoTiene[playerid][1] = 1; }
        else if(PuestoQuebrado[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][70]); comprarsombrero(playerid); PuestoQuebrado[2] = 1; PuestoQuebradoTiene[playerid][2] = 1; }
        else if(PuestoQuebrado[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][71]); comprarsombrero(playerid); PuestoQuebrado[3] = 1; PuestoQuebradoTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2105.2295, 2204.0562, 10.6678))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoEme[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][72]); comprarsombrero(playerid); PuestoEme[0] = 1; PuestoEmeTiene[playerid][0] = 1; }
        else if(PuestoEme[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][73]); comprarsombrero(playerid); PuestoEme[1] = 1; PuestoEmeTiene[playerid][1] = 1; }
        else if(PuestoEme[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][74]); comprarsombrero(playerid); PuestoEme[2] = 1; PuestoEmeTiene[playerid][2] = 1; }
        else if(PuestoEme[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][75]); comprarsombrero(playerid); PuestoEme[3] = 1; PuestoEmeTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1031.1637, 2096.2009, 10.6678))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoTrans[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][44]); comprarsombrero(playerid); PuestoTrans[0] = 1; PuestoTransTiene[playerid][0] = 1; }
        else if(PuestoTrans[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][45]); comprarsombrero(playerid); PuestoTrans[1] = 1; PuestoTransTiene[playerid][1] = 1; }
        else if(PuestoTrans[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][46]); comprarsombrero(playerid); PuestoTrans[2] = 1; PuestoTransTiene[playerid][2] = 1; }
        else if(PuestoTrans[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][47]); comprarsombrero(playerid); PuestoTrans[3] = 1; PuestoTransTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1096.8721, 1399.3768, 6.4803))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoEstaLV[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][88]); comprarsombrero(playerid); PuestoEstaLV[0] = 1; PuestoEstaLVTiene[playerid][0] = 1; }
        else if(PuestoEstaLV[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][89]); comprarsombrero(playerid); PuestoEstaLV[1] = 1; PuestoEstaLVTiene[playerid][1] = 1; }
        else if(PuestoEstaLV[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][90]); comprarsombrero(playerid); PuestoEstaLV[2] = 1; PuestoEstaLVTiene[playerid][2] = 1; }
        else if(PuestoEstaLV[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][91]); comprarsombrero(playerid); PuestoEstaLV[3] = 1; PuestoEstaLVTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,961.6549, -1544.1521, 13.4514))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoMarket[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][92]); comprarsombrero(playerid); PuestoMarket[0] = 1; PuestoMarketTiene[playerid][0] = 1; }
        else if(PuestoMarket[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][93]); comprarsombrero(playerid); PuestoMarket[1] = 1; PuestoMarketTiene[playerid][1] = 1; }
        else if(PuestoMarket[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][94]); comprarsombrero(playerid); PuestoMarket[2] = 1; PuestoMarketTiene[playerid][2] = 1; }
        else if(PuestoMarket[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][95]); comprarsombrero(playerid); PuestoMarket[3] = 1; PuestoMarketTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,321.8924, -1756.7383, 4.3536))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoSMB[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][96]); comprarsombrero(playerid); PuestoSMB[0] = 1; PuestoSMBTiene[playerid][0] = 1; }
        else if(PuestoSMB[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][97]); comprarsombrero(playerid); PuestoSMB[1] = 1; PuestoSMBTiene[playerid][1] = 1; }
        else if(PuestoSMB[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][98]); comprarsombrero(playerid); PuestoSMB[2] = 1; PuestoSMBTiene[playerid][2] = 1; }
        else if(PuestoSMB[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][99]); comprarsombrero(playerid); PuestoSMB[3] = 1; PuestoSMBTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-348.8716, -1035.1422, 59.1600))
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoLSF[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][124]); comprarsombrero(playerid); PuestoLSF[0] = 1; PuestoLSFTiene[playerid][0] = 1; }
        else if(PuestoLSF[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][125]); comprarsombrero(playerid); PuestoLSF[1] = 1; PuestoLSFTiene[playerid][1] = 1; }
        else if(PuestoLSF[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][126]); comprarsombrero(playerid); PuestoLSF[2] = 1; PuestoLSFTiene[playerid][2] = 1; }
        else if(PuestoLSF[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][127]); comprarsombrero(playerid); PuestoLSF[3] = 1; PuestoLSFTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2817.3301, -1530.2358, 140.6913))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoMC[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][100]); comprarsombrero(playerid); PuestoMC[0] = 1; PuestoMCTiene[playerid][0] = 1; }
        else if(PuestoMC[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][101]); comprarsombrero(playerid); PuestoMC[1] = 1; PuestoMCTiene[playerid][1] = 1; }
        else if(PuestoMC[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][102]); comprarsombrero(playerid); PuestoMC[2] = 1; PuestoMCTiene[playerid][2] = 1; }
        else if(PuestoMC[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][103]); comprarsombrero(playerid); PuestoMC[3] = 1; PuestoMCTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2621.9360, 2416.7783, 10.6678))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoJT[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][112]); comprarsombrero(playerid); PuestoJT[0] = 1; PuestoJTTiene[playerid][0] = 1; }
        else if(PuestoJT[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][113]); comprarsombrero(playerid); PuestoJT[1] = 1; PuestoJTTiene[playerid][1] = 1; }
        else if(PuestoJT[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][114]); comprarsombrero(playerid); PuestoJT[2] = 1; PuestoJTTiene[playerid][2] = 1; }
        else if(PuestoJT[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][115]); comprarsombrero(playerid); PuestoJT[3] = 1; PuestoJTTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2109.8435, 2736.9185, 10.6678))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoPP[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][104]); comprarsombrero(playerid); PuestoPP[0] = 1; PuestoPPTiene[playerid][0] = 1; }
        else if(PuestoPP[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][105]); comprarsombrero(playerid); PuestoPP[1] = 1; PuestoPPTiene[playerid][1] = 1; }
        else if(PuestoPP[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][106]); comprarsombrero(playerid); PuestoPP[2] = 1; PuestoPPTiene[playerid][2] = 1; }
        else if(PuestoPP[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][107]); comprarsombrero(playerid); PuestoPP[3] = 1; PuestoPPTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,417.8561, 2543.3235, 16.2683))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoAA[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][40]); comprarsombrero(playerid); PuestoAA[0] = 1; PuestoAATiene[playerid][0] = 1; }
        else if(PuestoAA[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][41]); comprarsombrero(playerid); PuestoAA[1] = 1; PuestoAATiene[playerid][1] = 1; }
        else if(PuestoAA[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][42]); comprarsombrero(playerid); PuestoAA[2] = 1; PuestoAATiene[playerid][2] = 1; }
        else if(PuestoAA[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][43]); comprarsombrero(playerid); PuestoAA[3] = 1; PuestoAATiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-280.9121, 2654.3579, 62.5841))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoPaya[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][120]); comprarsombrero(playerid); PuestoPaya[0] = 1; PuestoPayaTiene[playerid][0] = 1; }
        else if(PuestoPaya[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][121]); comprarsombrero(playerid); PuestoPaya[1] = 1; PuestoPayaTiene[playerid][1] = 1; }
        else if(PuestoPaya[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][122]); comprarsombrero(playerid); PuestoPaya[2] = 1; PuestoPayaTiene[playerid][2] = 1; }
        else if(PuestoPaya[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][123]); comprarsombrero(playerid); PuestoPaya[3] = 1; PuestoPayaTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1480.2240, 2612.5596, 58.6288))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoElq[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][116]); comprarsombrero(playerid); PuestoElq[0] = 1; PuestoElqTiene[playerid][0] = 1; }
        else if(PuestoElq[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][117]); comprarsombrero(playerid); PuestoElq[1] = 1; PuestoElqTiene[playerid][1] = 1; }
        else if(PuestoElq[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][118]); comprarsombrero(playerid); PuestoElq[2] = 1; PuestoElqTiene[playerid][2] = 1; }
        else if(PuestoElq[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][119]); comprarsombrero(playerid); PuestoElq[3] = 1; PuestoElqTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1849.2211, 1280.0999, 22.4100))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoLeSF[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][84]); comprarsombrero(playerid); PuestoLeSF[0] = 1; PuestoLeSFTiene[playerid][0] = 1; }
        else if(PuestoLeSF[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][85]); comprarsombrero(playerid); PuestoLeSF[1] = 1; PuestoLeSFTiene[playerid][1] = 1; }
        else if(PuestoLeSF[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][86]); comprarsombrero(playerid); PuestoLeSF[2] = 1; PuestoLeSFTiene[playerid][2] = 1; }
        else if(PuestoLeSF[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][87]); comprarsombrero(playerid); PuestoLeSF[3] = 1; PuestoLeSFTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2104.0378, -1941.0413, 13.3944))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoPG[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][19]); comprarsombrero(playerid); PuestoPG[0] = 1; PuestoPGTiene[playerid][0] = 1; }
        else if(PuestoPG[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][17]); comprarsombrero(playerid); PuestoPG[1] = 1; PuestoPGTiene[playerid][1] = 1; }
        else if(PuestoPG[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][18]); comprarsombrero(playerid); PuestoPG[2] = 1; PuestoPGTiene[playerid][2] = 1; }
        else if(PuestoPG[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][19]); comprarsombrero(playerid); PuestoPG[3] = 1; PuestoPGTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-53.6544, -1398.5087, 2.2214))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoBasu[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][108]); comprarsombrero(playerid); PuestoBasu[0] = 1; PuestoBasuTiene[playerid][0] = 1; }
        else if(PuestoBasu[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][109]); comprarsombrero(playerid); PuestoBasu[1] = 1; PuestoBasuTiene[playerid][1] = 1; }
        else if(PuestoBasu[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][110]); comprarsombrero(playerid); PuestoBasu[2] = 1; PuestoBasuTiene[playerid][2] = 1; }
        else if(PuestoBasu[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][111]); comprarsombrero(playerid); PuestoBasu[3] = 1; PuestoBasuTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2022.7119, -1781.1027, 13.3944)) //PUESTO DELANTE PIZZERIA GANTON
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoAG[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][12]); comprarsombrero(playerid); PuestoAG[0] = 1; PuestoAGTiene[playerid][0] = 1; }
        else if(PuestoAG[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][13]); comprarsombrero(playerid); PuestoAG[1] = 1; PuestoAGTiene[playerid][1] = 1; }
        else if(PuestoAG[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][14]); comprarsombrero(playerid); PuestoAG[2] = 1; PuestoAGTiene[playerid][2] = 1; }
        else if(PuestoAG[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][15]); comprarsombrero(playerid); PuestoAG[3] = 1; PuestoAGTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2131.1289, 260.0322, 35.7067))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoFaDo[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][76]); comprarsombrero(playerid); PuestoFaDo[0] = 1; PuestoFaDoTiene[playerid][0] = 1; }
        else if(PuestoFaDo[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][77]); comprarsombrero(playerid); PuestoFaDo[1] = 1; PuestoFaDoTiene[playerid][1] = 1; }
        else if(PuestoFaDo[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][78]); comprarsombrero(playerid); PuestoFaDo[2] = 1; PuestoFaDoTiene[playerid][2] = 1; }
        else if(PuestoFaDo[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][79]); comprarsombrero(playerid); PuestoFaDo[3] = 1; PuestoFaDoTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1363.3124, 15.5854, 6.1834))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoAESF[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][52]); comprarsombrero(playerid); PuestoAESF[0] = 1; PuestoAESFTiene[playerid][0] = 1; }
        else if(PuestoAESF[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][53]); comprarsombrero(playerid); PuestoAESF[1] = 1; PuestoAESFTiene[playerid][1] = 1; }
        else if(PuestoAESF[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][54]); comprarsombrero(playerid); PuestoAESF[2] = 1; PuestoAESFTiene[playerid][2] = 1; }
        else if(PuestoAESF[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][55]); comprarsombrero(playerid); PuestoAESF[3] = 1; PuestoAESFTiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2222.8567, -146.4722, 35.1678))//
    {
        if(GetPlayerMoney(playerid) < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
        if(PuestoC1[0] == 0) { DestroyDynamicObject(E_Halloween[sombreros][80]); comprarsombrero(playerid); PuestoC1[0] = 1; PuestoC1Tiene[playerid][0] = 1; }
        else if(PuestoC1[1] == 0) { DestroyDynamicObject(E_Halloween[sombreros][81]); comprarsombrero(playerid); PuestoC1[1] = 1; PuestoC1Tiene[playerid][1] = 1; }
        else if(PuestoC1[2] == 0) { DestroyDynamicObject(E_Halloween[sombreros][82]); comprarsombrero(playerid); PuestoC1[2] = 1; PuestoC1Tiene[playerid][2] = 1; }
        else if(PuestoC1[3] == 0) { DestroyDynamicObject(E_Halloween[sombreros][83]); comprarsombrero(playerid); PuestoC1[3] = 1; PuestoC1Tiene[playerid][3] = 1; }
        else return SendClientMessage(playerid,-1, "No quedan más sombreros, regresa más tarde o busca en otro puesto de Halloween.");
        return 1;
    }
    else return SendClientMessage(playerid,-1,"Los sombreros se venden en los puestos de Halloween.");
}

darAfinidad(playerid,value)
{
    new slutName[20],rand,AfinidadTotal,DineroObjeto,line[256],randDineroB = random(3),TiempoDinero,string[128];
    if(Tiempos[playerid][TiempoCLUB] > gettime()) return 1;
    if(PlayerInfo[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"Te quedaste sin dinero.");
    switch(value)
    {
        case 1: { PlayerInfo[playerid][pAfinidad1] ++; slutName = "Gatubela"; rand = random(sizeof(DineroSpawn1)); AfinidadTotal = PlayerInfo[playerid][pAfinidad1]/3; }
        case 2: { PlayerInfo[playerid][pAfinidad2] ++; slutName = "Bailarina ardiente"; rand = random(sizeof(DineroSpawn2)); AfinidadTotal = PlayerInfo[playerid][pAfinidad2]/3; }
        case 3: { PlayerInfo[playerid][pAfinidad3] ++; slutName = "Gordita sensual"; rand = random(sizeof(DineroSpawn3)); AfinidadTotal = PlayerInfo[playerid][pAfinidad3]/3; }
        case 4: { PlayerInfo[playerid][pAfinidad4] ++; slutName = "Poli-Bailarina"; rand = random(sizeof(DineroSpawn4)); AfinidadTotal = PlayerInfo[playerid][pAfinidad4]/3; }
        case 5: { PlayerInfo[playerid][pAfinidad5] ++; slutName = "Colegiala"; rand = random(sizeof(DineroSpawn5)); AfinidadTotal = PlayerInfo[playerid][pAfinidad5]/3; }
        case 6: { PlayerInfo[playerid][pAfinidad6] ++; slutName = "Chocolatita"; rand = random(sizeof(DineroSpawn6)); AfinidadTotal = PlayerInfo[playerid][pAfinidad6]/3; }
    }
    TextDrawShowForPlayer(playerid, Cuadroputi);
    TextDrawShowForPlayer(playerid, Cuadroputi1);
    TextDrawShowForPlayer(playerid, PuticlubMedia);
    TextDrawShowForPlayer(playerid, PuticlubAlta);
    TextDrawShowForPlayer(playerid, FlechasArribaPuti);
    TextDrawShowForPlayer(playerid, FlechasArribaPuti2);
    new afinidad_completa[128];
    format(afinidad_completa,sizeof(afinidad_completa),"Afinidad con %s",slutName);
    PlayerTextDrawSetString(playerid, AfinidadconX[playerid], afinidad_completa);
    PlayerTextDrawShow(playerid, AfinidadconX[playerid]);
    PlayerTextDrawShow(playerid, LineasPutiNivel[playerid]);
    for(new a=0;a<AfinidadTotal;a++)
    {
        if(a < 30) format(line,sizeof(line),"%s-",line);
        else format(line,sizeof(line),"------------------------------");
    }
    DineroTirado[playerid][value] ++;
    PlayerTextDrawSetString(playerid,Radly[playerid],line);
    PlayerTextDrawShow(playerid, Radly[playerid]);
    Tiempos[playerid][TiempoCLUB] = gettime() + 2;
    QuitarDinero(playerid, 500);
    KillTimer(TimerDineroP[playerid]);
    TimerDineroP[playerid] = SetTimerEx("CerrarAviso",4000,false,"d",playerid);
    SetTimerEx("ClearAnim",2000,false,"d",playerid);
    ApplyAnimation(playerid,"STRIP","PUN_CASH",4.5,0,5,1,2000,0);
    format(string,sizeof(string),"arrojó dinero a %s.",slutName);
    AccionesRol(playerid,string,20);
    RevisarLogro(playerid, 17);
    switch(value)
    {
        case 1: rand = random(sizeof(DineroSpawn1)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn1[rand][0], DineroSpawn1[rand][1], DineroSpawn1[rand][2], -1, -1, -1, 10.0);
        case 2: rand = random(sizeof(DineroSpawn2)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn2[rand][0], DineroSpawn2[rand][1], DineroSpawn2[rand][2], -1, -1, -1, 10.0);
        case 3: rand = random(sizeof(DineroSpawn3)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn3[rand][0], DineroSpawn3[rand][1], DineroSpawn3[rand][2], -1, -1, -1, 10.0);
        case 4: rand = random(sizeof(DineroSpawn4)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn4[rand][0], DineroSpawn4[rand][1], DineroSpawn4[rand][2], -1, -1, -1, 10.0);
        case 5: rand = random(sizeof(DineroSpawn5)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn5[rand][0], DineroSpawn5[rand][1], DineroSpawn5[rand][2], -1, -1, -1, 10.0);
        case 6: rand = random(sizeof(DineroSpawn6)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn6[rand][0], DineroSpawn6[rand][1], DineroSpawn6[rand][2], -1, -1, -1, 10.0);
    }
    switch(randDineroB)
    {
        case 0: TiempoDinero = 3000;
        case 1: TiempoDinero = 3500;
        case 2: TiempoDinero = 4000;
    }
    SetTimerEx("BorrarDinero",TiempoDinero,false,"d",DineroObjeto);
    if(DineroTirado[playerid][value] > 30)
    {
        DineroTirado[playerid][value] = 0;
        switch(value)
        {
            case 1: Bailarina1 = 1,SetActorVirtualWorld(Strips[2], playerid+999);
            case 2: Bailarina2 = 1,SetActorVirtualWorld(Strips[8], playerid+999);
            case 3: Bailarina3 = 1,SetActorVirtualWorld(Strips[4], playerid+999);
            case 4: Bailarina4 = 1,SetActorVirtualWorld(Strips[9], playerid+999);
            case 5: Bailarina5 = 1,SetActorVirtualWorld(Strips[7], playerid+999);
            case 6: Bailarina6 = 1,SetActorVirtualWorld(Strips[3], playerid+999);
        }
        CerrarAviso(playerid);
        new accion[256];
        format(accion,sizeof(accion),"%s lleva de la mano a %s en dirección a la sala privada.",slutName,PlayerInfo[playerid][Nickname]);
        ProxDetector(20, playerid, accion, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        LlevarClubPrivada(playerid,value);
        MostrarLuegoDe(playerid);
        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
        SetPlayerVirtualWorld(playerid,playerid);
    }
    return true;
}
HideSelector(playerid)
{
    TextDrawHideForPlayer(playerid,BoxRobar),
    TextDrawHideForPlayer(playerid, EquisCerrar);
    TextDrawHideForPlayer(playerid,SeleccionaPuerta);
    PlayerTextDrawHide(playerid, RoboCasas[playerid][0]),
    PlayerTextDrawHide(playerid, RoboCasas[playerid][1]);
    PlayerTextDrawHide(playerid, RoboCasas[playerid][2]),
    PlayerTextDrawHide(playerid, RoboCasas[playerid][3]);
    TextDrawHideForPlayer(playerid, PlayerBackGround[ _background ][ 0 ]);
    TextDrawHideForPlayer(playerid, PlayerBackGround[ _background ][ 1 ]);
    TextDrawHideForPlayer(playerid, PlayerBackGround[ _button_close ]);
    TextDrawHideForPlayer(playerid, PlayerBackGround[ _string ]);
    _Select_Status[playerid] = false;
    _Model_Status[playerid] = false;
}

CongelarPlayerID(id)
{
    TogglePlayerControllable(id, 0);
    SetPVarInt(id, "IsFrozen", 0);
}

stock ForzarCerraduraPosiciones(playerid)
{
    new Float:ladronx,Float:ladrony,Float:ladronz;
    GetPlayerPos(playerid,ladronx,ladrony,ladronz);
    TiempoForzarCerradura[playerid] = 7;
    HideSelector(playerid);
    CancelSelectTextDraw(playerid);
    new tiempo;
    switch(PlayerInfo[playerid][pNivelLadron])
    {
        case 1: tiempo = 20;
        case 2: tiempo = 16;
        default: tiempo = 12;
    }
    switch(CasaForzada[playerid])
    {
        case 1:
        {
            if(Forzada1 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[0])) DestroyDynamic3DTextLabel(EscaparLabel[0]);
                Forzada1 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa1",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 2:
        {
            if(Forzada2 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[4])) DestroyDynamic3DTextLabel(EscaparLabel[4]);
                Forzada2 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado2",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa2",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 3:
        {
            if(Forzada3 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[1])) DestroyDynamic3DTextLabel(EscaparLabel[1]);
                Forzada3 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado3",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa3",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 4:
        {
            if(Forzada4 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[2])) DestroyDynamic3DTextLabel(EscaparLabel[2]);
                Forzada4 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado4",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa4",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 5:
        {
            if(Forzada5 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[5])) DestroyDynamic3DTextLabel(EscaparLabel[5]);
                Forzada5 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado5",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa5",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 6:
        {
            if(Forzada6 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[6])) DestroyDynamic3DTextLabel(EscaparLabel[6]);
                Forzada6 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado6",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa6",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 7:
        {
            if(Forzada7 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[8])) DestroyDynamic3DTextLabel(EscaparLabel[8]);
                Forzada7 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado7",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa7",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 8:
        {
            if(Forzada8 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[7])) DestroyDynamic3DTextLabel(EscaparLabel[7]);
                Forzada8 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado8",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa8",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 9:
        {
            if(Forzada9 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[9])) DestroyDynamic3DTextLabel(EscaparLabel[9]);
                Forzada9 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado9",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa9",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 10:
        {
            if(Forzada10 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[3])) DestroyDynamic3DTextLabel(EscaparLabel[3]);
                Forzada10 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado10",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa10",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 11:
        {
            if(Forzada11 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[10])) DestroyDynamic3DTextLabel(EscaparLabel[10]);
                Forzada11 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado11",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa11",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
        case 12:
        {
            if(Forzada12 == 0)
            {
                if(IsValidDynamic3DTextLabel(EscaparLabel[11])) DestroyDynamic3DTextLabel(EscaparLabel[11]);
                Forzada12 = 1;
                foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
                SetTimerEx("Forzado12",tiempo*1000,false,"d",playerid);
                SetTimer("CargarCasa12",minutos(35),false);
                MensajeEx(playerid,-1,"Forzando cerradura, espera {00CC00}%d segundos{FFFFFF}.",tiempo);
            }
            else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        }
    }
    CasaForzada[playerid] = 0;
    return 1;
}
stock MostrarForzarCerradura(playerid,value)
{
    _Select_Status[ playerid ] = true;
    CasaForzada[playerid] = value;
    new vR = random(4);
    TextDrawShowForPlayer(playerid,BoxRobar);
    TextDrawShowForPlayer(playerid,SeleccionaPuerta);
    TextDrawShowForPlayer(playerid,EquisCerrar);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 100.000000);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 100.000000);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 100.000000);
    switch(vR)
    {
        case 0: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
        case 1: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);
        case 2: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);
        case 3: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
    }
    ForzarCerraduraID[playerid] = vR+1;
    PlayerTextDrawShow(playerid,RoboCasas[playerid][0]);
    PlayerTextDrawShow(playerid,RoboCasas[playerid][1]);
    PlayerTextDrawShow(playerid,RoboCasas[playerid][2]);
    PlayerTextDrawShow(playerid,RoboCasas[playerid][3]);
    SelectTextDraw(playerid,0x272828FF);
}
CrearTextdrawPlayer(playerid)
{
    PlayerTextdraws[playerid][ptextdraw_HUD][0] = CreatePlayerTextDraw(playerid, 2.150000, 446.149994, "_"); //reputacion
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0x666666FF);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1.000000, -0.200000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 6.384615, 0.000000);
    
	NewPlayerr[playerid] = CreatePlayerTextDraw(playerid, 322.000000, 401.000000, "Pulsa la tecla ~b~'T'~w~ para hablar o ingresar ~y~comandos~w~.");
	PlayerTextDrawLetterSize(playerid, NewPlayerr[playerid], 0.319999, 1.300000);
	PlayerTextDrawTextSize(playerid, NewPlayerr[playerid], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, NewPlayerr[playerid], 2);
	PlayerTextDrawColor(playerid, NewPlayerr[playerid], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, NewPlayerr[playerid], 0);
	PlayerTextDrawBoxColor(playerid, NewPlayerr[playerid], 0x80808080);
	PlayerTextDrawSetShadow(playerid, NewPlayerr[playerid], 1);
	PlayerTextDrawSetOutline(playerid, NewPlayerr[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, NewPlayerr[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, NewPlayerr[playerid], 1);
	PlayerTextDrawSetProportional(playerid, NewPlayerr[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, NewPlayerr[playerid], 0);
    
    NotiConnect[playerid][0] = CreatePlayerTextDraw(playerid, 8.000000, 274.000000, "_");
    PlayerTextDrawLetterSize(playerid, NotiConnect[playerid][0], 0.500000, 3.599999);
    PlayerTextDrawTextSize(playerid, NotiConnect[playerid][0], 166.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, NotiConnect[playerid][0], 0);
    PlayerTextDrawColor(playerid, NotiConnect[playerid][0], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, NotiConnect[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, NotiConnect[playerid][0], 0x00000099);
    PlayerTextDrawSetShadow(playerid, NotiConnect[playerid][0], 1);
    PlayerTextDrawSetOutline(playerid, NotiConnect[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, NotiConnect[playerid][0], 0x00000099);
    PlayerTextDrawFont(playerid, NotiConnect[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, NotiConnect[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, NotiConnect[playerid][0], 0);

    NotiConnect[playerid][1] = CreatePlayerTextDraw(playerid, 7.000000, 273.000000, "_");
    PlayerTextDrawLetterSize(playerid, NotiConnect[playerid][1], 0.500000, 3.850000);
    PlayerTextDrawTextSize(playerid, NotiConnect[playerid][1], 167.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, NotiConnect[playerid][1], 0);
    PlayerTextDrawColor(playerid, NotiConnect[playerid][1], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, NotiConnect[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, NotiConnect[playerid][1], 0x00000099);
    PlayerTextDrawSetShadow(playerid, NotiConnect[playerid][1], 1);
    PlayerTextDrawSetOutline(playerid, NotiConnect[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, NotiConnect[playerid][1], 0x00000000);
    PlayerTextDrawFont(playerid, NotiConnect[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, NotiConnect[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, NotiConnect[playerid][1], 0);

    NotiConnect[playerid][2] = CreatePlayerTextDraw(playerid, 158.000000, 297.000000, "~>~ SE HA CONECTADO");
    PlayerTextDrawLetterSize(playerid, NotiConnect[playerid][2], 0.180000, 0.899999);
    PlayerTextDrawTextSize(playerid, NotiConnect[playerid][2], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, NotiConnect[playerid][2], 3);
    PlayerTextDrawColor(playerid, NotiConnect[playerid][2], 0x70D00090);
    PlayerTextDrawUseBox(playerid, NotiConnect[playerid][2], 0);
    PlayerTextDrawBoxColor(playerid, NotiConnect[playerid][2], 0x80808080);
    PlayerTextDrawSetShadow(playerid, NotiConnect[playerid][2], 1);
    PlayerTextDrawSetOutline(playerid, NotiConnect[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, NotiConnect[playerid][2], 0x000000FF);
    PlayerTextDrawFont(playerid, NotiConnect[playerid][2], 2);
    PlayerTextDrawSetProportional(playerid, NotiConnect[playerid][2], 1);
    PlayerTextDrawSetSelectable(playerid, NotiConnect[playerid][2], 0);

    NotiConnect[playerid][3] = CreatePlayerTextDraw(playerid, 2.000000, 273.000000, "_");
    PlayerTextDrawLetterSize(playerid, NotiConnect[playerid][3], 0.500000, 2.899999);
    PlayerTextDrawTextSize(playerid, NotiConnect[playerid][3], 35.000000, 35.000000);
    PlayerTextDrawAlignment(playerid, NotiConnect[playerid][3], 0);
    PlayerTextDrawColor(playerid, NotiConnect[playerid][3], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, NotiConnect[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, NotiConnect[playerid][3], 0x00000000);
    PlayerTextDrawSetShadow(playerid, NotiConnect[playerid][3], 1);
    PlayerTextDrawSetOutline(playerid, NotiConnect[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, NotiConnect[playerid][3], 0x00000000);
    PlayerTextDrawFont(playerid, NotiConnect[playerid][3], 5);
    PlayerTextDrawSetProportional(playerid, NotiConnect[playerid][3], 1);
    PlayerTextDrawSetSelectable(playerid, NotiConnect[playerid][3], 0);
    PlayerTextDrawSetPreviewModel(playerid, NotiConnect[playerid][3], 4);
    PlayerTextDrawSetPreviewRot(playerid, NotiConnect[playerid][3], 0.000000, 0.000000, 20.000000, 1.000000);

    NotiConnect[playerid][4] = CreatePlayerTextDraw(playerid, 30.000000, 273.000000, "Edward_Montana");
    PlayerTextDrawLetterSize(playerid, NotiConnect[playerid][4], 0.559999, 2.100000);
    PlayerTextDrawTextSize(playerid, NotiConnect[playerid][4], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, NotiConnect[playerid][4], 1);
    PlayerTextDrawColor(playerid, NotiConnect[playerid][4], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, NotiConnect[playerid][4], 0);
    PlayerTextDrawBoxColor(playerid, NotiConnect[playerid][4], 0x80808080);
    PlayerTextDrawSetShadow(playerid, NotiConnect[playerid][4], 1);
    PlayerTextDrawSetOutline(playerid, NotiConnect[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, NotiConnect[playerid][4], 0x000000FF);
    PlayerTextDrawFont(playerid, NotiConnect[playerid][4], 0);
    PlayerTextDrawSetProportional(playerid, NotiConnect[playerid][4], 1);
    PlayerTextDrawSetSelectable(playerid, NotiConnect[playerid][4], 0);

	MensajeTD[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "_");
	PlayerTextDrawLetterSize(playerid, MensajeTD[playerid], 0.298333, 1.976000);
	PlayerTextDrawAlignment(playerid, MensajeTD[playerid], 2);
	PlayerTextDrawColor(playerid,MensajeTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, MensajeTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, MensajeTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, MensajeTD[playerid], 255);
	PlayerTextDrawFont(playerid, MensajeTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MensajeTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MensajeTD[playerid], 1);
	
	PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Objeto:_0/0~n~Precio:_0$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
    
    TAXIMET2[playerid] = CreatePlayerTextDraw(playerid, 499.000000, 407.000000, "$0");
    PlayerTextDrawLetterSize(playerid, TAXIMET2[playerid], 0.500000, 1.600000);
    PlayerTextDrawTextSize(playerid, TAXIMET2[playerid], 900.000000, 74.000000);
    PlayerTextDrawAlignment(playerid, TAXIMET2[playerid], 2);
    PlayerTextDrawColor(playerid, TAXIMET2[playerid], 0xFFFF00CC);
    PlayerTextDrawUseBox(playerid, TAXIMET2[playerid], 1);
    PlayerTextDrawBoxColor(playerid, TAXIMET2[playerid], 0x00000099);
    PlayerTextDrawSetShadow(playerid, TAXIMET2[playerid], 1);
    PlayerTextDrawSetOutline(playerid, TAXIMET2[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, TAXIMET2[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, TAXIMET2[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TAXIMET2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, TAXIMET2[playerid], 0);

    MensajeBox[playerid] = CreatePlayerTextDraw(playerid, 554.000000, 130.000000, "Compraste un vehiculo, ahora comprale una traba de seguridad en algun ~g~24/7 ~w~para que no te lo roben.");
    PlayerTextDrawLetterSize(playerid, MensajeBox[playerid], 0.250000, 1.100000);
    PlayerTextDrawTextSize(playerid, MensajeBox[playerid], 0.000000, 140.000000);
    PlayerTextDrawAlignment(playerid, MensajeBox[playerid], 2);
    PlayerTextDrawColor(playerid, MensajeBox[playerid], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, MensajeBox[playerid], 1);
    PlayerTextDrawBoxColor(playerid, MensajeBox[playerid], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, MensajeBox[playerid], 2);
    PlayerTextDrawSetOutline(playerid, MensajeBox[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, MensajeBox[playerid], 0x080808FF);
    PlayerTextDrawFont(playerid, MensajeBox[playerid], 1);
    PlayerTextDrawSetProportional(playerid, MensajeBox[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, MensajeBox[playerid], 0);

    CarreraPosicion[playerid] = CreatePlayerTextDraw(playerid,44.978088, 363.416778, "POSICION");
    PlayerTextDrawLetterSize(playerid,CarreraPosicion[playerid], 0.484670, 0.981665);
    PlayerTextDrawAlignment(playerid,CarreraPosicion[playerid], 1);
    PlayerTextDrawColor(playerid,CarreraPosicion[playerid], -1);
    PlayerTextDrawSetShadow(playerid,CarreraPosicion[playerid], 0);
    PlayerTextDrawSetOutline(playerid,CarreraPosicion[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid,CarreraPosicion[playerid], 51);
    PlayerTextDrawFont(playerid,CarreraPosicion[playerid], 1);
    PlayerTextDrawSetProportional(playerid,CarreraPosicion[playerid], 1);

    CarreraT[playerid][0] = CreatePlayerTextDraw(playerid,44.041030, 343.583282, "Vuelta: 0/5");
    PlayerTextDrawLetterSize(playerid,CarreraT[playerid][0], 0.421420, 1.092498);
    PlayerTextDrawAlignment(playerid,CarreraT[playerid][0], 1);
    PlayerTextDrawColor(playerid,CarreraT[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid,CarreraT[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid,CarreraT[playerid][0], 1);
    PlayerTextDrawBackgroundColor(playerid,CarreraT[playerid][0], 51);
    PlayerTextDrawFont(playerid,CarreraT[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid,CarreraT[playerid][0], 1);

    CarreraT[playerid][1] = CreatePlayerTextDraw(playerid,84.802276, 375.083374, "10/10");
    PlayerTextDrawLetterSize(playerid,CarreraT[playerid][1], 0.613044, 2.364161);
    PlayerTextDrawAlignment(playerid,CarreraT[playerid][1], 2);
    PlayerTextDrawColor(playerid,CarreraT[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid,CarreraT[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid,CarreraT[playerid][1], 1);
    PlayerTextDrawBackgroundColor(playerid,CarreraT[playerid][1], 51);
    PlayerTextDrawFont(playerid,CarreraT[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid,CarreraT[playerid][1], 1);

    CarreraT[playerid][2] = CreatePlayerTextDraw(playerid,62.781837, 408.916656, "0:00");
    PlayerTextDrawLetterSize(playerid,CarreraT[playerid][2], 0.497789, 1.255833);
    PlayerTextDrawAlignment(playerid,CarreraT[playerid][2], 1);
    PlayerTextDrawColor(playerid,CarreraT[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid,CarreraT[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid,CarreraT[playerid][2], 1);
    PlayerTextDrawBackgroundColor(playerid,CarreraT[playerid][2], 51);
    PlayerTextDrawFont(playerid,CarreraT[playerid][2], 2);
    PlayerTextDrawSetProportional(playerid,CarreraT[playerid][2], 1);

    RoboCasas[playerid][0] = CreatePlayerTextDraw(playerid, 209.000000, 170.000000, "sd");
    PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][0], 0.200000, 8.000002);
    PlayerTextDrawTextSize(playerid, RoboCasas[playerid][0], 87.000000, 93.000000);
    PlayerTextDrawAlignment(playerid, RoboCasas[playerid][0], 2);
    PlayerTextDrawColor(playerid, RoboCasas[playerid][0], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, RoboCasas[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][0], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][0], 0x0B0B0B99);
    PlayerTextDrawFont(playerid, RoboCasas[playerid][0], 5);
    PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][0], 0);
    PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][0], 1);
    PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][0], 1498);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 100.000000);

    RoboCasas[playerid][1] = CreatePlayerTextDraw(playerid, 298.000000, 170.000000, "sd");
    PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][1], 0.200000, 8.000002);
    PlayerTextDrawTextSize(playerid, RoboCasas[playerid][1], 87.000000, 93.000000);
    PlayerTextDrawAlignment(playerid, RoboCasas[playerid][1], 2);
    PlayerTextDrawColor(playerid, RoboCasas[playerid][1], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, RoboCasas[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][1], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][1], 0x0B0B0B99);
    PlayerTextDrawFont(playerid, RoboCasas[playerid][1], 5);
    PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][1], 0);
    PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][1], 1);
    PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][1], 1498);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 100.000000);

    RoboCasas[playerid][2] = CreatePlayerTextDraw(playerid, 209.000000, 265.799988, "sd");
    PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][2], 0.200000, 8.000002);
    PlayerTextDrawTextSize(playerid, RoboCasas[playerid][2], 87.000000, 93.000000);
    PlayerTextDrawAlignment(playerid, RoboCasas[playerid][2], 2);
    PlayerTextDrawColor(playerid, RoboCasas[playerid][2], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, RoboCasas[playerid][2], 1);
    PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][2], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][2], 0x0B0B0B99);
    PlayerTextDrawFont(playerid, RoboCasas[playerid][2], 5);
    PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][2], 0);
    PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][2], 1);
    PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][2], 1498);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);

    RoboCasas[playerid][3] = CreatePlayerTextDraw(playerid, 298.000000, 265.799988, "sd");
    PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][3], 0.270000, 8.800002);
    PlayerTextDrawTextSize(playerid, RoboCasas[playerid][3], 87.000000, 93.000000);
    PlayerTextDrawAlignment(playerid, RoboCasas[playerid][3], 2);
    PlayerTextDrawColor(playerid, RoboCasas[playerid][3], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, RoboCasas[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][3], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][3], 0x0B0B0B99);
    PlayerTextDrawFont(playerid, RoboCasas[playerid][3], 5);
    PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][3], 0);
    PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][3], 1);
    PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][3], 1498);
    PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 100.000000);

    LineasPutiNivel[playerid] = CreatePlayerTextDraw(playerid,228.000000, 386.000000, "------------------------------");
    PlayerTextDrawLetterSize(playerid, LineasPutiNivel[playerid], 0.439999, 2.299999);
    PlayerTextDrawTextSize(playerid, LineasPutiNivel[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, LineasPutiNivel[playerid], 0);
    PlayerTextDrawColor(playerid, LineasPutiNivel[playerid], 0x5C5C5CFF);
    PlayerTextDrawUseBox(playerid, LineasPutiNivel[playerid], 0);
    PlayerTextDrawBoxColor(playerid, LineasPutiNivel[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, LineasPutiNivel[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LineasPutiNivel[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LineasPutiNivel[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, LineasPutiNivel[playerid], 1);
    PlayerTextDrawSetProportional(playerid, LineasPutiNivel[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LineasPutiNivel[playerid], 0);

    AfinidadconX[playerid] = CreatePlayerTextDraw(playerid, 214.000000, 368.000000, "Afinidad con Colegiala");
    PlayerTextDrawLetterSize(playerid, AfinidadconX[playerid], 0.440000, 1.400000);
    PlayerTextDrawTextSize(playerid, AfinidadconX[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, AfinidadconX[playerid], 0);
    PlayerTextDrawColor(playerid, AfinidadconX[playerid], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, AfinidadconX[playerid], 0);
    PlayerTextDrawBoxColor(playerid, AfinidadconX[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, AfinidadconX[playerid], 1);
    PlayerTextDrawSetOutline(playerid, AfinidadconX[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, AfinidadconX[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, AfinidadconX[playerid], 0);
    PlayerTextDrawSetProportional(playerid, AfinidadconX[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, AfinidadconX[playerid], 0);

    Radly[playerid] = CreatePlayerTextDraw(playerid, 228.000000, 386.000000, "-");
    PlayerTextDrawLetterSize(playerid, Radly[playerid], 0.440000, 2.300000);
    PlayerTextDrawTextSize(playerid, Radly[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, Radly[playerid], 0);
    PlayerTextDrawColor(playerid, Radly[playerid], 0xFF00FFFF);
    PlayerTextDrawUseBox(playerid, Radly[playerid], 0);
    PlayerTextDrawBoxColor(playerid, Radly[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, Radly[playerid], 1);
    PlayerTextDrawSetOutline(playerid, Radly[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, Radly[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, Radly[playerid], 1);
    PlayerTextDrawSetProportional(playerid, Radly[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, Radly[playerid], 0);

    ContadorVelocimetro[playerid][0] = CreatePlayerTextDraw(playerid, 602.000000, 366.000000, "0");
    PlayerTextDrawFont(playerid, ContadorVelocimetro[playerid][0], 1);
    PlayerTextDrawLetterSize(playerid, ContadorVelocimetro[playerid][0], 0.308333, 1.950000);
    PlayerTextDrawTextSize(playerid, ContadorVelocimetro[playerid][0], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, ContadorVelocimetro[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, ContadorVelocimetro[playerid][0], 0);
    PlayerTextDrawAlignment(playerid, ContadorVelocimetro[playerid][0], 3);
    PlayerTextDrawColor(playerid, ContadorVelocimetro[playerid][0], -1);
    PlayerTextDrawBackgroundColor(playerid, ContadorVelocimetro[playerid][0], 255);
    PlayerTextDrawBoxColor(playerid, ContadorVelocimetro[playerid][0], 50);
    PlayerTextDrawUseBox(playerid, ContadorVelocimetro[playerid][0], 0);
    PlayerTextDrawSetProportional(playerid, ContadorVelocimetro[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, ContadorVelocimetro[playerid][0], 0);

    ContadorVelocimetro[playerid][1] = CreatePlayerTextDraw(playerid, 608.000000, 393.000000, "120/120");
    PlayerTextDrawFont(playerid, ContadorVelocimetro[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid, ContadorVelocimetro[playerid][1], 0.274993, 1.699998);
    PlayerTextDrawTextSize(playerid, ContadorVelocimetro[playerid][1], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, ContadorVelocimetro[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, ContadorVelocimetro[playerid][1], 0);
    PlayerTextDrawAlignment(playerid, ContadorVelocimetro[playerid][1], 3);
    PlayerTextDrawColor(playerid, ContadorVelocimetro[playerid][1], -1);
    PlayerTextDrawBackgroundColor(playerid, ContadorVelocimetro[playerid][1], 255);
    PlayerTextDrawBoxColor(playerid, ContadorVelocimetro[playerid][1], 50);
    PlayerTextDrawUseBox(playerid, ContadorVelocimetro[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, ContadorVelocimetro[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, ContadorVelocimetro[playerid][1], 0);

    LogroTitulo[playerid] = CreatePlayerTextDraw(playerid, 260.000000, 326.000000, "Sobre ruedas");
    PlayerTextDrawLetterSize(playerid, LogroTitulo[playerid], 0.559999, 1.700000);
    PlayerTextDrawTextSize(playerid, LogroTitulo[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, LogroTitulo[playerid], 0);
    PlayerTextDrawColor(playerid, LogroTitulo[playerid], 0xCACA56FF);
    PlayerTextDrawUseBox(playerid, LogroTitulo[playerid], 0);
    PlayerTextDrawBoxColor(playerid, LogroTitulo[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, LogroTitulo[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LogroTitulo[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LogroTitulo[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, LogroTitulo[playerid], 0);
    PlayerTextDrawSetProportional(playerid, LogroTitulo[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LogroTitulo[playerid], 0);

    LogroTexto[playerid] = CreatePlayerTextDraw(playerid, 323.000000, 322.000000, "~n~_~n~_~n~Compra su primer vehiculo.~n~_");
    PlayerTextDrawLetterSize(playerid, LogroTexto[playerid], 0.379999, 1.299999);
    PlayerTextDrawTextSize(playerid, LogroTexto[playerid], 3.000000, 202.500000);
    PlayerTextDrawAlignment(playerid, LogroTexto[playerid], 2);
    PlayerTextDrawColor(playerid, LogroTexto[playerid], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, LogroTexto[playerid], 1);
    PlayerTextDrawBoxColor(playerid, LogroTexto[playerid], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, LogroTexto[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LogroTexto[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LogroTexto[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, LogroTexto[playerid], 1);
    PlayerTextDrawSetProportional(playerid, LogroTexto[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LogroTexto[playerid], 0);

    LogroLinea[playerid] = CreatePlayerTextDraw(playerid, 208.000000, 344.000000, ".");
    PlayerTextDrawLetterSize(playerid, LogroLinea[playerid], 22.180044, 0.600000);
    PlayerTextDrawTextSize(playerid, LogroLinea[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, LogroLinea[playerid], 0);
    PlayerTextDrawColor(playerid, LogroLinea[playerid], 0xCBB788FF);
    PlayerTextDrawUseBox(playerid, LogroLinea[playerid], 0);
    PlayerTextDrawBoxColor(playerid, LogroLinea[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, LogroLinea[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LogroLinea[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LogroLinea[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, LogroLinea[playerid], 1);
    PlayerTextDrawSetProportional(playerid, LogroLinea[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LogroLinea[playerid], 0);

    LogroRueda[playerid] = CreatePlayerTextDraw(playerid, 204.000000, 304.000000, "LD_BEAT:cring");
    PlayerTextDrawLetterSize(playerid, LogroRueda[playerid], 0.500000, 1.000000);
    PlayerTextDrawTextSize(playerid, LogroRueda[playerid], 60.000000, 60.000000);
    PlayerTextDrawAlignment(playerid, LogroRueda[playerid], 0);
    PlayerTextDrawColor(playerid, LogroRueda[playerid], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, LogroRueda[playerid], 1);
    PlayerTextDrawBoxColor(playerid, LogroRueda[playerid], 0x000000FF);
    PlayerTextDrawSetShadow(playerid, LogroRueda[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LogroRueda[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LogroRueda[playerid], 0x00000000);
    PlayerTextDrawFont(playerid, LogroRueda[playerid], 4);
    PlayerTextDrawSetProportional(playerid, LogroRueda[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LogroRueda[playerid], 0);

    LogroNumero[playerid] = CreatePlayerTextDraw(playerid, 234.000000, 326.000000, "10");
    PlayerTextDrawLetterSize(playerid, LogroNumero[playerid], 0.409999, 1.700000);
    PlayerTextDrawTextSize(playerid, LogroNumero[playerid], 1280.000000, 1280.000000);
    PlayerTextDrawAlignment(playerid, LogroNumero[playerid], 2);
    PlayerTextDrawColor(playerid, LogroNumero[playerid], 0xFFFFFFFF);
    PlayerTextDrawUseBox(playerid, LogroNumero[playerid], 0);
    PlayerTextDrawBoxColor(playerid, LogroNumero[playerid], 0x80808080);
    PlayerTextDrawSetShadow(playerid, LogroNumero[playerid], 1);
    PlayerTextDrawSetOutline(playerid, LogroNumero[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LogroNumero[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, LogroNumero[playerid], 1);
    PlayerTextDrawSetProportional(playerid, LogroNumero[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, LogroNumero[playerid], 0);
    return 1;
}
ObtenerNivelEsta(Float:z)
{
    new floor = 0;
    if(z > 0.0000 && z < 12.027) floor = 1;
    if(z > 12.026 && z < 16.476) floor = 2;
    if(z > 16.475 && z < 21.041) floor = 3;
    if(z > 21.040 && z < 25.442) floor = 4;
    if(z > 25.441 && z < 29.523) floor = 5;
    if(z > 29.522 && z < 33.957) floor = 6;
    if(z > 33.956 && z < 38.106) floor = 7;
    if(z > 38.105 && z < 42.733) floor = 8;
    if(z > 42.732 && z < 46.774) floor = 9;
    if(z > 46.773) floor = 10;
    return floor;
}

stock ExpMinero(playerid)
{
    switch(PlayerInfo[playerid][pNivelMinero])
    {
        case 1:
        {
            if(PlayerInfo[playerid][pExpMinero] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +2 puntos."); }
                        case 2:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 2:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMedico] >= 49)
            {
                PlayerInfo[playerid][pNivelMinero]++;
                PlayerInfo[playerid][pExpMinero] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de minero.");
            }
        }
        case 2:
        {
            if(PlayerInfo[playerid][pExpMinero] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +2 puntos."); }
                        case 2:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 2:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMinero] >= 49)
            {
                PlayerInfo[playerid][pNivelMinero]++;
                PlayerInfo[playerid][pExpMinero] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de minero.");
            }
        }
        case 3:
        {
            if(PlayerInfo[playerid][pExpMinero] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +2 puntos."); }
                        case 2:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 2:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMinero] >= 49)
            {
                PlayerInfo[playerid][pNivelMinero]++;
                PlayerInfo[playerid][pExpMinero] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de minero.");
            }
        }
        case 4:
        {
            if(PlayerInfo[playerid][pExpMinero] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +2 puntos."); }
                        case 2:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                        case 1:{ PlayerInfo[playerid][pExpMinero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de minero aumentada +1 punto."); }
                        case 2:{ SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad."); }
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMinero] >= 49) SendClientMessage(playerid,0x00CC00FF,"Llegaste al nivel máximo como minero.");
        }
    }
}

PagoBasurero(playerid, nivel, ruta)
{
    new ganancias;
    switch(nivel)
    {
        case 1:
        {
            switch(ruta)
            {
                case 1: ganancias = 2150;
                case 2: ganancias = 2450;
                case 3: ganancias = 2600;
                case 4: ganancias = 2900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
        case 2:
        {
            switch(ruta)
            {
                case 1: ganancias = 2150;
                case 2: ganancias = 2450;
                case 3: ganancias = 2600;
                case 4: ganancias = 2900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
        case 3:
        {
            switch(ruta)
            {
                case 1: ganancias = 2150;
                case 2: ganancias = 2450;
                case 3: ganancias = 2600;
                case 4: ganancias = 2900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
        case 4:
        {
            switch(ruta)
            {
                case 1: ganancias = 3150;
                case 2: ganancias = 3450;
                case 3: ganancias = 3600;
                case 4: ganancias = 3900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
        case 5:
        {
            switch(ruta)
            {
                case 1: ganancias = 3150;
                case 2: ganancias = 4450;
                case 3: ganancias = 3600;
                case 4: ganancias = 3900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
        case 6..9999:
        {
            switch(ruta)
            {
                case 1: ganancias = 2850;
                case 2: ganancias = 3550;
                case 3: ganancias = 4600;
                case 4: ganancias = 5900;
            }
            MensajeEx(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$%d",ganancias);
            DarDinero(playerid, ganancias);
        }
    }
    return 1;
}
DarHabilidadCamio(playerid, level)
{
    if(PlayerInfo[playerid][pNivelCamionero] == level && PlayerInfo[playerid][pExpCamionero] < 49)
    {
        if(PlayerInfo[playerid][pVip] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0: { PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1: { PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2: { PlayerInfo[playerid][pExpCamionero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
    }
    else if(PlayerInfo[playerid][pNivelCamionero] == level && PlayerInfo[playerid][pExpCamionero] >= 49)
    {
        PlayerInfo[playerid][pNivelCamionero]++;
        PlayerInfo[playerid][pExpCamionero] = 0;
        SendClientMessage(playerid,-1,"Felicidades, Has aumentado tu nivel de camionero.");
    }
}
DarHabilidadCamio2(playerid)
{
    if(PlayerInfo[playerid][pNivelCamionero] == 6 && PlayerInfo[playerid][pExpCamionero] < 49)
    {
        if(PlayerInfo[playerid][pVip] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0:{ PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1:{ PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2:{ PlayerInfo[playerid][pExpCamionero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PlayerInfo[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
    }
    else if(PlayerInfo[playerid][pNivelCamionero] == 6 && PlayerInfo[playerid][pExpCamionero] >= 49) SendClientMessage(playerid, -1, "Has llegado al máximo nivel de este trabajo.");
}
DarHabilidadBasurero(playerid, level)
{
    if(PlayerInfo[playerid][pNivelBasurero] == level && PlayerInfo[playerid][pExpBasurero] < 49)
    {
        if(PlayerInfo[playerid][pVip] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0:{ PlayerInfo[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1:{ PlayerInfo[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2:{ PlayerInfo[playerid][pExpBasurero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PlayerInfo[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
    }
    else if(PlayerInfo[playerid][pNivelBasurero] == level && PlayerInfo[playerid][pExpBasurero] >= 49)
    {
        PlayerInfo[playerid][pNivelBasurero]++;
        PlayerInfo[playerid][pExpBasurero] = 0;
        SendClientMessage(playerid,-1,"Felicidades, Has aumentado tu nivel de basurero.");
    }
}

procesarCheckpointsBasurero(playerid)
{
    new Float:puntos[][] =
    {
        // Ruta SF
        {-110.2728,-1169.3069,2.4092},{-103.7799,-1172.5127,3.5240},{-345.9767,-756.6649,30.8484},{-426.7870,-433.8864,17.8884},{-916.0715,-446.1450,29.7584},{-1904.3972,-567.3438,25.5184},{-2244.9705,-123.7534,36.0884},{-2245.8291,84.2427,35.9984},{-2166.9063,201.9160,35.9784},{-2033.2213,313.7436,35.9284},{-2013.7318,137.0096,28.3484},{-1813.1581,-122.9985,6.3384},{-1824.8383,-559.8033,17.1384},{-815.8467,-1021.9445,83.8480},{-44.1083,-1525.1487,2.2014},{-349.6644,-757.6539,29.0136},{-428.8095,-436.5871,16.6492},{-917.4271,-450.9999,27.6603},{-1904.0535,-572.3555,24.1474},{-2248.4912,-124.0376,34.8783},{-2248.7205,83.8178,34.8784},{-2167.4629,204.8546,34.8776},{-2033.6031,316.9929,34.7233},{-2010.0227,137.4623,27.2469},{-1813.6909,-119.8742,5.2043},{-1822.1787,-559.9365,15.9207},{-817.4674,-1018.3693,83.3079},{-43.7590,-1519.9025,1.5263},
        // Ruta LS - 1
        {990.8474,-1811.6334,14.2317},{991.5659,-1805.8092,14.0539},{1548.8268,-1879.8169,13.5469},{1548.8938,-1874.5441,13.3828},{2089.1584,-1908.3224,13.5469},{2084.0916,-1908.8611,13.3828},{2222.9968,-1793.5454,13.5625},{2218.6541,-1793.9825,13.1953},{2114.7368,-1607.7476,13.5625},{2115.4761,-1613.1133,13.3904},{1994.0798,-1681.3557,13.5469},{1999.2738,-1679.7145,13.3828},{1764.0529,-1724.7991,13.5469},{1765.4800,-1729.7675,13.3828},{1735.8999,-1589.8905,13.5455},{1738.8538,-1595.5604,13.3814},{1390.0305,-1581.1624,13.5469},{1393.0277,-1587.4966,13.3564},{1365.0758,-1155.3657,23.8660},{1360.2289,-1162.8208,23.7095},{1097.2964,-1133.7189,23.8281},{1098.3059,-1139.8910,23.6563},{1046.2882,-1304.1703,13.5469},{1051.4209,-1304.8677,13.3828},{679.1686,-1311.9562,13.6760},{679.4622,-1317.1431,13.5095},{483.6781,-1277.2889,15.6511},{487.7305,-1280.6522,15.5305},{345.4417,-1368.1273,14.3875},{344.1947,-1374.5900,14.2268},{197.3550,-1743.2972,4.5101},{195.3670,-1736.5179,4.3181},{390.4010,-1779.2229,5.5900},{388.9255,-1775.0706,5.3994},
        // Ruta LS - 2
        {183.3738,-1393.7588,47.3034},{188.6838,-1395.9762,47.2736},{350.3483,-1273.5121,53.7532},{353.9030,-1277.7860,53.8950},{680.5216,-1060.3474,49.4870},{686.0798,-1062.7533,49.6633},{873.2125,-863.1124,77.5146},{871.3945,-868.6337,77.5458},{1079.9196,-774.5426,107.9675},{1081.2075,-778.0049,107.7854},{918.6940,-680.4443,117.0033},{912.7013,-677.6242,116.8398},{810.9399,-792.6181,68.5974},{808.1866,-788.2479,68.7993},{272.8895,-1100.2932,81.7537},{266.5842,-1101.4108,81.7877},{339.2604,-1189.8682,76.4328},{343.5382,-1193.1310,76.5068},{549.9263,-1156.9595,54.1546},{554.6530,-1161.1757,54.4223},{326.4816,-1192.4799,76.1984},{322.6987,-1189.3054,76.3568},{179.2384,-1389.3564,47.9640},{175.0909,-1387.1046,48.6300},{-55.1223,-1594.4856,2.7740},{-78.5097,-1592.9054,2.6172},
        // Ruta LS - 3
        {259.6662,-1435.2172,13.5396},{263.6307,-1438.7028,13.7373},{715.6998,-1119.7213,17.9918},{721.1824,-1121.8177,18.2286},{1105.8407,-958.8027,42.3986},{1106.3229,-964.0125,42.6446},{1260.1581,-1106.3085,25.0804},{1254.5852,-1106.2231,25.2560},{1193.4933,-1498.0582,13.3828},{1188.3806,-1499.1213,13.5469},{1295.2137,-1839.4456,13.3828},{1289.6144,-1837.6057,13.5469},{1039.8508,-1670.3042,13.3828},{1045.2313,-1669.8091,13.5469},{932.7011,-1486.6115,13.3750},{932.4356,-1480.9509,13.5361},{855.2783,-1392.5234,13.3664},{857.4956,-1382.1349,13.7507},{483.1931,-1499.0760,20.3036},{478.3005,-1497.9749,20.4542},{656.1319,-1675.2115,14.2370},{655.2776,-1680.0502,14.4416},{807.8727,-1757.3798,13.3872},{802.7533,-1756.1191,13.5469},{107.0301,-1530.0708,6.4494},{108.2038,-1525.6523,7.0480}
    };
    for(new i = 0; i < sizeof(puntos); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, puntos[i][0], puntos[i][1], puntos[i][2]))
        {
            if(procesarCheckpoint(playerid)) return 1;
        }
    }
    return 0;
}
procesarCheckpoint(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && BASU(GetPlayerVehicleID(playerid)))
    {
        if(PlayerTemp[playerid][pt_RolBasurero] == 1) return SendClientMessage(playerid, -1, "Tu trabajo es recolectar basura.");
        SetTimerEx("PuntoB", 500, false, "d", Companero[playerid]);
        SendClientMessage(playerid, -1, "Espera a que tu compañero recolecte la basura.");
        DisablePlayerCheckpoint(playerid);
        PuntoBaX[playerid] = 0;
        return 1;
    }
    if(!IsPlayerInAnyVehicle(playerid) && RecorridoBasu[playerid] != 0)
    {
        if(PlayerTemp[playerid][pt_RolBasurero] == 2) return SendClientMessage(playerid, -1, "Tu trabajo es manejar.");
        recogiendo[playerid]++;
        DisablePlayerCheckpoint(playerid);
        PuntoBaX[playerid] = 0;
        switch(PlayerInfo[playerid][pNivelBasurero])
        {
            case 0..1: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 13000); SetTimerEx("Recolectar", 13000, false, "d", playerid); }
            case 2: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 11000); SetTimerEx("Recolectar", 11000, false, "d", playerid); }
            case 3: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 9000); SetTimerEx("Recolectar", 9000, false, "d", playerid); }
            case 4: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 7000); SetTimerEx("Recolectar", 7000, false, "d", playerid); }
            case 5: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 5000); SetTimerEx("Recolectar", 5000, false, "d", playerid); }
            case 6..999: { LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 3000); SetTimerEx("Recolectar", 2500, false, "d", playerid); }
        }
        TimerRecoleccion[playerid] = 5;
        return 1;
    }
    return 0;
}
public PrimerP(playerid)
{
    new recorridobasurero = random(4);
    switch(recorridobasurero)
    {
        case 0:
        {
            RecorridoBasu[playerid] = 4;
            RecorridoBasu[Companero[playerid]] = 4;
            SetPlayerCheckpoint(playerid,259.6662,-1435.2172,13.5396,5.0);
            PuntoBaX[playerid] = 259.6662; PuntoBaY[playerid] = -1435.2172; PuntoBaZ[playerid] = 13.5396; PuntoBaA[playerid] = 5.0;
        }
        case 1:
        {
            RecorridoBasu[playerid] = 2;
            RecorridoBasu[Companero[playerid]] = 2;
            SetPlayerCheckpoint(playerid,-110.2728,-1169.3069,2.4092,5.0);
            PuntoBaX[playerid] = -110.2728; PuntoBaY[playerid] = -1169.3069; PuntoBaZ[playerid] = 2.4092; PuntoBaA[playerid] = 5.0;
        }
        case 2:
        {
            RecorridoBasu[playerid] = 3;
            RecorridoBasu[Companero[playerid]] = 3;
            SetPlayerCheckpoint(playerid,183.3738,-1393.7588,47.3034,5.0);
            PuntoBaX[playerid] = 183.3738; PuntoBaY[playerid] = -1393.7588; PuntoBaZ[playerid] = 47.3034; PuntoBaA[playerid] = 5.0;
        }
        case 3:
        {
            RecorridoBasu[playerid] = 4;
            RecorridoBasu[Companero[playerid]] = 4;
            SetPlayerCheckpoint(playerid,259.6662,-1435.2172,13.5396,5.0);
            PuntoBaX[playerid] = 259.6662; PuntoBaY[playerid] = -1435.2172; PuntoBaZ[playerid] = 13.5396; PuntoBaA[playerid] = 5.0;
        }
    }
    return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid == ObjetoTuning2[playerid])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(ObjetoTuning2[playerid] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, ObjetoTuning2[playerid]);
						ObjetoTuning2[playerid] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0] = EditandoCoche[playerid][0];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1] = EditandoCoche[playerid][1];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2] = EditandoCoche[playerid][2];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][0] = EditandoCoche[playerid][3];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][1] = EditandoCoche[playerid][4];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][2] = EditandoCoche[playerid][5];
					UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid]);
					UpdateVehicleObject(playerid,TuneandoCoche[playerid], ObjetoSlot[playerid]);
					Streamer_Update(playerid);
					SendClientMessage(playerid, -1, "{FFFFFF}Has cancelado la edición.");
					ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(ObjetoTuning2[playerid] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, ObjetoTuning2[playerid]);
						ObjetoTuning2[playerid] = INVALID_OBJECT_ID;
					}
					new Float:v_size[3];
					GetVehicleModelInfo(GetVehicleModel(TuneandoCoche[playerid]), VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);
					if	((VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0]) || (VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1]) || (VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2]))
					{
						SendClientMessage(playerid, -1, "{999999}La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0] = EditandoCoche[playerid][0];
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1] = EditandoCoche[playerid][1];
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2] = EditandoCoche[playerid][2];
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][0] = EditandoCoche[playerid][3];
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][1] = EditandoCoche[playerid][4];
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][2] = EditandoCoche[playerid][5];
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid]);
						Streamer_Update(playerid);
					}
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED] = true;
					SendClientMessage(playerid, -1, "{FFFFFF}Objeto actualizado.");
					ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
					UpdateVehicleObject(playerid,TuneandoCoche[playerid], ObjetoSlot[playerid]);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
    for(new i = 0; i != MAX_OBJETOS; i ++)
    {
        if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
        if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;
        Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, worldid);
    }
    SetVehicleVirtualWorld(vehicleid, worldid);
    return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: text_flag = "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Alemania
		case 1: text_flag = "{1FBEF2}ggg\n{ffffff}ggg\n{1FBEF2}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Argentina
		case 2: text_flag = "{d81e05}ggg\n{ffffff}ggg\n{d81e05}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Austria
		case 3: text_flag = "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Belgica
		case 4: text_flag = "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Bolivia
		case 5: text_flag = "{ffffff}ggg\n{00966e}ggg\n{d62612}ggg",material_size = 60,font	= "Webdings",font_size = 55,text_alignment = 1; // Bulgaria
		case 6: text_flag = "{04019a}g{ffffff}gg\n{fe0002}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Chile
		case 7: text_flag = "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 0; // Colombia
		case 8: text_flag = "{0f47af}ggg\n{ffffff}ggg\n{0f47af}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // El Salvador
		case 9: text_flag = "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // España
		case 10: text_flag = "{3a75c4}ggg\n{000000}ggg\n{ffffff}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Estonia
		case 11: text_flag = "{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Francia
		case 12: text_flag = "{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g",material_size	= 60,font = "Webdings",font_size = 55,text_alignment = 1; // Guatemala
		case 13: text_flag = "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Holanda
		case 14: text_flag = "{d2232c}ggg\n{ffffff}ggg\n{008d46}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Hungria
		case 15: text_flag = "{ff9933}ggg\n{ffffff}ggg\n{138808}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // India
		case 16: text_flag = "{ce1126}ggg\n{ffffff}ggg",material_size = 60,font = "Webdings",font_size = 60,text_alignment = 1; // Indonesia
		case 17: text_flag = "{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Irlanda
		case 18: text_flag = "{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Italia
		case 19: text_flag = "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Lituania
		case 20: text_flag = "{ef2b2d}ggg\n{ffffff}ggg\n{00a3dd}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment	= 1; // Luxemburgo
		case 21: text_flag = "{ffffff}g{d11f33}gg\n{ffffff}g{00a651}gg",material_size = 60,font = "Webdings",font_size = 60,text_alignment = 1; // Madagascar
		case 22: text_flag = "{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g",material_size	= 60,font = "Webdings",font_size = 60,text_alignment = 1; // Malta
		case 23: text_flag = "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g",material_size = 60,font = "Webdings",font_size	= 55,text_alignment	= 1; // Mali
		case 24: text_flag = "{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g",material_size = 60,font = "Webdings",font_size	= 55,text_alignment	= 1; // México
		case 25: text_flag = "{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g",material_size = 60,font = "Webdings",font_size	= 55,text_alignment	= 1; // Nigeria
		case 26: text_flag = "{ffffff}g{d21034}g\n{0067c6}g{ffffff}g",material_size = 60,font = "Webdings",font_size = 60,text_alignment = 0; // Panamá
		case 27: text_flag = "{d52b1e}ggg\n{ffffff}ggg\n{0038a8}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Paraguay
		case 28: text_flag = "{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Perú
		case 29: text_flag = "{ffffff}ggg\n{dc143c}ggg",material_size = 60,font = "Webdings",font_size = 60,text_alignment = 1; // Polonia
		case 30: text_flag = "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Rumania
		case 31: text_flag = "{ffffff}ggg\n{054da2}ggg\n{e01f26}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Rusia
		case 32: text_flag = "{3a75c4}ggg\n{f9dd16}ggg",material_size = 60,font = "Webdings",font_size = 60,text_alignment	= 1; // Ucrania
		case 33: text_flag = "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg",material_size = 60,font = "Webdings",font_size = 55,text_alignment = 1; // Venezuela
	}
	SetDynamicObjectMaterialText(objectid,index,text_flag,material_size,font,font_size,0,0xFFFFFFFF,0,text_alignment);
	return 1;
}
RegisterNewVehicleObject(playerid,vehicleid, slot)
{
	new Query[1800],auto_slot;
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(autos[i][playerid] == vehicleid) auto_slot = VehicleInfo[playerid][i][v_DBID];
	}
	if(auto_slot == 0) return 1;
	mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO `tuning_objects` (`ID_VEHICLE`, `TYPE`, `NAME`, `MODELID`,`OFF_X`, `OFF_Y`, `OFF_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`,`ATTACHED`,`COLOR_0`, `COLOR_1`, `COLOR_2`, `COLOR_3`, `COLOR_4`,`TEXT`, `FONT`, `FONT_SIZE`, `FONT_BOLD`, `FONT_COLOR`) VALUES ('%d', '%d', '%s', '%d','%f', '%f', '%f', '%f', '%f', '%f','%d','%d', '%d', '%d', '%d', '%d','%s', '%s', '%d', '%d', '%d');",auto_slot, VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]);
	new Cache:result = mysql_query(handle_db, Query, true);
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = cache_insert_id();
	cache_delete(result);
	return 1;
}
UpdateVehicleObject(playerid,vehicleid, slot)
{
	new DB_Query[1800],auto_slot;
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(autos[i][playerid] == vehicleid) auto_slot = VehicleInfo[playerid][i][v_DBID];
	}
	if(auto_slot == 0) return 1;
	format(DB_Query, sizeof DB_Query,"UPDATE `tuning_objects` SET `ID_VEHICLE` = '%d', `TYPE` = '%d', `NAME` = '%s', `MODELID` = '%d',`OFF_X` = '%f', `OFF_Y` = '%f', `OFF_Z` = '%f', `ROT_X` = '%f', `ROT_Y` = '%f', `ROT_Z` = '%f',`ATTACHED` = '%d',`COLOR_0` = '%d', `COLOR_1` = '%d', `COLOR_2` = '%d', `COLOR_3` = '%d', `COLOR_4` = '%d',`TEXT` = '%s', `FONT` = '%s', `FONT_SIZE` = '%d', `FONT_BOLD` = '%d', `FONT_COLOR` = '%d' WHERE `ID` = '%d';",auto_slot, VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]);
	mysql_query(handle_db, DB_Query);
	return 1;
}
ShowTuning(playerid, dialogid)
{
    new caption[45], dialog[128 * (MAX_OBJETOS + 2)], line_str[145];
	switch(dialogid)
	{
		case DIALOG_VOBJECT_MENU:
		{
		    format(caption, sizeof caption, "STC - '%s'", GetVehicleName(TuneandoCoche[playerid]));
		    return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "1. Mis objetos\n2. Comprar objeto\n3. Añadir texto (500$)\n4. Añadir bandera de país (2.000$)\n5. Añadir panel de país (2.000$)", ">>", "-");
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			format(caption, sizeof caption, "STC - '%s'", GetVehicleName(TuneandoCoche[playerid]));
			format(dialog, sizeof dialog, "{CCCCCC}Objeto\t{90C3D4}Colocado\n");
			for(new i = 0; i != MAX_OBJETOS; i ++)
			{
				if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_VALID])
				{
				    if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}Sí\n", i + 1, VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{CCCCCC}%d. %s\t{90C3D4}No\n", i + 1, VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			switch(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Colores\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{FFFFFF}Eliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Texto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\n{FFFFFF}Eliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{FFFFFF}Eliminar este objeto");
				}
			}
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			for(new i = 0; i != 5; i ++)
			{
				if(!VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][i]) >>> 8, i + 1);
				strcat(dialog, line_str);
			}
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			format(caption, sizeof caption, "Color (%d) de '%s'", ColorSlot[playerid], VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			format(dialog, sizeof dialog,"Color original\n{%06x}Veh Color 1\n{%06x}Veh Color 2\n{FFFFFF}Otro (ARGB)\n",VEHICLE_COLORS[ GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_COLOR_1] ] >>> 8,VEHICLE_COLORS[ GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_COLOR_2] ] >>> 8);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			format(caption, sizeof caption, "Color (%d) de '%s'", ColorSlot[playerid], VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", ">>", "Atrás");
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Está seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			format(caption, sizeof caption, "Texto '%s'", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", ">>", "Atrás");
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			format(dialog, sizeof dialog, "Texto actual:\n\"%s\"\n\nIndica el nuevo texto (1-32 caracteres)\n", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_TEXT]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar texto", dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			format(dialog, sizeof dialog, "Fuente actual:\n\"%s\"\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_FONT]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			format(dialog, sizeof dialog, "Tamaño actual: %d\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_FONT_SIZE]);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, ">>", "Atrás");
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, ">>", "Atrás");
		case DIALOG_VOBJECT_COUNTRY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona país","Alemania\nArgentina\nAustria\nBelgica\nBolivia\nBulgaria\nChile\nColombia\nEl Salvador\nEspaña\nEstonia\nFrancia\nGuatemala\nHolanda\nHungría\nIndia\nIndonesia\nIrlanda\nItalia\nLituania\nLuxemburgo\nMadagascar\nMalta\nMalí\nMéxico\nNigeria\nPanamá\nParaguay\nPerú\nPolonia\nRumanía\nRusia\nUcrania\nVenezuela\n", ">>", "Atrás");
	}
	return 1;
}
public accionesProstitutas()
{
    if(Bailarina1 != 1)
    {
        ProgresoProstituta[0] ++;
        switch(ProgresoProstituta[0])
        {
            case 1:  ApplyActorAnimation(Strips[2], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 7:  ApplyActorAnimation(Strips[2], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 14: ApplyActorAnimation(Strips[2], "STRIP","STR_B2C",4.1,0,5,1,1,0);
            case 20: ApplyActorAnimation(Strips[2], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 28: ApplyActorAnimation(Strips[2], "STRIP","STR_C2",4.1,0,5,1,1,0);
            case 35: ProgresoProstituta[0] = 0;
        }
    }
    if(Bailarina2 != 1)
    {
        ProgresoProstituta[1] ++;
        switch(ProgresoProstituta[1])
        {
            case 1: ApplyActorAnimation(Strips[8], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 6: ApplyActorAnimation(Strips[8], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 15: ProgresoProstituta[1] = 0;
        }
    }
    if(Bailarina3 != 1)
    {
        ProgresoProstituta[2] ++;
        switch(ProgresoProstituta[2])
        {
            case 1: ApplyActorAnimation(Strips[4], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[4], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 12: ProgresoProstituta[2] = 0;
        }
    }
    if(Bailarina4 != 1)
    {
        ProgresoProstituta[3] ++;
        switch(ProgresoProstituta[3])
        {
            case 1: ApplyActorAnimation(Strips[9], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[9], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 13: ApplyActorAnimation(Strips[9], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 18: ApplyActorAnimation(Strips[9], "STRIP","STR_B2C",4.1,0,5,1,1,0);
            case 22: ProgresoProstituta[3] = 0;
        }
    }
    if(Bailarina5 != 1)
    {
        ProgresoProstituta[4] ++;
        switch(ProgresoProstituta[4])
        {
            case 1: ApplyActorAnimation(Strips[7], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 8: ApplyActorAnimation(Strips[7], "STRIP","STR_C2",4.1,0,5,1,1,0);
            case 14: ApplyActorAnimation(Strips[7], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 25: ApplyActorAnimation(Strips[7], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 33: ApplyActorAnimation(Strips[7], "STRIP","STR_B2C",4.1,0,5,1,1,0);
            case 38: ProgresoProstituta[4] = 0;
        }
    }
    if(Bailarina6 != 1)
    {
        ProgresoProstituta[5] ++;
        switch(ProgresoProstituta[5])
        {
            case 1: ApplyActorAnimation(Strips[3], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[3], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 15: ProgresoProstituta[5] = 0;
        }
    }
    return true;
}
public cargarRoboTiendas()
{
    new count,Float:x,Float:y,Float:z,Float:a,vw,skin, countx;
    cache_get_result_count(count);
    for(new i = 0; i < cache_num_rows(); i++)
    {
        new content[40],p = 0;
        cache_get_value_name(i, "ID", content); p = strval(content); RoboTiendas[p][rID] = strval(content);
        if(p > 0)
        {
            cache_get_value_name(i, "X", content);  x = floatstr(content);
            cache_get_value_name(i, "Y", content);  y = floatstr(content);
            cache_get_value_name(i, "Z", content);  z = floatstr(content);
            cache_get_value_name(i, "A", content);  a = floatstr(content);
            cache_get_value_name(i, "Skin", content);   skin = strval(content);
            cache_get_value_name(i, "VW", content);         vw = strval(content);
            cache_get_value_name(i, "Localidad", content);  format(RoboTiendas[p][LocalidadRobo],38,"%s",content);
            cache_get_value_name(i, "EntradaLocalX", content); RoboTiendas[p][EntradaX] = floatstr(content);
            cache_get_value_name(i, "EntradaLocalY", content); RoboTiendas[p][EntradaY] = floatstr(content);
            cache_get_value_name(i, "EntradaLocalZ", content); RoboTiendas[p][EntradaZ] = floatstr(content);
            //cache_get_value_name(i, "EnUso", content); RoboTiendas[p][rEnUso] = strval(content);
            RoboTiendas[p][Actor] = CreateDynamicActor(skin, x, y, z, a , 1, 100.0, vw);
            countx ++;
        }
    }
    printf("[ACTORES TIENDAS]: %d", countx);
    return 1;
}
public ArrestarJugador(actor,playerid,tienda)
{
    new Float:x,Float:y,Float:z,vw;
    GetDynamicActorPos(actor, x,y,z);
    vw = GetDynamicActorVirtualWorld(actor);
    if(IsPlayerInRangeOfPoint(playerid,30.0,x,y,z))
    {
        if(GetPlayerVirtualWorld(playerid) == vw) TraerPolicia(playerid);
    }
    SetTimerEx("LevantarActor",8000,false,"i",actor);
    valortotal[playerid] = 0;
    if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
    if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
    PlayerTemp[playerid][PuedeRobar] = 0;
    RoboTiendas[tienda][TiendaRobada] = 0;
}
public LevantarActor(actor)
{
    ClearDynamicActorAnimations(actor);
}
GetXYInFrontOfActor(actor, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetDynamicActorPos(actor, x, y, a);
    GetDynamicActorFacingAngle(actor, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
public RobarTiendaTerminado(playerid,actor,tienda)
{
    RoboTiendas[tienda][TiendaRobada] = 1;
    new Float:x,Float:y,Float:z, Resultado[128],Float:cord_x, Float:cord_y,vw,cantidad_string[120];
    GetPlayerPos(playerid,x,y,z);
    ApplyDynamicActorAnimation(actor,"ped", "cower", 4.1, 1, 0, 0, 1, 0);
    format(PlayerInfo[playerid][QuienC],64,"Cámara de seguridad");
    SendClientMessage(playerid,-1,"Un empleado accionó {FF0000}la alarma{FFFFFF} y la {3399FF}policía{FFFFFF} te vio por las cámaras de seguridad.");
    SendClientMessage(playerid,-1,"Escapa del negocio y permanece lejos de la policía durante {DBED15}5 minutos {FFFFFF}para perderlos.");
    PlayerInfo[playerid][pCargos] = 2;
    ActualizarRadar();
    RoboTienda[playerid] = 1;
    SetTimerEx("Quitar2Cargos", 300000, 0, "d", playerid);
    Tiempos[playerid][TiempoMensajeRobar] =  gettime() + 2;
    SetTimerEx("ArrestarJugador",segundos(60),false,"ddd",actor,playerid,tienda);
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]), ReportCrimen(playerid,PlayerInfo[playerid][pCargos]);
    RoboTiendas[tienda][TiendaLadron] = playerid;
    UltimoRobado[playerid] = tienda;
    PuedeTomarDinero[playerid] = actor;
    format(Resultado, sizeof(Resultado),"{3399FF}[Central de policía]{FFFFFF} reportando: (({00CCFF}%s{FFFFFF})) [%d] asaltó un negocio en %s.",PlayerInfo[playerid][Nickname],playerid,RoboTiendas[tienda][LocalidadRobo]);
    SendRadioMessagePatrulla(1,-1,Resultado);
    GetXYInFrontOfActor(actor,cord_x,cord_y,0.8);
    GetDynamicActorPos(actor, x,y,z);
    vw = GetDynamicActorVirtualWorld(actor);
    new result = getRandomMoney(1600,3000);
    valortotal[playerid] = result;
    format(cantidad_string,sizeof(cantidad_string),"{00CC00}$%d{FFFFFF}\nPulsa {DBED15}'H'{FFFFFF} para tomar el dinero.",valortotal[playerid]);
    if(!IsValidDynamicPickup(roboTiendasObjeto[playerid])) roboTiendasObjeto[playerid] = CreateDynamicPickup(1212, 23, cord_x, cord_y, z, vw, -1, -1, 10.0);
    if(!IsValidDynamic3DTextLabel(LabelRobo[playerid])) LabelRobo[playerid] = CreateDynamic3DTextLabel(cantidad_string, COLOR_ROJO, cord_x, cord_y, z+0.15, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw,-1);
    return 1;
}
getRandomMoney(valorBase, valorMaximo)
{
    new value = valorMaximo - valorBase;
    new rand = random(value);
    return valorBase + rand;
}
public CargadoMensajes(playerid)
{
    if(GetPlayerPhoneBookCount(playerid) == 0 && PlayerInfo[playerid][pNumero] > 0) AddPlayerConectats(playerid);
    if(PlayerInfo[playerid][pFaccion] >= 2) SetPlayerGangZones(playerid);
    if(GetInvitacionesPlayerid(playerid) > 0 && PlayerInfo[playerid][pFaccion] == 0) MensajeEx(playerid, -1,"Tienes {DBED15}%d{FFFFFF} invitaciones de banda activas, para verlas usa {DBED15}/invitaciones.", GetInvitacionesPlayerid(playerid));
    GameTextForPlayer(playerid, "~n~~r~Cargando...~n~~w~Espera por favor", 4000, 4);
    SendClientMessage(playerid, -1, "{FA8072}El servidor está en constante crecimiento, Publica tus sugerencias en el discord.");
    SendClientMessage(playerid, -1, "{FFFFFF}Escribe {FA8072}/ayuda{FFFFFF} para recibir ayuda.");
    SendClientMessage(playerid, -1, "Para recibir ayuda de otros jugadores, usa {FA8072}/n {FFFFFF}({FA8072}y tu pregunta{FFFFFF}).");
    DarPrendas(playerid);
    Descongelar(playerid);
    return 1;
}
public PuntoB(playerid)
{
    SendClientMessage(playerid,-1,"Baja a recolectar la basura.");
    switch(RecorridoBasu[playerid])
    {
        case 1:
        {
            switch(PBasura[playerid])
            {
                case 1: { SetPlayerCheckpoint(playerid,990.8474,-1811.6334,14.2317,2.0); PuntoBaX[playerid] = 990.8474; PuntoBaY[playerid] = -1811.6334; PuntoBaZ[playerid] = 14.2317; PuntoBaA[playerid] = 2.0; }
                case 2: { SetPlayerCheckpoint(playerid,1548.8268,-1879.8169,13.5469,2.0); PuntoBaX[playerid] = 1548.8268; PuntoBaY[playerid] = -1879.8169; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 3: { SetPlayerCheckpoint(playerid,2089.1584,-1908.3224,13.5469,2.0); PuntoBaX[playerid] = 2089.1584; PuntoBaY[playerid] = -1908.3224; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 4: { SetPlayerCheckpoint(playerid,2222.9968,-1793.5454,13.5625,2.0); PuntoBaX[playerid] = 2222.9968; PuntoBaY[playerid] = -1793.5454; PuntoBaZ[playerid] = 13.5625; PuntoBaA[playerid] = 2.0; }
                case 5: { SetPlayerCheckpoint(playerid,2114.7368,-1607.7476,13.5625,2.0); PuntoBaX[playerid] = 2114.7368; PuntoBaY[playerid] = -1607.7476; PuntoBaZ[playerid] = 13.5625; PuntoBaA[playerid] = 2.0; }
                case 6: { SetPlayerCheckpoint(playerid,1994.0798,-1681.3557,13.5469,2.0); PuntoBaX[playerid] = 1994.0798; PuntoBaY[playerid] = -1681.3557; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 7: { SetPlayerCheckpoint(playerid,1764.0529,-1724.7991,13.5469,2.0); PuntoBaX[playerid] = 1764.0529; PuntoBaY[playerid] = -1724.7991; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 8: { SetPlayerCheckpoint(playerid,1735.8999,-1589.8905,13.5455,2.0); PuntoBaX[playerid] = 1735.8999; PuntoBaY[playerid] = -1589.8905; PuntoBaZ[playerid] = 13.5455; PuntoBaA[playerid] = 2.0; }
                case 9: { SetPlayerCheckpoint(playerid,1390.0305,-1581.1624,13.5469,2.0); PuntoBaX[playerid] = 1390.0305; PuntoBaY[playerid] = -1581.1624; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 10: { SetPlayerCheckpoint(playerid,1365.0758,-1155.3657,23.8660,2.0); PuntoBaX[playerid] = 1365.0758; PuntoBaY[playerid] = -1155.3657; PuntoBaZ[playerid] = 23.8660; PuntoBaA[playerid] = 2.0; }
                case 11: { SetPlayerCheckpoint(playerid,1097.2964,-1133.7189,23.8281,2.0); PuntoBaX[playerid] = 1097.2964; PuntoBaY[playerid] = -1133.7189; PuntoBaZ[playerid] = 23.8281; PuntoBaA[playerid] = 2.0; }
                case 12: { SetPlayerCheckpoint(playerid,1046.2882,-1304.1703,13.5469,2.0); PuntoBaX[playerid] = 1046.2882; PuntoBaY[playerid] = -1304.1703; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 13: { SetPlayerCheckpoint(playerid,679.1686,-1311.9562,13.6760,2.0); PuntoBaX[playerid] = 679.1686; PuntoBaY[playerid] = -1311.9562; PuntoBaZ[playerid] = 13.6760; PuntoBaA[playerid] = 2.0; }
                case 14: { SetPlayerCheckpoint(playerid,483.6781,-1277.2889,15.6511,2.0); PuntoBaX[playerid] = 483.6781; PuntoBaY[playerid] = -1277.2889; PuntoBaZ[playerid] = 15.6511; PuntoBaA[playerid] = 2.0; }
                case 15: { SetPlayerCheckpoint(playerid,345.4417,-1368.1273,14.3875,2.0); PuntoBaX[playerid] = 345.4417; PuntoBaY[playerid] = -1368.1273; PuntoBaZ[playerid] = 14.3875; PuntoBaA[playerid] = 2.0; }
                case 16: { SetPlayerCheckpoint(playerid,197.3550,-1743.2972,4.5101,2.0); PuntoBaX[playerid] = 197.3550; PuntoBaY[playerid] = -1743.2972; PuntoBaZ[playerid] = 4.5101; PuntoBaA[playerid] = 2.0; }
                case 17: { SetPlayerCheckpoint(playerid,390.4010,-1779.2229,5.5900,2.0); PuntoBaX[playerid] = 390.4010; PuntoBaY[playerid] = -1779.2229; PuntoBaZ[playerid] = 5.5900; PuntoBaA[playerid] = 2.0; }
            }
        }
        case 2:
        {
            switch(PBasura[playerid])
            {
                case 1: { SetPlayerCheckpoint(playerid,-103.7799,-1172.5127,3.5240,2.0); PuntoBaX[playerid] = -103.7799; PuntoBaY[playerid] = -1172.5127; PuntoBaZ[playerid] = 3.5240; PuntoBaA[playerid] = 2.0; }
                case 2: { SetPlayerCheckpoint(playerid,-345.9767,-756.6649,30.8484,2.0); PuntoBaX[playerid] = -345.9767; PuntoBaY[playerid] = -756.6649; PuntoBaZ[playerid] = 30.8484; PuntoBaA[playerid] = 2.0; }
                case 3: { SetPlayerCheckpoint(playerid,-426.7870,-433.8864,17.8884,2.0); PuntoBaX[playerid] = -426.7870; PuntoBaY[playerid] = -433.8864; PuntoBaZ[playerid] = 17.8884; PuntoBaA[playerid] = 2.0; }
                case 4: { SetPlayerCheckpoint(playerid,-916.0715,-446.1450,29.7584,2.0); PuntoBaX[playerid] = -916.0715; PuntoBaY[playerid] = -446.1450; PuntoBaZ[playerid] = 29.7584; PuntoBaA[playerid] = 2.0; }
                case 5: { SetPlayerCheckpoint(playerid,-1904.3972,-567.3438,25.5184,2.0); PuntoBaX[playerid] = -1904.3972; PuntoBaY[playerid] = -567.3438; PuntoBaZ[playerid] = 25.5184; PuntoBaA[playerid] = 2.0; }
                case 6: { SetPlayerCheckpoint(playerid,-2244.9705,-123.7534,36.0884,2.0); PuntoBaX[playerid] = -2244.9705; PuntoBaY[playerid] = -123.7534; PuntoBaZ[playerid] = 36.0884; PuntoBaA[playerid] = 2.0; }
                case 7: { SetPlayerCheckpoint(playerid,-2245.8291,84.2427,35.9984,2.0); PuntoBaX[playerid] = -2245.8291; PuntoBaY[playerid] = 84.2427; PuntoBaZ[playerid] = 35.9984; PuntoBaA[playerid] = 2.0; }
                case 8: { SetPlayerCheckpoint(playerid,-2166.9063,201.9160,35.9784,2.0); PuntoBaX[playerid] = -2166.9063; PuntoBaY[playerid] = 201.9160; PuntoBaZ[playerid] = 35.9784; PuntoBaA[playerid] = 2.0; }
                case 9: { SetPlayerCheckpoint(playerid,-2033.2213,313.7436,35.9284,2.0); PuntoBaX[playerid] = -2033.2213; PuntoBaY[playerid] = 313.7436; PuntoBaZ[playerid] = 35.9284; PuntoBaA[playerid] = 2.0; }
                case 10: { SetPlayerCheckpoint(playerid,-2013.7318,137.0096,28.3484,2.0); PuntoBaX[playerid] = -2013.7318; PuntoBaY[playerid] = 137.0096; PuntoBaZ[playerid] = 28.3484; PuntoBaA[playerid] = 2.0; }
                case 11: { SetPlayerCheckpoint(playerid,-1813.1581,-122.9985,6.3384,2.0); PuntoBaX[playerid] = -1813.1581; PuntoBaY[playerid] = -122.9985; PuntoBaZ[playerid] = 6.3384; PuntoBaA[playerid] = 2.0; }
                case 12: { SetPlayerCheckpoint(playerid,-1824.8383,-559.8033,17.1384,2.0); PuntoBaX[playerid] = -1824.8383; PuntoBaY[playerid] = -559.8033; PuntoBaZ[playerid] = 17.1384; PuntoBaA[playerid] = 2.0; }
                case 13: { SetPlayerCheckpoint(playerid,-815.8467,-1021.9445,83.8480,2.0); PuntoBaX[playerid] = -815.8467; PuntoBaY[playerid] = -1021.9445; PuntoBaZ[playerid] = 83.8480; PuntoBaA[playerid] = 2.0; }
                case 14: { SetPlayerCheckpoint(playerid,-44.1083,-1525.1487,2.2014,2.0); PuntoBaX[playerid] = -44.1083; PuntoBaY[playerid] = -1525.1487; PuntoBaZ[playerid] = 2.2014; PuntoBaA[playerid] = 2.0; }
            }
        }
        case 3:
        {
            switch(PBasura[playerid])
            {
                case 1: { SetPlayerCheckpoint(playerid,188.6838,-1395.9762,47.2736,2.0); PuntoBaX[playerid] = 188.6838; PuntoBaY[playerid] = -1395.9762; PuntoBaZ[playerid] = 47.2736; PuntoBaA[playerid] = 2.0; }
                case 2: { SetPlayerCheckpoint(playerid,353.9030,-1277.7860,53.8950,2.0); PuntoBaX[playerid] = 353.9030; PuntoBaY[playerid] = -1277.7860; PuntoBaZ[playerid] = 53.8950; PuntoBaA[playerid] = 2.0; }
                case 3: { SetPlayerCheckpoint(playerid,686.0798,-1062.7533,49.6633,2.0); PuntoBaX[playerid] = 686.0798; PuntoBaY[playerid] = -1062.7533; PuntoBaZ[playerid] = 49.6633; PuntoBaA[playerid] = 2.0; }
                case 4: { SetPlayerCheckpoint(playerid,871.3945,-868.6337,77.5458,2.0); PuntoBaX[playerid] = 871.3945; PuntoBaY[playerid] = -868.6337; PuntoBaZ[playerid] = 77.5458; PuntoBaA[playerid] = 2.0; }
                case 5: { SetPlayerCheckpoint(playerid,1081.2075,-778.0049,107.7854,2.0); PuntoBaX[playerid] = 1081.2075; PuntoBaY[playerid] = -778.0049; PuntoBaZ[playerid] = 107.7854; PuntoBaA[playerid] = 2.0; }
                case 6: { SetPlayerCheckpoint(playerid,912.7013,-677.6242,116.8398,2.0); PuntoBaX[playerid] = 912.7013; PuntoBaY[playerid] = -677.6242; PuntoBaZ[playerid] = 116.8398; PuntoBaA[playerid] = 2.0; }
                case 7: { SetPlayerCheckpoint(playerid,808.1866,-788.2479,68.7993,2.0); PuntoBaX[playerid] = 808.1866; PuntoBaY[playerid] = -788.2479; PuntoBaZ[playerid] = 68.7993; PuntoBaA[playerid] = 2.0; }
                case 8: { SetPlayerCheckpoint(playerid,266.5842,-1101.4108,81.7877,2.0); PuntoBaX[playerid] = 266.5842; PuntoBaY[playerid] = -1101.4108; PuntoBaZ[playerid] = 81.7877; PuntoBaA[playerid] = 2.0; }
                case 9: { SetPlayerCheckpoint(playerid,343.5382,-1193.1310,76.5068,2.0); PuntoBaX[playerid] = 343.5382; PuntoBaY[playerid] = -1193.1310; PuntoBaZ[playerid] = 76.5068; PuntoBaA[playerid] = 2.0; }
                case 10: { SetPlayerCheckpoint(playerid,554.6530,-1161.1757,54.4223,2.0); PuntoBaX[playerid] = 554.6530; PuntoBaY[playerid] = -1161.1757; PuntoBaZ[playerid] = 54.4223; PuntoBaA[playerid] = 2.0; }
                case 11: { SetPlayerCheckpoint(playerid,322.6987,-1189.3054,76.3568,2.0); PuntoBaX[playerid] = 322.6987; PuntoBaY[playerid] = -1189.3054; PuntoBaZ[playerid] = 76.3568; PuntoBaA[playerid] = 2.0; }
                case 12: { SetPlayerCheckpoint(playerid,175.0909,-1387.1046,48.6300,2.0); PuntoBaX[playerid] = 175.0909; PuntoBaY[playerid] = -1387.1046; PuntoBaZ[playerid] = 48.6300; PuntoBaA[playerid] = 2.0; }
                case 13: { SetPlayerCheckpoint(playerid,-78.5097,-1592.9054,2.6172,2.0); PuntoBaX[playerid] = -78.5097; PuntoBaY[playerid] = -1592.9054; PuntoBaZ[playerid] = 2.6172; PuntoBaA[playerid] = 2.0; }
            }
        }
        case 4:
        {
            switch(PBasura[playerid])
            {
                case 1: { SetPlayerCheckpoint(playerid,263.6307,-1438.7028,13.7373,2.0); PuntoBaX[playerid] = 263.6307; PuntoBaY[playerid] = -1438.7028; PuntoBaZ[playerid] = 13.7373; PuntoBaA[playerid] = 2.0; }
                case 2: { SetPlayerCheckpoint(playerid,721.1824,-1121.8177,18.2286,2.0); PuntoBaX[playerid] = 721.1824; PuntoBaY[playerid] = -1121.8177; PuntoBaZ[playerid] = 18.2286; PuntoBaA[playerid] = 2.0; }
                case 3: { SetPlayerCheckpoint(playerid,1106.3229,-964.0125,42.6446,2.0); PuntoBaX[playerid] = 1106.3229; PuntoBaY[playerid] = -964.0125; PuntoBaZ[playerid] = 42.6446; PuntoBaA[playerid] = 2.0; }
                case 4: { SetPlayerCheckpoint(playerid,1254.5852,-1106.2231,25.2560,2.0); PuntoBaX[playerid] = 1254.5852; PuntoBaY[playerid] = -1106.2231; PuntoBaZ[playerid] = 25.2560; PuntoBaA[playerid] = 2.0; }
                case 5: { SetPlayerCheckpoint(playerid,1188.3806,-1499.1213,13.5469,2.0); PuntoBaX[playerid] = 1188.3806; PuntoBaY[playerid] = -1499.1213; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 6: { SetPlayerCheckpoint(playerid,1289.6144,-1837.6057,13.5469,2.0); PuntoBaX[playerid] = 1289.6144; PuntoBaY[playerid] = -1837.6057; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 7: { SetPlayerCheckpoint(playerid,1045.2313,-1669.8091,13.5469,2.0); PuntoBaX[playerid] = 1045.2313; PuntoBaY[playerid] = -1669.8091; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 8: { SetPlayerCheckpoint(playerid,932.4356,-1480.9509,13.5361,2.0); PuntoBaX[playerid] = 932.4356; PuntoBaY[playerid] = -1480.9509; PuntoBaZ[playerid] = 13.5361; PuntoBaA[playerid] = 2.0; }
                case 9: { SetPlayerCheckpoint(playerid,857.4956,-1382.1349,13.7507,2.0); PuntoBaX[playerid] = 857.4956; PuntoBaY[playerid] = -1382.1349; PuntoBaZ[playerid] = 13.7507; PuntoBaA[playerid] = 2.0; }
                case 10: { SetPlayerCheckpoint(playerid,478.3005,-1497.9749,20.4542,2.0); PuntoBaX[playerid] = 478.3005; PuntoBaY[playerid] = -1497.9749; PuntoBaZ[playerid] = 20.4542; PuntoBaA[playerid] = 2.0; }
                case 11: { SetPlayerCheckpoint(playerid,655.2776,-1680.0502,14.4416,2.0); PuntoBaX[playerid] = 655.2776; PuntoBaY[playerid] = -1680.0502; PuntoBaZ[playerid] = 14.4416; PuntoBaA[playerid] = 2.0; }
                case 12: { SetPlayerCheckpoint(playerid,802.7533,-1756.1191,13.5469,2.0); PuntoBaX[playerid] = 802.7533; PuntoBaY[playerid] = -1756.1191; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
                case 13: { SetPlayerCheckpoint(playerid,108.2038,-1525.6523,7.0480,2.0); PuntoBaX[playerid] = 108.2038; PuntoBaY[playerid] = -1525.6523; PuntoBaZ[playerid] = 7.0480; PuntoBaA[playerid] = 2.0; }
            }
        }
    }
}
public ActualizarLabelArmas(f)
{
    new string2[300];
    format(string2,sizeof(string2),"{EB0000}Armas{FFFFFF}\nCantidad disponible: {00CC00}%d{FFFFFF}\n\nPulsa {DBED16}'H'{FFFFFF} para equipar una.\nPulsa {00CCFF}'Y'{FFFFFF} para guardar el arma que llevas en tus manos.",Fabricas[f][pRecortada]+Fabricas[f][pUzi]+Fabricas[f][pTec9]+Fabricas[f][pSniper]);
	UpdateDynamic3DTextLabelText(Fabricas[f][pLabel4], COLOR_ROJO, string2);
}

public CargarCajasFabrica(id)
{
    for(new a1 = 0; a1 < Fabricas[id][Almacen1]; a1++) Fabricas[id][Meta1][a1] = CreateDynamicObject(1271, Cajas1[a1][0], Cajas1[a1][1], Cajas1[a1][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a2 = 0; a2 < Fabricas[id][Almacen2]; a2++) Fabricas[id][Meta2][a2] = CreateDynamicObject(1271, Cajas2[a2][0], Cajas2[a2][1], Cajas2[a2][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a3 = 0; a3 < Fabricas[id][Almacen3]; a3++) Fabricas[id][Meta3][a3] = CreateDynamicObject(1271, Cajas3[a3][0], Cajas3[a3][1], Cajas3[a3][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a4 = 0; a4 < Fabricas[id][Almacen4]; a4++) Fabricas[id][Meta4][a4] = CreateDynamicObject(1271, Cajas4[a4][0], Cajas4[a4][1], Cajas4[a4][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a5 = 0; a5 < Fabricas[id][Almacen5]; a5++) Fabricas[id][Meta5][a5] = CreateDynamicObject(1271, Cajas5[a5][0], Cajas5[a5][1], Cajas5[a5][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a6 = 0; a6 < Fabricas[id][Almacen6]; a6++) Fabricas[id][Meta6][a6] = CreateDynamicObject(1271, Cajas6[a6][0], Cajas6[a6][1], Cajas6[a6][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a7 = 0; a7 < Fabricas[id][Almacen7]; a7++) Fabricas[id][Meta7][a7] = CreateDynamicObject(1271, Cajas7[a7][0], Cajas7[a7][1], Cajas7[a7][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a8 = 0; a8 < Fabricas[id][Almacen8]; a8++) Fabricas[id][Meta8][a8] = CreateDynamicObject(1271, Cajas8[a8][0], Cajas8[a8][1], Cajas8[a8][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a9 = 0; a9 < Fabricas[id][Almacen9]; a9++) Fabricas[id][Meta9][a9] = CreateDynamicObject(1271, Cajas9[a9][0], Cajas9[a9][1], Cajas9[a9][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	for(new a10 = 0; a10 < Fabricas[id][Almacen10]; a10++) Fabricas[id][Meta10][a10] = CreateDynamicObject(1271, Cajas10[a10][0], Cajas10[a10][1], Cajas10[a10][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
public LoadBarrelMeta(f)
{
    QuimicosActivo[f] = 0;
    switch(f)
    {
        case 1:
        {
            //Aereopuerto Abandonado
            Fabricas[f][Barriles][0] = CreateDynamicObject(3632,-30.6975000,2346.3271480,23.6159990,0.0000000,0.0000000,310.0419920); //
            Fabricas[f][Barriles][1] = CreateDynamicObject(3632,-33.3499180,2346.8237300,23.6159990,0.0000000,0.0000000,59.7496800); //
            Fabricas[f][Barriles][2] = CreateDynamicObject(3632,-28.3035910,2348.0998540,23.6159990,0.0000000,0.0000000,223.1848600); //
            Fabricas[f][Barriles][3] = CreateDynamicObject(3632,-30.8481290,2349.2216800,23.7759990,0.0000000,0.0000000,285.9041750); //
            Fabricas[f][Barriles][4] = CreateDynamicObject(3632,-33.4898990,2349.5942380,23.7759990,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][0] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -30.697500, 2346.327148, 23.615999, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][1] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -33.349918, 2346.823730, 23.615999, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -28.303591, 2348.099854, 23.615999, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][3] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -30.848129, 2349.221680, 23.775999, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -33.489899, 2349.594238, 23.775999, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 2:
        {
            //San Fierro
            Fabricas[f][Barriles][5] = CreateDynamicObject(3632,-1857.8378910,111.2881470,14.5913000,0.0000000,0.0000000,82.8940280); //
            Fabricas[f][Barriles][6] = CreateDynamicObject(3632,-1860.7447510,110.8847580,14.5913000,0.0000000,0.0000000,39.6296500); //
            Fabricas[f][Barriles][7] = CreateDynamicObject(3632,-1863.0867920,111.2587130,14.5913000,0.0000000,0.0000000,25.0342690); //
            Fabricas[f][Barriles][8] = CreateDynamicObject(3632,-1859.8774410,113.1261980,14.5913000,0.0000000,0.0000000,85.3594440); //
            Fabricas[f][Barriles][9] = CreateDynamicObject(3632,-1862.7319340,113.7491910,14.5913000,0.0000000,0.0000000,42.1612590); //
            Fabricas[f][BarrilesText][5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1857.837891, 111.288147, 14.591300, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][6] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1860.744751, 110.884758, 14.591300, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][7] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1863.086792, 111.258713, 14.591300, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][8] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1859.877441, 113.126198, 14.591300, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][9] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1862.731934, 113.749191, 14.591300, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 3:
        {
            //El de la casita
            Fabricas[f][Barriles][10] = CreateDynamicObject(3632,-1043.1005860,1554.1203610,32.8095020,0.0000000,0.0000000,301.7621460); //
            Fabricas[f][Barriles][11] = CreateDynamicObject(3632,-1045.4201660,1554.1284180,32.8095020,0.0000000,0.0000000,265.3247070); //
            Fabricas[f][Barriles][12] = CreateDynamicObject(3632,-1044.3238530,1551.9464110,32.8694990,0.0000000,0.0000000,325.0708620); //
            Fabricas[f][Barriles][13] = CreateDynamicObject(3632,-1047.5682370,1552.7779540,32.8095020,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][14] = CreateDynamicObject(3632,-1044.6973880,1549.8010250,32.8095020,0.0000000,0.0000000,315.7207640); //
            Fabricas[f][BarrilesText][10] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1043.100586, 1554.120361, 32.809502, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][11] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1045.420166, 1554.128418, 32.809502, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][12] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1044.323853, 1551.946411, 32.869499, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][13] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1047.568237, 1552.777954, 32.809502, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][14] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -1044.697388, 1549.801025, 32.809502, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 4:
        {
            //El de transportista
            Fabricas[f][Barriles][15] = CreateDynamicObject(3632,578.42963,1224.96570,11.17437,0.0000000,0.0000000,0.00000); //
            Fabricas[f][Barriles][16] = CreateDynamicObject(3632,576.36023,1223.83167,11.17437,0.0000000,0.0000000,0.00000); //
            Fabricas[f][Barriles][17] = CreateDynamicObject(3632,580.68970,1226.33838,11.17437,0.0000000,0.0000000,0.00000); //
            Fabricas[f][Barriles][18] = CreateDynamicObject(3632,580.02942,1224.71436,11.17437,0.0000000,0.0000000,0.00000); //
            Fabricas[f][Barriles][19] = CreateDynamicObject(3632,577.71387,1223.57410,11.17437,0.0000000,0.0000000,315.7207640); //
            Fabricas[f][BarrilesText][15] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 578.42963, 1224.96570, 11.17437, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][16] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 576.36023, 1223.83167, 11.17437, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][17] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 580.68970, 1226.33838, 11.17437, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][18] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 580.02942, 1224.71436, 11.17437, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][19] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 577.71387, 1223.57410, 11.17437, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
		}
		case 5:
        {
            //Los Santos
            Fabricas[f][Barriles][20] = CreateDynamicObject(3632,2820.55347,-1425.63550,15.78511,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][21] = CreateDynamicObject(3632,2816.92700,-1425.51294,15.78511,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][22] = CreateDynamicObject(3632,2820.82959,-1428.89417,15.78511,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][23] = CreateDynamicObject(3632,2818.99951,-1427.37598,15.78511,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][24] = CreateDynamicObject(3632,2816.95410,-1428.76807,15.78511,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][20] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2820.55347,-1425.63550,15.78511, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][21] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2816.92700,-1425.51294,15.78511, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][22] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2820.82959,-1428.89417,15.78511, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][23] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2818.99951,-1427.37598,15.78511, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][24] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2816.95410,-1428.76807,15.78511, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 6:
        {
            //El de Burger-Shot
            Fabricas[f][Barriles][25] = CreateDynamicObject(3632,1201.20227,-975.79108,42.94669,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][26] = CreateDynamicObject(3632,1201.16089,-977.92572,42.94669,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][27] = CreateDynamicObject(3632,1202.96350,-975.65759,42.94669,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][28] = CreateDynamicObject(3632,1202.96350,-975.65759,42.94669,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][29] = CreateDynamicObject(3632,1202.13647,-976.76172,42.94669,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][25] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 1201.20227, -975.79108, 42.94669, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][26] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 1201.16089, -977.92572, 42.94669, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][27] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 1202.96350, -975.65759, 42.94669, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][28] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 1202.96350, -975.65759, 42.94669, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][29] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 1202.13647, -976.76172, 42.94669, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 7:
        {
            //El de la antena
            Fabricas[f][Barriles][30] = CreateDynamicObject(3632,-320.14874,1569.34729,74.84763,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][31] = CreateDynamicObject(3632,-319.08228,1567.97302,74.84763,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][32] = CreateDynamicObject(3632,-318.95718,1570.57922,74.84763,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][33] = CreateDynamicObject(3632,-317.59256,1568.49060,74.84763,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][34] = CreateDynamicObject(3632,-317.46780,1570.28040,74.84763,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][30] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -320.14874, 1569.34729, 74.84763, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][31] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -319.08228, 1567.97302, 74.84763, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][32] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -318.95718, 1570.57922, 74.84763, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][33] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -317.59256, 1568.49060, 74.84763, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][34] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -317.46780, 1570.28040, 74.84763, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 8:
        {
            //El del muelle
            Fabricas[f][Barriles][35] = CreateDynamicObject(3632,-2006.83032,1375.19971,6.59055,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][36] = CreateDynamicObject(3632,-2004.46497,1375.19360,6.59055,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][37] = CreateDynamicObject(3632,-2002.28284,1375.20081,6.59055,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][38] = CreateDynamicObject(3632,-2003.26001,1377.16541,6.59055,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][39] = CreateDynamicObject(3632,-2005.53418,1377.34277,6.59055,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][35] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2006.83032, 1375.19971, 6.59055, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][36] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2004.46497, 1375.19360, 6.59055, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][37] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2002.28284, 1375.20081, 6.59055, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][38] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2003.26001, 1377.16541, 6.59055, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][39] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2005.53418, 1377.34277, 6.59055, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
		}
        case 9:
        {
            //El del puente
            Fabricas[f][Barriles][40] = CreateDynamicObject(3632,-2182.02222,1217.24878,33.38559,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][41] = CreateDynamicObject(3632,-2178.18164,1217.13647,33.38559,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][42] = CreateDynamicObject(3632,-2180.09277,1217.05579,33.38559,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][43] = CreateDynamicObject(3632,-2179.03271,1218.76392,33.38559,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][44] = CreateDynamicObject(3632,-2180.76733,1218.98425,33.38559,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][40] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2182.02222, 1217.24878, 33.38559, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][41] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2178.18164, 1217.13647, 33.38559, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][42] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2180.09277, 1217.05579, 33.38559, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][43] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2179.03271, 1218.76392, 33.38559, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][44] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, -2180.76733, 1218.98425, 33.38559, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 10:
        {
            //El de palomino
            Fabricas[f][Barriles][45] = CreateDynamicObject(3632,2258.50220,66.98792,25.94164,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][46] = CreateDynamicObject(3632,2255.90234,67.02686,25.94164,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][47] = CreateDynamicObject(3632,2258.48169,69.00379,25.94164,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][48] = CreateDynamicObject(3632,2257.33911,67.79047,25.94164,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][49] = CreateDynamicObject(3632,2256.38159,68.79794,25.94164,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][BarrilesText][45] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2258.50220, 66.98792, 25.94164, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][46] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2255.90234, 67.02686, 25.94164, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][47] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2258.48169, 69.00379, 25.94164, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][48] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2257.33911, 67.79047, 25.94164, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][49] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 2256.38159, 68.79794, 25.94164, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
        case 11:
        {
            //Casa abandonada
            Fabricas[f][Barriles][50] = CreateDynamicObject(3632,793.95807,1680.78711,4.70481,0.0000000,0.0000000,301.7621460); //
            Fabricas[f][Barriles][51] = CreateDynamicObject(3632,793.92041,1682.16956,4.70481,0.0000000,0.0000000,265.3247070); //
            Fabricas[f][Barriles][52] = CreateDynamicObject(3632,793.93506,1683.51709,4.70481,0.0000000,0.0000000,325.0708620); //
            Fabricas[f][Barriles][53] = CreateDynamicObject(3632,794.00323,1684.79700,4.70481,0.0000000,0.0000000,0.0000000); //
            Fabricas[f][Barriles][54] = CreateDynamicObject(3632,793.97052,1686.08948,4.70481,0.0000000,0.0000000,315.7207640); //
            Fabricas[f][BarrilesText][50] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 793.95807, 1680.78711, 4.70481, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][51] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 793.92041, 1682.16956, 4.70481, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][52] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 793.93506, 1683.51709, 4.70481, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][53] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 794.00323, 1684.79700, 4.70481, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
            Fabricas[f][BarrilesText][54] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para levantar el tanque.", COLOR_ROJO, 793.97052, 1686.08948, 4.70481, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0,-1,100.0);
        }
    }
}
public QuitarReporte(playerid)
{
	if(reportar[playerid] != INVALID_PLAYER_ID) reportar[playerid] = INVALID_PLAYER_ID;
}
public Forzado(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",1);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
					GuardarHerramienta(playerid);
					SacarAnimF(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",1);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		default:
		{
			CasaAbierta = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",1);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado2(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta2 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",2);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta2 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",2);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta2 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",2);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado3(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta3 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",3);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta3 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",3);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
                	DarHabilidadLadron2(playerid);
                	RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta3 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",3);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado4(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta4 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",4);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
                    DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta4 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",4);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta4 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",4);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado5(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta5 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",5);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta5 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",5);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta5 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",5);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado6(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta6 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",6);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta6 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",6);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta6 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",6);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado7(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta7 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",7);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 178.00000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta7 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",7);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 83.00000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta7 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",7);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 83.00000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado8(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta8 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",8);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
				    DarHabilidadLadron1(playerid);
				    RevisarLogro(playerid,12);
				}
                default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta8 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",8);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta8 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",8);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado9(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta9 = 1;
					SetTimerEx("CerrarPuerta",segundos(28),false,"d",9);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta9 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",9);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta9 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",9);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado10(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta10 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",10);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta10 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",10);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta10 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",10);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado11(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta11 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",11);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta11 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",11);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta11 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",11);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado12(playerid)
{
	new Float:Pos[3];
	TiempoForzarCerradura[playerid] = 0;
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PlayerInfo[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta12 = 1;
					SetTimerEx("CerrarPuerta",segundos(20),false,"d",12);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta12 = 1;
					SetTimerEx("CerrarPuerta",segundos(24),false,"d",12);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
					RevisarLogro(playerid,12);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {DBED15}1 minuto{FFFFFF} para alejarte de la casa a más de {00CC00}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta12 = 1;
			SetTimerEx("CerrarPuerta",segundos(28),false,"d",12);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{00CC00}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {00CC00}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}

public AntiCJ(playerid)
{
    SetPlayerVirtualWorld(playerid,VWTemporal[playerid]);
    Descongelar(playerid);
}

public Recolectar(playerid)
{
    new item = random(16);
    switch(item)
    {
        case 0:
        {
            SendClientMessage(playerid,-1,"Has encontrado {00FF00}50gr de crack{FFFFFF} y le diste la mitad a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {F00000}50gr de crack{FFFFFF} y te dio la mitad.");
            PlayerInfo[playerid][pCrack] += 25;
            PlayerInfo[Companero[playerid]][pCrack] += 25;
        }
        case 3:
        {
            SendClientMessage(playerid,-1,"Has encontrado un {00CC00}par de manoplas{FFFFFF} y le entregas una a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero ha encontrado un {00CC00}par de manoplas{FFFFFF} y te entregó una.");
            DarArma(playerid,1);
            DarArma(Companero[playerid],1);
        }
        case 6:
        {
            SendClientMessage(playerid,-1,"Has encontrado una billetera con {00CC00}$20.000{FFFFFF} y le diste la mitad a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero encontró una billetera con {00CC00}$20.000{FFFFFF}, y te dio la mitad.");
            DarDinero(playerid,10000);
            DarDinero(Companero[playerid],10000);
        }
        case 9:
        {
            SendClientMessage(playerid,-1,"Has encontrado {00CC00}50 medicamentos{FFFFFF} y le diste la mitad a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {00CC00}50 medicamentos{FFFFFF} y te dio la mitad.");
            PlayerInfo[playerid][pCrack] += 25;
            PlayerInfo[Companero[playerid]][pCrack] += 25;
        }
        case 12:
        {
            SendClientMessage(playerid,-1,"Has encontrado {00CC00}12 diamantes{FFFFFF} y le diste la mitad a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {00CC00}12 diamantes{FFFFFF} y te dio la mitad.");
            PlayerInfo[playerid][Moneda] += 6;
            PlayerInfo[Companero[playerid]][Moneda] += 6;
        }
        case 15:
        {
            SendClientMessage(playerid,-1,"Has encontrado {00FF00}50gr de marihuana{FFFFFF} y le diste la mitad a tu compañero.");
            SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {F00000}50gr de marihuana{FFFFFF} y te dio la mitad.");
            PlayerInfo[playerid][pMarihuana] += 25;
            PlayerInfo[Companero[playerid]][pMarihuana] += 25;
        }
    }
    TimerRecoleccion[playerid] = 0;
    SendClientMessage(playerid, -1, "Sube al camión de basura para continuar.");
    recogiendo[playerid] = 0;
    PBasura[playerid]++;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    if(RecorridoBasu[playerid] == 1)
    {
        switch(PBasura[playerid])
        {
            case 2: { SetPlayerCheckpoint(Companero[playerid], 1548.8938,-1874.5441,13.3828, 5.0); PuntoBaX[Companero[playerid]] = 1548.8938; PuntoBaY[Companero[playerid]] = -1874.5441; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 3: { SetPlayerCheckpoint(Companero[playerid], 2084.0916,-1908.8611,13.3828,5.0); PuntoBaX[Companero[playerid]] = 2084.0916; PuntoBaY[Companero[playerid]] = -1908.8611; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 4: { SetPlayerCheckpoint(Companero[playerid], 2218.6541,-1793.9825,13.1953,5.0); PuntoBaX[Companero[playerid]] = 2218.6541; PuntoBaY[Companero[playerid]] = -1793.9825; PuntoBaZ[Companero[playerid]] = 13.1953; PuntoBaA[Companero[playerid]] = 5.0; }
            case 5: { SetPlayerCheckpoint(Companero[playerid], 2115.4761,-1613.1133,13.3904,5.0); PuntoBaX[Companero[playerid]] = 2115.4761; PuntoBaY[Companero[playerid]] = -1613.1133; PuntoBaZ[Companero[playerid]] = 13.3904; PuntoBaA[Companero[playerid]] = 5.0; }
            case 6: { SetPlayerCheckpoint(Companero[playerid], 1999.2738,-1679.7145,13.3828,5.0); PuntoBaX[Companero[playerid]] = 1999.2738; PuntoBaY[Companero[playerid]] = -1679.7145; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 7: { SetPlayerCheckpoint(Companero[playerid], 1765.4800,-1729.7675,13.3828,5.0); PuntoBaX[Companero[playerid]] = 1765.4800; PuntoBaY[Companero[playerid]] = -1729.7675; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 8: { SetPlayerCheckpoint(Companero[playerid], 1738.8538,-1595.5604,13.3814,5.0); PuntoBaX[Companero[playerid]] = 1738.8538; PuntoBaY[Companero[playerid]] = -1595.5604; PuntoBaZ[Companero[playerid]] = 13.3814; PuntoBaA[Companero[playerid]] = 5.0; }
            case 9: { SetPlayerCheckpoint(Companero[playerid], 1393.0277,-1587.4966,13.3564,5.0); PuntoBaX[Companero[playerid]] = 1393.0277; PuntoBaY[Companero[playerid]] = -1587.4966; PuntoBaZ[Companero[playerid]] = 13.3564; PuntoBaA[Companero[playerid]] = 5.0; }
            case 10: { SetPlayerCheckpoint(Companero[playerid],1360.2289,-1162.8208,23.7095,5.0); PuntoBaX[Companero[playerid]] = 1360.2289; PuntoBaY[Companero[playerid]] = -1162.8208; PuntoBaZ[Companero[playerid]] = 23.7095; PuntoBaA[Companero[playerid]] = 5.0; }
            case 11: { SetPlayerCheckpoint(Companero[playerid],1098.3059,-1139.8910,23.6563,5.0); PuntoBaX[Companero[playerid]] = 1098.3059; PuntoBaY[Companero[playerid]] = -1139.8910; PuntoBaZ[Companero[playerid]] = 23.6563; PuntoBaA[Companero[playerid]] = 5.0; }
            case 12: { SetPlayerCheckpoint(Companero[playerid],1051.4209,-1304.8677,13.3828,5.0); PuntoBaX[Companero[playerid]] = 1051.4209; PuntoBaY[Companero[playerid]] = -1304.8677; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 13: { SetPlayerCheckpoint(Companero[playerid],679.4622,-1317.1431,13.5095,5.0); PuntoBaX[Companero[playerid]] = 679.4622; PuntoBaY[Companero[playerid]] = -1317.1431; PuntoBaZ[Companero[playerid]] = 13.5095; PuntoBaA[Companero[playerid]] = 5.0; }
            case 14: { SetPlayerCheckpoint(Companero[playerid],487.7305,-1280.6522,15.5305,5.0); PuntoBaX[Companero[playerid]] = 487.7305; PuntoBaY[Companero[playerid]] = -1280.6522; PuntoBaZ[Companero[playerid]] = 15.5305; PuntoBaA[Companero[playerid]] = 5.0; }
            case 15: { SetPlayerCheckpoint(Companero[playerid],344.1947,-1374.5900,14.2268,5.0); PuntoBaX[Companero[playerid]] = 344.1947; PuntoBaY[Companero[playerid]] = -1374.5900; PuntoBaZ[Companero[playerid]] = 14.2268; PuntoBaA[Companero[playerid]] = 5.0; }
            case 16: { SetPlayerCheckpoint(Companero[playerid],195.3670,-1736.5179,4.3181,5.0); PuntoBaX[Companero[playerid]] = 195.3670; PuntoBaY[Companero[playerid]] = -1736.5179; PuntoBaZ[Companero[playerid]] = 4.3181; PuntoBaA[Companero[playerid]] = 5.0; }
            case 17: { SetPlayerCheckpoint(Companero[playerid],388.9255,-1775.0706,5.3994,5.0); PuntoBaX[Companero[playerid]] = 388.9255; PuntoBaY[Companero[playerid]] = -1775.0706; PuntoBaZ[Companero[playerid]] = 5.3994; PuntoBaA[Companero[playerid]] = 5.0; }
            case 18: { SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0); PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
        }
    }
    else if(RecorridoBasu[playerid] == 2)
    {
        switch(PBasura[playerid])
        {
            case 2: { SetPlayerCheckpoint(Companero[playerid], -349.6644,-757.6539,29.0136, 5.0); PuntoBaX[Companero[playerid]] = -349.6644; PuntoBaY[Companero[playerid]] = -757.6539; PuntoBaZ[Companero[playerid]] = 29.0136; PuntoBaA[Companero[playerid]] = 5.0; }
            case 3: { SetPlayerCheckpoint(Companero[playerid],-428.8095,-436.5871,16.6492,5.0); PuntoBaX[Companero[playerid]] = -428.8095; PuntoBaY[Companero[playerid]] = -436.5871; PuntoBaZ[Companero[playerid]] = 16.6492; PuntoBaA[Companero[playerid]] = 5.0; }
            case 4: { SetPlayerCheckpoint(Companero[playerid],-917.4271,-450.9999,27.6603,5.0); PuntoBaX[Companero[playerid]] = -917.4271; PuntoBaY[Companero[playerid]] = -450.9999; PuntoBaZ[Companero[playerid]] = 27.6603; PuntoBaA[Companero[playerid]] = 5.0; }
            case 5: { SetPlayerCheckpoint(Companero[playerid],-1904.0535,-572.3555,24.1474,5.0); PuntoBaX[Companero[playerid]] = -1904.0535; PuntoBaY[Companero[playerid]] = -572.3555; PuntoBaZ[Companero[playerid]] = 24.1474; PuntoBaA[Companero[playerid]] = 5.0; }
            case 6: { SetPlayerCheckpoint(Companero[playerid],-2248.4912,-124.0376,34.8783,5.0); PuntoBaX[Companero[playerid]] = -2248.4912; PuntoBaY[Companero[playerid]] = -124.0376; PuntoBaZ[Companero[playerid]] = 34.8783; PuntoBaA[Companero[playerid]] = 5.0; }
            case 7: { SetPlayerCheckpoint(Companero[playerid],-2248.7205,83.8178,34.8784,5.0); PuntoBaX[Companero[playerid]] = -2248.7205; PuntoBaY[Companero[playerid]] = 83.8178; PuntoBaZ[Companero[playerid]] = 34.8784; PuntoBaA[Companero[playerid]] = 5.0; }
            case 8: { SetPlayerCheckpoint(Companero[playerid],-2167.4629,204.8546,34.8776,5.0); PuntoBaX[Companero[playerid]] = -2167.4629; PuntoBaY[Companero[playerid]] = 204.8546; PuntoBaZ[Companero[playerid]] = 34.8776; PuntoBaA[Companero[playerid]] = 5.0; }
            case 9: { SetPlayerCheckpoint(Companero[playerid],-2033.6031,316.9929,34.7233,5.0); PuntoBaX[Companero[playerid]] = -2033.6031; PuntoBaY[Companero[playerid]] = 316.9929; PuntoBaZ[Companero[playerid]] = 34.7233; PuntoBaA[Companero[playerid]] = 5.0; }
            case 10: { SetPlayerCheckpoint(Companero[playerid],-2010.0227,137.4623,27.2469,5.0); PuntoBaX[Companero[playerid]] = -2010.0227; PuntoBaY[Companero[playerid]] = 137.4623; PuntoBaZ[Companero[playerid]] = 27.2469; PuntoBaA[Companero[playerid]] = 5.0; }
            case 11: { SetPlayerCheckpoint(Companero[playerid],-1813.6909,-119.8742,5.2043,5.0); PuntoBaX[Companero[playerid]] = -1813.6909; PuntoBaY[Companero[playerid]] = -119.8742; PuntoBaZ[Companero[playerid]] = 5.2043; PuntoBaA[Companero[playerid]] = 5.0; }
            case 12: { SetPlayerCheckpoint(Companero[playerid],-1822.1787,-559.9365,15.9207,5.0); PuntoBaX[Companero[playerid]] = -1822.1787; PuntoBaY[Companero[playerid]] = -559.9365; PuntoBaZ[Companero[playerid]] = 15.9207; PuntoBaA[Companero[playerid]] = 5.0; }
            case 13: { SetPlayerCheckpoint(Companero[playerid],-817.4674,-1018.3693,83.3079,5.0); PuntoBaX[Companero[playerid]] = -817.4674; PuntoBaY[Companero[playerid]] = -1018.3693; PuntoBaZ[Companero[playerid]] = 83.3079; PuntoBaA[Companero[playerid]] = 5.0; }
            case 14: { SetPlayerCheckpoint(Companero[playerid],-43.7590,-1519.9025,1.5263,5.0); PuntoBaX[Companero[playerid]] = -43.7590; PuntoBaY[Companero[playerid]] = -1519.9025; PuntoBaZ[Companero[playerid]] = 1.5263; PuntoBaA[Companero[playerid]] = 5.0; }
            case 15: { SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0); PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
        }
    }
    else if(RecorridoBasu[playerid] == 3)
    {
        switch(PBasura[playerid])
        {
            case 2: { SetPlayerCheckpoint(Companero[playerid], 350.3483,-1273.5121,53.7532, 5.0); PuntoBaX[Companero[playerid]] = 350.3483; PuntoBaY[Companero[playerid]] = -1273.5121; PuntoBaZ[Companero[playerid]] = 53.7532; PuntoBaA[Companero[playerid]] = 5.0; }
            case 3: { SetPlayerCheckpoint(Companero[playerid], 680.5216,-1060.3474,49.4870, 5.0); PuntoBaX[Companero[playerid]] = 680.5216; PuntoBaY[Companero[playerid]] = -1060.3474; PuntoBaZ[Companero[playerid]] = 49.4870; PuntoBaA[Companero[playerid]] = 5.0; }
            case 4: { SetPlayerCheckpoint(Companero[playerid], 873.2125,-863.1124,77.5146, 5.0); PuntoBaX[Companero[playerid]] = 873.2125; PuntoBaY[Companero[playerid]] = -863.1124; PuntoBaZ[Companero[playerid]] = 77.5146; PuntoBaA[Companero[playerid]] = 5.0; }
            case 5: { SetPlayerCheckpoint(Companero[playerid], 1079.9196,-774.5426,107.9675, 5.0); PuntoBaX[Companero[playerid]] = 1079.9196; PuntoBaY[Companero[playerid]] = -774.5426; PuntoBaZ[Companero[playerid]] = 107.9675; PuntoBaA[Companero[playerid]] = 5.0; }
            case 6: { SetPlayerCheckpoint(Companero[playerid], 918.6940,-680.4443,117.0033, 5.0); PuntoBaX[Companero[playerid]] = 918.6940; PuntoBaY[Companero[playerid]] = -680.4443; PuntoBaZ[Companero[playerid]] = 117.0033; PuntoBaA[Companero[playerid]] = 5.0; }
            case 7: { SetPlayerCheckpoint(Companero[playerid], 810.9399,-792.6181,68.5974, 5.0); PuntoBaX[Companero[playerid]] = 810.9399; PuntoBaY[Companero[playerid]] = -792.6181; PuntoBaZ[Companero[playerid]] = 68.5974; PuntoBaA[Companero[playerid]] = 5.0; }
            case 8: { SetPlayerCheckpoint(Companero[playerid], 272.8895,-1100.2932,81.7537, 5.0); PuntoBaX[Companero[playerid]] = 272.8895; PuntoBaY[Companero[playerid]] = -1100.2932; PuntoBaZ[Companero[playerid]] = 81.7537; PuntoBaA[Companero[playerid]] = 5.0; }
            case 9: { SetPlayerCheckpoint(Companero[playerid], 339.2604,-1189.8682,76.4328, 5.0); PuntoBaX[Companero[playerid]] = 339.2604; PuntoBaY[Companero[playerid]] = -1189.8682; PuntoBaZ[Companero[playerid]] = 76.4328; PuntoBaA[Companero[playerid]] = 5.0; }
            case 10: { SetPlayerCheckpoint(Companero[playerid], 549.9263,-1156.9595,54.1546, 5.0); PuntoBaX[Companero[playerid]] = 549.9263; PuntoBaY[Companero[playerid]] = -1156.9595; PuntoBaZ[Companero[playerid]] = 54.1546; PuntoBaA[Companero[playerid]] = 5.0; }
            case 11: { SetPlayerCheckpoint(Companero[playerid], 326.4816,-1192.4799,76.1984, 5.0); PuntoBaX[Companero[playerid]] = 326.4816; PuntoBaY[Companero[playerid]] = -1192.4799; PuntoBaZ[Companero[playerid]] = 76.1984; PuntoBaA[Companero[playerid]] = 5.0; }
            case 12: { SetPlayerCheckpoint(Companero[playerid], 179.2384,-1389.3564,47.9640, 5.0); PuntoBaX[Companero[playerid]] = 179.2384; PuntoBaY[Companero[playerid]] = -1389.3564; PuntoBaZ[Companero[playerid]] = 47.9640; PuntoBaA[Companero[playerid]] = 5.0; }
            case 13: { SetPlayerCheckpoint(Companero[playerid], -55.1223,-1594.4856,2.7740, 5.0); PuntoBaX[Companero[playerid]] = -55.1223; PuntoBaY[Companero[playerid]] = -1594.4856; PuntoBaZ[Companero[playerid]] = 2.7740; PuntoBaA[Companero[playerid]] = 5.0; }
            case 14: { SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0); PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
        }
    }
    else if(RecorridoBasu[playerid] == 4)
    {
        switch(PBasura[playerid])
        {
            case 2: { SetPlayerCheckpoint(Companero[playerid], 715.6998,-1119.7213,17.9918, 5.0); PuntoBaX[Companero[playerid]] = 715.6998; PuntoBaY[Companero[playerid]] = -1119.7213; PuntoBaZ[Companero[playerid]] = 17.9918; PuntoBaA[Companero[playerid]] = 5.0; }
            case 3: { SetPlayerCheckpoint(Companero[playerid], 1105.8407,-958.8027,42.3986, 5.0); PuntoBaX[Companero[playerid]] = 1105.8407; PuntoBaY[Companero[playerid]] = -958.8027; PuntoBaZ[Companero[playerid]] = 42.3986; PuntoBaA[Companero[playerid]] = 5.0; }
            case 4: { SetPlayerCheckpoint(Companero[playerid], 1260.1581,-1106.3085,25.0804, 5.0); PuntoBaX[Companero[playerid]] = 1260.1581; PuntoBaY[Companero[playerid]] = -1106.3085; PuntoBaZ[Companero[playerid]] = 25.0804; PuntoBaA[Companero[playerid]] = 5.0; }
            case 5: { SetPlayerCheckpoint(Companero[playerid], 1193.4933,-1498.0582,13.3828, 5.0); PuntoBaX[Companero[playerid]] = 1193.4933; PuntoBaY[Companero[playerid]] = -1498.0582; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 6: { SetPlayerCheckpoint(Companero[playerid], 1295.2137,-1839.4456,13.3828, 5.0); PuntoBaX[Companero[playerid]] = 1295.2137; PuntoBaY[Companero[playerid]] = -1839.4456; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 7: { SetPlayerCheckpoint(Companero[playerid], 1039.8508,-1670.3042,13.3828, 5.0); PuntoBaX[Companero[playerid]] = 1039.8508; PuntoBaY[Companero[playerid]] = -1670.3042; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
            case 8: { SetPlayerCheckpoint(Companero[playerid], 932.7011,-1486.6115,13.3750, 5.0); PuntoBaX[Companero[playerid]] = 932.7011; PuntoBaY[Companero[playerid]] = -1486.6115; PuntoBaZ[Companero[playerid]] = 13.3750; PuntoBaA[Companero[playerid]] = 5.0; }
            case 9: { SetPlayerCheckpoint(Companero[playerid], 855.2783,-1392.5234,13.3664, 5.0); PuntoBaX[Companero[playerid]] = 855.2783; PuntoBaY[Companero[playerid]] = -1392.5234; PuntoBaZ[Companero[playerid]] = 13.3664; PuntoBaA[Companero[playerid]] = 5.0; }
            case 10: { SetPlayerCheckpoint(Companero[playerid], 483.1931,-1499.0760,20.3036, 5.0); PuntoBaX[Companero[playerid]] = 483.1931; PuntoBaY[Companero[playerid]] = -1499.0760; PuntoBaZ[Companero[playerid]] = 20.3036; PuntoBaA[Companero[playerid]] = 5.0; }
            case 11: { SetPlayerCheckpoint(Companero[playerid], 656.1319,-1675.2115,14.2370, 5.0); PuntoBaX[Companero[playerid]] = 656.1319; PuntoBaY[Companero[playerid]] = -1675.2115; PuntoBaZ[Companero[playerid]] = 14.2370; PuntoBaA[Companero[playerid]] = 5.0; }
            case 12: { SetPlayerCheckpoint(Companero[playerid], 807.8727,-1757.3798,13.3872, 5.0); PuntoBaX[Companero[playerid]] = 807.8727; PuntoBaY[Companero[playerid]] = -1757.3798; PuntoBaZ[Companero[playerid]] = 13.3872; PuntoBaA[Companero[playerid]] = 5.0; }
            case 13: { SetPlayerCheckpoint(Companero[playerid], 107.0301,-1530.0708,6.4494, 5.0); PuntoBaX[Companero[playerid]] = 107.0301; PuntoBaY[Companero[playerid]] = -1530.0708; PuntoBaZ[Companero[playerid]] = 6.4494; PuntoBaA[Companero[playerid]] = 5.0; }
            case 14: { SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0); PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
        }
    }
}
PlayerIP(playerid)
{
    new pIP[17];
    GetPlayerIp(playerid, pIP, 17);
    return pIP;
}
Revivir(revivido)
{
    Tiempos[revivido][TIMER_VIDA] = gettime() + 3;
    ColorJugadorDefault(revivido);
    LlamadaMedicos[revivido] = 0;
    TextDrawHideForPlayer(revivido, Sangre);
    TextDrawHideForPlayer(revivido, NewPlayer[2]);
    TextDrawHideForPlayer(revivido, NewPlayer[0]);
    PlayerInfo[revivido][Agonizando] = 0;
    TogglePlayerControllable(revivido,1);
    Descongelar(revivido);
    suicidio[revivido] = 0;
    TimerMalherido[revivido] = 0;
    ClearAnimations(revivido);
    PlayerInfo[revivido][Agonizando] = 0;
    Muriendo[revivido] = 0;
    VariableCaido[revivido] = 0;
    Esposando[revivido] = 0;
    DescongelarCBUG(revivido);
    SetPlayerHealthEx(revivido, 100.0);
    ClearAnimations(revivido);
    ApplyAnimation(revivido, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    return 1;
}
stock Float:GetVehicleHealthEx(vehicleid)
{
    new Float:health;
    GetVehicleHealth(vehicleid, health);
    if ( health > 900.0)return health / 10.0;
    else return ( health / 10.0 )-(24);
}
GetPlayerID(playername[])
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(strcmp(PlayerInfo[i][Nickname],playername,true)==0) return i;
        }
    }
    return -1;
}
SetPosVeh(vehicleid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
    SetVehiclePosEx(vehicleid, X, Y, Z);
    SetVehicleZAngle(vehicleid, A);
    SetVehiclePassengersInteriorEx(vehicleid, interiorid);
    SetVehiclePassengersVWEx(vehicleid, worldid);
    return 1;
}
SetVehPos(playerid, vehicleid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
	CargarMapeosEx(playerid);
	SetVehiclePassengersInteriorEx(vehicleid, interiorid);
	SetVehiclePos(vehicleid,X,Y,Z);
	SetVehicleVirtualWorldEx(vehicleid,worldid);
	SetVehiclePassengersVWEx(vehicleid, worldid);
	SetVehicleZAngle(vehicleid,A);
	return 1;
}
ExpulsarJugador(playerid, string[])
{
    printf("%s(%d) - (%s)", PlayerInfo[playerid][Nickname],playerid,string);
    defer KickFix(playerid);
    return 1;
}
funcion KickXD(playerid)
{
	Kick(playerid);
}
IsVehicleInArea(vehicleid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    if(x >= minx && x <= maxx && y >= miny && y <= maxy) return 1;
    return 0;
}
stock MensajeEx(playerid, color, form[], {Float, _}: ...)
{
    #pragma unused form
    static tmp[145];
    new t1 = playerid,t2 = color;
    const n4 = -4,n16 = -16,size = sizeof tmp;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16
    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}
AbrirPuertasCamionero(playerid)
{
    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
    {
        case 456: GLOBAL_VEHICLES[GetPlayerVehicleID(playerid)][gb_vehicle_PARAMS_BOOT] = 1,UpdateVehicleParams(GetPlayerVehicleID(playerid));
        case 609: GetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, door3, door4),SetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, 1, 1);
    }
    return 1;
}
CerrarPuertasCamionero(playerid)
{
    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
    {
        case 456: GLOBAL_VEHICLES[GetPlayerVehicleID(playerid)][gb_vehicle_PARAMS_BOOT] = 0,UpdateVehicleParams(GetPlayerVehicleID(playerid));
        case 609: GetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, door3, door4),SetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, 0, 0);
    }
    return 1;
}
ReportCrimen(playerid,report)
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pDuty] == 1 && PlayerInfo[i][pSonidos] == 1) PlayCrimeReportForPlayer(i,playerid,report);
    }
    return 1;
}
LimpiarSalon()
{
	format(Alquilador,sizeof(Alquilador),"Nadie");
	Alquilado = false;
	HorasSalon = 0;
	Personas = 0;
	PrecioSalon = 0;
	NivelSalon = 0;
	format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
	format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
	TipoEvento = 0;
	return 1;
}
GuardarPosicionMuerte(x)
{
    new Query[256];
    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `DeathX`='%f',`DeathY`='%f', `DeathZ`='%f' WHERE `Username`='%e'", DeathX[x],DeathY[x],DeathZ[x],PlayerInfo[x][Nickname]);
    mysql_pquery(handle_db, Query);
    return 1;
}
public AplicarAlarma(vehicleid)
{
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 1;
    UpdateVehicleParams(vehicleid);
    return 1;
}
IsCorrectMail(mail[])
{
    new len = strlen(mail), bool:find[2], w;
    if(!(6 < len < 129)) return 0;
    for(new l; l < len; l++)
    {
        if(mail[l] == '.') find[0] = true;
        if(mail[l] == '@')
        {
            if(find[1]) return 0;
            find[1] = true;
            w = l;
            if(w > 64) return 0;
        }
        if(!(mail[l] >= 'A' && mail[l] <= 'Z' || mail[l] >= 'a' && mail[l] <= 'z' || mail[l] >= '0' && mail[l] <= '9' || mail[l] == '.' || mail[l] == '-' || mail[l] == '_' || mail[l] == '@')) return 0;
    }
    if(len - w > 65) return 0;
    if(!find[0] || !find[1]) return 0;
    return 1;
}

stock MostrarPescar(playerid)
{
    new objetivo[5];
    switch(PlayerInfo[playerid][pNivelPescador])
    {
        case 1:
        {
            objetivo[0] = 1601;
            objetivo[1] = 1601;
            objetivo[2] = 1601;
            objetivo[3] = 1609;
            ShowModelSelectionMenuEx2(playerid, objetivo, 4, "Selecciona tu objetivo", OBJETIVOPESCA, 16.0, 0.0, -55.0, 1.0, 0x000000FF, 0x08090AFF, 0x000000FF);
        }
        case 2:
        {
            objetivo[0] = 1607;
            objetivo[1] = 1601;
            objetivo[2] = 1601;
            objetivo[3] = 1609;
            ShowModelSelectionMenuEx2(playerid, objetivo, 4, "Selecciona tu objetivo", OBJETIVOPESCA, 16.0, 0.0, -55.0, 1.0, 0x000000FF, 0x08090AFF, 0x000000FF);
        }
        default:
        {
            objetivo[0] = 1601;
            objetivo[1] = 1607;
            objetivo[2] = 1608;
            objetivo[3] = 1609;
            ShowModelSelectionMenuEx2(playerid, objetivo, 4, "Selecciona tu objetivo", OBJETIVOPESCA, 16.0, 0.0, -55.0, 1.0, 0x000000FF, 0x08090AFF, 0x000000FF);
        }
    }
}

TimeConvert(segundos)
{
    new time[200],minutos,Horas,dias;
    if(segundos > 59) minutos = segundos / 60, segundos = segundos - (minutos * 60);
    if(minutos > 59) Horas = minutos / 60, minutos = minutos - (Horas * 60);
    if(Horas > 23) dias = Horas / 24, Horas = Horas - (dias * 24);
    if(dias > 0) format(time,sizeof(time),"%dd %dh %dm %ds",dias,Horas,minutos,segundos);
    else if(Horas > 0) format(time,sizeof(time),"%dh %dm %ds",Horas,minutos,segundos);
    else if(minutos > 0) format(time,sizeof(time),"%dm %ds",minutos,segundos);
    else format(time,sizeof(time),"%d segundos",segundos);
    return time;
}

FormatTimeleft(segundos)
{
    new time[200],minutos,Horas,dias,semanas, meses, yeras;
    if(segundos > 59)   {   minutos = segundos / 60;    segundos = segundos - (minutos * 60);   }
    if(minutos > 59)    {   Horas = minutos / 60;       minutos = minutos - (Horas * 60);       }
    if(Horas > 23)      {   dias = Horas / 24;          Horas = Horas - (dias * 24);            }
    if(dias > 7)        {   semanas = (dias / 7);       dias = dias - (semanas * 7);            }
    if(semanas >= 4)    {   meses = floatround(semanas / 4.345); semanas = semanas - floatround(meses * 4.345);                     }
    if(meses > 12)      {   yeras = (meses / 12);       meses = meses - (yeras * 12);           }
    if(yeras > 0) format(time,sizeof(time),"%d año(s) %d mes(es)",yeras, meses);
    else if(meses > 0) format(time,sizeof(time),"%d mes(es) %d semana(s)", meses, semanas);
    else if(semanas > 0) format(time,sizeof(time),"%d semana(s) %d dia(s)",semanas, dias);
    else if(dias > 0) format(time,sizeof(time),"%d dia(s) %dh %dm %ds",dias, Horas,minutos,segundos);
    else if(Horas > 0) format(time,sizeof(time),"%dh %dm %ds",Horas,minutos,segundos);
    else if(minutos > 0) format(time,sizeof(time),"%dm %ds",minutos,segundos);
    else format(time,sizeof(time),"%d segundos",segundos);
    return time;
}

TimeConvertEx(segundos)
{
    new time[200],minutos,Horas,dias;
    if(segundos > 59) minutos = segundos / 60, segundos = segundos - (minutos * 60);
    if(minutos > 59) Horas = minutos / 60, minutos = minutos - (Horas * 60);
    if(Horas > 23) dias = Horas / 24, Horas = Horas - (dias * 24);
    if(dias > 0) format(time,sizeof(time),"{FF0000}%dd %dh %dm %ds {FFFFFF}",dias,Horas,minutos,segundos);
    else if(Horas > 0) format(time,sizeof(time),"{FF0000}%dh %dm %ds {FFFFFF}",Horas,minutos,segundos);
    else if(minutos > 0) format(time,sizeof(time),"{FF0000}%dm %ds{FFFFFF}",minutos,segundos);
    else format(time,sizeof(time),"{FF0000}%d{FFFFFF} segundos",segundos);
    return time;
}

PagarCosechador(playerid)
{
    new TypePay = random(3),object[64],Medicina = random(10);
    new coco = 369 + random(150),Objetox = random(20);
    Cosechas[playerid][ProgresoCosecha] = 0;
    switch(Cosechas[playerid][CosechaLugar])
    {
        case 1:
        {
            switch(TypePay)
            {
                case 0:
                {
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d",coco);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
                case 1:
                {
                    switch(Objetox)
                    {
                        case 0: { format(object,sizeof(object),"un cuchillo"); DarArma(playerid, 4); }
                        case 1: { format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                        case 2: { format(object,sizeof(object),"un cuchillo"); DarArma(playerid, 4); }
                        default:{ format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                    }
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d {FFFFFF}y {00CC00}%s",coco,object);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
                case 2:
                {
                    switch(Medicina)
                    {
                        case 0: { format(object,sizeof(object),"2g de crack"); PlayerInfo[playerid][pCrack] += 2; }
                        case 1: { format(object,sizeof(object),"2 medicamentos"); PlayerInfo[playerid][pMedicamentos] += 2; }
                        case 2: { format(object,sizeof(object),"10 SZ"); PlayerInfo[playerid][Moneda] += 10; }
                        default:{ format(object,sizeof(object),"2 medicamentos"); PlayerInfo[playerid][pMedicamentos] += 2; }
                    }
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d {FFFFFF}y {00CC00}%s",coco,object);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
            }
        }
        case 2:
        {
            switch(TypePay)
            {
                case 0:
                {
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d",coco);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
                case 1:
                {
                    switch(Objetox)
                    {
                        case 0: { format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                        case 1: { format(object,sizeof(object),"una pala"); DarArma(playerid, 6); }
                        default:{ format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                    }
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d {FFFFFF}y {00CC00}%s",coco,object);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
                case 2:
                {
                    switch(Medicina)
                    {
                        case 0: { format(object,sizeof(object),"2g de crack"); PlayerInfo[playerid][pCrack] += 2; }
                        case 1: { format(object,sizeof(object),"2 medicamentos"); PlayerInfo[playerid][pMedicamentos] += 2; }
                        case 2: { format(object,sizeof(object),"10 SZ"); PlayerInfo[playerid][Moneda] += 10; }
                        default:{ format(object,sizeof(object),"2 medicamentos"); PlayerInfo[playerid][pMedicamentos] += 2; }
                    }
                    MensajeEx(playerid, -1, "{00CC00}¡Excelente cosecha!{FFFFFF} Tus ganancias son {00CC00}$%d {FFFFFF}y {00CC00}%s",coco,object);
                    HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
                    DarDinero(playerid,coco);
                    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
                    Cosechas[playerid][CosechaLugar] = 0;
                    Cosechas[playerid][ProgresoCosecha] = 0;
                    Cosechas[playerid][RutaCosecha] = 0;
                }
            }
        }
    }
    RemovePlayerFromVehicle(playerid);
    DisablePlayerRaceCheckpoint(playerid);
    return 1;
}
MarcadoTransportistaGPS(playerid,Float:x,Float:y,Float:z, Float:range = 7.0)
{
    SetPlayerCheckpoint(playerid,x,y,z,range);
    PuntoTraX[playerid] = x;
    PuntoTraY[playerid] = y;
    PuntoTraZ[playerid] = z;
    return 1;
}
MarcadoCamioneroGPS(playerid,Float:x,Float:y,Float:z, Float:range = 7.0)
{
    SetPlayerCheckpoint(playerid,x,y,z,range);
    PuntoCX[playerid] = x;
    PuntoCY[playerid] = y;
    PuntoCZ[playerid] = z;
    return 1;
}
stock HideDialog(playerid)
{
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
}
stock NumeroEntero(value)
{
    new string[5];
    if(value < 10) format(string,sizeof(string),"0%d",value);
    else format(string,sizeof(string),"%d",value);
    return string;
}
CamioneroFallado(e,vehicleid)
{
    SendClientMessage(e,-1,"Fallaste en tu trabajo de camionero, no se te pagará nada.");
    CamionCargado[vehicleid] = 0;
    SetTimerEx("RespawnearV",2000,false,"d",vehicleid);
    CamionID[e] = INVALID_PLAYER_ID;
    CargandoC[e] = 0;
    PlayerTemp[e][pt_Camionero] = false;
}
Congelar(id)
{
    TogglePlayerControllable(id, 0);
    SetPVarInt(id, "IsFrozen", 0);
}

stock RestarVida(playerid,Float:cantidad)
{
	new Float:vida, Float:chaleco;
	GetPlayerHealth(playerid, vida);
	GetPlayerArmour(playerid, chaleco);
	new Float:resta = cantidad-chaleco;
	if(chaleco > cantidad) SetPlayerArmourEx(playerid, chaleco-cantidad);
	else if(chaleco <= cantidad) SetPlayerArmourEx(playerid, 0),SetPlayerHealthEx(playerid, vida-resta);
	else SetPlayerHealthEx(playerid, vida-cantidad);
}

Enfermedades(playerid)
{
    new enfermedad[60];
    switch(PlayerInfo[playerid][pEnfermedad])
    {
        case 1: { enfermedad = "Herida de bala"; }
        case 2: { enfermedad = "Múltiples heridas de bala"; }
        case 3: { enfermedad = "Fracturas Graves"; }
        case 4: { enfermedad = "Fracturas leves"; }
        case 5: { enfermedad = "Herida abierta de sangre"; }
        case 6: { enfermedad = "Hematomas"; }
        case 7: { enfermedad = "Hematomas y huesos fracturados"; }
        case 8: { enfermedad = "Hemorragia cerebral"; }
        case 9: { enfermedad = "Quemaduras"; }
        case 10: { enfermedad = "Daños severos"; }
    }
    return enfermedad;
}

GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
	for(new v, h = GetVehiclePoolSize(); v <= h; v++)
	{
    	for(new i = 0; i < MAX_PAUTOS; i++)
    	{
			if(VehicleInfo[playerid][i][vModelo] == 0) continue;
			if(autos[i][playerid] == vehicleid) return i;
    	}
	}
	return -1;
}

CalcularBolsos(f)
{
	new cantidad_x = Fabricas[f][pCantidadDinero];
    Fabricas[f][pCantidadBolsas] = cantidad_x / 1000000;
	return 1;
}
ResetRecortada(id)
{
    for(new ch = 0; ch < Fabricas[id][pRecortada]; ch++) DestroyDynamicObject(Fabricas[id][EscoObjetos][ch]);
	for(new cb = 0; cb < Fabricas[id][pRecortada]; cb++) Fabricas[id][EscoObjetos][cb] = CreateDynamicObject(350, EscopetasRecortadas[cb][0], EscopetasRecortadas[cb][1], EscopetasRecortadas[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
ResetUzi(id)
{
    for(new ch = 0; ch < Fabricas[id][pUzi]; ch++) DestroyDynamicObject(Fabricas[id][UziObjetos][ch]);
	for(new cb = 0; cb < Fabricas[id][pUzi]; cb++) Fabricas[id][UziObjetos][cb] = CreateDynamicObject(352, PUzis[cb][0], PUzis[cb][1], PUzis[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
ResetTec(id)
{
    for(new ch = 0; ch < Fabricas[id][pTec9]; ch++) DestroyDynamicObject(Fabricas[id][Tec9Objetos][ch]);
	for(new cb = 0; cb < Fabricas[id][pTec9]; cb++) Fabricas[id][Tec9Objetos][cb] = CreateDynamicObject(372, PTec[cb][0], PTec[cb][1], PTec[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
ResetSnipers(id)
{
    for(new ch = 0; ch < Fabricas[id][pSniper]; ch++) DestroyDynamicObject(Fabricas[id][SniperObjetos][ch]);
	for(new cb = 0; cb < Fabricas[id][pSniper]; cb++) Fabricas[id][SniperObjetos][cb] = CreateDynamicObject(358, PSnipers[cb][0], PSnipers[cb][1], PSnipers[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
UpdateAllBagsMoney(id)
{
    CalcularBolsos(id);
    for(new ch = 0; ch < Fabricas[id][pCantidadBolsas]; ch++) DestroyDynamicObject(Fabricas[id][Bolso][ch]);
	for(new cb = 0; cb < Fabricas[id][pCantidadBolsas]; cb++) Fabricas[id][Bolso][cb] = CreateDynamicObject(1550, BolsoSpawn[cb][0], BolsoSpawn[cb][1], BolsoSpawn[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
	return 1;
}
ResetearArmas(id)
{
    for(new ch = 0; ch < Fabricas[id][pChalecos]; ch++) DestroyDynamicObject(Fabricas[id][Chalecos][ch]);
	for(new ch1 = 0; ch1 < Fabricas[id][pCantidadBolsas]; ch1++) DestroyDynamicObject(Fabricas[id][Bolso][ch1]);
	for(new ch2 = 0; ch2 < Fabricas[id][pSniper]; ch2++) DestroyDynamicObject(Fabricas[id][SniperObjetos][ch2]);
	for(new ch3 = 0; ch3 < Fabricas[id][pTec9]; ch3++) DestroyDynamicObject(Fabricas[id][Tec9Objetos][ch3]);
	for(new ch4 = 0; ch4 < Fabricas[id][pUzi]; ch4++) DestroyDynamicObject(Fabricas[id][UziObjetos][ch4]);
	for(new ch5 = 0; ch5 < Fabricas[id][pRecortada]; ch5++) DestroyDynamicObject(Fabricas[id][EscoObjetos][ch5]);
	return 1;
}
ActualizarCantidadTChale(f)
{
    for(new ch = 0; ch < Fabricas[f][pChalecos]; ch++) { if(IsValidDynamicObject(Fabricas[f][Chalecos][ch])) DestroyDynamicObject(Fabricas[f][Chalecos][ch]); }
    for(new ch = 0; ch < Fabricas[f][pChalecos]; ch++) { if(!IsValidDynamicObject(Fabricas[f][Chalecos][ch])) Fabricas[f][Chalecos][ch] = CreateDynamicObject(373, ChalecoSpawn[ch][0], ChalecoSpawn[ch][1], ChalecoSpawn[ch][2],   ChalecoSpawn[ch][3], ChalecoSpawn[ch][4], ChalecoSpawn[ch][5], Fabricas[f][pVW],Fabricas[f][pInt]); }
	return 1;
}
ActualizarCantidadFChale(f)
{
    Fabricas[f][pChalecos] --;
	new cantidad_x = Fabricas[f][pChalecos];
    if(IsValidDynamicObject(Fabricas[f][Chalecos][cantidad_x])) DestroyDynamicObject(Fabricas[f][Chalecos][cantidad_x]);
    ActualizarCantidadChalecos(f);
 	return 1;
}
ActualizarUzi(f, d)
{
	if(d == 1)
	{
		new cantidad_x = Fabricas[f][pUzi]-1;
		Fabricas[f][UziObjetos][cantidad_x] = CreateDynamicObject(352, PUzis[cantidad_x][0], PUzis[cantidad_x][1], PUzis[cantidad_x][2],   PUzis[cantidad_x][3], PUzis[cantidad_x][4], PUzis[cantidad_x][5], Fabricas[f][pVW],Fabricas[f][pInt]);
	}
	else if(d == 2)
	{
		new cantidad_x = Fabricas[f][pUzi];
		DestroyDynamicObject(Fabricas[f][UziObjetos][cantidad_x]);
	}
	return 1;
}
ActualizarSnipers(f, d)
{
	if(d == 1)
	{
		new cantidad_x = Fabricas[f][pSniper]-1;
		Fabricas[f][SniperObjetos][cantidad_x] = CreateDynamicObject(358, PSnipers[cantidad_x][0], PSnipers[cantidad_x][1], PSnipers[cantidad_x][2],   PSnipers[cantidad_x][3], PSnipers[cantidad_x][4], PSnipers[cantidad_x][5], Fabricas[f][pVW],Fabricas[f][pInt]);
	}
	else if(d == 2)
	{
		new cantidad_x = Fabricas[f][pSniper];
		DestroyDynamicObject(Fabricas[f][SniperObjetos][cantidad_x]);
	}
	return 1;
}
ActualizarTec(f, d)
{
	if(d == 1)
	{
		new cantidad_x = Fabricas[f][pTec9]-1;
		Fabricas[f][Tec9Objetos][cantidad_x] = CreateDynamicObject(372, PTec[cantidad_x][0], PTec[cantidad_x][1], PTec[cantidad_x][2],   PTec[cantidad_x][3], PTec[cantidad_x][4], PTec[cantidad_x][5], Fabricas[f][pVW],Fabricas[f][pInt]);
	}
	else if(d == 2)
	{
		new cantidad_x = Fabricas[f][pTec9];
		DestroyDynamicObject(Fabricas[f][Tec9Objetos][cantidad_x]);
	}
	return 1;
}
ActualizarRecortadas(f, d)
{
	if(d == 1)
	{
        new cantidad_x = Fabricas[f][pRecortada]-1;
        Fabricas[f][EscoObjetos][cantidad_x] = CreateDynamicObject(350, EscopetasRecortadas[cantidad_x][0], EscopetasRecortadas[cantidad_x][1], EscopetasRecortadas[cantidad_x][2],   EscopetasRecortadas[cantidad_x][3], EscopetasRecortadas[cantidad_x][4], EscopetasRecortadas[cantidad_x][5], Fabricas[f][pVW],Fabricas[f][pInt]);
	}
	else if(d == 2)
	{
		new cantidad_x = Fabricas[f][pRecortada];
		DestroyDynamicObject(Fabricas[f][EscoObjetos][cantidad_x]);
	}
	return 1;
}
ActualizarBolsos(f, d)
{
	if(d == 1)
	{
        new cantidad_x = Fabricas[f][pCantidadBolsas];
        Fabricas[f][Bolso][cantidad_x] = CreateDynamicObject(1550, BolsoSpawn[cantidad_x][0], BolsoSpawn[cantidad_x][1], BolsoSpawn[cantidad_x][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
        Fabricas[f][pCantidadBolsas] ++;
		return 1;
	}
	else if(d == 2)
	{
	    if(Fabricas[f][pCantidadBolsas] > 0)
	    {
	        new cantidad_x = Fabricas[f][pCantidadBolsas]-1;
         	DestroyDynamicObject(Fabricas[f][Bolso][cantidad_x]);
	        Fabricas[f][pCantidadBolsas] --;
	    }
    	return 1;
	}
	return 1;
}
stock ApagarEstufaUno(f)
{
	new string[256];
    HornoEncendido1[f] = 0;
	KillTimer(Fabricas[f][tiempoh1]);
	DestroyDynamicObject(Fabricas[f][humo1]);
	format(string,sizeof(string),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje1],EstadoH(HornoEncendido1[f]),EstadoHo(HornoEncendido1[f]),EstadoCristal(Fabricas[f][Crisol1]));
	UpdateDynamic3DTextLabelText(Fabricas[f][olla1], COLOR_ROJO, string);
	return 1;
}
stock ActualizarLabelMoledores(id,type)
{
	new string[256];
	switch(type)
	{
		case 1: { format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%s{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][0], "%", E_Cocinero(Fabricas[id][EstadoCocinero][0],Fabricas[id][ActorCocinero][0])); UpdateDynamic3DTextLabelText(Fabricas[id][Cocinero][0], COLOR_ROJO, string); }
		case 2: { format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%s{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][1], "%", E_Cocinero(Fabricas[id][EstadoCocinero][1],Fabricas[id][ActorCocinero][1])); UpdateDynamic3DTextLabelText(Fabricas[id][Cocinero][1], COLOR_ROJO, string); }
		case 3: { format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%s{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][2], "%", E_Cocinero(Fabricas[id][EstadoCocinero][2],Fabricas[id][ActorCocinero][2])); UpdateDynamic3DTextLabelText(Fabricas[id][Cocinero][2], COLOR_ROJO, string); }
		case 4: { format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%s{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][3], "%", E_Cocinero(Fabricas[id][EstadoCocinero][3],Fabricas[id][ActorCocinero][3])); UpdateDynamic3DTextLabelText(Fabricas[id][Cocinero][3], COLOR_ROJO, string); }
		case 5: { format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%s{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][4], "%", E_Cocinero(Fabricas[id][EstadoCocinero][4],Fabricas[id][ActorCocinero][4])); UpdateDynamic3DTextLabelText(Fabricas[id][Cocinero][4], COLOR_ROJO, string); }
	}
	return 1;
}
public BorrarStatsFabrica(f)
{
	Fabricas[f][Interferida] = 0;
    Fabricas[f][CantidadActores] = 0;
	Fabricas[f][ActoresMuertos] = 0;
	Fabricas[f][pTanqueUno] = 0;
	Fabricas[f][pTanqueDos] = 0;
	Fabricas[f][pTanqueTres] = 0;
	Fabricas[f][pTanqueCuatro] = 0;
	Fabricas[f][pTanqueCinco] = 0;
	Fabricas[f][pTanqueSeis] = 0;
	Fabricas[f][pTanqueSiete] = 0;
	Fabricas[f][pTanqueOcho] = 0;
	Fabricas[f][pTanqueNueve] = 0;
	Fabricas[f][Almacen1] = 0;
	Fabricas[f][Almacen2] = 0;
	Fabricas[f][Almacen3] = 0;
	Fabricas[f][Almacen4] = 0;
	Fabricas[f][Almacen5] = 0;
	Fabricas[f][Almacen6] = 0;
	Fabricas[f][Almacen7] = 0;
	Fabricas[f][Almacen8] = 0;
	Fabricas[f][Almacen9] = 0;
	Fabricas[f][Almacen10] = 0;
	Fabricas[f][pCantidadDinero] = 3000000;
	ActualizarDineroPared(f);
	UpdateAllBagsMoney(f);
	Fabricas[f][pRecortada] = 0;
	Fabricas[f][pUzi] = 0;
	Fabricas[f][pSniper] = 0;
	Fabricas[f][pTec9] = 0;
	Fabricas[f][pSoborno] = gettime();
	Fabricas[f][pBanda] = 0;
	Fabricas[f][pChalecos] = 0;
	//Labels
	if(IsValidDynamic3DTextLabel(Fabricas[f][pLabel])) DestroyDynamic3DTextLabel(Fabricas[f][pLabel]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][pLabel2])) DestroyDynamic3DTextLabel(Fabricas[f][pLabel2]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][pLabel3])) DestroyDynamic3DTextLabel(Fabricas[f][pLabel3]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][pLabel4])) DestroyDynamic3DTextLabel(Fabricas[f][pLabel4]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][pLabel5])) DestroyDynamic3DTextLabel(Fabricas[f][pLabel5]);
	for(new i = 0; i < 5; i++) { if(IsValidDynamic3DTextLabel(Fabricas[f][Cocinero][i])) DestroyDynamic3DTextLabel(Fabricas[f][Cocinero][i]); }
	if(IsValidDynamicPickup(Fabricas[f][pPickup])) DestroyDynamicPickup(Fabricas[f][pPickup]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque1])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque1]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque2])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque2]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque3])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque3]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque4])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque4]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque5])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque5]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque6])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque6]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque7])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque7]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque8])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque8]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][LTanque9])) DestroyDynamic3DTextLabel(Fabricas[f][LTanque9]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][olla1])) DestroyDynamic3DTextLabel(Fabricas[f][olla1]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][olla2])) DestroyDynamic3DTextLabel(Fabricas[f][olla2]);
	if(IsValidDynamic3DTextLabel(Fabricas[f][olla3])) DestroyDynamic3DTextLabel(Fabricas[f][olla3]);
	if(IsValidDynamicObject(Fabricas[f][pPuerta])) DestroyDynamicObject(Fabricas[f][pPuerta]);
	if(IsValidDynamicObject(Fabricas[f][tMoney])) DestroyDynamicObject(Fabricas[f][tMoney]);
	Fabricas[f][MedicoContratado] = 0;
	if(IsValidDynamicActor(Fabricas[f][ActorMedico])) DestroyDynamicActor(Fabricas[f][ActorMedico]);
	if(IsValidDynamicObject(Fabricas[f][humo1])) DestroyDynamicObject(Fabricas[f][humo1]);
	if(IsValidDynamicObject(Fabricas[f][humo2])) DestroyDynamicObject(Fabricas[f][humo2]);
	if(IsValidDynamicObject(Fabricas[f][humo3])) DestroyDynamicObject(Fabricas[f][humo3]);
	Fabricas[f][Crisol1] = 0;
	Fabricas[f][Crisol2] = 0;
	Fabricas[f][Crisol3] = 0;
	KillTimer(Fabricas[f][tiempoh1]);
	KillTimer(Fabricas[f][tiempoh2]);
	KillTimer(Fabricas[f][tiempoh3]);
	KillTimer(Fabricas[f][tiempoc1]);
	KillTimer(Fabricas[f][tiempoc2]);
	KillTimer(Fabricas[f][tiempoc3]);
	KillTimer(Fabricas[f][tiempoc4]);
	KillTimer(Fabricas[f][tiempoc5]);
	Fabricas[f][Porcentaje1] = 0;
	Fabricas[f][Porcentaje2] = 0;
	Fabricas[f][Porcentaje3] = 0;
	if(IsValidVehicle(Fabricas[f][Auto1F])) DestroyVehicleEx(Fabricas[f][Auto1F]);
	if(IsValidVehicle(Fabricas[f][Auto2F])) DestroyVehicleEx(Fabricas[f][Auto2F]);
	if(IsValidDynamicMapIcon(Fabricas[f][pMapIcon])) DestroyDynamicMapIcon(Fabricas[f][pMapIcon]);
	new day,month,year;
	getdate(year,month,day);
	Fabricas[f][bolsospagados] = 0;
	if(IsValidDynamicObject(Fabricas[f][Meta1][0])) DestroyDynamicObject(Fabricas[f][Meta1][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta1][1])) DestroyDynamicObject(Fabricas[f][Meta1][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta2][0])) DestroyDynamicObject(Fabricas[f][Meta2][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta2][1])) DestroyDynamicObject(Fabricas[f][Meta2][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta3][0])) DestroyDynamicObject(Fabricas[f][Meta3][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta3][1])) DestroyDynamicObject(Fabricas[f][Meta3][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta4][0])) DestroyDynamicObject(Fabricas[f][Meta4][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta5][1])) DestroyDynamicObject(Fabricas[f][Meta4][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta5][0])) DestroyDynamicObject(Fabricas[f][Meta5][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta5][1])) DestroyDynamicObject(Fabricas[f][Meta5][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta6][0])) DestroyDynamicObject(Fabricas[f][Meta6][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta6][1])) DestroyDynamicObject(Fabricas[f][Meta6][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta7][0])) DestroyDynamicObject(Fabricas[f][Meta7][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta7][1])) DestroyDynamicObject(Fabricas[f][Meta7][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta8][0])) DestroyDynamicObject(Fabricas[f][Meta8][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta8][1])) DestroyDynamicObject(Fabricas[f][Meta8][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta9][0])) DestroyDynamicObject(Fabricas[f][Meta9][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta9][1])) DestroyDynamicObject(Fabricas[f][Meta9][1]);
	if(IsValidDynamicObject(Fabricas[f][Meta10][0])) DestroyDynamicObject(Fabricas[f][Meta10][0]);
	if(IsValidDynamicObject(Fabricas[f][Meta10][1])) DestroyDynamicObject(Fabricas[f][Meta10][1]);
	ResetearArmas(f);
	for(new i = 0; i < 5; i++) Fabricas[f][PorcentajeCocinero][i] = 0;
	for(new i = 0; i < 5; i++) Fabricas[f][EstadoCocinero][i] = 0;
	for(new i = 0; i < 5; i++) Fabricas[f][TieneCocinero][i] = 0;
	for(new i = 0; i < 5; i++) Fabricas[f][TieneGuardia][i] = 0;
	for(new i = 0; i < 5; i++) { if(IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) DestroyDynamicActor(Fabricas[f][ActorCocinero][i]); }
	for(new i = 0; i < 5; i++) { if(IsValidDynamicObject(Fabricas[f][Bloque][i])) DestroyDynamicObject(Fabricas[f][Bloque][i]); }
    for(new i = 0; i < 5; i++) Fabricas[f][Termino][i] = 0;
	//Estado de los NPC
	Fabricas[f][EstadoMedico] = 0;
	for(new i = 0; i < 5; i++) Fabricas[f][EstadoG][i] = 0;
	for(new i = 0; i < 5; i++) Fabricas[f][EstadoCocinero][i] = 0;
	for(new i = 0; i < 5; i++) { if(IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) DestroyDynamicActor(Fabricas[f][ActorGuardia][i]); }
	Fabricas[f][pCantidadDinero] = 0;
	ActualizarDineroPared(f);
	UpdateAllBagsMoney(f);
	GuardarFabrica(f);
}
stock QuitarDineroFabrica(f,cantidad)
{
    Fabricas[f][pCantidadDinero] = Fabricas[f][pCantidadDinero]-cantidad;
	ActualizarDineroPared(f);
	UpdateAllBagsMoney(f);
	GuardarFabrica(f);
}
stock DarDineroFabrica(f,cantidad)
{
    Fabricas[f][pCantidadDinero] = Fabricas[f][pCantidadDinero]+cantidad;
    if(Fabricas[f][pCantidadDinero] > 75000000) Fabricas[f][pCantidadDinero] = 75000000;
    ActualizarDineroPared(f);
    UpdateAllBagsMoney(f);
    GuardarFabrica(f);
}
stock GuardarFBarril(playerid,f)
{
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
    TieneBarril[playerid] = 0;
    GuardarFabrica(f);
}
stock GuardarCajaFabrica(playerid,f,type)
{
	switch(type)
	{
	    case 0: { TieneCajaMeta[playerid] = 0; RemovePlayerAttachedObject(playerid, 4); }
	    case 1: { TieneCajaMeta[playerid] = 1; SetPlayerAttachedObject(playerid, 4, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000); }
    }
    GuardarFabrica(f);
}
stock ObjetosTransporte(vehicleid, f)
{
	if(VehiculoConCajas[Fabricas[f][Auto1F]] == 0) return 1;
	if(Fabricas[f][pEnUso] > 0)
	{
	    new vw = GetVehicleVirtualWorld(vehicleid);
		new interior = GetVehicleInterior(vehicleid);
	    for(new bl = 0; bl < 5; bl++)
		{
		    if(IsValidDynamicObject(CajaMeta[f][bl])) DestroyDynamicObject(CajaMeta[f][bl]);
		}
		CajaMeta[f][0] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		CajaMeta[f][1] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		CajaMeta[f][2] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		CajaMeta[f][3] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		CajaMeta[f][4] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		if(VehiculoConCajas[Fabricas[f][Auto1F]] > 0)
		{
		    AttachDynamicObjectToVehicle(CajaMeta[f][0], Fabricas[f][Auto1F], -0.011962,-1.074538,0.107927,-0.199999,0.000000,0.000000);
	        if(VehiculoConCajas[Fabricas[f][Auto1F]] > 1) AttachDynamicObjectToVehicle(CajaMeta[f][1], Fabricas[f][Auto1F], 0.000000,-1.999999,0.100000,0.349999,-1.149999,0.000000);
	        if(VehiculoConCajas[Fabricas[f][Auto1F]] > 2) AttachDynamicObjectToVehicle(CajaMeta[f][2], Fabricas[f][Auto1F], -0.007348,-1.509131,0.746309,0.000000,0.000000,0.000000);
	        if(VehiculoConCajas[Fabricas[f][Auto1F]] > 3) AttachDynamicObjectToVehicle(CajaMeta[f][3], Fabricas[f][Auto1F], 0.658764,-2.240282,0.650753,0.000000,34.049999,0.000000);
	        if(VehiculoConCajas[Fabricas[f][Auto1F]] > 4) AttachDynamicObjectToVehicle(CajaMeta[f][4], Fabricas[f][Auto1F], -0.714648,-2.216089,0.620124,0.000000,-29.000000,0.000000);
	 	}
	}
	return 1;
}
stock ActualizarCajasMeta(vehicleid, f)
{
	new vw = GetVehicleVirtualWorld(vehicleid);
	new interior = GetVehicleInterior(vehicleid);
    for(new bl = 0; bl < 5; bl++)
	{
	    if(IsValidDynamicObject(CajaMeta[f][bl])) DestroyDynamicObject(CajaMeta[f][bl]);
	}
	CajaMeta[f][0] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	CajaMeta[f][1] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	CajaMeta[f][2] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	CajaMeta[f][3] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	CajaMeta[f][4] = CreateDynamicObject(1271,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
}
stock ActualizarBarriles(vehicleid,f)
{
    new vw = GetVehicleVirtualWorld(vehicleid);
	new interior = GetVehicleInterior(vehicleid);
    for(new bl = 0; bl < 5; bl++)
	{
	    if(IsValidDynamicObject(BarrilMeta[f][bl])) DestroyDynamicObject(BarrilMeta[f][bl]);
	}
	BarrilMeta[f][0] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	BarrilMeta[f][1] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	BarrilMeta[f][2] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	BarrilMeta[f][3] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
	BarrilMeta[f][4] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
}
stock BarrilesTransporte(vehicleid, f)
{
	if(VehiculoConBarril[Fabricas[f][Auto1F]] == 0) return 1;
	if(Fabricas[f][pEnUso] > 0)
	{
	    new vw = GetVehicleVirtualWorld(vehicleid);
		new interior = GetVehicleInterior(vehicleid);
	    for(new bl = 0; bl < 5; bl++)
		{
		    if(IsValidDynamicObject(BarrilMeta[f][bl])) DestroyDynamicObject(BarrilMeta[f][bl]);
		}
		BarrilMeta[f][0] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		BarrilMeta[f][1] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		BarrilMeta[f][2] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		BarrilMeta[f][3] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		BarrilMeta[f][4] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,vw,interior);
		if(VehiculoConBarril[Fabricas[f][Auto1F]] > 0)
		{
			AttachDynamicObjectToVehicle(BarrilMeta[f][0], Fabricas[f][Auto1F], 0.394999, -1.084999, 0.230000, 0.000000, 0.000000, 0.000000);
			if(VehiculoConBarril[Fabricas[f][Auto1F]] > 1) AttachDynamicObjectToVehicle(BarrilMeta[f][1], Fabricas[f][Auto1F], -0.519999, -1.084999, 0.199500, 0.000000, 0.000000, 0.000000);
			if(VehiculoConBarril[Fabricas[f][Auto1F]] > 2) AttachDynamicObjectToVehicle(BarrilMeta[f][2], Fabricas[f][Auto1F], -0.049999, -1.729998, 0.230000, 0.000000, 0.000000, 0.000000);
			if(VehiculoConBarril[Fabricas[f][Auto1F]] > 3) AttachDynamicObjectToVehicle(BarrilMeta[f][3], Fabricas[f][Auto1F], 0.429999, -2.320005, 0.165000, 0.000000, 0.000000, 0.000000);
			if(VehiculoConBarril[Fabricas[f][Auto1F]] > 4) AttachDynamicObjectToVehicle(BarrilMeta[f][4], Fabricas[f][Auto1F], -0.554999, -2.285004, 0.220000, 0.000000, 0.000000, 0.000000);
		}
	}
	return 1;
}
stock ObjetoDistraccion(vehicleid, id)
{
	new vw = GetVehicleVirtualWorld(vehicleid);
	new interior = GetVehicleInterior(vehicleid);
    for(new bl = 0; bl < 5; bl++)
	{
	    if(IsValidDynamicObject(unkbox[id][bl])) DestroyDynamicObject(unkbox[id][bl]);
	}
	unkbox[id][0] = CreateDynamicObject(1271,0,0,-1000,0,0,0, vw,interior);
	unkbox[id][1] = CreateDynamicObject(1271,0,0,-1000,0,0,0, vw,interior);
	unkbox[id][2] = CreateDynamicObject(1271,0,0,-1000,0,0,0, vw,interior);
	unkbox[id][3] = CreateDynamicObject(1271,0,0,-1000,0,0,0, vw,interior);
	unkbox[id][4] = CreateDynamicObject(1271,0,0,-1000,0,0,0, vw,interior);
    AttachDynamicObjectToVehicle(unkbox[id][0], Fabricas[id][Auto2F], -0.011962,-1.074538,0.107927,-0.199999,0.000000,0.000000);
	AttachDynamicObjectToVehicle(unkbox[id][1], Fabricas[id][Auto2F], 0.000000,-1.999999,0.100000,0.349999,-1.149999,0.000000);
	AttachDynamicObjectToVehicle(unkbox[id][2], Fabricas[id][Auto2F], -0.007348,-1.509131,0.746309,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(unkbox[id][3], Fabricas[id][Auto2F], 0.658764,-2.240282,0.650753,0.000000,34.049999,0.000000);
	AttachDynamicObjectToVehicle(unkbox[id][4], Fabricas[id][Auto2F], -0.714648,-2.216089,0.620124,0.000000,-29.000000,0.000000);
	return 1;
}
stock MandarMensajeFabrica(f, string[])
{
	foreach(new i : Player)
    {
	    if(PlayerInfo[i][pFaccion] == Fabricas[f][pBanda]) SendClientMessage(i,-1,string);
    }
    return 1;
}
stock CargarVehiculoFabrica(id,value)
{
    switch(value)
    {
        case 1:
        {
            if(IsValidVehicle(Fabricas[id][Auto1F])) DestroyVehicleEx(Fabricas[id][Auto1F]);
            Fabricas[id][Auto1F] = CreateVehicle(554, -2010.0356, 214.3712, 1035.8262, -89.2800, 1, 3, -1);
            LinkVehicleToInterior(Fabricas[id][Auto1F], Fabricas[id][pInt]);
            SetVehicleVirtualWorld(Fabricas[id][Auto1F], Fabricas[id][pVW]);
            VehicleFuel[Fabricas[id][Auto1F]] = 120;
        }
        default:
        {
            if(IsValidVehicle(Fabricas[id][Auto2F])) DestroyVehicleEx(Fabricas[id][Auto2F]);
            Fabricas[id][Auto2F] = CreateVehicle(554, -2006.9652, 209.5471, 1035.8262, -89.2800, 1, 3, -1);
            LinkVehicleToInterior(Fabricas[id][Auto2F], Fabricas[id][pInt]);
            SetVehicleVirtualWorld(Fabricas[id][Auto2F], Fabricas[id][pVW]);
            ObjetoDistraccion(Fabricas[id][Auto2F], id);
            VehicleFuel[Fabricas[id][Auto2F]] = 120;
        }
    }
}
stock GuardarFabrica(c)
{
    #if DEBUG_GM == 1
    printf("GuardarFabrica: %d", idp);
    #endif
    new Query[2700];
    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `fabricas` SET `Coins`='%d',`Precio`='%d',`BandaID`='%d',`EnVenta`='%d',`EntradaA`='%f',`EntradaX`='%f',`EntradaY`='%f',`EntradaZ`='%f',`SalidaX`='%f',`SalidaY`='%f',`SalidaZ`='%f',`GarajeE_A`='%f',`GarajeE_X`='%f',`GarajeE_Y`='%f',`GarajeE_Z`='%f',`GarajeS_X`='%f',`GarajeS_Y`='%f',`GarajeS_Z`='%f' WHERE `ID`='%d'",Fabricas[c][pEnVentaPor],Fabricas[c][pValor],Fabricas[c][pBanda],Fabricas[c][pEnVenta],Fabricas[c][pEntradaA],Fabricas[c][pEntradaX],Fabricas[c][pEntradaY],Fabricas[c][pEntradaZ],Fabricas[c][pSalidaX],Fabricas[c][pSalidaY],Fabricas[c][pSalidaZ],Fabricas[c][pEntradaGA],Fabricas[c][pEntradaGX],Fabricas[c][pEntradaGY],Fabricas[c][pEntradaGZ],Fabricas[c][pSalidaGX],Fabricas[c][pSalidaGY],Fabricas[c][pSalidaGZ],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");

    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `fabricas` SET `Tanque1`='%d',`Tanque2`='%d',`Tanque3`='%d',`Tanque4`='%d',`Tanque5`='%d',`Tanque6`='%d',`Tanque7`='%d',`Tanque8`='%d',`Tanque9`='%d' WHERE `ID`='%d'",Fabricas[c][pTanqueUno],Fabricas[c][pTanqueDos],Fabricas[c][pTanqueTres],Fabricas[c][pTanqueCuatro],Fabricas[c][pTanqueCinco],Fabricas[c][pTanqueSeis],Fabricas[c][pTanqueSiete],Fabricas[c][pTanqueOcho],Fabricas[c][pTanqueNueve],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");

    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `fabricas` SET `Almacen1`='%d',`Almacen2`='%d',`Almacen3`='%d',`Almacen4`='%d',`Almacen5`='%d',`Almacen6`='%d',`Almacen7`='%d',`Almacen8`='%d',`Almacen9`='%d',`Almacen10`='%d' WHERE `ID`='%d'",Fabricas[c][Almacen1],Fabricas[c][Almacen2],Fabricas[c][Almacen3],Fabricas[c][Almacen4],Fabricas[c][Almacen5],Fabricas[c][Almacen6],Fabricas[c][Almacen7],Fabricas[c][Almacen8],Fabricas[c][Almacen9],Fabricas[c][Almacen10],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");

    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `fabricas` SET `Chalecos`='%d',`Interior`='%d',`VW`='%d',`DineroAlmacenado`='%d',`Uzi`='%d',`Recortada`='%d',`Sniper`='%d',`Tec9`='%d',`MContra`='%d',`Porcentaje1`='%d',`Porcentaje2`='%d',`Porcentaje3`='%d',`Crisol1`='%d',`Crisol2`='%d',`Crisol3`='%d',`ProgresoC1`='%d',`ProgresoC2`='%d',`ProgresoC3`='%d' WHERE `ID`='%d'",Fabricas[c][pChalecos],Fabricas[c][pInt],Fabricas[c][pVW],Fabricas[c][pCantidadDinero],Fabricas[c][pUzi],Fabricas[c][pRecortada],Fabricas[c][pSniper],Fabricas[c][pTec9],Fabricas[c][MedicoContratado],Fabricas[c][Porcentaje1],Fabricas[c][Porcentaje2],Fabricas[c][Porcentaje3],Fabricas[c][Crisol1],Fabricas[c][Crisol2],Fabricas[c][Crisol3],Fabricas[c][PorcentajeCocinero][0],Fabricas[c][PorcentajeCocinero][1],Fabricas[c][PorcentajeCocinero][2],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");

    mysql_format(handle_db,Query, sizeof(Query),"UPDATE `fabricas` SET `ProgresoC4`='%d',`ProgresoC5`='%d',`EstadoC1`='%d',`EstadoC2`='%d',`EstadoC3`='%d',`EstadoC4`='%d',`EstadoC5`='%d',`TieneMoledor1`='%d',`TieneMoledor2`='%d',`TieneMoledor3`='%d',`TieneMoledor4`='%d',`TieneMoledor5`='%d',`Termino1`='%d',`Termino2`='%d',`Termino3`='%d',`Termino4`='%d',`Termino5`='%d',`EstadoMedico`='%d' WHERE `ID`='%d'",Fabricas[c][PorcentajeCocinero][3],Fabricas[c][PorcentajeCocinero][4],Fabricas[c][EstadoCocinero][0],Fabricas[c][EstadoCocinero][1],Fabricas[c][EstadoCocinero][2],Fabricas[c][EstadoCocinero][3],Fabricas[c][EstadoCocinero][4],Fabricas[c][TieneCocinero][0],Fabricas[c][TieneCocinero][1],Fabricas[c][TieneCocinero][2],Fabricas[c][TieneCocinero][3],Fabricas[c][TieneCocinero][4],Fabricas[c][Termino][0],Fabricas[c][Termino][1],Fabricas[c][Termino][2],Fabricas[c][Termino][3],Fabricas[c][Termino][4],Fabricas[c][EstadoMedico],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");

    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `fabricas` SET `TieneGuardia1`='%d',`TieneGuardia2`='%d',`TieneGuardia3`='%d',`TieneGuardia4`='%d',`TieneGuardia5`='%d',`EstadoG1`='%d',`EstadoG2`='%d',`EstadoG3`='%d',`EstadoG4`='%d',`EstadoG5`='%d',`Soborno`='%d' WHERE `ID`='%d'",Fabricas[c][TieneGuardia][0],Fabricas[c][TieneGuardia][1],Fabricas[c][TieneGuardia][2],Fabricas[c][TieneGuardia][3],Fabricas[c][TieneGuardia][4],Fabricas[c][EstadoG][0],Fabricas[c][EstadoG][1],Fabricas[c][EstadoG][2],Fabricas[c][EstadoG][3],Fabricas[c][EstadoG][4],Fabricas[c][pSoborno],Fabricas[c][pID]);
    mysql_tquery(handle_db,Query,"","");
    return true;
}
stock DarInteriorFabrica(c)
{
	new query[2000];
	Fabricas[c][pSalidaX] = -1976.3900;
	Fabricas[c][pSalidaY] = 206.3660;
	Fabricas[c][pSalidaZ] = 1035.8199;
	mysql_format(handle_db, query,sizeof(query),"UPDATE `fabricas` SET `Interior`='1',`SalidaX`='-1976.3900',`SalidaY`='206.3660',`SalidaZ`='1035.8199' WHERE `ID`='%d'",Fabricas[c][pID]);
	mysql_tquery(handle_db, query);
	return true;
}
stock FabricaDesocupada()
{
	for(new p = 0; p < MAX_FABRICAS; p++)
	{
	    if(Fabricas[p][pEnUso] == 0 && p != 0) return p;
	}
	return -1;
}
public Logeado(playerid)
{
    new Query[200];
	if(VehicleInfo[playerid][0][vModelo] > 0 || VehicleInfo[playerid][1][vModelo] > 0 || VehicleInfo[playerid][2][vModelo] > 0 || VehicleInfo[playerid][3][vModelo] > 0) SetTimerEx("Autos",1000,false,"%d",playerid);
	if(Jail[playerid] == 1)	Encerrando(playerid);
    else
    {
        NoTeleportHack(playerid);
        GetPlayerPos(playerid,PosTP[playerid][0],PosTP[playerid][1],PosTP[playerid][2]);
        SetPlayerPosEx(playerid,PosTP[playerid][0],PosTP[playerid][1],PosTP[playerid][2]);
    }
    DarDineroLogin(playerid);
    mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Online`='1' WHERE `Username`='%e'",PlayerInfo[playerid][Nickname]);
    mysql_tquery(handle_db, Query);
    return 1;
}
public Logeado2(playerid)
{
    PrimerSpawn[playerid] = 1;
}
public VerificarPalabra(playerid, string[])
{
    if(cache_num_rows() == 0)
    {
        new DB_Query[256];
        mysql_format(handle_db, DB_Query,sizeof(DB_Query), "INSERT INTO anti_spam (Bloqueada) VALUES ('%e')", string);
        mysql_tquery(handle_db, DB_Query);
        new message[128];
        format(message,sizeof(message),"["SERVER_NAME2"]: Agregaste la palabra %s al antispam.",string);
        SendClientMessage(playerid,-1,message);
    }
    return 1;
}
stock DetectarSPAM(playerid, string[])
{
    new string2[256];
    if(PlayerInfo[playerid][pAdmin] < CMD_MOD_GLOBAL)
    {
        if(DetectSPAM(string))
        {
            format(string2,sizeof(string2),"%s(%d) SPAM ({e1190c}Posible IP{00CC00}): {FFFFFF}%s",PlayerInfo[playerid][Nickname],playerid,string);
            MensajeAdmin(0x00CC00FF,string2,CMD_MOD_JUEGO);
            ShowPlayerDialog(playerid, DIALOG_SPAM, DIALOG_STYLE_MSGBOX, "SPAM", "Se ha detectado que haz hecho SPAM en el servidor y por tal motivo seras kickeado si vuelves a hacerlo seras baneado.", "Ok","");
            return false;
        }
        new query[256];
        mysql_format(handle_db,query,sizeof(query),"SELECT Bloqueada FROM anti_spam WHERE '%e' LIKE CONCAT('%%',Bloqueada,'%%')",string);
        mysql_tquery(handle_db,query,"DetectoSPAM", "is",playerid,string);
    }
    return 0;
}
forward DetectoSPAM(playerid,string[]);
public DetectoSPAM(playerid,string[])
{
    new content[128],mensaje[256];
    if(cache_num_rows() > 0)
    {
        cache_get_value_name(0, "Bloqueada", content);
        strLower(content);
        format(mensaje,sizeof(mensaje),"%s(%d) SPAM ({BE2612}%s{00CC00}):{FFFFFF} %s",PlayerInfo[playerid][Nickname],playerid,content,string);
        MensajeAdmin(0x00CC00FF, mensaje, CMD_MOD_JUEGO);
    }
}
DetectSPAM(SPAM[])
{
    new StringSPAM;
    new COUNTP,COUNTN,COUNTW,COUNTTP;
    for(StringSPAM = 0; StringSPAM < strlen(SPAM); StringSPAM ++)
    {
        if(SPAM[StringSPAM] == '.') COUNTP ++;
        if(SPAM[StringSPAM] == '0' || SPAM[StringSPAM] == '1' || SPAM[StringSPAM] == '2' || SPAM[StringSPAM] == '3' || SPAM[StringSPAM] == '4' || SPAM[StringSPAM] == '5' || SPAM[StringSPAM] == '6' || SPAM[StringSPAM] == '7' || SPAM[StringSPAM] == '8' || SPAM[StringSPAM] == '9') COUNTN ++; //Count ot the Numbers
        if(SPAM[StringSPAM] == ':') COUNTTP ++;
    }
    if(COUNTP >= 3 && COUNTN >= 6) return 1;
    if(COUNTW >= 3) return 1;
    if(strfind(SPAM, ".ga", true) != -1 || strfind(SPAM, ".ml", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
    if(COUNTTP >= 1 && COUNTN >= 6) return 1;
    return 0;
}
public ActualizarUsuariosCortos(playerid, nombre[],type)
{
    new DB_Query[256];
    if(cache_num_rows() == 0)
    {
        switch(type)
        {
            case 1: MensajeEx(playerid, -1, "Este usuario no existe en el listado, utiliza /adduser %s para agregarlo.",nombre);
            case 2:
            {
                mysql_format(handle_db, DB_Query,sizeof(DB_Query), "INSERT INTO `admin_names` (Nickname) VALUES ('%s')", nombre);
                mysql_tquery(handle_db, DB_Query);
                return MensajeEx(playerid, -1, "Se agregó el nickname ( %s ), utiliza /removerusuario %s para quitarlo.",nombre,nombre);
            }
        }
    }
    else
    {
        switch(type)
        {
            case 1:
            {
                mysql_format(handle_db, DB_Query, sizeof(DB_Query), "DELETE FROM `admin_names` WHERE `Nickname` = '%s'", nombre);
                mysql_tquery(handle_db, DB_Query);
                return MensajeEx(playerid, -1, "Se eliminó el nickname ( %s ) correctamente.",nombre);
            }
            case 2: MensajeEx(playerid, -1, "Este usuario ya se encuentra agregado en el listado, utiliza /removeuser %s para quitarlo.",nombre);
        }
    }
    return 1;
}
public CorreoInvalido(playerid)
{
    if(cache_num_rows() != 0)
    {
        KillTimer(LCHAT[playerid]);
        KillTimer(LoginTimer[playerid]);
        SendClientMessage(playerid, COLOR_ORANGE, "Ya hay una cuenta registrada con ese email.");
        ExpulsarJugador(playerid,"Correo ya en uso.");
    }
    else ShowPlayerDialog(playerid,SEXO, DIALOG_STYLE_LIST,"¿Eres hombre o mujer?","Hombre\nMujer","Registrar","Salir");
}
public DestroyDynamicObjectEx(&objeto)
{
    if(IsValidDynamicObject(objeto)) DestroyDynamicObject(objeto);
    objeto = INVALID_STREAMER_ID;
    return 1;
}
public L_Objetos(vehicle_id)
{
	new content[64],vobjects;
	for(new z = 0; z < cache_num_rows(); z++)
	{
		VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_VALID] = true;
		cache_get_value_name(z, "ID", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ID] = strval(content);
		cache_get_value_name(z, "TYPE", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE] = strval(content);
		cache_get_value_name(z, "TYPE", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE] = strval(content);
		cache_get_value_name(z, "NAME", content); format(VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_NAME],32,"%s",content);
		cache_get_value_name(z, "MODELID", content);VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_MODELID] = strval(content);
		cache_get_value_name(z, "TEXT", content); format(VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_TEXT],32,"%s",content);
		cache_get_value_name(z, "OFF_X", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][0] = floatstr(content);
		cache_get_value_name(z, "OFF_Y", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][1] = floatstr(content);
		cache_get_value_name(z, "OFF_Z", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][2] = floatstr(content);
		cache_get_value_name(z, "ROT_X", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][0] = floatstr(content);
		cache_get_value_name(z, "ROT_Y", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][1] = floatstr(content);
		cache_get_value_name(z, "ROT_Z", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][2] = floatstr(content);
		cache_get_value_name(z, "FONT", content); format(VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT],24,"%s",content);
		cache_get_value_name(z, "ATTACHED", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ATTACHED] = strval(content);
		cache_get_value_name(z, "COLOR_0", content);	VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][0] = strval(content);
		cache_get_value_name(z, "COLOR_1", content);	VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][1] = strval(content);
		cache_get_value_name(z, "COLOR_2", content);	VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][2] = strval(content);
		cache_get_value_name(z, "COLOR_3", content);	VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][3] = strval(content);
		cache_get_value_name(z, "COLOR_4", content);	VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][4] = strval(content);
		cache_get_value_name(z, "FONT_SIZE", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_SIZE] = strval(content);
		cache_get_value_name(z, "FONT_BOLD", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_BOLD] = strval(content);
		cache_get_value_name(z, "FONT_COLOR", content); VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_COLOR] = strval(content);
		UpdateVehicleAttachedObject(vehicle_id, vobjects, true);
		vobjects++;
	}
	return true;
}
public StopAudioStream(playerid)
{
    StopAudioStreamForPlayer(playerid);
}
public kicktimer(playerid)
{
    return Kick(playerid);
}
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    #if DEBUG_GM == 1
    printf("(OnUnoccupiedVehicleUpdate) vehicleid: %d | playerid: %d | passenger_seat: %d | new_x: %f | new_y: %f | new_z: %f | vel_x: %f | vel_y: %f | vel_z: %f", vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
    #endif
    if(AutoOcupado(vehicleid)) return 1;
    new Float:vehx, Float:vehy, Float:vehz;
    GetVehiclePos(vehicleid, vehx, vehy, vehz);
    if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 5)
    {
        SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
        SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
        return 0;
    }
    new Float:PlayerSpeedDistance;
    PlayerSpeedDistance = floatmul(floatsqroot(floatadd(floatadd(floatpower(vel_x, 2), floatpower(vel_y, 2)), floatpower(vel_z, 2))), 170.0);
    new spe = floatround(PlayerSpeedDistance * 1);
    if(spe > 5 && passenger_seat > 0)
    {
        SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
        SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
        return 0;
    }
    if(passenger_seat == 0)
    {
        if(spe > 25)
        {
            SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
            SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
            return 0;
        }
    }
    return 1;
}
public TimerLogin(playerid)
{
    ExpulsarJugador(playerid,"Tiempo para logear sobrepasado");
}
public ReanimarMedico(playerid,ID)
{
    new intento,string[128];
    switch(PlayerInfo[playerid][pNivelMedico])
    {
        case 1: intento = random(8); case 2: intento = random(7);
        case 3: intento = random(6); case 4: intento = random(5);
        default: intento = random(4);
    }
    if(IsValidDynamicMapIcon(mapIconMedico[playerid][ID])) DestroyDynamicMapIcon(mapIconMedico[playerid][ID]);
    RemovePlayerMapIcon(playerid, ID);
    switch(intento)
    {
        case 0:
        {
            PlayerInfo[ID][Agonizando] = 0,     Muriendo[ID] = 0,       Esposando[ID] = 0;
            TogglePlayerControllable(ID,1),     SetPVarInt(ID, "IsFrozen", 1),      SetPlayerHealthEx(ID, 100.0);
            ClearAnimations(ID),                ApplyAnimation(ID, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
            format(string, sizeof(string), "%s logró reanimar a %s en el lugar.", PlayerInfo[playerid][Nickname], PlayerInfo[ID][Nickname]);
            ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        }
        default:
        {
            SetPlayerHealthEx(ID, 100.0),       Reanimado[ID] = 1,      Paciente[playerid] = ID;
            PlayerInfo[ID][Agonizando] = 1,     Muriendo[ID] = 0,       Esposando[ID] = 0;
            OcultarAnim(playerid),              MedicoReanimo[ID] = playerid;
        }
    }
    TimerMalherido[ID] = 0;
}
public ComproVehiculo(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	new carid = GetPlayerVehicleID(playerid);
	if(VehiculosInfo[carid][vcomprable] != 1) return 1;
	switch(PlayerInfo[playerid][pVip])
	{
		case 1: if(ObtenerAutos(playerid) > 3) return SendClientMessage(playerid, -1, "Ya tienes 4 vehículos, compra una membresía VIP 2 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 2: if(ObtenerAutos(playerid) > 4) return SendClientMessage(playerid, -1, "Ya tienes 5 vehículos, compra una membresía VIP 3 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 3: if(ObtenerAutos(playerid) > 5) return SendClientMessage(playerid, -1, "Ya tienes 6 vehículos, compra una membresía VIP 4 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 4: if(ObtenerAutos(playerid) > 7) return SendClientMessage(playerid, -1, "Ya tienes 8 vehículos."),RemovePlayerFromVehicle(playerid);
		default: if(ObtenerAutos(playerid) > 1) return SendClientMessage(playerid, -1, "Ya tienes 2 vehículos, compra una membresía VIP para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
	}
	new mensaje[10], kevin[5], value = random(9999);
	randomString(kevin, 4);
	format(mensaje, 10,"%s %d",kevin, value);
	if(VehiculosInfo[carid][vmoneda] == 0 && PlayerInfo[playerid][pDinero] < VehiculosInfo[carid][vprecio]) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente para comprar este vehículo."),RemovePlayerFromVehicle(playerid);
	else if(VehiculosInfo[carid][vmoneda] == 1 && PlayerInfo[playerid][Moneda] < VehiculosInfo[carid][vprecio]) return SendClientMessage(playerid,-1,"No tienes los "SERVER_COIN" necesarios para comprar este vehículo."),RemovePlayerFromVehicle(playerid);
	new query[900],slot = CompraSlot(playerid);
	if(slot != -1)
	{
		EsconderVelocimetro(playerid);
		VehicleInfo[playerid][slot][vModelo] = VehiculosInfo[carid][vmodelo];
		VehicleInfo[playerid][slot][vColor1] = VehiculosInfo[carid][vcolor1];
		VehicleInfo[playerid][slot][vColor2] = VehiculosInfo[carid][vcolor2];
		VehicleInfo[playerid][slot][vPrecio] = VehiculosInfo[carid][vprecio];
		VehicleInfo[playerid][slot][vMonedaa] = VehiculosInfo[carid][vmoneda];
		bloqueado[autos[slot][playerid]] = 0;
		alarma[autos[slot][playerid]] = 0;
		Patente[playerid][slot] = mensaje;
		for(new i = 1; i < 11; i++) EspacioBaul[playerid][slot][i] = 0;
		for(new c = 0; c < 13; c++) Componentes[playerid][c][slot] = 0;
		switch(VehiculosInfo[carid][vmoneda])
		{
		    case 0:	QuitarDinero(playerid,VehiculosInfo[carid][vprecio]);
		    case 1: PlayerInfo[playerid][Moneda] -= VehiculosInfo[carid][vprecio];
		}
		mysql_format(handle_db, query, 900, "INSERT INTO `p_vehicles` (UserID,Modelo,Segurov,X,Y,Z,A,Color1,Color2,VidaV,Precio,vMoneda,1Patente) VALUES ('%d','%d','0','%f','%f','%f','%f','%d','%d','1000.0','%d','%d','%e')",PlayerInfo[playerid][pID],VehiculosInfo[carid][vmodelo],VehiculosInfo[carid][vx],VehiculosInfo[carid][vy],VehiculosInfo[carid][vz],VehiculosInfo[carid][va],VehiculosInfo[carid][vcolor1],VehiculosInfo[carid][vcolor2],VehiculosInfo[carid][vprecio],VehiculosInfo[carid][vmoneda],mensaje);
		mysql_tquery(handle_db, query, "VehiculoRegistrado","dd",playerid,slot);
		SetTimerEx("RespawnearV",5000,false,"d",carid);
		RemovePlayerFromVehicle(playerid);
		ConceCercano(playerid, VehiculosInfo[carid][vmodelo],VehiculosInfo[carid][vcolor1],VehiculosInfo[carid][vcolor2],slot);
	}
	return 1;
}
public ComproVehiculoTienda(playerid, modelo, moneda, precio)
{
	switch(PlayerInfo[playerid][pVip])
	{
		case 1: if(ObtenerAutos(playerid) > 3) return SendClientMessage(playerid, -1, "Ya tienes 4 vehículos, compra una membresía VIP 2 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 2: if(ObtenerAutos(playerid) > 4) return SendClientMessage(playerid, -1, "Ya tienes 5 vehículos, compra una membresía VIP 3 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 3: if(ObtenerAutos(playerid) > 5) return SendClientMessage(playerid, -1, "Ya tienes 6 vehículos, compra una membresía VIP 4 para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
		case 4: if(ObtenerAutos(playerid) > 7) return SendClientMessage(playerid, -1, "Ya tienes 8 vehículos."),RemovePlayerFromVehicle(playerid);
		default: if(ObtenerAutos(playerid) > 1) return SendClientMessage(playerid, -1, "Ya tienes 2 vehículos, compra una membresía VIP para poder comprar más vehículos."),RemovePlayerFromVehicle(playerid);
	}
	new mensaje[10], value = random(9999);
	format(mensaje, 10,""SERVER_COIN"RP %d",value);
	new query[900],slot = CompraSlot(playerid), Float:CompraPos[4];
	if(slot != -1)
	{
		if(moneda == 1) { if(PlayerInfo[playerid][Moneda] < precio) return SendClientMessage(playerid,-1,"No tienes los "SERVER_COIN" necesarios para comprar este vehículo."); PlayerInfo[playerid][Moneda] -= precio; }
		VehicleInfo[playerid][slot][vModelo] = modelo;
		VehicleInfo[playerid][slot][vColor1] = 1;
		VehicleInfo[playerid][slot][vColor2] = 0;
		VehicleInfo[playerid][slot][vPrecio] = precio;
		VehicleInfo[playerid][slot][vMonedaa] = moneda;
		VehicleInfo[playerid][slot][v0_interior] = 0;
		VehicleInfo[playerid][slot][v0_vw] = 0;
		Patente[playerid][slot] = mensaje;
		for(new i = 1; i < 11; i++) EspacioBaul[playerid][slot][i] = 0;
		for(new c = 0; c < 13; c++) Componentes[playerid][c][slot] = 0;
		switch(modelo)
		{
			case 453,446,493,452,454,484,595,473: { new rand = random(sizeof(ConceBSpawn)); CompraPos[0] = ConceBSpawn[rand][0],CompraPos[1] = ConceBSpawn[rand][1],CompraPos[2] = ConceBSpawn[rand][2],CompraPos[3] = ConceBSpawn[rand][3]; }
			case 487: { new rand = random(sizeof(ConceHeliSpawn)); CompraPos[0] = ConceHeliSpawn[rand][0],CompraPos[1] = ConceHeliSpawn[rand][1],CompraPos[2] = ConceHeliSpawn[rand][2],CompraPos[3] = ConceHeliSpawn[rand][3]; }
			default: { new rand = random(sizeof(ConceSpawn)); CompraPos[0] = ConceSpawn[rand][0],CompraPos[1] = ConceSpawn[rand][1],CompraPos[2] = ConceSpawn[rand][2],CompraPos[3] = ConceSpawn[rand][3]; }
		}
		mysql_format(handle_db, query, 900, "INSERT INTO `p_vehicles` (UserID,Modelo,Segurov,X,Y,Z,A,Color1,Color2,VidaV,Precio,vMoneda,1Patente) VALUES ('%d','%d','0','%f','%f','%f','%f','%d','%d','1000.0','%d','1','%e')",PlayerInfo[playerid][pID],modelo,CompraPos[0],CompraPos[1],CompraPos[2],CompraPos[3],1,0,35,mensaje);
		mysql_tquery(handle_db, query, "VehiculoRegistrado","dd",playerid,slot);
		autos[slot][playerid] = CreateVehicle(modelo,CompraPos[0],CompraPos[1],CompraPos[2],CompraPos[3],0,1,-1);
		VehicleFuel[autos[slot][playerid]] = CombustibleCoche(autos[slot][playerid]);
		VehicleInfo[playerid][slot][vGas] = CombustibleCoche(autos[slot][playerid]);
		alarma[autos[slot][playerid]] = 0;
		bloqueado[autos[slot][playerid]] = 0;
		SetVehicleNumberPlate(autos[slot][playerid], Patente[playerid][slot]);
		SendClientMessage(playerid, -1, "Compraste un vehiculo, usa {DBED15}/localizar{FFFFFF} para ubicarlo y {DBED15}/pintar vehiculo{FFFFFF} para pintarlo.");
		GuardarCuenta(playerid);
	}
	return 1;
}
public VehiculoRegistrado(playerid,slot)
{
	VehicleInfo[playerid][slot][v_DBID] = cache_insert_id();
	return 1;
}
public RutaCosechador(playerid)
{
    switch(Cosechas[playerid][CosechaLugar])
    {
        case 1: //Flint Range
        {
            switch(Cosechas[playerid][RutaCosecha])
            {
                case 1:
                {
                    switch(Cosechas[playerid][ProgresoCosecha])
                    {
                        case 0: SetPlayerRaceCheckpoint(playerid, 0, -331.2785,-1557.1898,16.3701, -245.1280,-1555.2452,3.4091, 7.0);
                        case 1: SetPlayerRaceCheckpoint(playerid, 0, -245.1280,-1555.2452,3.4091, -217.4126,-1480.3319,7.7711, 7.0);
                        case 2: SetPlayerRaceCheckpoint(playerid, 0, -217.4126,-1480.3319,7.7711, -322.8756,-1471.4065,13.1665, 7.0);
                        case 3: SetPlayerRaceCheckpoint(playerid, 0, -322.8756,-1471.4065,13.1665, -332.7359,-1518.3053,14.9885, 7.0);
                        case 4: SetPlayerRaceCheckpoint(playerid, 0, -332.7359,-1518.3053,14.9885, -229.3911,-1515.4718,7.0683, 7.0);
                        case 5: SetPlayerRaceCheckpoint(playerid, 0, -229.3911,-1515.4718,7.0683, -213.3386,-1422.6776,3.6795, 7.0);
                        case 6: SetPlayerRaceCheckpoint(playerid, 0, -213.3386,-1422.6776,3.6795, -169.1533,-1413.0715,3.0359, 7.0);
                        case 7: SetPlayerRaceCheckpoint(playerid, 0, -169.1533,-1413.0715,3.0359, -185.6943,-1352.6555,4.3742, 7.0);
                        case 8: SetPlayerRaceCheckpoint(playerid, 0, -185.6943,-1352.6555,4.3742, -245.3476,-1316.0076,10.4294, 7.0);
                        case 9: SetPlayerRaceCheckpoint(playerid, 0, -245.3476,-1316.0076,10.4294, -223.3364,-1372.3151,7.7097, 7.0);
                        case 10: SetPlayerRaceCheckpoint(playerid, 0, -223.3364,-1372.3151,7.7097, -301.3120,-1426.9681,14.2198, 7.0);
                        case 11: SetPlayerRaceCheckpoint(playerid, 0, -301.3120,-1426.9681,14.2198, -322.2830,-1324.9767,9.3733, 7.0);
                        case 12: SetPlayerRaceCheckpoint(playerid, 0, -322.2830,-1324.9767,9.3733, -223.2709,-1372.1542,7.6970, 7.0);
                        case 13: SetPlayerRaceCheckpoint(playerid, 0, -223.2709,-1372.1542,7.6970, -303.8472,-1514.6864,10.5905, 7.0);
                        case 14: SetPlayerRaceCheckpoint(playerid, 0, -303.8472,-1514.6864,10.5905, -330.5511,-1552.3337,15.9343, 7.0);
                        case 15: SetPlayerRaceCheckpoint(playerid, 0, -330.5511,-1552.3337,15.9343, -244.5476,-1555.4554,3.4246, 7.0);
                        case 16: SetPlayerRaceCheckpoint(playerid, 0, -244.5476,-1555.4554,3.4246, -217.1465,-1481.8033,7.8521, 7.0);
                        case 17: SetPlayerRaceCheckpoint(playerid, 0, -217.1465,-1481.8033,7.8521, -323.0541,-1471.5936,13.2113, 7.0);
                        case 18: SetPlayerRaceCheckpoint(playerid, 0, -323.0541,-1471.5936,13.2113, -332.5766,-1517.5343,14.9429, 7.0);
                        case 19: SetPlayerRaceCheckpoint(playerid, 0, -332.5766,-1517.5343,14.9429, -366.9734,-1462.9573,25.7266, 7.0);
                        case 20: SetPlayerRaceCheckpoint(playerid, 1, -366.9734,-1462.9573,25.7266, -366.9734,-1462.9573,25.7266, 7.0);
                    }
                }
                case 2:
                {
                    switch(Cosechas[playerid][ProgresoCosecha])
                    {
                        case 0: SetPlayerRaceCheckpoint(playerid, 0, -365.5525,-1352.8912,21.1969, -347.8346,-1270.9780,26.3603, 7.0);
                        case 1: SetPlayerRaceCheckpoint(playerid, 0, -347.8346,-1270.9780,26.3603, -436.4909,-1285.9847,35.3527, 7.0);
                        case 2: SetPlayerRaceCheckpoint(playerid, 0, -436.4909,-1285.9847,35.3527, -524.2065,-1388.1093,14.0612, 7.0);
                        case 3: SetPlayerRaceCheckpoint(playerid, 0, -524.2065,-1388.1093,14.0612, -533.2181,-1422.3663,12.4132, 7.0);
                        case 4: SetPlayerRaceCheckpoint(playerid, 0, -533.2181,-1422.3663,12.4132, -555.1927,-1335.8824,21.0239, 7.0);
                        case 5: SetPlayerRaceCheckpoint(playerid, 0, -555.1927,-1335.8824,21.0239, -475.5691,-1335.3695,28.9320, 7.0);
                        case 6: SetPlayerRaceCheckpoint(playerid, 0, -475.5691,-1335.3695,28.9320, -370.0000,-1339.2062,22.9786, 7.0);
                        case 7: SetPlayerRaceCheckpoint(playerid, 0, -370.0000,-1339.2062,22.9786, -385.4833,-1382.4688,23.0875, 7.0);
                        case 8: SetPlayerRaceCheckpoint(playerid, 0, -385.4833,-1382.4688,23.0875, -524.1917,-1388.2031,14.0580, 7.0);
                        case 9: SetPlayerRaceCheckpoint(playerid, 0, -524.1917,-1388.2031,14.0580, -579.2998,-1319.4611,22.5672, 7.0);
                        case 10: SetPlayerRaceCheckpoint(playerid, 0, -579.2998,-1319.4611,22.5672, -577.1034,-1419.1190,12.9226, 7.0);
                        case 11: SetPlayerRaceCheckpoint(playerid, 0, -577.1034,-1419.1190,12.9226, -402.1465,-1353.3757,24.4278, 7.0);
                        case 12: SetPlayerRaceCheckpoint(playerid, 0, -402.1465,-1353.3757,24.4278, -418.2456,-1294.0625,31.6570, 7.0);
                        case 13: SetPlayerRaceCheckpoint(playerid, 0, -418.2456,-1294.0625,31.6570, -537.5991,-1326.7606,18.8563, 7.0);
                        case 14: SetPlayerRaceCheckpoint(playerid, 0, -537.5991,-1326.7606,18.8563, -519.6217,-1414.4735,13.1769, 7.0);
                        case 15: SetPlayerRaceCheckpoint(playerid, 1, -519.6217,-1414.4735,13.1769, -519.6217,-1414.4735,13.1769, 7.0);
                    }
                }
            }
        }
        case 2: //Blueberry
        {
            switch(Cosechas[playerid][RutaCosecha])
            {
                case 1:
                {
                    switch(Cosechas[playerid][ProgresoCosecha])
                    {
                        case 0: SetPlayerRaceCheckpoint(playerid, 0, -126.2398,58.0982,3.1172, -220.0446,94.3392,2.4021, 7.0);
                        case 1: SetPlayerRaceCheckpoint(playerid, 0, -220.0446,94.3392,2.4021, -272.4693,-44.4520,2.7906, 7.0);
                        case 2: SetPlayerRaceCheckpoint(playerid, 0, -272.4693,-44.4520,2.7906, -197.2084,-79.3804,3.1172, 7.0);
                        case 3: SetPlayerRaceCheckpoint(playerid, 0, -197.2084,-79.3804,3.1172, -158.4449,-24.6361,3.0463, 7.0);
                        case 4: SetPlayerRaceCheckpoint(playerid, 0, -158.4449,-24.6361,3.0463, -246.2974,26.1492,2.3419, 7.0);
                        case 5: SetPlayerRaceCheckpoint(playerid, 0, -246.2974,26.1492,2.3419, -179.2646,79.8465,3.0452, 7.0);
                        case 6: SetPlayerRaceCheckpoint(playerid, 0, -179.2646,79.8465,3.0452, -189.9071,-0.9972,3.0371, 7.0);
                        case 7: SetPlayerRaceCheckpoint(playerid, 0, -189.9071,-0.9972,3.0371, -217.7651,-79.0095,3.0434, 7.0);
                        case 8: SetPlayerRaceCheckpoint(playerid, 0, -217.7651,-79.0095,3.0434, -244.6129,-34.8416,3.0441, 7.0);
                        case 9: SetPlayerRaceCheckpoint(playerid, 0, -244.6129,-34.8416,3.0441, -122.0727,101.0684,3.0454, 7.0);
                        case 10: SetPlayerRaceCheckpoint(playerid, 0, -122.0727,101.0684,3.0454, -106.7489,144.0846,3.0485, 7.0);
                        case 11: SetPlayerRaceCheckpoint(playerid, 0, -106.7489,144.0846,3.0485, -173.6293,165.7723,7.3298, 7.0);
                        case 12: SetPlayerRaceCheckpoint(playerid, 0, -173.6293,165.7723,7.3298, -274.3358,-55.1750,3.0505, 7.0);
                        case 13: SetPlayerRaceCheckpoint(playerid, 0, -274.3358,-55.1750,3.0505, -40.9733,88.9567,3.0512, 7.0);
                        case 14: SetPlayerRaceCheckpoint(playerid, 0, -40.9733,88.9567,3.0512, -40.9733,88.9567,3.0512, 7.0);
                    }
                }
                case 2:
                {
                    switch(Cosechas[playerid][ProgresoCosecha])
                    {
                        case 0: SetPlayerRaceCheckpoint(playerid, 0, 21.7380,60.7267,3.0485, 64.6343,-30.3969,0.7852, 7.0);
                        case 1: SetPlayerRaceCheckpoint(playerid, 0, 64.6343,-30.3969,0.7852, 51.5721,-95.6284,0.5472, 7.0);
                        case 2: SetPlayerRaceCheckpoint(playerid, 0, 51.5721,-95.6284,0.5472, -40.4740,-106.9275,3.0461, 7.0);
                        case 3: SetPlayerRaceCheckpoint(playerid, 0, -40.4740,-106.9275,3.0461, -10.2124,-9.5856,3.0462, 7.0);
                        case 4: SetPlayerRaceCheckpoint(playerid, 0, -10.2124,-9.5856,3.0462, 45.8793,39.9411,2.0257, 7.0);
                        case 5: SetPlayerRaceCheckpoint(playerid, 0, 45.8793,39.9411,2.0257, 70.4207,2.5197,0.6218, 7.0);
                        case 6: SetPlayerRaceCheckpoint(playerid, 0, 70.4207,2.5197,0.6218, 18.8934,-83.4595,1.6948, 7.0);
                        case 7: SetPlayerRaceCheckpoint(playerid, 0, 18.8934,-83.4595,1.6948, 22.0990,60.9488,3.0427, 7.0);
                        case 8: SetPlayerRaceCheckpoint(playerid, 0, 22.0990,60.9488,3.0427, 64.8705,-31.4464,0.7353, 7.0);
                        case 9: SetPlayerRaceCheckpoint(playerid, 0, 64.8705,-31.4464,0.7353, 50.4737,-95.3511,0.5446, 7.0);
                        case 10: SetPlayerRaceCheckpoint(playerid, 0, 50.4737,-95.3511,0.5446, -39.7749,-106.4593,3.0474, 7.0);
                        case 11: SetPlayerRaceCheckpoint(playerid, 0, -39.7749,-106.4593,3.0474, -10.2871,-9.6325,3.0445, 7.0);
                        case 12: SetPlayerRaceCheckpoint(playerid, 0, -10.2871,-9.6325,3.0445, 45.2227,38.4053,2.1206, 7.0);
                        case 13: SetPlayerRaceCheckpoint(playerid, 0,45.2227,38.4053,2.1206, -40.5061,91.5295,3.0462, 7.0);
                        case 14: SetPlayerRaceCheckpoint(playerid, 1, -40.5061,91.5295,3.0462, -40.5061,91.5295,3.0462, 7.0);
                    }
                }
            }
        }
    }
}
public CosechasPoints(playerid)
{
    switch(Cosechas[playerid][CosechaLugar])
    {
        case 1: //hacia SF
        {
            switch(Cosechas[playerid][RutaCosecha])
            {
                case 1: { Cosechas[playerid][ProgresoCosecha] = 0; RutaCosechador(playerid); }
                case 2: { Cosechas[playerid][ProgresoCosecha] = 0; RutaCosechador(playerid); }
            }
        }
        case 2: //Blueberry
        {
            switch(Cosechas[playerid][RutaCosecha])
            {
                case 1: { Cosechas[playerid][ProgresoCosecha] = 0; RutaCosechador(playerid); }
                case 2: { Cosechas[playerid][ProgresoCosecha] = 0; RutaCosechador(playerid); }
            }
        }
    }
}
stock MostrarBoxLogeo(playerid)
{
    new ipp[MAX_PLAYER_NAME];
    format(ipp,sizeof(ipp),"%s",PlayerInfo[playerid][Nickname]);
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i) && i != playerid && PlayerInfo[playerid][pFaccion] == PlayerInfo[i][pFaccion] && PlayerInfo[i][pAlerta] == 1)
        {
            PlayerTextDrawSetString(i,NotiConnect[i][4],ipp);
            PlayerTextDrawSetPreviewModel(i, NotiConnect[i][3], PlayerInfo[playerid][pRopa]);
            PlayerTextDrawShow(i,NotiConnect[i][4]);
            PlayerTextDrawShow(i,NotiConnect[i][1]);
            PlayerTextDrawShow(i,NotiConnect[i][2]);
            PlayerTextDrawShow(i,NotiConnect[i][3]);
            NotificacionConectado[i] = 32;
        }
    }
}
PosicionGPS(playerid,Float:x,Float:y,Float:z,Float:range)
{
    SendClientMessage(playerid, -1, "Se ha marcado en el mapa un {FF0000}punto rojo{FFFFFF} en la ubicación seleccionada.");
    PlayerPlaySoundEx(playerid,1053,0.0,0.0,0.0);
    SetPlayerCheckpoint(playerid, x,y,z, range);
    TieneGPSActivo[playerid] = 1;
    return 1;
}
stock SetHabilityWeaponJob(playerid,nivel_armero)
{
    if(PlayerInfo[playerid][pNivelArmero] == nivel_armero && PlayerInfo[playerid][pExpArmero] < 49)
    {
        if(PlayerInfo[playerid][pVip] == 2)
        {
            new puntos = random(3);
            switch(puntos)
            {
                case 0:{ PlayerInfo[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
                case 1:{ PlayerInfo[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
                case 2:{ PlayerInfo[playerid][pExpArmero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +2 puntos."); }
            }
        }
        else { PlayerInfo[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
    }
    else if(PlayerInfo[playerid][pNivelArmero] == nivel_armero && PlayerInfo[playerid][pExpArmero] >= 49)
    {
        PlayerInfo[playerid][pNivelArmero]++;
        PlayerInfo[playerid][pExpArmero] = 0;
        SendClientMessage(playerid,-1,"Has aumentado tu nivel de armero, ahora puedes crear otras armas");
    }
    return 1;
}

StringPing(playerid)
{
    new Ping[100],ping = GetPlayerPing(playerid);
    if(ping >= 0 && ping < 150) format(Ping, sizeof(Ping), "{46e800}%d{FFFFFF}",ping);
    if(ping >= 150 && ping < 200) format(Ping, sizeof(Ping), "{00cbf7}%d{FFFFFF}",ping);
    if(ping >= 200 && ping < 250) format(Ping, sizeof(Ping), "{E0F600}%d{FFFFFF}",ping);
    if(ping >= 250 && ping < 300) format(Ping, sizeof(Ping), "{f7e300}%d{FFFFFF}",ping);
    if(ping >= 300) format(Ping, sizeof(Ping), "{f74000}%d{FFFFFF}",ping);
    return Ping;
}

PlayerName(playerid)
{
    new nombre[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nombre, sizeof(nombre));
    return nombre;
}
EnviarCarcel(playerid)
{
    if(PlayerInfo[playerid][pTipoCarcel] == 4)
	{
		new rand;
		CargarMapeosEx(playerid);
		SetPlayerVirtualWorld(playerid, 15);
		SetPlayerInterior(playerid, 15);
		rand = random(sizeof(FortCarsonSpawn));
		SetPlayerPos(playerid, FortCarsonSpawn[rand][0], FortCarsonSpawn[rand][1], FortCarsonSpawn[rand][2]);
	}
	else
	{
	    if(EstaDomiciliaria[playerid] == 1) return EnvioDomiciliaria(playerid);
		DarRopa(playerid);
		CeldaJugador[playerid] = 1;
		SetPlayerPos(playerid, 227.3367,109.3470,999.0156);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 1);
		QuitarArmas(playerid);
		CargarMapeosEx(playerid);
	}
	return 1;
}
LoadVehicles(playerid)
{
    new Query[256];
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(i == 0) mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `p_vehicles` WHERE `Garaje` = '0' AND `UserID` = '%d'",PlayerInfo[playerid][pID]);
		else mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `p_vehicles` WHERE `Garaje` = '0' AND `UserID` = '%d' LIMIT 1 OFFSET %d",PlayerInfo[playerid][pID],i);
		mysql_pquery(handle_db, Query, "VehicleLoad", "ii",i,playerid);
	}
}
LoadAchievements(playerid)
{
    new Query[560];
    for(new i = 1; i < 18; i++)
    {
        mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `achievements` WHERE `Tipo` = '%d' AND `Nombre_Jugador` = '%s'",i,PlayerName(playerid));
        mysql_tquery(handle_db, Query, "cargar_logros", "ii",i,playerid);
    }
}
CargarMapeosEx(playerid, time = 3)
{
    GameTextForPlayer(playerid, "~r~Cargando...~n~~w~Espera por favor", 2500, 4);
    NoTeleportHack(playerid);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("DesCargarMapeosEx", time*1000+500, false, "i", playerid);
	SetPVarInt(playerid, "IsFrozen", 0);
	return 1;
}
stock Congelado(playerid)
{
    TogglePlayerControllable(playerid, 0);
    ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
    SetTimerEx("DesCargarMapeosEx", 5000, false, "i", playerid);
    return 1;
}
VerTiempos(playerid,id)
{
    if(Jail[id] == 1)
    {
        new string[256];
        if(PlayerInfo[id][pTiempoCarcel] < 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {00CC00}%ds", PlayerInfo[id][pTiempoCarcel]);
        else if(PlayerInfo[id][pTiempoCarcel] >= 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {00CC00}%dm %ds", PlayerInfo[id][pTiempoCarcel]/60,PlayerInfo[id][pTiempoCarcel]%(60));
        SendClientMessage(playerid,-1,string);
    }
    else if(PlayerInfo[id][pTiempoJail] > 0)
    {
        new string[256];
        if(PlayerInfo[id][pTiempoJail] < 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {00CC00}%ds", PlayerInfo[id][pTiempoJail]);
        else if(PlayerInfo[id][pTiempoJail] >= 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {00CC00}%dm %ds", PlayerInfo[id][pTiempoJail]/60, PlayerInfo[id][pTiempoJail]%(60));
        SendClientMessage(playerid,-1,string);
    }
    return 1;
}
VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new Float:tempposx, Float:tempposy, Float:tempposz;
    GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
    tempposx = (oldposx -x);
    tempposy = (oldposy -y);
    tempposz = (oldposz -z);
    if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
    return 0;
}
ColocarCombate(playerid)
{
    if(EnCombate[playerid] == 0)
    {
        TimerCombate[playerid] = SetTimerEx("TextoCombate",800,true,"d",playerid);
        EnCombate[playerid] = 1;
        Tiempos[playerid][TiempoCombate] = 40;
    }
    else if(EnCombate[playerid] == 1) Tiempos[playerid][TiempoCombate] = 40;
}
ObtenerEstadoSalud(playerid)
{
    if(PlayerInfo[playerid][j_HEALTH] > 0 && PlayerInfo[playerid][j_HEALTH] < 11) PlayerInfo[playerid][pEnfermedad] = 10;
    else if(PlayerInfo[playerid][j_HEALTH] > 10 && PlayerInfo[playerid][j_HEALTH] < 21) PlayerInfo[playerid][pEnfermedad] = 1;
    else if(PlayerInfo[playerid][j_HEALTH] > 20 && PlayerInfo[playerid][j_HEALTH] < 31) PlayerInfo[playerid][pEnfermedad] = 3;
    else if(PlayerInfo[playerid][j_HEALTH] > 30 && PlayerInfo[playerid][j_HEALTH] < 41) PlayerInfo[playerid][pEnfermedad] = 2;
    else if(PlayerInfo[playerid][j_HEALTH] > 40 && PlayerInfo[playerid][j_HEALTH] < 51) PlayerInfo[playerid][pEnfermedad] = 5;
    else if(PlayerInfo[playerid][j_HEALTH] > 50 && PlayerInfo[playerid][j_HEALTH] < 61) PlayerInfo[playerid][pEnfermedad] = 8;
    else if(PlayerInfo[playerid][j_HEALTH] > 60 && PlayerInfo[playerid][j_HEALTH] < 71) PlayerInfo[playerid][pEnfermedad] = 7;
    else if(PlayerInfo[playerid][j_HEALTH] > 70 && PlayerInfo[playerid][j_HEALTH] < 81) PlayerInfo[playerid][pEnfermedad] = 6;
    else if(PlayerInfo[playerid][j_HEALTH] > 80 && PlayerInfo[playerid][j_HEALTH] < 91) PlayerInfo[playerid][pEnfermedad] = 9;
    else if(PlayerInfo[playerid][j_HEALTH] > 90 && PlayerInfo[playerid][j_HEALTH] < 100) PlayerInfo[playerid][pEnfermedad] = 4;
    else PlayerInfo[playerid][pEnfermedad] = 4;
    return 1;
}
SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid, congelar = 1)
{
    NoTeleportHack(playerid);
    if(interiorid > 0) GetPlayerPos(playerid, PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z]), CargarMapeosEx(playerid);
	if(worldid > 0) CargarMapeosEx(playerid);
    SetPlayerPosEx(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
    if(congelar == 1) CargarMapeosEx(playerid);
    if(interiorid == 0) GetPlayerPos(playerid, PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z]);
    return 1;
}
SetPosEntrar(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid, tienda = 0)
{
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
    if(interiorid > 0) GetPlayerPos(playerid, PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z]);
    if(worldid > 0) GetPlayerPos(playerid, PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z]);
    if(tienda == 1) NoTeleportHack(playerid);
    CargarMapeosEx(playerid);
    SetPlayerPosEx(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
    if(interiorid == 0) GetPlayerPos(playerid, PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z]);
    return 1;
}
RegisterNewPlayerToy(playerid, slot)
{
    new Query[800];
    mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO `prendas` (`Propietario`, `Nombre`, `ObjUsed`, `Objeto`, `ATH`, `fOffsetX`, `fOffsetY`, `fOffsetZ`, `fRotX`, `fRotY`, `fRotZ`, `fScaleX`, `fScaleY`, `fScaleZ`, `Color1`, `Color2`) VALUES ('%s', '%s', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",PlayerName(playerid),PlayerToys[playerid][slot][pToyName], PlayerToys[playerid][slot][pUsando], PlayerToys[playerid][slot][pModelID], PlayerToys[playerid][slot][pBone],PlayerToys[playerid][slot][pOffsetX], PlayerToys[playerid][slot][pOffsetY], PlayerToys[playerid][slot][pOffsetZ],PlayerToys[playerid][slot][pRotX], PlayerToys[playerid][slot][pRotY], PlayerToys[playerid][slot][pRotZ],PlayerToys[playerid][slot][pScaleX], PlayerToys[playerid][slot][pScaleY], PlayerToys[playerid][slot][pScaleZ],PlayerToys[playerid][slot][pColor1], PlayerToys[playerid][slot][pColor2]);
    mysql_tquery(handle_db, Query, "GetNewPlayerToyID", "dd", playerid, slot);
    return 1;
}
forward GetNewPlayerToyID(playerid, slot);
public GetNewPlayerToyID(playerid, slot)
{
    PlayerToys[playerid][slot][pToyID] = cache_insert_id();
    return 1;
}
GetEmptyPlayerToySlot(playerid)
{
    for(new i = 0; i != MAX_PTOYS; i ++)
    {
        if(!PlayerToys[playerid][i][pToyValid]) return i;
    }
    return -1;
}
MensajeAdmin(color, string[],level)
{
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pAdmin] >= level && VerAdmin[i] == 1) SendClientMessage(i, color, string);
    }
    return 1;
}
ApareceHospital(playerid)
{
    SetPlayerHealthEx(playerid, 4.0);
    if(PlayerInfo[playerid][pDuty] != 1)
    {
        QuitarArmas(playerid);
        SetPlayerArmourEx(playerid,0.0);
    }
    DarRopa(playerid);
    DarArmas(playerid);
    HospitalMasCercano(playerid);
    LlamadaMedicos[playerid] = 0;
    SetPlayerInterior(playerid,0);
    SetPlayerVirtualWorld(playerid, 0);
    PlayerInfo[playerid][Agonizando] = 0;
    Esposando[playerid] = 0;
    Muriendo[playerid] = 0;
    TogglePlayerControllable(playerid,0);
    SetPVarInt(playerid, "IsFrozen", 0);
    EnCombate[playerid] = 0;
    TextDrawHideForPlayer(playerid, Sangre);
    TextDrawHideForPlayer(playerid, NewPlayer[2]);
    TextDrawHideForPlayer(playerid, NewPlayer[0]);
    SendClientMessage(playerid, -1,"Fuiste trasladado al hospital y los médicos pudieron reanimarte");
   	SendClientMessage(playerid, 0xafafafFF,"{FFBC00}Están curándote las heridas, aguarda un momento.");
    TimerMalherido[playerid] = 0;
    SetTimerEx("CurarON",1000,false,"d",playerid);
    return 1;
}
stock AbrirRejas()
{
	MoveDynamicObject(RejasFC[0],198.87000+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[1],198.87000+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[2],194.99001+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[3],194.99001+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[4],191.13000+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[5],191.13000+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[6],187.35001+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[7],187.35001+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[8],183.50999+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[9],183.50999+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[10],180.86000+1.4, 1441.35999, 1081.79004, 3.0);
	MoveDynamicObject(RejasFC[11],179.57001+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[12],179.57001+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[13],179.13000+1.4, 1441.45996, 1081.81995, 3.0);
	MoveDynamicObject(RejasFC[14],175.71001+1.4, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[15],175.71001+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[16],198.66000+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[17],198.66000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[18],171.83000+1.4, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[19],194.84000+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[20],194.84000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[21],191.16000+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[22],191.16000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[23],187.24001+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[24],187.12000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[25],183.24001+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[26],179.39999+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[27],175.70000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[28],171.58000+1.4, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[29],175.56000+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[30],179.56000+1.4, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[31],183.39999+1.4, 1457.37000, 1089.34998, 3.0);
	return 1;
}

stock CerrarRejas()
{
	MoveDynamicObject(RejasFC[0],198.87000, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[1],198.87000, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[2],194.99001, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[3],194.99001, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[4],191.13000, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[5],191.13000, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[6],187.35001, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[7],187.35001, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[8],183.50999, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[9],183.50999, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[10],180.86000, 1441.35999, 1081.79004, 3.0);
	MoveDynamicObject(RejasFC[11],179.57001, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[12],179.57001, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[13],179.13000, 1441.45996, 1081.81995, 3.0);
	MoveDynamicObject(RejasFC[14],175.71001, 1442.04004, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[15],175.71001, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[16],198.66000, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[17],198.66000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[18],171.83000, 1442.04004, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[19],194.84000, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[20],194.84000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[21],191.16000, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[22],191.16000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[23],187.24001, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[24],187.12000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[25],183.24001, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[26],179.39999, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[27],175.70000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[28],171.58000, 1457.37000, 1085.06995, 3.0);
	MoveDynamicObject(RejasFC[29],175.56000, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[30],179.56000, 1457.37000, 1089.34998, 3.0);
	MoveDynamicObject(RejasFC[31],183.39999, 1457.37000, 1089.34998, 3.0);
	return 1;
}
LimpiarChat(playerid, lines, color)
{
    if(IsPlayerConnected(playerid))
    {
        for(new i=0; i<lines; i++) SendClientMessage(playerid,color," ");
    }
    return 1;
}
SetVehiclePassengersInteriorEx(vehicleid, interior_id)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                Tiempos[i][TIMER_SURFING] = gettime() + 3;
                SetPlayerInterior(i, interior_id);
            }
        }
    }
    return LinkVehicleToInterior(vehicleid, interior_id);
}
SetVehiclePassengersVWEx(vehicleid, vw_id)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                Tiempos[i][TIMER_SURFING] = gettime() + 3;
                SetPlayerVirtualWorld(i, vw_id);
            }
        }
    }
    return SetVehicleVirtualWorldEx(vehicleid, vw_id);
}
procesoOferta(armaOfertada, precio, idOfertador, aQuien)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(idOfertador,x,y,z);
    if(!IsPlayerInRangeOfPoint(aQuien, 5.0, x,y,z)) return SendClientMessage(idOfertador,-1,"No estas cerca de este jugador");
    armaofertada[aQuien] = armaOfertada;
    dineropedido[aQuien] = precio;
    ofertador[aQuien] = idOfertador;
    if(idTimerOfertaPerdida[aQuien] != -1)
    {
        KillTimer(idTimerOfertaPerdida[aQuien]);
        idTimerOfertaPerdida[aQuien] = -1;
    }
    idTimerOfertaPerdida[aQuien] = SetTimerEx("OfertaPerdida", 60000, false, "d", aQuien);
    Tiempos[idOfertador][TiempoVenta] = gettime() + 60;
    if(idTimerTiempoVenta[idOfertador] != -1)
    {
        KillTimer(idTimerTiempoVenta[idOfertador]);
        idTimerTiempoVenta[idOfertador] = -1;
    }
    idTimerTiempoVenta[idOfertador] = SetTimerEx("TiempoVender", 60000, false, "d", idOfertador);
    return 1;
}
stock SendReportToQue(reportfrom, reportadoid, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;
	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 250);
        Reports[newid][ReportadoID] = reportadoid;
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        new string[200], string2[100];
		if(PlayerInfo[reportfrom][pVip] == 0) format(string, sizeof(string), "#%i Jugador %s (ID: %i | Nivel: %d) Reporto a %s (ID:{DBED16}%i{DBED16} | Nivel: {DBED16}%d)",newid,PlayerName(reportfrom), reportfrom, PlayerInfo[reportfrom][pNivel], PlayerName(reportadoid), reportadoid, PlayerInfo[reportadoid][pNivel]);
		else format(string, sizeof(string), "#%i Jugador VIP %s (ID: %i | Nivel: %d) Reporto a %s (ID:{DBED16}%i{DBED16} | Nivel: {DBED16}%d)",newid,PlayerName(reportfrom), reportfrom, PlayerInfo[reportfrom][pNivel], PlayerName(reportadoid), reportadoid, PlayerInfo[reportadoid][pNivel]);
	    format(string2, sizeof(string2), " Razón: {FF3300}%s",(report));
	    MensajeAdmin(0xDBED16FF, string, 3);
	    MensajeAdmin(0xDBED16FF, string2, 3);
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, reportadoid, report);
	}
	return 1;
}
stock DarPosicionHeladera(p)
{
	switch(PropInfo[p][pInterior])
	{
		case 1: { PropInfo[p][pHeladeraX] = 240.6087; PropInfo[p][pHeladeraY] = 1195.1021; PropInfo[p][pHeladeraZ] = 1080.2578; PropInfo[p][pRoperoX] = 232.7087; PropInfo[p][pRoperoY] = 1211.9266; PropInfo[p][pRoperoZ] = 1084.3838; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 2: { PropInfo[p][pHeladeraX] = 2315.2896; PropInfo[p][pHeladeraY] = -1007.9119; PropInfo[p][pHeladeraZ] = 1050.2109; PropInfo[p][pRoperoX] = 2316.1682; PropInfo[p][pRoperoY] = -1010.6525; PropInfo[p][pRoperoZ] = 1054.7188; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 3: { PropInfo[p][pHeladeraX] = 2334.3918; PropInfo[p][pHeladeraY] = -1068.3335; PropInfo[p][pHeladeraZ] = 1049.0234; PropInfo[p][pRoperoX] = 2334.7236; PropInfo[p][pRoperoY] = -1073.7806; PropInfo[p][pRoperoZ] = 1049.0234; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 4: { PropInfo[p][pHeladeraX] = 2182.2820; PropInfo[p][pHeladeraY] = -1201.3693; PropInfo[p][pHeladeraZ] = 1049.0308; PropInfo[p][pRoperoX] = 2194.8635; PropInfo[p][pRoperoY] = -1210.7710; PropInfo[p][pRoperoZ] = 1049.0234; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 5: { PropInfo[p][pHeladeraX] = 2314.4543; PropInfo[p][pHeladeraY] = -1212.2015; PropInfo[p][pHeladeraZ] = 1049.0234; PropInfo[p][pRoperoX] = 2319.6328; PropInfo[p][pRoperoY] = -1212.8752; PropInfo[p][pRoperoZ] = 1049.0234; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 6: { PropInfo[p][pHeladeraX] = 2373.8438; PropInfo[p][pHeladeraY] = -1135.4618; PropInfo[p][pHeladeraZ] = 1050.8750; PropInfo[p][pRoperoX] = 2363.7671; PropInfo[p][pRoperoY] = -1127.4540; PropInfo[p][pRoperoZ] = 1050.8826; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 7: { PropInfo[p][pHeladeraX] = 2277.6765; PropInfo[p][pHeladeraY] = -1134.2250; PropInfo[p][pHeladeraZ] = 1050.8984; PropInfo[p][pRoperoX] = 2286.2429; PropInfo[p][pRoperoY] = -1137.8119; PropInfo[p][pRoperoZ] = 1050.8984; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 8: { PropInfo[p][pHeladeraX] = 2498.1443; PropInfo[p][pHeladeraY] = -1711.3541; PropInfo[p][pHeladeraZ] = 1014.7422; PropInfo[p][pRoperoX] = 2492.3171; PropInfo[p][pRoperoY] = -1708.5667; PropInfo[p][pRoperoZ] = 1018.3368; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 9: { PropInfo[p][pHeladeraX] = 231.6045; PropInfo[p][pHeladeraY] = 1243.9056; PropInfo[p][pHeladeraZ] = 1082.1406; PropInfo[p][pRoperoX] = 225.0578; PropInfo[p][pRoperoY] = 1248.5391; PropInfo[p][pRoperoZ] = 1082.1406; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 10: { PropInfo[p][pHeladeraX] = 226.4834; PropInfo[p][pHeladeraY] = 1287.9227; PropInfo[p][pHeladeraZ] = 1082.1406; PropInfo[p][pRoperoX] = 233.7389; PropInfo[p][pRoperoY] = 1291.2286; PropInfo[p][pRoperoZ] = 1082.1406; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 11: { PropInfo[p][pHeladeraX] = 243.4800; PropInfo[p][pHeladeraY] = 1021.4285; PropInfo[p][pHeladeraZ] = 1084.0129; PropInfo[p][pRoperoX] = 236.0156; PropInfo[p][pRoperoY] = 1032.3390; PropInfo[p][pRoperoZ] = 1088.3125; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 24; }
		case 12: { PropInfo[p][pHeladeraX] = 300.0292; PropInfo[p][pHeladeraY] = 1486.6417; PropInfo[p][pHeladeraZ] = 1080.2578; PropInfo[p][pRoperoX] = 300.1356; PropInfo[p][pRoperoY] = 1471.3264; PropInfo[p][pRoperoZ] = 1080.2578; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 13: { PropInfo[p][pHeladeraX] = 325.7386; PropInfo[p][pHeladeraY] = 1478.6791; PropInfo[p][pHeladeraZ] = 1084.4446; PropInfo[p][pRoperoX] = 327.8060; PropInfo[p][pRoperoY] = 1488.6558; PropInfo[p][pRoperoZ] = 1084.6858; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 14: { PropInfo[p][pHeladeraX] = 378.8145; PropInfo[p][pHeladeraY] = 1458.4629; PropInfo[p][pHeladeraZ] = 1080.1875; PropInfo[p][pRoperoX] = 380.6929; PropInfo[p][pRoperoY] = 1472.8866; PropInfo[p][pRoperoZ] = 1080.1875; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 15: { PropInfo[p][pHeladeraX] = 364.6002; PropInfo[p][pHeladeraY] = 1428.4363; PropInfo[p][pHeladeraZ] = 1081.3359; PropInfo[p][pRoperoX] = 360.1048; PropInfo[p][pRoperoY] = 1418.1925; PropInfo[p][pRoperoZ] = 1081.3281; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 16: { PropInfo[p][pHeladeraX] = 494.4734; PropInfo[p][pHeladeraY] = 1406.9779; PropInfo[p][pHeladeraZ] = 1080.2578; PropInfo[p][pRoperoX] = 486.9271; PropInfo[p][pRoperoY] = 1414.3024; PropInfo[p][pRoperoZ] = 1084.4160; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 17: { PropInfo[p][pHeladeraX] = 441.7853; PropInfo[p][pHeladeraY] = 1406.7727; PropInfo[p][pHeladeraZ] = 1084.3120; PropInfo[p][pRoperoX] = 455.6025; PropInfo[p][pRoperoY] = 1406.6128; PropInfo[p][pRoperoZ] = 1084.3080; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 18: { PropInfo[p][pHeladeraX] = 266.9625; PropInfo[p][pHeladeraY] = 1294.9094; PropInfo[p][pHeladeraZ] = 1080.2578; PropInfo[p][pRoperoX] = 260.4753; PropInfo[p][pRoperoY] = 1293.0789; PropInfo[p][pRoperoZ] = 1080.2578; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 19: { PropInfo[p][pHeladeraX] = 228.3452; PropInfo[p][pHeladeraY] = 1157.6827; PropInfo[p][pHeladeraZ] = 1082.6094; PropInfo[p][pRoperoX] = 220.2945; PropInfo[p][pRoperoY] = 1149.0428; PropInfo[p][pRoperoZ] = 1082.6094; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 20: { PropInfo[p][pHeladeraX] = 22.4300; PropInfo[p][pHeladeraY] = 1347.2555; PropInfo[p][pHeladeraZ] = 1084.3750; PropInfo[p][pRoperoX] = 31.3994; PropInfo[p][pRoperoY] = 1345.5010; PropInfo[p][pRoperoZ] = 1088.8750; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 21: { PropInfo[p][pHeladeraX] = -266.6378; PropInfo[p][pHeladeraY] = 1451.4071; PropInfo[p][pHeladeraZ] = 1084.3745; PropInfo[p][pRoperoX] = -274.8148; PropInfo[p][pRoperoY] = 1446.9792; PropInfo[p][pRoperoZ] = 1088.8672; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 22: { PropInfo[p][pHeladeraX] = 31.4377; PropInfo[p][pHeladeraY] = 1404.4353; PropInfo[p][pHeladeraZ] = 1084.4297; PropInfo[p][pRoperoX] = 26.3300; PropInfo[p][pRoperoY] = 1414.8411; PropInfo[p][pRoperoZ] = 1084.4297; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 23: { PropInfo[p][pHeladeraX] = 147.4858; PropInfo[p][pHeladeraY] = 1383.1149; PropInfo[p][pHeladeraZ] = 1083.8594; PropInfo[p][pRoperoX] = 151.4808; PropInfo[p][pRoperoY] = 1387.0924; PropInfo[p][pRoperoZ] = 1088.3672; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 24; }
		case 24: { PropInfo[p][pHeladeraX] = 223.4673; PropInfo[p][pHeladeraY] = 1079.7946; PropInfo[p][pHeladeraZ] = 1084.1979; PropInfo[p][pRoperoX] = 238.2854; PropInfo[p][pRoperoY] = 1082.9908; PropInfo[p][pRoperoZ] = 1084.1875; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 24; }
		case 25: { PropInfo[p][pHeladeraX] = -57.9440; PropInfo[p][pHeladeraY] = 1366.2247; PropInfo[p][pHeladeraZ] = 1080.2109; PropInfo[p][pRoperoX] = -70.4076; PropInfo[p][pRoperoY] = 1357.8486; PropInfo[p][pRoperoZ] = 1080.2109; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 26: { PropInfo[p][pHeladeraX] = -290.5264; PropInfo[p][pHeladeraY] = 1480.1294; PropInfo[p][pHeladeraZ] = 1084.3750; PropInfo[p][pRoperoX] = -296.5676; PropInfo[p][pRoperoY] = 1474.6875; PropInfo[p][pRoperoZ] = 1088.8750; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 27: { PropInfo[p][pHeladeraX] = -46.0470; PropInfo[p][pHeladeraY] = 1398.3417; PropInfo[p][pHeladeraZ] = 1084.4297; PropInfo[p][pRoperoX] = -42.7718; PropInfo[p][pRoperoY] = 1412.7611; PropInfo[p][pRoperoZ] = 1084.4297; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 28: { PropInfo[p][pHeladeraX] = 78.2833; PropInfo[p][pHeladeraY] = 1338.3760; PropInfo[p][pHeladeraZ] = 1083.8672; PropInfo[p][pRoperoX] = 92.7948; PropInfo[p][pRoperoY] = 1332.7618; PropInfo[p][pRoperoZ] = 1088.3595; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 29: { PropInfo[p][pHeladeraX] = 259.9944; PropInfo[p][pHeladeraY] = 1249.3361; PropInfo[p][pHeladeraZ] = 1084.2578; PropInfo[p][pRoperoX] = 257.0948; PropInfo[p][pRoperoY] = 1243.6552; PropInfo[p][pRoperoZ] = 1084.2578; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 30: { PropInfo[p][pHeladeraX] = 2449.5256; PropInfo[p][pHeladeraY] = -1685.9985; PropInfo[p][pHeladeraZ] = 1013.5078; PropInfo[p][pRoperoX] = 2462.0654; PropInfo[p][pRoperoY] = -1699.1202; PropInfo[p][pRoperoZ] = 1013.5078; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 31: { PropInfo[p][pHeladeraX] = 2817.4475; PropInfo[p][pHeladeraY] = -1173.2578; PropInfo[p][pHeladeraZ] = 1025.5703; PropInfo[p][pRoperoX] = 2810.4717; PropInfo[p][pRoperoY] = -1161.3860; PropInfo[p][pRoperoZ] = 1029.1719; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 32: { PropInfo[p][pHeladeraX] = 331.9549; PropInfo[p][pHeladeraY] = 1119.5458; PropInfo[p][pHeladeraZ] = 1083.8903; PropInfo[p][pRoperoX] = 310.7163; PropInfo[p][pRoperoY] = 1119.6621; PropInfo[p][pRoperoZ] = 1083.8828; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 33: { PropInfo[p][pHeladeraX] = 2334.3560; PropInfo[p][pHeladeraY] = -1143.5551; PropInfo[p][pHeladeraZ] = 1050.7031; PropInfo[p][pRoperoX] = 2316.4282; PropInfo[p][pRoperoY] = -1144.3564; PropInfo[p][pRoperoZ] = 1054.3047; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 24; }
		case 34: { PropInfo[p][pHeladeraX] = 2265.0903; PropInfo[p][pHeladeraY] = -1141.6536; PropInfo[p][pHeladeraZ] = 1050.6328; PropInfo[p][pRoperoX] = 2270.1960; PropInfo[p][pRoperoY] = -1133.6097; PropInfo[p][pRoperoZ] = 1050.6328; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 35: { PropInfo[p][pHeladeraX] = -2158.5508; PropInfo[p][pHeladeraY] = 640.5544; PropInfo[p][pHeladeraZ] = 1057.5861; PropInfo[p][pRoperoX] = -2170.4807; PropInfo[p][pRoperoY] = 646.8701; PropInfo[p][pRoperoZ] = 1057.5938; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20;}
		case 36: { PropInfo[p][pHeladeraX] = 414.0121; PropInfo[p][pHeladeraY] = 2537.5400; PropInfo[p][pHeladeraZ] = 10.0077; PropInfo[p][pRoperoX] = 413.1199; PropInfo[p][pRoperoY] = 2536.6013; PropInfo[p][pRoperoZ] = 10.0000; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 37: { PropInfo[p][pHeladeraX] = 1275.3596; PropInfo[p][pHeladeraY] = -821.8875; PropInfo[p][pHeladeraZ] = 1085.6328; PropInfo[p][pRoperoX] = 1271.5107; PropInfo[p][pRoperoY] = -822.3544; PropInfo[p][pRoperoZ] = 1089.9375; PropInfo[p][pLugarRopero] = 24; PropInfo[p][pLugarHeladera] = 20; }
		case 38: { PropInfo[p][pHeladeraX] = 2556.3142; PropInfo[p][pHeladeraY] = -1297.3783; PropInfo[p][pHeladeraZ] = 1060.9844; PropInfo[p][pRoperoX] = 2576.5298; PropInfo[p][pRoperoY] = -1280.4081; PropInfo[p][pRoperoZ] = 1065.3672; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 39: { PropInfo[p][pHeladeraX] = 1096.6918; PropInfo[p][pHeladeraY] = -837.7063; PropInfo[p][pHeladeraZ] = 107.5134; PropInfo[p][pRoperoX] = 1098.8173; PropInfo[p][pRoperoY] = -810.8547; PropInfo[p][pRoperoZ] = 107.4822; PropInfo[p][pLugarHeladera] = 40; PropInfo[p][pLugarRopero] = 30; }
		case 40: { PropInfo[p][pHeladeraX] = 1465.6249; PropInfo[p][pHeladeraY] = 549.5752; PropInfo[p][pHeladeraZ] = 1000.9959; PropInfo[p][pRoperoX] = 1471.5107; PropInfo[p][pRoperoY] = 563.7426; PropInfo[p][pRoperoZ] = 1000.9959; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 41: { PropInfo[p][pHeladeraX] = -791.4077; PropInfo[p][pHeladeraY] = 508.3234; PropInfo[p][pHeladeraZ] = 1367.3672; PropInfo[p][pRoperoX] = -778.0544; PropInfo[p][pRoperoY] = 496.4131; PropInfo[p][pRoperoZ] = 1368.5304; PropInfo[p][pLugarHeladera] = 240; PropInfo[p][pLugarRopero] = 20; }
		case 42: { PropInfo[p][pHeladeraX] = 2248.2996; PropInfo[p][pHeladeraY] = -1213.5907; PropInfo[p][pHeladeraZ] = 1049.0234; PropInfo[p][pRoperoX] = 2262.7876; PropInfo[p][pRoperoY] = -1216.7347; PropInfo[p][pRoperoZ] = 1049.0234; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
		case 43: { PropInfo[p][pHeladeraX] = 1436.5463; PropInfo[p][pHeladeraY] = 595.6940; PropInfo[p][pHeladeraZ] = 1000.9829; PropInfo[p][pRoperoX] = 1437.5188; PropInfo[p][pRoperoY] = 600.7122; PropInfo[p][pRoperoZ] = 1000.9829; PropInfo[p][pLugarHeladera] = 24; PropInfo[p][pLugarRopero] = 20; }
	}
	if(PropInfo[p][pHeladeraX] != 0) PropInfo[p][pLabel3] = CreateDynamic3DTextLabel("{3399FF}Heladera\n{FFFFFF}Pulsa {DBED16}'Y'{FFFFFF} para ver el interior\no\n{DBED16}/heladera guardar objeto",COLOR_ROJO,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[p][pVW],PropInfo[p][pInteriorID],-1,100.0);
	if(PropInfo[p][pGX] != 0) PropInfo[p][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_ROJO,PropInfo[p][pGX],PropInfo[p][pGY],PropInfo[p][pGZ]+0.6,9.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
	return 1;
}
AccionesRol(playerid, params[], rango = 20)
{
    new string[200];
    format(string, sizeof(string), "%s %s", PlayerInfo[playerid][Nickname], params);
    ProxDetector(rango, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
    return 1;
}
Float: player_get_speed(playerid)
{
    new Float: Floats[3];
    GetVehicleVelocity(GetPlayerVehicleID(playerid), Floats[0], Floats[1], Floats[2]);
    return floatsqroot(Floats[0] * Floats[0] + Floats[1] * Floats[1] + Floats[2] * Floats[2]) * 180;
}

IsAtTrenStation(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(10.0,playerid,831.5464,-1361.7238,-0.5015) || PlayerToPoint(10.0,playerid,1757.1368,-1943.4417,13.5703) || PlayerToPoint(10.0,playerid,1746.9652,-1943.4482,13.5703)) return 1;
        else if(PlayerToPoint(10.0,playerid,1437.3113,2655.2742,11.3926) || PlayerToPoint(10.0,playerid,1437.4141,2620.1450,11.3926) || PlayerToPoint(10.0,playerid,-1974.0217,116.7847,27.6875)) return 1;
        else if(PlayerToPoint(10.0,playerid,2856.5955,1314.5538,11.3906) || PlayerToPoint(10.0,playerid,2856.5969,1266.9460,11.3906) || PlayerToPoint(10.0,playerid,826.7249,-1353.6726,13.5369)) return 1;
    }
    return 0;
}

EnvioDomiciliaria(playerid)
{
    for(new p = 0; p < MAX_PROPIEDADES; p++)
    {
        if(PropInfo[p][pEnUso] == 1)
        {
            if(PlayerInfo[playerid][pID] == PropInfo[p][pIDPropietario])
            {
                SendClientMessage(playerid, -1, "Pagaste {04D616}3800${FFFFFF} por la prisión domiciliaria.");
                SetPlayerPosEx(playerid,PropInfo[p][pPosXS],PropInfo[p][pPosYS],PropInfo[p][pPosZS]);
                SetPlayerFacingAngle(playerid,PropInfo[p][pPosAS]);
                SetPlayerInterior(playerid,PropInfo[p][pInteriorID]);
                SetPlayerVirtualWorld(playerid,PropInfo[p][pVW]);
                CargarMapeosEx(playerid);
                EstaDomiciliaria[playerid] = 1;
                PlayerInfo[playerid][pTipoCarcel] = 10;
                QuitarDinero(playerid, 3800);
                return 1;
            }
        }
    }
    return 1;
}
ActualizarPais(playerid)
{
    new country[30], Queryx[300];
    GetPlayerCountry(playerid, country, sizeof(country));
    format(PlayerInfo[playerid][pPaisRegistro], 32, "%s", country);
    mysql_format(handle_db, Queryx, sizeof(Queryx), "UPDATE `usuarios` SET `Pais_Registro`='%e' WHERE `Username`=('%e')",country,PlayerInfo[playerid][Nickname]);
    mysql_tquery(handle_db, Queryx);
    return 1;
}
MostrarBotiquin(playerid)
{
    if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Solo los médicos tienen la llave del botiquín.");
    {
        if(GetPlayerSkin(playerid) == 274 || GetPlayerSkin(playerid) == 275 || GetPlayerSkin(playerid) == 276 || GetPlayerSkin(playerid) == 308)
        {
            new string[375];
            format(string,sizeof(string),"Pinzas, vendas, jeringa con anestesia\nPinzas, vendas, jeringa con morfina\nAntiinflamatorios y yeso\nAntiinflamatorios\nHilo, aguja, vendas y suero fisiológico\nAntiinflamatorios y Hielo\nAntiinflamatorios, hielo y yeso\nBisturí, escalpelo, hilo, aguja y jeringa con morfina\nHielo, vendas y jeringa con morfina\nHielo y vendas\nYeso, vendas, morfina y antiinflamatorios");
            ShowPlayerDialog(playerid,BOTIQUIN,DIALOG_STYLE_LIST,"Botiquín médico",string,"Agarrar","Cerrar");
        }
    }
    return 1;
}
ShowConfig(playerid)
{
    new string[900],AOPTIONS[200];
    if(PlayerInfo[playerid][pAdmin] > 2) format(AOPTIONS,sizeof(AOPTIONS),"\nLog Administrativo.\t%s",GetYesOrNoConfig(VerAdmin[playerid]));
    format(string, sizeof(string), "Opción\tEstado actual\nMostrar canal de dudas.\t%s\nMostrar muteos, sanciones y baneos.\t%s\nReproducir sonidos especiales y de radios.\t%s\nMostrar alertas de conexión.\t%s\nAparecer en la guía telefónica. \t%s\nMostrar barras de hambre y sed.\t%s\nMostrar velocímetro y medidor de combustible.\t%s\nMostrar propietario del territorio al entrar en el.\t%s\nMostrar territorios en mapa (Solo al estar en banda).\t%s%s%s",GetYesOrNoConfig(CanalDudas[playerid]),GetYesOrNoConfig(PlayerInfo[playerid][pMuteos]),GetYesOrNoConfig(PlayerInfo[playerid][pSonidos]),GetYesOrNoConfig(PlayerInfo[playerid][pAlerta]),GetYesOrNoConfig(PlayerInfo[playerid][pGuia]),GetYesOrNoConfig(PlayerInfo[playerid][pBarras]),GetYesOrNoConfig(PlayerInfo[playerid][pVelocimetro]),GetYesOrNoConfig(PlayerInfo[playerid][pTerritorioAviso]),GetYesOrNoConfig(PlayerInfo[playerid][pTerritorioMapa]),AOPTIONS);
    ShowPlayerDialog(playerid, DCONFIG, DIALOG_STYLE_TABLIST_HEADERS, "Opciones de configuración", string, "Cambiar", "Cerrar");
    return 1;
}
Bailarinas(id)
{
    new BailarinasTexto[70];
    switch(id) {
        case 1: { if(Bailarina1 == 0) BailarinasTexto = "{faafff}Gatúbela{FFFFFF}"; else BailarinasTexto = "{EB0000}Gatúbela{FFFFFF}"; }
        case 2: { if(Bailarina2 == 0) BailarinasTexto = "{faafff}Bailarina Ardiente{FFFFFF}"; else BailarinasTexto = "{EB0000}Bailarina Ardiente{FFFFFF}"; }
        case 3: { if(Bailarina3 == 0) BailarinasTexto = "{faafff}Gordita Sensual{FFFFFF}"; else BailarinasTexto = "{EB0000}Gordita Sensual{FFFFFF}"; }
        case 4: { if(Bailarina4 == 0) BailarinasTexto = "{faafff}Poli-Bailarina{FFFFFF}"; else BailarinasTexto = "{EB0000}Poli-Bailarina{FFFFFF}"; }
        case 5: { if(Bailarina5 == 0) BailarinasTexto = "{faafff}Colegiala{FFFFFF}"; else BailarinasTexto = "{EB0000}Colegiala{FFFFFF}"; }
        case 6: { if(Bailarina6 == 0) BailarinasTexto = "{faafff}Chocolatita{FFFFFF}"; else BailarinasTexto = "{EB0000}Chocolatita{FFFFFF}"; }
    }
    return BailarinasTexto;
}
GetContenido(i) {
    new strongs[64];
    switch(CamionCargado[i]) {
        case 0: format(strongs, sizeof(strongs), "Ninguno");
        case 1: format(strongs, sizeof(strongs), "Productos 24/7");
        case 2: format(strongs, sizeof(strongs), "Ropa");
        case 3: format(strongs, sizeof(strongs), "Drogas");
        case 4: format(strongs, sizeof(strongs), "Armas");
        default: strcat(strongs, "Ninguno");
    }
    return strongs;
}
AfinidadNivel(playerid,id)
{
    new NombreFinal[50];
    switch(id) {
        case 1: { if(PlayerInfo[playerid][pAfinidad1] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad1] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad1] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
        case 2: { if(PlayerInfo[playerid][pAfinidad2] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad2] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad2] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
        case 3: { if(PlayerInfo[playerid][pAfinidad3] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad3] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad3] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
        case 4: { if(PlayerInfo[playerid][pAfinidad4] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad4] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad4] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
        case 5: { if(PlayerInfo[playerid][pAfinidad5] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad5] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad5] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
        case 6: { if(PlayerInfo[playerid][pAfinidad6] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad6] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad6] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}"; }
    }
    return NombreFinal;
}
AfinidadPrecio(playerid,id)
{
    new NombreFinal[50];
    switch(id) {
        case 1: { if(PlayerInfo[playerid][pAfinidad1] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$5000{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad1] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$5000{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad1] >= 78) NombreFinal = "{00cc00}$4000{FFFFFF}"; }
        case 2: { if(PlayerInfo[playerid][pAfinidad2] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$5000{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad2] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$5000{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad2] >= 78) NombreFinal = "{00cc00}$4000{FFFFFF}"; }
        case 3: { if(PlayerInfo[playerid][pAfinidad3] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$3000{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad3] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$3000{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad3] >= 78) NombreFinal = "{00cc00}$2500{FFFFFF}"; }
        case 4: { if(PlayerInfo[playerid][pAfinidad4] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$4500{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad4] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$4500{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad4] >= 78) NombreFinal = "{00cc00}$4000{FFFFFF}"; }
        case 5: { if(PlayerInfo[playerid][pAfinidad5] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$5000{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad5] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$5000{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad5] >= 78) NombreFinal = "{00cc00}$4000{FFFFFF}"; }
        case 6: { if(PlayerInfo[playerid][pAfinidad6] < 45) format(NombreFinal, sizeof(NombreFinal), "{00cc00}$4000{FFFFFF}"); if(PlayerInfo[playerid][pAfinidad6] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) NombreFinal = "{00cc00}$4000{FFFFFF}"; if(PlayerInfo[playerid][pAfinidad6] >= 78) NombreFinal = "{00cc00}$3500{FFFFFF}"; }
    }
    return NombreFinal;
}
AfinidadCobro(playerid,id)
{
    new dinero;
    switch(id) {
        case 1: { if(PlayerInfo[playerid][pAfinidad1] < 45) dinero = 5000; if(PlayerInfo[playerid][pAfinidad1] >= 45 && PlayerInfo[playerid][pAfinidad1] < 78) dinero = 4000; if(PlayerInfo[playerid][pAfinidad1] >= 78) dinero = 1000; }
        case 2: { if(PlayerInfo[playerid][pAfinidad2] < 45) dinero = 5000; if(PlayerInfo[playerid][pAfinidad2] >= 45 && PlayerInfo[playerid][pAfinidad2] < 78) dinero = 4000; if(PlayerInfo[playerid][pAfinidad2] >= 78) dinero = 1000; }
        case 3: { if(PlayerInfo[playerid][pAfinidad3] < 45) dinero = 3000; if(PlayerInfo[playerid][pAfinidad3] >= 45 && PlayerInfo[playerid][pAfinidad3] < 78) dinero = 1500; if(PlayerInfo[playerid][pAfinidad3] >= 78) dinero = 100; }
        case 4: { if(PlayerInfo[playerid][pAfinidad4] < 45) dinero = 4500; if(PlayerInfo[playerid][pAfinidad4] >= 45 && PlayerInfo[playerid][pAfinidad4] < 78) dinero = 4000; if(PlayerInfo[playerid][pAfinidad4] >= 78) dinero = 800; }
        case 5: { if(PlayerInfo[playerid][pAfinidad5] < 45) dinero = 5000; if(PlayerInfo[playerid][pAfinidad5] >= 45 && PlayerInfo[playerid][pAfinidad5] < 78) dinero = 4000; if(PlayerInfo[playerid][pAfinidad5] >= 78) dinero = 1000; }
        case 6: { if(PlayerInfo[playerid][pAfinidad6] < 45) dinero = 5000; if(PlayerInfo[playerid][pAfinidad6] >= 45 && PlayerInfo[playerid][pAfinidad6] < 78) dinero = 4000; if(PlayerInfo[playerid][pAfinidad6] >= 78) dinero = 600; }
    }
    return dinero;
}
DatosFrecuencia(dato)
{
    new respuesta[13];
    if(dato == 0) format(respuesta, sizeof(respuesta), "Libre");
    if(dato == 1) format(respuesta, sizeof(respuesta), "1 Persona");
    if(dato > 1) format(respuesta, sizeof(respuesta), "%d Personas", dato);
    return respuesta;
}
LimpiarFrecuencia(playerid,frecuencia)
{
	if(Frecuencia[playerid] > 0) AccionesRol(playerid,"ha cambiado la frecuencia de su radio comunicador.", 20);
	else AccionesRol(playerid,"enciende su radio y cambia de frecuencia.", 20);
	if(frecuencia > 0) frecuencias[frecuencia] -= 1;
}
MostrarFrecuencias(playerid)
{
    new string[512];
    for(new p = 1; p < 9; p++) format(string,sizeof(string),"%s{737373}#%d:{FFFFFF} %s.\n", string, p, DatosFrecuencia(frecuencias[p]));
    ShowPlayerDialog(playerid, DIALOGO_FRECUENCIAS, DIALOG_STYLE_LIST, "Frecuencias", string, "Cambiar","Cancelar");
    return true;
}
MostrarMenuBailarinas(playerid)
{
    new mensaje[600];
    format(mensaje,sizeof(mensaje),"Bailarina\tAfinidad\tCosto\n");
    for(new i = 0; i < 6; i++) format(mensaje,sizeof(mensaje),"%s%s\t%s\t%s\n",mensaje,Bailarinas(i+1),AfinidadNivel(playerid,i+1),AfinidadPrecio(playerid,i+1));
    ShowPlayerDialog(playerid, DCLUB, DIALOG_STYLE_TABLIST_HEADERS,"Entrar a la sala privada con...", mensaje, "Entrar", "Cancelar");
    return 1;
}
stock comprarsombrero(playerid)
{
    AccionesRol(playerid, "agarró un sombrero y se lo puso.", 20);
    SendClientMessage(playerid,-1,"Compraste un sombrero descartable, no durará mucho.");
    SetPlayerAttachedObject(playerid, 4, 19528, 2, 0.116999, 0.020000, 0.000000, 0.000000, 0.000000, 0.000000, 1.102999, 1.135000, 1.094000);
    SetTimerEx("ReproducirHalloween",2500,false,"d",playerid);
    RevisarLogro(playerid, 16);
    QuitarDinero(playerid, 500);
    TieneSombrero[playerid] = 1;
}
stock DarCaramelos(playerid)
{
    new randomvalue = random(5);
    switch(randomvalue)
    {
        case 0: randomvalue = 4; case 1: randomvalue = 5;
        case 2: randomvalue = 4; case 3: randomvalue = 6;
        case 4: randomvalue = 5;
    }
    MensajeEx(playerid, -1, "Conseguiste {00FF00}%d{FFFFFF} caramelos de la fuente mágica de dulces, ahora puedes {FFFB00}/consumir caramelo", randomvalue);
    PlayerInfo[playerid][pCaramelos] += randomvalue;
    if(PlayerInfo[playerid][pTrucoTrato] == 0 && Halloween[playerid][P1Hora] > 0 && Halloween[playerid][P2Hora] > 0 && Halloween[playerid][P3Hora] > 0 && Halloween[playerid][P4Hora] > 0 && Halloween[playerid][P5Hora] > 0 && Halloween[playerid][P6Hora] > 0 && Halloween[playerid][P7Hora] > 0 && Halloween[playerid][P8Hora] > 0 && Halloween[playerid][P9Hora] > 0 && Halloween[playerid][P10Hora] > 0 && Halloween[playerid][P11Hora] > 0 && Halloween[playerid][P12Hora] > 0 && Halloween[playerid][P13Hora] > 0 && Halloween[playerid][P14Hora] > 0 && Halloween[playerid][P15Hora] > 0 && Halloween[playerid][P16Hora] > 0 && Halloween[playerid][P17Hora] > 0 && Halloween[playerid][P18Hora] > 0 && Halloween[playerid][P19Hora] > 0 && Halloween[playerid][P20Hora] > 0 && Halloween[playerid][P21Hora] > 0 && Halloween[playerid][P22Hora] > 0 && Halloween[playerid][P23Hora] > 0 && Halloween[playerid][P24Hora] > 0 && Halloween[playerid][P25Hora] > 0 && Halloween[playerid][P26Hora] > 0 && Halloween[playerid][P27Hora] > 0 && Halloween[playerid][P28Hora] > 0 && Halloween[playerid][P29Hora] > 0 && Halloween[playerid][P30Hora] > 0 && Halloween[playerid][P31Hora] > 0 && Halloween[playerid][P32Hora] > 0) RevisarLogro(playerid, 15);
    return 1;
}
MostrarHeladera(playerid)
{
    if(GetPlayerVirtualWorld(playerid) != 0)
    {
        for(new p; p < MAX_PROPIEDADES; p++)
        {
            if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
            {
                if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                {
                    new heladera[100],heladera2[500],heladera3[550];
                    AccionesRol(playerid,"abre la heladera.", 20);
                    new total = PropInfo[p][pSprunk] + PropInfo[p][pVino] + PropInfo[p][pCerveza] + PropInfo[p][pPizzas] + PropInfo[p][pAquarius];
                    format(heladera,sizeof(heladera),"{FFFFFF}Heladera    [Lugares: %d/%d]",total,PropInfo[p][pLugarHeladera]);
                    if(total == 0)
                    {
                        format(heladera2,sizeof(heladera2),"La heladera está vacía.");
                        strcat(heladera3,heladera2);
                    }
                    else if(total > 0)
                    {
                        if(PropInfo[p][pCerveza] > 0) format(heladera3,sizeof(heladera3),"{FFFFFF}Botella de cerveza {00CC00}x%d\n", PropInfo[p][pCerveza]);
                        if(PropInfo[p][pVino] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Botella de vino {00CC00}x%d\n", heladera3, PropInfo[p][pVino]);
                        if(PropInfo[p][pSprunk] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Vasos de sprunk {00CC00}x%d\n", heladera3, PropInfo[p][pSprunk]);
                        if(PropInfo[p][pAquarius] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Botella de aquarius {00CC00}x%d", heladera3, PropInfo[p][pAquarius]);
                        if(PropInfo[p][pPizzas] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Porción de pizza {00CC00}x%d", heladera3, PropInfo[p][pPizzas]);
                    }
                    ShowPlayerDialog(playerid,INVENTARIO,DIALOG_STYLE_MSGBOX,heladera,heladera3,"Cerrar","");
                }
            }
        }
    }
    return 1;
}
ComponenteValido(modelid, componentid)
{
	if(400 <= modelid <= 611)
	{
		switch(componentid)
		{
			case 1000..1191:
			{
				componentid -= 1000;
				if(ComponentesCheck[(modelid - 400) * 6 + (componentid >>> 5)] & 1 << (componentid & 0b00011111)) return 1;
			}
			case 1192, 1193: if(modelid == 576) return 1;
		}
	}
	return 0;
}
BaulSlot(id)
{
	new espacio[10];
	switch(id)
	{
		case 1: espacio = "vBaul";
		case 2: espacio = "vBaul2";
  		case 3: espacio = "vBaul3";
    	case 4: espacio = "vBaul4";
		case 5: espacio = "vBaul5";
		case 6: espacio = "vBaul6";
		case 7: espacio = "vBaul7";
		case 8: espacio = "vBaul8";
		case 9: espacio = "vBaul9";
		case 10: espacio = "vBaul10";
 	}
 	return espacio;
}
CompraSlot(playerid)
{
	new slot = -1;
    for(new i = 0; i < MAX_PAUTOS; i++)
    {
        if(VehicleInfo[playerid][i][vModelo] != 0) continue;
        else { slot = i; break; }
	}
	return slot;
}
ObtenerAutos(playerid)
{
	new vehs;
    for(new i = 0; i < MAX_PAUTOS; i++)
    {
		if(VehicleInfo[playerid][i][vModelo] != 0) vehs++;
    }
	return vehs;
}
MostrarEstanteria(playerid)
{
    for(new c; c < MAX_PROPIEDADES; c++)
    {
        if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
        {
            new total = EspacioRopero(c),ropero[40],ropero2[1000],ropero3[1200];
            format(ropero,sizeof(ropero),"{FFFFFF}Estantería    [Lugares: %d/%d]",total,PropInfo[c][pLugarRopero]);
            if(total > 0)
            {
                format(ropero2,sizeof(ropero2),"Armas:\n");
                strcat(ropero3,ropero2);
                new cosas;
                if(PropInfo[c][pManopla] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Manopla {00CC00}x%d {00CCFF}||",PropInfo[c][pManopla]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pPaloDeGolf] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Palo-de-Golf {00CC00}x%d {00CCFF}||",PropInfo[c][pPaloDeGolf]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pCuchillo] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Cuchillo {00CC00}x%d {00CCFF}||",PropInfo[c][pCuchillo]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pBateDeBeisbol] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Bate-de-Beisbol {00CC00}x%d {00CCFF}||",PropInfo[c][pBateDeBeisbol]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pPala] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Pala {00CC00}x%d {00CCFF}||",PropInfo[c][pPala]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pPaloDeBillar] > 0)
                {
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Palo-de-Billar {00CC00}x%d {00CCFF}||",PropInfo[c][pPaloDeBillar]);
                    strcat(ropero3,ropero2);
                    cosas ++;
                }
                if(PropInfo[c][pKatana] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Katana {00CC00}x%d {00CCFF}||",PropInfo[c][pKatana]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pConsoladorRosa] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Consolador-Rosa {00CC00}x%d {00CCFF}||",PropInfo[c][pConsoladorRosa]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pVibradorBlanco] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Vibrador-Blanco {00CC00}x%d {00CCFF}||",PropInfo[c][pVibradorBlanco]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pGranVibradorBlanco] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Gran-Vibrador-Blanco {00CC00}x%d {00CCFF}||",PropInfo[c][pGranVibradorBlanco]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pVibradorPlateado] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Vibrador-Plateado {00CC00}x%d {00CCFF}||",PropInfo[c][pVibradorPlateado]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pFlores] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Flores {00CC00}x%d {00CCFF}||",PropInfo[c][pFlores]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pBaston] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Baston {00CC00}x%d {00CCFF}||",PropInfo[c][pBaston]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][p9mm] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}9mm {00CC00}x%d {00CCFF}||",PropInfo[c][p9mm]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][p9mmSilenciada] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}9mm-silenciada {00CC00}x%d {00CCFF}||",PropInfo[c][p9mmSilenciada]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pDesertEagle] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Desert-Eagle {00CC00}x%d {00CCFF}||",PropInfo[c][pDesertEagle]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pEscopetaNormal] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Escopeta-Normal {00CC00}x%d {00CCFF}||",PropInfo[c][pEscopetaNormal]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pEscopetaDeCombate] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Escopeta-de-Combate {00CC00}x%d {00CCFF}||",PropInfo[c][pEscopetaDeCombate]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pMP5] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}MP5 {00CC00}x%d {00CCFF}||",PropInfo[c][pMP5]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pAK47] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}AK-47 {00CC00}x%d {00CCFF}||",PropInfo[c][pAK47]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pM4] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}M4 {00CC00}x%d {00CCFF}||",PropInfo[c][pM4]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pRifle] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Rifle {00CC00}x%d {00CCFF}||",PropInfo[c][pRifle]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pGranada] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Granada {00CC00}x%d {00CCFF}||",PropInfo[c][pGranada]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pCamara] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2)," {FFFFFF}Camara {00CC00}x%d {00CCFF}||",PropInfo[c][pCamara]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pMedicamentos] > 0 || PropInfo[c][pTranquilizantes] > 0 || PropInfo[c][pCrack] > 0 || PropInfo[c][pMarihuana] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2),"\n\n");
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pMarihuana] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2),"\n{FFFFFF}Marihuana: {FF3300}%dg",PropInfo[c][pMarihuana]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pCrack] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2),"\n{FFFFFF}Crack: {FF3300}%dg",PropInfo[c][pCrack]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pMedicamentos] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2),"\n{FFFFFF}Medicamentos: {00CC00}%d",PropInfo[c][pMedicamentos]);
                    strcat(ropero3,ropero2);
                }
                if(PropInfo[c][pTranquilizantes] > 0)
                {
                    if(cosas >= 2)
                    {
                        cosas = 0;
                        format(ropero2,sizeof(ropero),"\n");
                        strcat(ropero3,ropero2);
                    }
                    cosas ++;
                    format(ropero2,sizeof(ropero2),"\n{FFFFFF}Medicamentos: {00CC00}%d",PropInfo[c][pTranquilizantes]);
                    strcat(ropero3,ropero2);
                }
            }
            else
            {
                format(ropero2,sizeof(ropero2),"La estantería está vacía");
                strcat(ropero3,ropero2);
            }
            ShowPlayerDialog(playerid,INVENTARIO,DIALOG_STYLE_MSGBOX,ropero,ropero3,"Cerrar","");
        }
    }
    return 1;
}
stock AbrirRegalo(playerid)
{
    new regalo = random(6), randomMoney = random(50000);
    switch (regalo)
    {
        case 0: { SendClientMessage(playerid,-1,"Recibes {74F20C}$50.0000{FFFFFF} y {74F20C}Una Cámara{FFFFFF} de regalo."); DarDinero(playerid,50000); DarArma(playerid,43); }
        case 1: { MensajeEx(playerid,-1,"Recibes {74F20C}$%d{FFFFFF} de dinero de regalo.",3000+randomMoney); DarDinero(playerid,3000+randomMoney); DarArma(playerid,43); }
        case 2: { SendClientMessage(playerid,-1,"Recibes unos patines de regalo"); PlayerInfo[playerid][pPatines] = 1; }
        case 3: { SendClientMessage(playerid,-1,"Recibes un bate de regalo."); DarArma(playerid,5); }
        case 4: { SendClientMessage(playerid,-1,"Recibes 50 "SERVER_COIN" de regalo."); }
        case 5: { SendClientMessage(playerid,-1,"Recibes {74F20C}una katana{FFFFFF} de regalo."); DarArma(playerid,8); }
        case 6: { SendClientMessage(playerid,-1,"Recibes {74F20C}un palo de golf{FFFFFF} de regalo."); DarArma(playerid,7); }
        case 7: { SendClientMessage(playerid,-1,"Recibes {74F20C}2 totems{FFFFFF} de regalo."); PlayerInfo[playerid][Totems] += 2; }
    }
    return 1;
}
EstaEnP(playerid,id,Float:rang)
{
    new Float:Pos[3];
    GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
    if(IsPlayerInRangeOfPoint(playerid,rang,Pos[0],Pos[1],Pos[2])) return 1;
    return 0;
}
GuardarPropiedad(c)
{
	#if DEBUG_GM == 1
	printf("GuardarPropiedad: %d", c);
	#endif
	new Query[2700];
	mysql_format(handle_db, Query, sizeof(Query), "UPDATE `propiedades` SET `EnVentaPor`='%d',`EnVenta`='%d',`Precio`='%d',`Nivel`='%d',`Ganancias`='%d',`PosX`='%f',`PosY`='%f',`PosZ`='%f',`PosA`='%f',`PosXS`='%f',`PosYS`='%f',`PosZS`='%f',`PosAS`='%f',`EnUso`='%d',`Tipo`='%d',`Interior`='%d',`InteriorID`='%d',`Abierta`='%d' WHERE `ID`='%d'",PropInfo[c][pEnVentaPor],PropInfo[c][pEnVenta],PropInfo[c][pPrecio],PropInfo[c][pNivel],PropInfo[c][pGanancias],PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ],PropInfo[c][pPosA],PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS],PropInfo[c][pPosAS],PropInfo[c][pEnUso],PropInfo[c][pTipo],PropInfo[c][pInterior],PropInfo[c][pInteriorID],PropInfo[c][pAbierta],PropInfo[c][pID]);
	mysql_tquery(handle_db, Query);
	mysql_format(handle_db, Query, sizeof(Query), "UPDATE `propiedades` SET `Sprunk`='%d',`Cerveza`='%d',`Aquarius`='%d',`Pizzas`='%d',`Vino`='%d',`Baston`='%d',`AK47`='%d',`M4`='%d',`EscopetaNormal`='%d',`EscopetaDeCombate`='%d',`MP5`='%d',`9mm`='%d',`9mmSilenciada`='%d',`PaloDeBillar`='%d',`DesertEagle`='%d',`Rifle`='%d',`Granada`='%d',`Manopla`='%d' WHERE `ID`='%d'",PropInfo[c][pSprunk],PropInfo[c][pCerveza],PropInfo[c][pAquarius],PropInfo[c][pPizzas],PropInfo[c][pVino],PropInfo[c][pBaston], PropInfo[c][pAK47],PropInfo[c][pM4],PropInfo[c][pEscopetaNormal],PropInfo[c][pEscopetaDeCombate],PropInfo[c][pMP5],PropInfo[c][p9mm],PropInfo[c][p9mmSilenciada],PropInfo[c][pPaloDeBillar],PropInfo[c][pDesertEagle],PropInfo[c][pRifle],PropInfo[c][pGranada],PropInfo[c][pManopla],PropInfo[c][pID]);
	mysql_tquery(handle_db, Query);
	mysql_format(handle_db, Query, sizeof(Query), "UPDATE `propiedades` SET `Cuchillo`='%d',`Katana`='%d',`Crack`='%d',`Medicamentos`='%d',`Marihuana`='%d',`GranVibradorBlanco`='%d',`Camara`='%d',`Flores`='%d',`Pala`='%d',`BateDeBeisbol`='%d',`PaloDeGolf`='%d',`ConsoladorRosa`='%d',`VibradorBlanco`='%d',`VibradorPlateado`='%d' WHERE `ID`='%d'",PropInfo[c][pDesertEagle],PropInfo[c][pRifle],PropInfo[c][pGranada],PropInfo[c][pManopla],PropInfo[c][pCuchillo],PropInfo[c][pKatana],PropInfo[c][pCrack],PropInfo[c][pMedicamentos],PropInfo[c][pMarihuana],PropInfo[c][pGranVibradorBlanco],PropInfo[c][pCamara],PropInfo[c][pFlores],PropInfo[c][pPala],PropInfo[c][pBateDeBeisbol],PropInfo[c][pPaloDeGolf],PropInfo[c][pConsoladorRosa],PropInfo[c][pVibradorBlanco],PropInfo[c][pVibradorPlateado],PropInfo[c][pID]);
	mysql_tquery(handle_db, Query);
	return true;
}
stock CasaDesocupada()
{
    for(new p = 0; p < MAX_PROPIEDADES; p++)
    {
        if(PropInfo[p][pEnUso] == 0 && p != 0) return p;
    }
    return -1;
}
stock DarInteriorCasa(c,interior)
{
	new Interior, Float:Pos2[3],Query[200];
	switch(interior)
	{
		case 1: { Pos2[0] = 235.3099;   Pos2[1] = 1186.6809;  Pos2[2] = 1080.2578; Interior = 3; }
		case 2: { Pos2[0] = 2317.6685;  Pos2[1] = -1026.7620; Pos2[2] = 1050.2178; Interior = 9; }
		case 3: { Pos2[0] = 2333.2153;  Pos2[1] = -1077.3358; Pos2[2] = 1049.0234; Interior = 6; }
		case 4: { Pos2[0] = 2196.85;    Pos2[1] = -1204.25;   Pos2[2] = 1049.02;   Interior = 6; }
		case 5: { Pos2[0] = 2308.77;    Pos2[1] = -1212.94;   Pos2[2] = 1049.02;   Interior = 6; }
		case 6: { Pos2[0] = 2365.4602;  Pos2[1] = -1135.5823; Pos2[2] = 1050.8826; Interior = 8; }
		case 7: { Pos2[0] = 2283.04;    Pos2[1] = -1140.28;   Pos2[2] = 1050.90;   Interior = 11; }
		case 8: { Pos2[0] = 2496.0586;  Pos2[1] = -1692.0869; Pos2[2] = 1014.7422; Interior = 3; }
		case 9: { Pos2[0] = 226.7886;   Pos2[1] = 1239.8962;  Pos2[2] = 1082.1406; Interior = 2; }
		case 10: { Pos2[0] = 223.0915;  Pos2[1] = 1287.0846;  Pos2[2] = 1082.1406; Interior = 1; }
		case 11: { Pos2[0] = 225.7592;  Pos2[1] = 1021.4461;  Pos2[2] = 1084.0177; Interior = 7; }
		case 12: { Pos2[0] = 295.04;    Pos2[1] = 1472.26;    Pos2[2] = 1080.26;   Interior = 15; }
		case 13: { Pos2[0] = 328.0828;  Pos2[1] = 1477.7327;  Pos2[2] = 1084.4375; Interior = 15; }
		case 14: { Pos2[0] = 387.2211;  Pos2[1] = 1471.6251;  Pos2[2] = 1080.1949; Interior = 15; }
		case 15: { Pos2[0] = 377.0259;  Pos2[1] = 1417.4404;  Pos2[2] = 1081.3281; Interior = 15; }
		case 16: { Pos2[0] = 491.0412;  Pos2[1] = 1398.5021;  Pos2[2] = 1080.2578; Interior = 2; }
		case 17: { Pos2[0] = 446.9309;  Pos2[1] = 1397.0626;  Pos2[2] = 1084.3047; Interior = 2; }
		case 18: { Pos2[0] = 261.2726;  Pos2[1] = 1284.3112;  Pos2[2] = 1080.2578; Interior = 4; }
		case 19: { Pos2[0] = 221.8109;  Pos2[1] = 1140.1986;  Pos2[2] = 1082.6094; Interior = 4; }
		case 20: { Pos2[0] = 23.8471;   Pos2[1] = 1340.1683;  Pos2[2] = 1084.3750; Interior = 10; }
		case 21: { Pos2[0] = -260.4884; Pos2[1] = 1456.5424;  Pos2[2] = 1084.3672; Interior = 4; }
		case 22: { Pos2[0] = 22.9034;   Pos2[1] = 1403.3380;  Pos2[2] = 1084.4370; Interior = 5; }
		case 23: { Pos2[0] = 140.1393;  Pos2[1] = 1365.9347;  Pos2[2] = 1083.8594; Interior = 5; }
		case 24: { Pos2[0] = 234.0749;  Pos2[1] = 1063.7300;  Pos2[2] = 1084.2123; Interior = 6; }
		case 25: { Pos2[0] = -68.9326;  Pos2[1] = 1351.2013;  Pos2[2] = 1080.2109; Interior = 6; }
		case 26: { Pos2[0] = -283.4381; Pos2[1] = 1471.1987;  Pos2[2] = 1084.3750; Interior = 15; }
		case 27: { Pos2[0] = -42.59;    Pos2[1] = 1405.47;    Pos2[2] = 1084.43;   Interior = 8; }
		case 28: { Pos2[0] = 83.1256;   Pos2[1] = 1322.2806;  Pos2[2] = 1083.8662; Interior = 9; }
		case 29: { Pos2[0] = 260.85;    Pos2[1] = 1237.24;    Pos2[2] = 1084.26;   Interior = 9; }
		case 30: { Pos2[0] = 2468.84;   Pos2[1] = -1698.24;   Pos2[2] = 1013.51;   Interior = 2; }
		case 31: { Pos2[0] = 2807.8662; Pos2[1] = -1174.7537; Pos2[2] = 1025.5703; Interior = 8; }
		case 32: { Pos2[0] = 318.4255;  Pos2[1] = 1114.4877;  Pos2[2] = 1083.8828; Interior = 5; }
		case 33: { Pos2[0] = 2324.5017; Pos2[1] = -1149.5309; Pos2[2] = 1050.7101; Interior = 12; }
		case 34: { Pos2[0] = 2259.38;   Pos2[1] = -1135.77;   Pos2[2] = 1050.64;   Interior = 10; }
		case 35: { Pos2[0] = -2170.4675; Pos2[1] = 639.4775;  Pos2[2] = 1052.3750; Interior = 1; }
		case 36: { Pos2[0] = 422.5716;  Pos2[1] = 2536.6816;  Pos2[2] = 10.0000;   Interior = 10; }
		case 37: { Pos2[0] = 1260.8397; Pos2[1] = -785.4880;  Pos2[2] = 1091.9063; Interior = 5; }
		case 38: { Pos2[0] = 2548.7993; Pos2[1] = -1294.6368; Pos2[2] = 1060.9844; Interior = 2; }
		case 39: { Pos2[0] = 1094.7491; Pos2[1] = -812.6580;  Pos2[2] = 107.4822;  Interior = 1; }
		case 40: { Pos2[0] = 1454.7249; Pos2[1] = 551.5430;   Pos2[2] = 1000.9959; Interior = 10; }
		case 41: { Pos2[0] = -794.7611; Pos2[1] = 508.3545;   Pos2[2] = 1371.7490; Interior = 1; }
		case 42: { Pos2[0] = 2270.38;   Pos2[1] = -1210.35;   Pos2[2] = 1047.56;   Interior = 10; }
		case 43: { Pos2[0] = 1425.9812; Pos2[1] = 599.6008;   Pos2[2] = 1000.9754; Interior = 99; }
		default: return print("[ERROR]: Se creo una casa con ID inválida.");
	}
	PropInfo[c][pPosXS] = Pos2[0];
	PropInfo[c][pPosYS] = Pos2[1];
	PropInfo[c][pPosZS] = Pos2[2];
	PropInfo[c][pInteriorID] = Interior;
	mysql_format(handle_db, Query, sizeof(Query),"UPDATE `propiedades` SET `InteriorID`='%d',`PosXS`='%f',`PosYS`='%f',`PosZS`='%f' WHERE `ID`='%d'", Interior,Pos2[0],Pos2[1],Pos2[2],PropInfo[c][pID]);
	mysql_tquery(handle_db, Query);
	return true;
}
SiRoperoTiene(c,objeto)
{
    if(objeto == 1 && PropInfo[c][pManopla] > 0) return 1;
    else if(objeto == 2 && PropInfo[c][pPaloDeGolf] > 0) return 1;
    else if(objeto == 4 && PropInfo[c][pCuchillo] > 0) return 1;
    else if(objeto == 5 && PropInfo[c][pBateDeBeisbol] > 0) return 1;
    else if(objeto == 6 && PropInfo[c][pPala] > 0) return 1;
    else if(objeto == 7 && PropInfo[c][pPaloDeBillar] > 0) return 1;
    else if(objeto == 8 && PropInfo[c][pKatana] > 0) return 1;
    else if(objeto == 10 && PropInfo[c][pConsoladorRosa] > 0) return 1;
    else if(objeto == 11 && PropInfo[c][pVibradorBlanco] > 0) return 1;
    else if(objeto == 12 && PropInfo[c][pGranVibradorBlanco] > 0) return 1;
    else if(objeto == 13 && PropInfo[c][pVibradorPlateado] > 0) return 1;
    else if(objeto == 14 && PropInfo[c][pFlores] > 0) return 1;
    else if(objeto == 15 && PropInfo[c][pBaston] > 0) return 1;
    else if(objeto == 16 && PropInfo[c][pGranada] > 0) return 1;
    else if(objeto == 22 && PropInfo[c][p9mm] > 0) return 1;
    else if(objeto == 23 && PropInfo[c][p9mmSilenciada] > 0) return 1;
    else if(objeto == 24 && PropInfo[c][pDesertEagle] > 0) return 1;
    else if(objeto == 25 && PropInfo[c][pEscopetaNormal] > 0) return 1;
    else if(objeto == 27 && PropInfo[c][pEscopetaDeCombate] > 0) return 1;
    else if(objeto == 29 && PropInfo[c][pMP5] > 0) return 1;
    else if(objeto == 31 && PropInfo[c][pM4] > 0) return 1;
    else if(objeto == 30 && PropInfo[c][pAK47] > 0) return 1;
    else if(objeto == 33 && PropInfo[c][pRifle] > 0) return 1;
    else if(objeto == 43 && PropInfo[c][pCamara] > 0) return 1;
    return 0;
}
EspacioRopero(c)
{
    new total = PropInfo[c][pAK47] + PropInfo[c][pM4] + PropInfo[c][pEscopetaNormal] + PropInfo[c][pEscopetaDeCombate] + PropInfo[c][pMP5] + PropInfo[c][p9mm] + PropInfo[c][p9mmSilenciada] + PropInfo[c][pDesertEagle] + PropInfo[c][pRifle] + PropInfo[c][pGranada] + PropInfo[c][pManopla] + PropInfo[c][pCuchillo] + PropInfo[c][pKatana] + PropInfo[c][pPala] + PropInfo[c][pCamara] + PropInfo[c][pBateDeBeisbol] + PropInfo[c][pPaloDeGolf] + PropInfo[c][pPaloDeBillar] + PropInfo[c][pConsoladorRosa] + PropInfo[c][pVibradorBlanco] + PropInfo[c][pGranVibradorBlanco] + PropInfo[c][pVibradorPlateado] + PropInfo[c][pBaston] + PropInfo[c][pFlores];
    return total;
}

SendRadioMessagePatrulla(member, color, string[])
{
    if(member == 1)
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pDuty] == 1 && IsPlayerInAnyVehicle(i))
            {
                if(!SAPD(GetPlayerVehicleID(i))) continue;
                SendClientMessage(i, color, string);
            }
        }
    }
}

SendRadioMessage(member, color, string[], id = INVALID_PLAYER_ID)
{
    if(member == 0) return 1;
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if((PlayerInfo[i][pFaccion] == member) && (EstadoRadio[i] == 1) && (i != id) && (PlayerInfo[i][pRadio] == 1)) SendClientMessage(i, color, string);
        }
    }
    return 1;
}

SendRadioPoliceMessage(color, string[], id = INVALID_PLAYER_ID, frecuencia = 0)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(frecuencia > 0 && PlayerInfo[i][pFaccion] == 1)//a los que tengan frecuencia
            {
                if((PlayerInfo[i][pDuty] == 1) && (Frecuencia[i] == frecuencia) && (EstadoRadio[i] == 1) && (i != id) && (PlayerInfo[i][pRadio] == 1)) SendClientMessage(i, color, string);
            }
            else if(frecuencia == 0 && PlayerInfo[i][pFaccion] == 1) // para todos
            {
                if((PlayerInfo[i][pDuty] == 1) && (EstadoRadio[i] == 1) && (i != id) && (PlayerInfo[i][pRadio] == 1)) SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}
DarArma(playerid, weaponid)
{
    Tiempos[playerid][TIMER_WEAPONS] = gettime() + 3;
    PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(weaponid)] = weaponid;
    GivePlayerWeapon(playerid, weaponid, 999999);
    SetPlayerArmedWeapon(playerid, 0);
    return 1;
}
CountPlayerWeapons(playerid)
{
    new weapons;
    for(new i = 0; i < 13; i++) if(PlayerInfo[playerid][j_ARMAS][i] != 0) weapons ++;
    return weapons;
}
DarArmas(playerid)
{
    Tiempos[playerid][TIMER_WEAPONS] = gettime() + 3;
    SetPlayerArmedWeapon(playerid, 0);
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 13; i++)
    {
        if(PlayerInfo[playerid][j_ARMAS][i] != 0) GivePlayerWeapon(playerid, PlayerInfo[playerid][j_ARMAS][i], 999999999);
    }
    SetPlayerArmedWeapon(playerid, 0);
    return 1;
}
stock Habilidad(ID,playerid)
{
    new item[900];
    format(item,sizeof(item),"{FFFFFF}Trabajo de {febf00}Camionero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",             PlayerInfo[ID][pNivelCamionero],        PlayerInfo[ID][pExpCamionero]);
    format(item,sizeof(item),"%s\nTrabajo de {ff0000}Fabricante de armas{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,  PlayerInfo[ID][pNivelArmero],           PlayerInfo[ID][pExpArmero]);
    format(item,sizeof(item),"%s\nTrabajo de {00d8ff}Mecánico{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,             PlayerInfo[ID][pNivelMecanico],         PlayerInfo[ID][pExpMecanico]);
    format(item,sizeof(item),"%s\nTrabajo de {6c5109}Basurero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,             PlayerInfo[ID][pNivelBasurero],         PlayerInfo[ID][pExpBasurero]);
    format(item,sizeof(item),"%s\nTrabajo de {662aff}Transportista{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,        PlayerInfo[ID][pNivelTransportista],    PlayerInfo[ID][pExpTransportista]);
    format(item,sizeof(item),"%s\nTrabajo de {2945d4}Ladrón{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,               PlayerInfo[ID][pNivelLadron],           PlayerInfo[ID][pExpLadron]);
    format(item,sizeof(item),"%s\nTrabajo de {c4c4c4}Minero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,               PlayerInfo[ID][pNivelMinero],           PlayerInfo[ID][pExpMinero]);
    format(item,sizeof(item),"%s\nTrabajo de {006C00}Pescador{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,             PlayerInfo[ID][pNivelPescador],         PlayerInfo[ID][pExpPescador]);
    format(item,sizeof(item),"%s\nTrabajo de {ff4e00}Médico{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,               PlayerInfo[ID][pNivelMedico],           PlayerInfo[ID][pExpMedico]);
    ShowPlayerDialog(playerid,INFOLADRON,DIALOG_STYLE_MSGBOX,"Habilidades",item,"Cerrar","");
    return 1;
}
stock LocalizarPropiedad(playerid)
{
    if(PlayerInfo[playerid][CasaID] == 0 && PlayerInfo[playerid][CasaID2] == 0) return SendClientMessage(playerid,-1,"No tienes ninguna propiedad que localizar.");
    {
        new lacasa[2000];
        if(PlayerInfo[playerid][CasaID] > 0)
        {
            for(new p; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID]) format(lacasa, sizeof(lacasa), "%s\n{FFFFFF}Casa ID: {FFFFFF}%d{FFFFFF} | Ubicación: {DBED15}%s{FFFFFF} | Interior: {2EA3F5}%d",lacasa,p,PropInfo[p][pLocalizacion], PropInfo[p][pInterior]);
            }
        }
        if(PlayerInfo[playerid][CasaID2] > 0)
        {
            for(new p; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2]) format(lacasa, sizeof(lacasa), "%s\n{FFFFFF}Casa ID: {FFFFFF}%d{FFFFFF} | Ubicación: {DBED15}%s{FFFFFF} | Interior: {2EA3F5}%d",lacasa,p,PropInfo[p][pLocalizacion], PropInfo[p][pInterior]);
            }
        }
        ShowPlayerDialog(playerid, LocalizarP, DIALOG_STYLE_LIST, "Selecciona la propiedad que deseas localizar", lacasa, "Aceptar","Cancelar");
    }
    return 1;
}
EnviarSMS(playerid, numero, text[])
{
    new anio, mes, dia, hora, minuto, segundo;
    getdate(anio, mes, dia);
    gettime(hora, minuto, segundo);
    if(PlayerInfo[playerid][pNumero] == numero) return SendClientMessage(playerid,-1,"No puedes autoenviarte un SMS.");
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i) && PlayerInfo[i][pNumero] == numero && numero != 0)
        {
            if(TelefonoEstado[i] == 1 || PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0)
            {
                SendClientMessage(playerid, COLOR_WHITE, "El mensaje {FF3300}no se pudo entregar{FFFFFF}, comprueba que el número sea el correcto.");
                SendClientMessage(playerid, COLOR_WHITE, "Si el número está bien, probablemente el teléfono esté apagado.");
                return 1;
            }
            new sms[128];
            format(sms,sizeof(sms),"(( SMS de %s [%d])): %s",PlayerInfo[playerid][Nickname], PlayerInfo[playerid][pNumero], text);
            SendClientMessage(i, COLOR_DORADO, sms);
            SendClientMessage(playerid, COLOR_DORADO, "Mensaje enviado con éxito.");
            DetectarSPAM(playerid, text);
            GameTextForPlayer(playerid, "~r~-15$", 5000, 1);
            QuitarDinero(playerid, 15);
            PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
            QuitarDinero(playerid, 15);
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_WHITE, "El mensaje {FF4202}no se pudo entregar{FFFFFF}, comprueba que el número sea el correcto.");
    SendClientMessage(playerid, COLOR_WHITE, "Si el número está bien, probablemente el teléfono esté apagado.");
    return 1;
}
stock ConvertirNumero(iValue, iDelim[2] = ".", szNum[15] = "", iSize = sizeof(szNum))
{
    format(szNum, iSize, "%d", iValue < 0 ? -iValue : iValue);
    for(new i = strlen(szNum) - 3; i > 0; i -= 3) strins(szNum, iDelim, i, iSize);
    if(iValue < 0) strins(szNum, "-", 0, iSize);
    return szNum;
}
stock Inventario(ID,targetid)
{
	new string[2000];
	if(PlayerInfo[ID][Moneda] > 0) format(string, 800,"{FFFFFF}"SERVER_COIN": {00CC00}%d{FFFFFF}.\n",PlayerInfo[ID][Moneda]);
	if(PlayerInfo[ID][Totems] > 0) format(string, 800,"%s{FFFFFF}Tótems: {8c5c35}%d{FFFFFF}.\n",string,PlayerInfo[ID][Totems]);
	if(PlayerInfo[ID][pDinero] > 0) format(string, 800,"%s{FFFFFF}Dinero: {00CC00}$%d{FFFFFF}.",string, PlayerInfo[ID][pDinero]);
	if(PlayerInfo[ID][pNumero] > 0) format(string, 800,"%s\nTeléfono móvil.",string);
	if(PlayerInfo[ID][pAgenda] == 1) format(string, 800,"%s\nGuía telefónica.",string);
	if(PlayerInfo[ID][pGPS] == 1) format(string, 800,"%s\nGPS.",string);
	if(PlayerInfo[ID][pPatines] == 1) format(string, 800,"%s\nPatines.",string);
	if(ContarPrendas(ID) >= 1) format(string, 800,"%s\nPrenda de vestir: {00CC00}Sí{FFFFFF} - {DBED16}/usar prenda{FFFFFF}.",string);
	if(PlayerInfo[ID][pRadio] == 1) format(string, 800,"%s\nRadio comunicador.",string);
	if(Bidon[ID] == 1) format(string, 800,"%s\nBidón de gasolina.",string);
	if(PlayerInfo[ID][pMedicamentos] > 0) format(string, 800,"%s\nMedicamentos: {ff3300}%d{FFFFFF}.",string,PlayerInfo[ID][pMedicamentos]);
	if(PlayerInfo[ID][pTranquilizantes] > 0) format(string, 800,"%s\nTranquilizantes: {ff3300}%d{FFFFFF}.",string,PlayerInfo[ID][pTranquilizantes]);
    if(PlayerInfo[ID][pMarihuana] > 0) format(string, 800,"%s\nMarihuana: {ff3300}%dg{FFFFFF}.",string,PlayerInfo[ID][pMarihuana]);
	if(PlayerInfo[ID][pCrack] > 0) format(string, 800,"%s\nCrack: {ff3300}%dg{FFFFFF}.",string,PlayerInfo[ID][pCrack]);
	if(PlayerInfo[ID][pCaramelos] > 0) format(string, 800,"%s\nCaramelos: {a31fff}%d{FFFFFF}.",string,PlayerInfo[ID][pCaramelos]);
	if(PlayerInfo[ID][pSemillas] > 0) format(string, 800,"%s\nSemillas de marihuana: {ff3300}%d{FFFFFF}.",string,PlayerInfo[ID][pSemillas]);
	if(PlayerInfo[ID][Repuestos] > 0) format(string, 800,"%s\nRepuestos: {00CC00}%d{FFFFFF}/100.",string,PlayerInfo[ID][Repuestos]);
	if(PlayerInfo[ID][pMateriales] > 0) format(string, 800,"%s\nPiezas de armas: {ff3300}%d{FFFFFF}.",string,PlayerInfo[ID][pMateriales]);
	if(PlayerInfo[ID][piezas] > 0) format(string, 800,"%s\nMateriales: {ff3300}%d{FFFFFF}.",string,PlayerInfo[ID][piezas]);
	if(CountPlayerWeapons(ID) > 0)
	{
	    format(string,800,(string),"%s\n{4286f4}Armas {ffffff}(%d)",string, CountPlayerWeapons(ID));
		for(new i = 0; i < 13; i++)
        {
            if(PlayerInfo[ID][j_ARMAS][i] != 0) format(string, sizeof string, "%s\n  {4286f4}-%s",string, GetNameObjeto(PlayerInfo[ID][j_ARMAS][i]));
        }
	}
	if(PlayerInfo[ID][pMartillo] > 0 || PlayerInfo[ID][pDestornillador] > 0 || PlayerInfo[ID][pBarreta] > 0||PlayerInfo[ID][pBalde] > 0)
	{
		format(string, 900,"%s\n\n{FFFFFF}Herramientas: %s%s%s%s ",string, NombreHerramienta[PlayerInfo[ID][pMartillo]],NombreHerramienta[PlayerInfo[ID][pDestornillador]],NombreHerramienta[PlayerInfo[ID][pBarreta]],NombreHerramienta[PlayerInfo[ID][pBalde]]);
	}
	ShowPlayerDialog(targetid, INVENTARIO, DIALOG_STYLE_MSGBOX,"{DBED16}Inventario",string,"Cerrar","");
	return 1;
}
ShowStats(playerid, targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
		new SexoInfo[20];
		if(PlayerInfo[targetid][pSexo] == 1) SexoInfo = "Masculino";
		else if	(PlayerInfo[targetid][pSexo] == 2) SexoInfo = "Femenino";
		new NivelUser = PlayerInfo[targetid][pNivel],ExpUser = PlayerInfo[targetid][pExperiencia],ExpMonto = PlayerInfo[targetid][ExperienciaTotal];
		if(ExpUser == ExpMonto) MensajeEx(playerid, -1, "| Nivel: {37db45}%d{FFFFFF} | Reputación: {37db45}%d{FFFFFF}/{37db45}%d{FFFFFF} | {DBED16}/comprar nivel{FFFFFF} - Costo: {37db45}$%d", NivelUser,ExpUser,ExpMonto,PlayerInfo[targetid][PrecioNivel]);
		else if(ExpUser != ExpMonto) MensajeEx(playerid, -1, "| Nivel:{37db45} %d{FFFFFF} | Reputación: {ffcc00}%d{FFFFFF}/{37db45}%d {FFFFFF}| Costo del siguiente nivel: {37db45}$%d", NivelUser,ExpUser,ExpMonto,PlayerInfo[targetid][PrecioNivel]);
		if(PlayerInfo[targetid][pVip] < 2) MensajeEx(playerid, -1, "| Trabajo primario: {DBED16}%s{FFFFFF} | Trabajo secundario: %s", NombreTrabajo(PlayerInfo[targetid][pTrabajo]), NombreTrabajo(PlayerInfo[targetid][pTrabajo2]));
		else MensajeEx(playerid, -1, "| Trabajo primario: {DBED16}%s{FFFFFF} | Trabajo secundario: {DBED16}%s{FFFFFF}", NombreTrabajo(PlayerInfo[targetid][pTrabajo]), NombreTrabajo(PlayerInfo[targetid][pTrabajo2]));
		if(PlayerInfo[targetid][pFaccion] > 0) {
		    new banda = PlayerInfo[targetid][pFaccion];
			MensajeEx(playerid, -1, "{FFFFFF}| Integrante de: {DBED16}%s {FFFFFF}| Rango: {DBED16}%s {FFFFFF}| Territorios:{DBED16} %d{FFFFFF}",BandasInfo[banda][BNombre],RangoBanda(banda, PlayerInfo[targetid][pRango]), GetTerritorios(banda));
        }
        if(PlayerInfo[targetid][pVip] > 0) MensajeEx(playerid,COLOR_WHITE,"| Membresía VIP%d válida hasta %02d/%02d/%02d",PlayerInfo[targetid][pVip], PlayerInfo[targetid][findia],PlayerInfo[targetid][finmes],PlayerInfo[targetid][finano]);
		if(PlayerInfo[playerid][pAdmin] > CMD_MOD_DUDAS)
		{
			new Telefono[10],BandaID[10],valueVip[10],ip[16];
			if(PlayerInfo[targetid][pVip] == 0) valueVip = "No tiene";
			else format(valueVip,sizeof(valueVip),"%d",PlayerInfo[targetid][pVip]);
			if(PlayerInfo[targetid][pFaccion] == 0) BandaID = "No tiene";
			else format(BandaID,sizeof(BandaID),"%d",PlayerInfo[targetid][pFaccion]);
			if(PlayerInfo[targetid][pNumero] == 0) Telefono = "No tiene";
			else format(Telefono,sizeof(Telefono),"%d",PlayerInfo[targetid][pNumero]);
			MensajeEx(playerid,-1,"ID: %d | VIP: %s | HJ: %d | S: %s | N: %s | Banda ID: %s", PlayerInfo[targetid][pID], valueVip, PlayerInfo[targetid][horasjugadas], SexoInfo, Telefono,BandaID);
			MensajeEx(playerid,-1,"Email: %s | Skin: %d", PlayerInfo[targetid][pEmail],PlayerInfo[targetid][pRopa]);
			if(PlayerInfo[playerid][pAdmin] >= CMD_MOD_GLOBAL)
			{
				GetPlayerIp(targetid, ip, 16);
				MensajeEx(playerid, -1, "La IP de %s es: %s",PlayerInfo[targetid][Nickname],ip);
			}
		}
		return 1;
	}
    return 1;
}
IsSeatTaken(vehicleid, seatid)
{
    foreach(new i : Player)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return 1;
    }
    return 0;
}
IsNumeric(str[])
{
    for(new i, len = strlen(str); i < len; i++)
    {
        if(!('0' <= str[i] <= '9')) return false;
    }
    return true;
}
NombreBanco(playerid)
{
    new string[34];
    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 3) format(string,sizeof(string),"Banco central de Los Santos");
    else if(GetPlayerVirtualWorld(playerid) == 7 && GetPlayerInterior(playerid) == 3) format(string,sizeof(string),"Banco plaza");
    else if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 0) format(string,sizeof(string),"Banco central de San Fierro");
    else if(GetPlayerVirtualWorld(playerid) == 6 && GetPlayerInterior(playerid) == 3) format(string,sizeof(string),"Banco central de Las Venturas");
    else format(string,sizeof(string),"Banco central de Los Santos");
    return string;
}
HospitalCercano(playerid)
{
    new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
    HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
    HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
    HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
    HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
    MedicoCP2[playerid] = 1;
    if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF) MedicoCP[playerid] = SetPlayerCheckpoint(playerid,1191.43,-1326.39,13.40,5.0);
    else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF) MedicoCP[playerid] = SetPlayerCheckpoint(playerid, 2030.36,-1419.79,16.99,5.0);
    else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF) MedicoCP[playerid] = SetPlayerCheckpoint(playerid,1605.58,1830.17,10.82,5.0);
    else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV) MedicoCP[playerid] = SetPlayerCheckpoint(playerid,-2662.87,631.44,14.45,5.0);
}
HospitalMasCercano(playerid)
{
    new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
    NoTeleportHack(playerid);
    HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
    HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
    HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
    HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
    switch(PlayerInfo[playerid][pSocioHP])
    {
        case 0:
        {
            if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF) // HP Central
            {
                SetPlayerPosEx(playerid, 1172.79,-1321.24,15.40);
                SetPlayerCameraPos(playerid,1206.4226, -1291.1536, 32.5757);
                SetPlayerCameraLookAt(playerid,1205.6591, -1291.8055, 32.5408);
            }
            else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF) // HP Groove
            {
                SetPlayerPosEx(playerid,2036.8506,-1403.4642,17.2841);
                SetPlayerCameraPos(playerid, 2024.3646, -1435.4784, 30.9798);
                SetPlayerCameraLookAt(playerid, 2024.6460, -1434.5137, 30.5048);
            }
            else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV) // HP San Fierro
            {
                SetPlayerPosEx(playerid,-2638.0701,636.5035,14.4531);
                SetPlayerCameraPos(playerid, -2554.3657, 558.7826, 72.4722);
                SetPlayerCameraLookAt(playerid, -2555.0823, 559.4846, 72.1473);
            }
            else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF) // HP Las Venturas
            {
                SetPlayerPosEx(playerid,1598.6957,1816.0245,10.8203);
                SetPlayerCameraPos(playerid, 1558.6453, 1728.8574, 12.6747);
                SetPlayerCameraLookAt(playerid, 1559.2050, 1729.6805, 12.8645);
            }
        }
        case 1: // LS Central
        {
            SetPlayerPosEx(playerid, 1172.79,-1321.24,15.40);
            SetPlayerCameraPos(playerid,1216.6165,-1284.9585,23.7114);
            SetPlayerCameraLookAt(playerid,1178.9612,-1324.9348,14.1459);
        }
        case 2: // LS Groove
        {
            SetPlayerPosEx(playerid,2036.8506,-1403.4642,17.2841);
            SetPlayerCameraPos(playerid,1956.5846,-1463.3260,46.8506);
            SetPlayerCameraLookAt(playerid,2036.8506,-1403.4642,17.2841);
        }
        case 3: // SF
        {
            SetPlayerPosEx(playerid,-2638.0701,636.5035,14.4531);
            SetPlayerCameraPos(playerid,-2542.7778,552.2639,74.6866);
            SetPlayerCameraLookAt(playerid,-2638.0701,636.5035,14.4531);
        }
        case 4: // LV
        {
            SetPlayerPosEx(playerid,1598.6957,1816.0245,10.8203);
            SetPlayerCameraPos(playerid, 1558.6453, 1728.8574, 12.6747);
            SetPlayerCameraLookAt(playerid, 1559.2050, 1729.6805, 12.8645);
        }
    }
}
ConceCercano(playerid,modelo,color1,color2,slot)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:Conce1, Float:Conce2, Float:Conce3, Float:Conce4, Float:Conce5;
		Conce1 = GetPlayerDistanceFromPoint(playerid, 1656.1246,-1883.6947,13.1237);
		Conce2 = GetPlayerDistanceFromPoint(playerid, 557.6544,-1260.8588,16.8133);
		Conce3 = GetPlayerDistanceFromPoint(playerid, 2127.5342,-1123.4701,24.9874);
		Conce4 = GetPlayerDistanceFromPoint(playerid, -1989.7445,288.3349,33.9223);
		Conce5 = GetPlayerDistanceFromPoint(playerid, 1464.9510,-1780.9888,13.9439);
		if(Conce1 < Conce2 && Conce1 < Conce3 && Conce1 < Conce4 && Conce1 < Conce5) autos[slot][playerid] = CreateVehicle(modelo,1656.1246,-1883.6947,13.1237,359.9166,color1,color2,-1);
		else if(Conce2 < Conce1 && Conce2 < Conce3 && Conce2 < Conce4 && Conce2 < Conce5) autos[slot][playerid] = CreateVehicle(modelo,557.6544,-1260.8588,16.8133,17.7973,color1,color2,-1);
		else if(Conce3 < Conce1 && Conce3 < Conce2 && Conce3 < Conce4 && Conce3 < Conce5) autos[slot][playerid] = CreateVehicle(modelo,2127.5342,-1123.4701,24.9874,3.9086,color1,color2,-1);
		else if(Conce4 < Conce1 && Conce4 < Conce2 && Conce4 < Conce3 && Conce4 < Conce5) autos[slot][playerid] = CreateVehicle(modelo,-1989.7445,288.3349,33.9223,90.9973,color1,color2,-1);
		else if(Conce5 < Conce1 && Conce5 < Conce2 && Conce5 < Conce3 && Conce5 < Conce4) autos[slot][playerid] = CreateVehicle(modelo,1494.5084,-1744.7078,13.5469,358.7261,color1,color2,-1);
		VehicleInfo[playerid][slot][v0_interior] = 0;
		VehicleInfo[playerid][slot][v0_vw] = 0;
		EnAuto[playerid] = autos[slot][playerid];
		VehicleFuel[autos[slot][playerid]] = CombustibleCoche(autos[slot][playerid]);
		VehicleInfo[playerid][slot][vGas] = CombustibleCoche(autos[slot][playerid]);
		bloqueado[autos[slot][playerid]] = 0;
		SendClientMessage(playerid, -1, "Compraste el vehículo, ahora estacionalo en un lugar seguro usando {DBED15}/estacionar{FFFFFF}.");
		SetVehicleNumberPlate(autos[slot][playerid], Patente[playerid][slot]);
		MensajeEx(playerid,-1, "La patente de tu vehículo es {00CCFF}%s{FFFFFF}.", Patente[playerid][slot]);
		SendClientMessage(playerid, -1, "En caso de que tu vehículo sea robado, llama a la policía y comunícales la patente.");
		SetTimerEx("EstacionarCoche", 2500, false, "dd", playerid, 0);
		PutPlayerInVehicleEx(playerid, autos[slot][playerid], 0);
 	 	MostrarInfoVehiculo(playerid);
  		MostrarVelocimetro(playerid);
		RevisarLogro(playerid,2);
	}
}
Respawnear(autoid)
{
	MotorAuto[autoid] = 0;
	SetVehicleToRespawn(autoid);
}
PagoCamionero(playerid, nivel, carga)
{
	if(RoboTienda[playerid] == 1) return SendClientMessage(playerid,-1,"Nos llegó un informe de que {FF0000}asaltaste una tienda{FFFFFF} durante tu trabajo, ahora {FF0000}no se te pagará.");
	switch(nivel)
	{
		case 1:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1250);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.250");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1250);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.250");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1250);
					PlayerInfo[playerid][pCrack] += 2;
					PlayerInfo[playerid][pMedicamentos] += 4;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1250{FFFFFF} + {00CC00}4 {FFFFFF}medicamentos {FFFFFF}y {FF3300}2g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1250);
					PlayerInfo[playerid][pMateriales] += 2;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1250{FFFFFF} y {FF3300}2 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 2:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.500");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.500");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1500);
					PlayerInfo[playerid][pCrack] += 3;
					PlayerInfo[playerid][pMedicamentos] += 6;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1500{FFFFFF} + {00CC00}6 {FFFFFF}medicamentos {FFFFFF}y {FF3300}3g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1500);
					PlayerInfo[playerid][pMateriales] += 5;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1500{FFFFFF} y {FF3300}5 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 3:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1750);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.750");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1750);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$1.750");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1750);
					PlayerInfo[playerid][pCrack] += 4;
					PlayerInfo[playerid][pMedicamentos] += 8;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1750{FFFFFF} + {00CC00}8 {FFFFFF}medicamentos {FFFFFF}y {FF3300}4g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 1750);
					PlayerInfo[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$1750{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 4:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.000");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.000");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2000);
					PlayerInfo[playerid][pCrack] += 5;
					PlayerInfo[playerid][pMedicamentos] += 10;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2000{FFFFFF} + {00CC00}10 {FFFFFF}medicamentos {FFFFFF}y {FF3300}5g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2000);
					PlayerInfo[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2000{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 5:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2250);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.250");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2250);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.250");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2250);
					PlayerInfo[playerid][pCrack] += 6;
					PlayerInfo[playerid][pMedicamentos] += 12;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2250{FFFFFF} + {00CC00}12 {FFFFFF}medicamentos {FFFFFF}y {FF3300}6g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PlayerInfo[playerid][pNivelCamionero]);
					DarDinero(playerid, 2250);
					PlayerInfo[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2250{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		default:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.500");
				}
				case 2:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {00CC00}$2.500");
				}
				case 3:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					PlayerInfo[playerid][pCrack] += 6;
					PlayerInfo[playerid][pMedicamentos] += 12;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2500{FFFFFF} + {00CC00}12 {FFFFFF}medicamentos {FFFFFF}y {FF3300}6g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					PlayerInfo[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{00CC00}¡Excelente entrega!{FFFFFF} Tus ganancias son: {00CC00}$2500{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
	}
	return 1;
}
QuitarArmas(playerid)
{
    Tiempos[playerid][TIMER_WEAPONS] = gettime() + 3;
    SetPlayerArmedWeapon(playerid, 0);
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 13; i++) PlayerInfo[playerid][j_ARMAS][i] = 0;
    return 1;
}
QuitarArma(playerid, weaponid)
{
    Tiempos[playerid][TIMER_WEAPONS] = gettime() + 3;
    SetPlayerArmedWeapon(playerid, 0);
    ResetPlayerWeapons(playerid);
    PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(weaponid)] = 0;
    DarArmas(playerid);
    return 1;
}
CalcularNivel(playerid)
{
    switch(PlayerInfo[playerid][pNivel])
    {
        case 1: { PlayerInfo[playerid][ExperienciaTotal] = 7; PlayerInfo[playerid][PrecioNivel] = 980; }
        case 2: { PlayerInfo[playerid][ExperienciaTotal] = 12; PlayerInfo[playerid][PrecioNivel] = 3240; }
        case 3: { PlayerInfo[playerid][ExperienciaTotal] = 19; PlayerInfo[playerid][PrecioNivel] = 7600; }
        case 4: { PlayerInfo[playerid][ExperienciaTotal] = 31; PlayerInfo[playerid][PrecioNivel] = 16430; }
        case 5: { PlayerInfo[playerid][ExperienciaTotal] = 52; PlayerInfo[playerid][PrecioNivel] = 34320; }
        case 6: { PlayerInfo[playerid][ExperienciaTotal] = 86; PlayerInfo[playerid][PrecioNivel] = 67940; }
        case 7: { PlayerInfo[playerid][ExperienciaTotal] = 143; PlayerInfo[playerid][PrecioNivel] = 131560; }
        case 8: { PlayerInfo[playerid][ExperienciaTotal] = 239; PlayerInfo[playerid][PrecioNivel] = 250950; }
        case 9: { PlayerInfo[playerid][ExperienciaTotal] = 397; PlayerInfo[playerid][PrecioNivel] = 468460; }
        case 10: { PlayerInfo[playerid][ExperienciaTotal] = 662; PlayerInfo[playerid][PrecioNivel] = 867220;}
        case 11: { PlayerInfo[playerid][ExperienciaTotal] = 1103; PlayerInfo[playerid][PrecioNivel] = 1588320; }
        case 12: { PlayerInfo[playerid][ExperienciaTotal] = 1838; PlayerInfo[playerid][PrecioNivel] = 2885660; }
        case 13: { PlayerInfo[playerid][ExperienciaTotal] = 3063; PlayerInfo[playerid][PrecioNivel] = 5207100; }
        case 14: { PlayerInfo[playerid][ExperienciaTotal] = 5105; PlayerInfo[playerid][PrecioNivel] = 9342150; }
        case 15: { PlayerInfo[playerid][ExperienciaTotal] = 8508; PlayerInfo[playerid][PrecioNivel] = 16675680; }
        case 16: { PlayerInfo[playerid][ExperienciaTotal] = 14179; PlayerInfo[playerid][PrecioNivel] = 29634110; }
        case 17: { PlayerInfo[playerid][ExperienciaTotal] = 23632; PlayerInfo[playerid][PrecioNivel] = 47212254; }
    }
}
ptask GuardarCuenta[60000](playerid)
{
    if(GetPlayerScore(playerid) == 0) return 1;
	if(JugadorLogeado[playerid] == 1)
	{
	    GuardarPrendas(playerid);
		new Query[2700], Float:x,Float:y,Float:z,Float:z_a,Float:VidaV;
		new inte,vw, day,month,year;
		getdate(year,month,day);
		for(new a = 0; a < MAX_PAUTOS; a++)
		{
			if(autos[a][playerid] > 0)
			{
				GetVehicleDamageStatus(autos[a][playerid], VehicleInfo[playerid][a][VE1], VehicleInfo[playerid][a][VE2], VehicleInfo[playerid][a][VE3], VehicleInfo[playerid][a][VE4]);
				VehicleInfo[playerid][a][vGas] = VehicleFuel[autos[a][playerid]];
				GetVehicleHealth(autos[a][playerid], VidaV);
				GetVehiclePos(autos[a][playerid], x,y,z);
				VehicleInfo[playerid][a][vX] = x;
				VehicleInfo[playerid][a][vY] = y;
				VehicleInfo[playerid][a][vZ] = z;
				GetVehicleZAngle(autos[a][playerid], z_a);
				VehicleInfo[playerid][a][vA] = z_a;
				VehicleInfo[playerid][a][pVidaV] = VidaV;
				inte = GetVehicleInterior(autos[a][playerid]);
				vw = GetVehicleVirtualWorld(autos[a][playerid]);
				VehicleInfo[playerid][a][vinterior] = inte;
				VehicleInfo[playerid][a][vvw] = vw;
				mysql_format(handle_db, Query, 900,"UPDATE `p_vehicles` SET VE1='%d', VE2='%d', VE3='%d', VE4='%d', vGas='%d', VidaV='%f', X='%f', Y='%f', Z='%f', A='%f', Ointerior='%d', Ovw='%d' WHERE `ID`='%d'",VehicleInfo[playerid][a][VE1],VehicleInfo[playerid][a][VE2],VehicleInfo[playerid][a][VE3],VehicleInfo[playerid][a][VE4],VehicleInfo[playerid][a][vGas],VehicleInfo[playerid][a][pVidaV],VehicleInfo[playerid][a][vX],VehicleInfo[playerid][a][vY],VehicleInfo[playerid][a][vZ],VehicleInfo[playerid][a][vA],VehicleInfo[playerid][a][v0_interior],VehicleInfo[playerid][a][v0_vw],VehicleInfo[playerid][a][v_DBID]);
				mysql_tquery(handle_db, Query);
				mysql_format(handle_db, Query, 900,"UPDATE `p_vehicles` SET vTraba='%d', Segurov='%d', OX='%f', OY='%f', OZ='%f', OA='%f', vinterior='%d', vvw='%d', Alarm='%d', Alarma='%d' WHERE `ID`='%d'",VehicleInfo[playerid][a][vTraba],VehicleInfo[playerid][a][vSeguro],VehicleInfo[playerid][a][pOX],VehicleInfo[playerid][a][pOY],VehicleInfo[playerid][a][pOZ],VehicleInfo[playerid][a][pOA],VehicleInfo[playerid][a][vinterior],VehicleInfo[playerid][a][vvw],VehicleInfo[playerid][a][vAlarm],VehicleInfo[playerid][a][vAlarma],VehicleInfo[playerid][a][v_DBID]);
				mysql_tquery(handle_db, Query);
	  		}
  		}
		GetPlayerName(playerid, PlayerInfo[playerid][Nickname], 24);
		if(PlayerInfo[playerid][pDinero] < 0) PlayerInfo[playerid][pDinero] = 0;
		if(PlayerInfo[playerid][pBanco] < 0) PlayerInfo[playerid][pBanco] = 0;
		PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, PlayerInfo[playerid][@X], PlayerInfo[playerid][@Y], PlayerInfo[playerid][@Z]);
		GetPlayerFacingAngle(playerid,  PlayerInfo[playerid][@A]);
		new hour,minute,second,baneo[64];
		gettime(hour, minute, second);
		format(PlayerInfo[playerid][jConexion], 90, "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minute,second);
		format(baneo,sizeof(baneo),"%02d/%02d/%02d",year,month,day);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Vida`='%f', `Chaleco`='%f', `Admin`='%d', `Nivel`='%d', `Money`='%d',`GPS`='%d',`Radio`='%d',`Sexo`='%d',`Numero`='%d',`Guia`='%d',`Sonidos`='%d',`Muteos`='%d',`Barras`='%d',`Alerta`='%d',`Velocimetro`='%d',`Interior`='%d',`MundoVirtual`='%d',`NivelArmero`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][j_HEALTH], PlayerInfo[playerid][j_ARMOUR],PlayerInfo[playerid][pAdmin],PlayerInfo[playerid][pNivel],PlayerInfo[playerid][pDinero],PlayerInfo[playerid][pGPS],PlayerInfo[playerid][pRadio],PlayerInfo[playerid][pSexo],PlayerInfo[playerid][pNumero],PlayerInfo[playerid][pGuia],PlayerInfo[playerid][pSonidos],PlayerInfo[playerid][pMuteos],PlayerInfo[playerid][pBarras],PlayerInfo[playerid][pAlerta],PlayerInfo[playerid][pVelocimetro],PlayerInfo[playerid][pInterior],PlayerInfo[playerid][pMundoVirtual],PlayerInfo[playerid][pNivelArmero],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoJail`='%d',Sanciones='%d', `posX`='%f', `posY`='%f', `posZ`='%f',`posA`='%f',`Agonizando`='%d',`Trabajo`='%d',`Faccion`='%d',`ExpLadron`='%d',`NivelLadron`='%d',`NivelPiloto`='%d',`ExpPiloto`='%d',`NivelTransportista`='%d',`ExpTransportista`='%d',`TipoCarcel`='%d',`SocioHP`='%d',`LicenciaVuelo`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pTiempoJail],PlayerInfo[playerid][sancionado],PlayerInfo[playerid][@X], PlayerInfo[playerid][@Y], PlayerInfo[playerid][@Z],PlayerInfo[playerid][@A], PlayerInfo[playerid][Agonizando],PlayerInfo[playerid][pTrabajo],PlayerInfo[playerid][pFaccion],PlayerInfo[playerid][pExpLadron],PlayerInfo[playerid][pNivelLadron],PlayerInfo[playerid][pNivelMecanico],PlayerInfo[playerid][pExpMecanico],PlayerInfo[playerid][pNivelTransportista],PlayerInfo[playerid][pExpTransportista],PlayerInfo[playerid][pTipoCarcel],PlayerInfo[playerid][pSocioHP], PlayerInfo[playerid][pLicenciaVuelo],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Fecha_Ban`='%e',`IP`='%e',`Banco`='%d',`Moneda`='%d',`EnCasa`='%d',`EnRopero`='%d',`EnGarage`='%d',`TiempoPD`='%d', `totems`='%d', `arrestado`='%d', `horasjugadas`='%d',`ExpArmero`='%d',`Materiales`='%d',`NivelCamionero`='%d',`NivelBasurero`='%d',`ExpBasurero`='%d' WHERE `Username`='%e'",baneo,PlayerInfo[playerid][IP],PlayerInfo[playerid][pBanco],PlayerInfo[playerid][Moneda],PlayerInfo[playerid][EnCasa],PlayerInfo[playerid][EnRopero],PlayerInfo[playerid][EnGarage],PlayerInfo[playerid][TiempoPD], PlayerInfo[playerid][Totems], PlayerInfo[playerid][arrestado], PlayerInfo[playerid][horasjugadas],PlayerInfo[playerid][pExpArmero],PlayerInfo[playerid][pMateriales],PlayerInfo[playerid][pNivelCamionero],PlayerInfo[playerid][pNivelBasurero],PlayerInfo[playerid][pExpBasurero],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Cargos`='%d',`SkinTrabajo`='%d',`Duty`='%d',`WP0`='%d',`WP1`='%d',`WP2`='%d',`WP3`='%d',`WP4`='%d',`WP5`='%d',`WP6`='%d',`WP7`='%d',`WP8`='%d',`WP9`='%d',`WP10`='%d',`WP11`='%d',`WP12`='%d',`Experiencia`='%d',`TiempoCarcelS`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][pCargos],PlayerInfo[playerid][pModelo],PlayerInfo[playerid][pDuty],PlayerInfo[playerid][j_ARMAS][0],PlayerInfo[playerid][j_ARMAS][1],PlayerInfo[playerid][j_ARMAS][2],PlayerInfo[playerid][j_ARMAS][3],PlayerInfo[playerid][j_ARMAS][4],PlayerInfo[playerid][j_ARMAS][5],PlayerInfo[playerid][j_ARMAS][6],PlayerInfo[playerid][j_ARMAS][7],PlayerInfo[playerid][j_ARMAS][8],PlayerInfo[playerid][j_ARMAS][9],PlayerInfo[playerid][j_ARMAS][10],PlayerInfo[playerid][j_ARMAS][11],PlayerInfo[playerid][j_ARMAS][12],PlayerInfo[playerid][pExperiencia],PlayerInfo[playerid][pTiempoCarcel],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Conexion`='%e',`Sed`='%d',`Hambre`='%d',`Semillas`='%d',`RopaBasu`='%d',`RopaMedi`='%d',`RopaMeca`='%d',`RopaMine`='%d',`Martillo`='%d',`Destornillador`='%d',`Barreta`='%d',`Balde`='%d',`Patines`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][jConexion],PlayerInfo[playerid][pSed],PlayerInfo[playerid][pHambre],PlayerInfo[playerid][pSemillas], RopaBasu[playerid], RopaMedi[playerid], RopaMeca[playerid], RopaMine[playerid], PlayerInfo[playerid][pMartillo], PlayerInfo[playerid][pDestornillador], PlayerInfo[playerid][pBarreta], PlayerInfo[playerid][pBalde], PlayerInfo[playerid][pPatines],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Afinidad1`='%d',`Afinidad2`='%d',`Afinidad3`='%d',`Afinidad4`='%d',`Afinidad5`='%d',`Afinidad6`='%d',`Caramelos`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pAfinidad1],PlayerInfo[playerid][pAfinidad2],PlayerInfo[playerid][pAfinidad3],PlayerInfo[playerid][pAfinidad4],PlayerInfo[playerid][pAfinidad5],PlayerInfo[playerid][pAfinidad6],PlayerInfo[playerid][pCaramelos],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `ExpCamionero`='%d',`Agenda`='%d',`Crack`='%d',`Medicamentos`='%d',`Tranquilizantes`='%d',`Marihuana`='%d',`Trabajo2`='%d',`VIP`='%d',`Rango`='%d',`Repuestos`='%d',`TiempoDuda`='%d',`TiempoVenderJ`='%d',`TiempoAnuncio`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pExpCamionero],PlayerInfo[playerid][pAgenda],PlayerInfo[playerid][pCrack],PlayerInfo[playerid][pMedicamentos],PlayerInfo[playerid][pTranquilizantes],PlayerInfo[playerid][pMarihuana],PlayerInfo[playerid][pTrabajo2],PlayerInfo[playerid][pVip],PlayerInfo[playerid][pRango],PlayerInfo[playerid][Repuestos],Tiempos[playerid][TiempoDuda],Tiempos[playerid][TiempoVenderJ],Tiempos[playerid][TiempoAnuncio],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoOffline`='%d', `BaneosHechos`='%d',`BaneosDia`='%d', `XE`='%f',`YE`='%f',`ZE`='%f',`NivelMedico`='%d',`ExpMedico`='%d' WHERE `Username`='%e'",gettime(), PlayerInfo[playerid][BaneosD],PlayerInfo[playerid][BaneosD2],PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z],PlayerInfo[playerid][pNivelMedico],PlayerInfo[playerid][pExpMedico],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin`='%d',`Estacionado1`='%d',`Estacionado2`='%d',`Estacionado3`='%d',`Estacionado4`='%d',`TerritorioMapa`='%d',`TerritorioAviso`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][pRopa], PlayerInfo[playerid][vEstacionado1],PlayerInfo[playerid][vEstacionado2],PlayerInfo[playerid][vEstacionado3],PlayerInfo[playerid][vEstacionado4],PlayerInfo[playerid][pTerritorioMapa],PlayerInfo[playerid][pTerritorioAviso],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `ExpMinero`='%d',`PuntosCarrera`='%d',`NivelMinero`='%d',`EntradaX`='%f',`EntradaY`='%f',`EntradaZ`='%f',`IP`='%s',`NivelPescador`='%d',`ExpPescador`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pExpMinero],PlayerInfo[playerid][pPuntosCarrera],PlayerInfo[playerid][pNivelMinero],PlayerInfo[playerid][jPosE_x],PlayerInfo[playerid][jPosE_y],PlayerInfo[playerid][jPosE_z], PlayerInfo[playerid][IP],PlayerInfo[playerid][pNivelPescador],PlayerInfo[playerid][pExpPescador],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Puesto1H`='%d',`Puesto2H`='%d',`Puesto3H`='%d',`Puesto4H`='%d',`Puesto5H`='%d',`Puesto6H`='%d',`Puesto7H`='%d',`Puesto8H`='%d',`Puesto9H`='%d',`Puesto10H`='%d',`Puesto11H`='%d',`Puesto12H`='%d',`Puesto13H`='%d',`Puesto14H`='%d',`Puesto15H`='%d',`Puesto16H`='%d',`Puesto17H`='%d' WHERE `Username`='%e'", Halloween[playerid][P1Hora],Halloween[playerid][P2Hora],Halloween[playerid][P3Hora],Halloween[playerid][P4Hora],Halloween[playerid][P5Hora],Halloween[playerid][P6Hora],Halloween[playerid][P7Hora],Halloween[playerid][P8Hora],Halloween[playerid][P9Hora],Halloween[playerid][P10Hora],Halloween[playerid][P11Hora],Halloween[playerid][P12Hora],Halloween[playerid][P13Hora],Halloween[playerid][P14Hora],Halloween[playerid][P15Hora],Halloween[playerid][P16Hora],Halloween[playerid][P17Hora],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Puesto18H`='%d',`Puesto19H`='%d',`Puesto20H`='%d',`Puesto21H`='%d',`Puesto22H`='%d',`Puesto23H`='%d',`Puesto24H`='%d',`Puesto25H`='%d',`Puesto26H`='%d',`Puesto27H`='%d',`Puesto28H`='%d',`Puesto29H`='%d',`Puesto30H`='%d',`Puesto31H`='%d',`Puesto32H`='%d' WHERE `Username`='%e'",Halloween[playerid][P18Hora],Halloween[playerid][P19Hora],Halloween[playerid][P20Hora],Halloween[playerid][P21Hora],Halloween[playerid][P22Hora],Halloween[playerid][P23Hora],Halloween[playerid][P24Hora],Halloween[playerid][P25Hora],Halloween[playerid][P26Hora],Halloween[playerid][P27Hora],Halloween[playerid][P28Hora],Halloween[playerid][P29Hora],Halloween[playerid][P30Hora],Halloween[playerid][P31Hora],Halloween[playerid][P32Hora],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
	}
	return 1;
}
public ReJoinNPC(number)
{
    switch(number)
    {
        case 0: ConnectNPC(".Motorman1",".Motorman1");
        case 1: ConnectNPC(".Motorman2",".Motorman2");
        case 2: ConnectNPC(".Motorman3",".Motorman3");
        case 3: ConnectNPC(".Motorman4",".Motorman4");
        case 4: ConnectNPC(".Sergio",".Sergio");
        case 5: ConnectNPC(".Miguel",".Miguel");
        case 6: ConnectNPC(".Marcelo",".Marcelo");
        case 7: ConnectNPC(".Alejandro",".Alejandro");
        case 8: ConnectNPC(".Camello1",".Camello1");
        case 9: ConnectNPC(".HippiePepe",".HippiePepe");
        case 10: ConnectNPC(".Angelica",".Angelica");
        case 11: ConnectNPC(".Jorge",".Jorge");
        case 12: ConnectNPC(".Ignacio",".Ignacio");
        case 13: ConnectNPC(".Hugo",".Hugo");
        case 14: ConnectNPC(".Mao",".Mao");
        case 15: ConnectNPC(".Drogas",".Drogas");
    }
    return 1;
}
stock LoadNPCs()
{
    ConnectNPC(".Motorman1",".Motorman1");
    ConnectNPC(".Motorman2",".Motorman2");
    ConnectNPC(".Motorman3",".Motorman3");
    ConnectNPC(".Motorman4",".Motorman4");
    ConnectNPC(".Sergio",".Sergio");
    ConnectNPC(".Miguel",".Miguel");
    ConnectNPC(".Marcelo",".Marcelo");
    ConnectNPC(".Alejandro",".Alejandro");
    ConnectNPC(".Camello1",".Camello1");
    ConnectNPC(".HippiePepe",".HippiePepe");
    ConnectNPC(".Angelica",".Angelica");
    ConnectNPC(".Jorge",".Jorge");
    ConnectNPC(".Ignacio",".Ignacio");
    ConnectNPC(".Hugo",".Hugo");
    ConnectNPC(".Mao",".Mao");
    ConnectNPC(".Drogas",".Drogas");
    return 1;
}
public CargarBots()
{
    if(npctoggle == 0)
    {
        ConnectNPC(".Motorman1",".Motorman1");
        ConnectNPC(".Motorman2",".Motorman2");
        ConnectNPC(".Motorman3",".Motorman3");
        ConnectNPC(".Motorman4",".Motorman4");
        ConnectNPC(".Sergio",".Sergio");
        ConnectNPC(".Miguel",".Miguel");
        ConnectNPC(".Marcelo",".Marcelo");
        ConnectNPC(".Alejandro",".Alejandro");
        ConnectNPC(".Camello1",".Camello1");
        ConnectNPC(".HippiePepe",".HippiePepe");
        ConnectNPC(".Angelica",".Angelica");
        ConnectNPC(".Jorge",".Jorge");
        ConnectNPC(".Ignacio",".Ignacio");
        ConnectNPC(".Hugo",".Hugo");
        ConnectNPC(".Mao",".Mao");
        ConnectNPC(".Drogas",".Drogas");
        npctoggle = 1;
    }
}
SacarObjeto(playerid,objeto)
{
    switch(objeto)
    {
        case 1000..10004:
        {
            Objeto[playerid] = 0;
            RemovePlayerAttachedObject(playerid,4);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        }
    }
}
DarVino(playerid, cantidad = 5)
{
    TieneVino[playerid] = cantidad;
    SetPlayerAttachedObject(playerid,4,1509,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
}
DarCerveza(playerid, cantidad = 5)
{
    TieneCerveza[playerid] = cantidad;
    SetPlayerAttachedObject(playerid,4,1486,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
}
DarCajaPizza(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    SetPlayerAttachedObject(playerid, 4, 19571, 6, 0.263000,0.039999,-0.141999,116.299987,-76.799858,136.799835,0.800998,1.016000,0.866998);
    Objeto[playerid] = 10004;
}
DarSprunk(playerid, cantidad = 5)
{
    TieneSprunk[playerid] = cantidad;
    SetPlayerAttachedObject(playerid, 4, 1546, 6, 0.034999, 0.022999, -0.003000, 0.000000, -8.099999, 0.000000, 0.879999, 0.880999, 0.736999);
}
DarAquarius(playerid, cantidad = 5)
{
    TieneAquariu[playerid] = cantidad;
    SetPlayerAttachedObject(playerid, 4, 19570, 6, 0.069999, 0.027000, -0.156000, 0.000000, 0.000000, 0.000000, 0.436999, 0.570999, 0.883999);
}
DarPizza(playerid)
{
    TienePizza[playerid] = 5;
    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.107999, 0.034000, 0.000000, -14.500009, -7.500002, -80.099967, 0.957000, 0.880999, 0.856000);
}
GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
        case 0,1: slot = 0;
        case 2 .. 9: slot = 1;
        case 10 .. 15: slot = 10;
        case 16 .. 18, 39: slot = 8;
        case 22 .. 24: slot =2;
        case 25 .. 27: slot = 3;
        case 28, 29, 32: slot = 4;
        case 30, 31: slot = 5;
        case 33, 34: slot = 6;
        case 35 .. 38: slot = 7;
        case 40: slot = 12;
        case 41 .. 43: slot = 9;
        case 44 .. 46: slot = 11;
    }
    return slot;
}
SiTieneArma(playerid, weaponid)
{
    if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(weaponid)] == weaponid) return 1;
    return 0;
}
ObtenerVehiculo(playerid, placa[])
{
	new count;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsPlayerNPC(i))
			{
				for(new a = 0; a < MAX_PAUTOS; a++)
				{
					if(strcmp(placa, Patente[i][a], true) == 0)
					{
						AutoBuscado[playerid] = autos[a][i];
						format(PatenteBuscada[playerid], 10, placa);
						JugadorBuscado[playerid] = i;
						count = 1;
						break;
					}
				}
			}
		}
	}
	if(count == 0) SendClientMessage(playerid, -1, "La patente solicitada no se encuentra en la base de datos de la policía de San Andreas.");
	return 1;
}
stock randomString(strDest[], strLen = 10)
{
    while(strLen--)
    strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'A' : 'A')) : (random(10) + 'A');
}
AutoOcupado(carid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVehicleID(i) == carid && GetPlayerState(i) == PLAYER_STATE_DRIVER) return 1;
	}
	return 0;
}
Numeros(number, separator[] = ".")
{
    new output[15];
    format(output, sizeof(output), "%d", number);
    for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3) strins(output, separator, i);
    return output;
}
GetVehicleTopSpeed(vehicleid)
{
    if (GetVehicleModel(vehicleid)) return s_TopSpeed[(GetVehicleModel(vehicleid) - 400)];
    return 0;
}
ObtenerOrdenAuto(playerid,listitem)
{
    new auto,saltados = 0;
    for(new i = 0; i < MAX_PAUTOS; i++)
    {
        if(VehicleInfo[playerid][i][vModelo] == 0) continue;
        if(listitem <= saltados) { auto = i; break; }
        saltados++;
    }
    return auto;
}
CombustibleCoche(modelo)
{
    switch(modelo)
    {
        case 571,441: return 50;
        case 521,522,581,468,462,471,461,586,457,523: return 60;
        case 568,463,424: return 70;
        case 439,411,442,434,539: return 80;
        case 492,477,529,415,545,436: return 85;
        case 516,480,420,603,451,506,496,500,565,589,602,491,566,445,533,517,542,526,527,494,502,503,504,507,585,600,562,559,541,405,546,547,550,558,401,421,402,555,410,419,429,540: return 90;
        case 518,580,587,549,426: return 95;
        case 438,553,575,416,596,597,598,561,567,534,536,560,551,412,479,466,467,404,604,474,475,458,453,595,446,493,452,473,576,454,484: return 100;
        case 543,556,557,444,535,605,418,409: return 110;
        case 495,120,525,588,552,582,489,478,579,554,423,422,483,593: return 120;
        case 440,400: return 130;
        case 499,413,609,482,459,601: return 140;
        case 414,563: return 150;
        case 486,508: return 160;
        case 470: return 170;
        case 578: return 180;
        case 524,456,487,497: return 200;
        case 408,443,403: return 210;
        case 515,514,431,437: return 220;
        case 532: return 220;
        case 455: return 230;
        default: return 120;
    }
    return 1;
}
VelocidadMaxAuto(modelo)
{
	switch(modelo)
	{
		case 476,408: return 170; // Yankee - // Trashmasher
		case 562,559: return 171; // Elegy - // Jester
		case 571,491,419,540,546,527,474,529,436: return 143; // Kart - // Virgo - // Esperanto - // Vicent - // Intruder - // Cadrona - // Hermes - // Willard - // Previon
		case 522,553,597,602,596,598: return 180; // NRG-500 - // Nevada - // SFPD - // Alpha - // PATRULLA LSPD - // LVPD
		case 532,556,557,444,601: return 110; // Combine Harvest - // Monster A - // Monster B - // Monster (a secas) - // S.W.A.T Van
		case 494,502,503: return 206; // Hotring - // Hotring Racer A - // Hotring Racer B
		case 539,582,609,508: return 140; // Vortex - // Newsvan - // Boxville - // Journey
		case 468,586,554: return 138; // Sanchez - // Wayfarer - // Yosemite
		case 493,558,482,525,552: return 150; // Jetmax - // Uranus - // Burrito - // Towtruck - // Utility Van
		case 516,551,458,576,579,437,455,470,517,526,575,409,400: return 151; // Nebula - Merit - Solair - Tornado - Huntley - Coach - Flatbed - Patriot - Majestic - Fortune - BroadWay - Stretch - Landstalker
		case 521: return 175; // FCR-900
		case 581: return 146; // BF-400
		case 462: return 108; // Faggio
		case 471: return 106; // Quad
		case 461: return 153; // PCJ-600
		case 457: return 91;  // Cabbie
		case 523: return 120; // HPV-1000
		case 568: return 141; // Bandito
		case 424: return 130; // BF. Injection
		case 439: return 162; // Stallion
		case 442: return 134; // Romero
		case 434: return 160; // Hotknife
		case 492: return 135; // GreenWood
		case 420: return 139; // Taxi
		case 451: return 200; // Turismo
		case 496: return 156; // Blista Compact
		case 500: return 135; // Mesa
		case 560: return 162; // Sultan
		case 412: return 162; // Voodo
		case 479: return 134; // Regina
		case 466: return 141; // Glendale
		case 467: return 135; // Oceanic
		case 604: return 141; // Glendale Chocado
		case 453: return 54;  // Reefer
		case 595: return 95;  // Launch
		case 446: return 225; // Squalo
		case 452: return 141; // Speeder
		case 473: return 102; // Dinghy
		case 454: return 125; // Tropic
		case 484: return 57;  // Marquis
		case 543: return 145; // Sadler
		case 605: return 145; // SadlerShit
		case 418: return 111; // Moonbeam
		case 495: return 169; // Sandking
		case 588: return 103; // Mobile HotDog
		case 423: return 95;  // Mr. Whoopee
		case 422: return 134; // BobCat
		case 483: return 118; // Camper
		case 593: return 220; // Dodo
		case 440: return 131; // Rumpo
		case 443: return 121; // Packer
		case 403: return 106; // Linerunner
		case 515: return 137; // RoadTrain
		case 514: return 116; // Tanker
		case 431: return 125; // Bus
		case 524: return 125; // Cement Truck
		case 487: return 181; // Maverick
		case 459: return 131; // Rc Van
		case 499: return 118; // Benson
		case 413: return 106; // Pony
		case 566: return 154; // Tahoma
		case 445: return 157; // Admiral
		case 533: return 160; // Feltzer
		case 542: return 158; // Clover
		case 504: return 166; // Bloodring Banger
		case 507: return 159; // Elegant
		case 585: return 147; // Emperor
		case 600: return 145; // Picador
		case 541: return 195; // Bullet
		case 405: return 157; // Sentinel
		case 547: return 137; // Primo
		case 550: return 139; // Sunrise
		case 401: return 141; // Bravura
		case 421: return 147; // Washington
		case 402: return 179; // Buffalo
		case 555: return 152; // Windsor
		case 410: return 124; // Manana
		case 518: return 158; // Buccaneer
		case 587: return 158; // Euros
		case 549: return 147; // Tampa
		case 426: return 166; // Premier
		case 438: return 137; // Cabbie
		case 580: return 147; // Stafford
		case 416: return 147; // Ambulancia
		case 429: return 193; // Banshee
		case 561: return 148; // Stratum
		case 567: return 166; // Savanna
		case 534: return 162; // Remington
		case 480: return 177; // Comet
		case 415: return 184; // Cheetah
		case 463: return 178; // Freeway
		case 506: return 172; // SuperGT
		case 411: return 221; // Infernus
		case 475: return 166; // Sabre
		case 545: return 141; // Hustler
		case 477: return 179; // ZR-350
		case 603: return 164; // Phoenix
		case 536: return 166; // Blade
		case 404: return 127; // Perenniel
		case 535: return 152; // Slamvan
		case 565: return 158; // Flash
		case 489: return 134; // Rancher
		case 478: return 113; // Walton
		case 589: return 156; // Club
		case 578: return 125; // DFT-30
		case 414: return 101; // Mule
		case 441: return 75;  // RC Bandit
		case 563: return 160; // Raindance
		case 486: return 90;  // Dozer
		case 456: return 105; // Yankee
		case 497: return 181; // PolMav
		default: return 180; // Resto de vehículos no listados.
    }
	return 1;
}
GetWeaponNameEx(weaponid)
{
    new wname[35];
    switch (weaponid)
    {
        case 0: wname = "Vacío";
        case 1: wname = "Manopla";
        case 2: wname = "Palo de golf";
        case 3: wname = "Palo de policia";
        case 4: wname = "Cuchillo";
        case 5: wname = "Bate de beisbol";
        case 6: wname = "Pala";
        case 7: wname = "Palo de billar";
        case 8: wname = "Katana";
        case 9: wname = "Motosierra";
        case 10: wname = "Consolador rosa";
        case 11: wname = "Vibrador blanco";
        case 12: wname = "Gran vibrador blanco";
        case 13: wname = "Vibrador plateado";
        case 14: wname = "Ramo de flores";
        case 15: wname = "Baston";
        case 16: wname = "Granada";
        case 17: wname = "Gas Lacrimógeno";
        case 18: wname = "Molotov";
        case 22: wname = "9mm";
        case 23: wname = "9mm con silenciador";
        case 24: wname = "Desert Eagle";
        case 25: wname = "Escopeta";
        case 26: wname = "Sawn Off";
        case 27: wname = "Escopeta de combate";
        case 28: wname = "UZI";
        case 29: wname = "MP5";
        case 30: wname = "AK-47";
        case 31: wname = "M4";
        case 32: wname = "TEC-9";
        case 33: wname = "Rifle";
        case 34: wname = "Sniper";
        case 35: wname = "Lanzacohetes";
        case 36: wname = "Bazooka";
        case 37: wname = "Lanzallamas";
        case 38: wname = "Minigun";
        case 39: wname = "Bomba";
        case 40: wname = "Detonador";
        case 41: wname = "Spray";
        case 42: wname = "Extintor De Incendios";
        case 43: wname = "Camara";
        case 44: wname = "Lentes de visión nocturna";
        case 45: wname = "Gafas termicas";
        case 46: wname = "Paracaídas";
        case 1000: wname="Cerveza x6 unidades";
        case 1001: wname="Vino x6 unidades";
        case 1002: wname="Sprunk x4 unidades";
        case 1429: wname="Tv Antigua";
        case 1518: wname="Tv Moderna";
        case 2912: wname="Caja de Madera";
        case 2190: wname="Computadora";
        case 1788: wname="Videocasetera";
        case 1790: wname="Bluray";
        case 2028: wname="Consola de juegos";
        case 2226: wname="Radio";
        case 1650: wname="Bidón de gasolina";
        case 9003: wname="Balde con agua";
        case 10000: wname="Caja de aquarius de 12 unidades";
        case 10001: wname="Caja de vino de 12 unidades";
        case 10002: wname="Caja de cerveza de 12 unidades";
        case 10003: wname="Caja de sprunk de 12 unidades";
        case 10004: wname="Pizza completa";
        case 2702: wname="Pizza";
    }
    return wname;
}
DarRopa(playerid)
{
    if(PlayerInfo[playerid][pRopa] == 0)
    {
        switch(PlayerInfo[playerid][pSexo])
        {
            case 2: PlayerInfo[playerid][pRopa] = 250, PlayerInfo[playerid][pSexo] = 1;
            default: PlayerInfo[playerid][pRopa] = 11, PlayerInfo[playerid][pSexo] = 2;
        }
        SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
    }
    if(PlayerInfo[playerid][pDuty] == 1)
    {
        if(PlayerInfo[playerid][suspendido] == 0)
        {
            SetPlayerSkin(playerid, PlayerInfo[playerid][pModelo]);
            SetPlayerColor(playerid,TEAM_BLUE_COLOR);
        }
        else
        {
            SetPlayerColor(playerid,COLORCARGO0);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            PlayerInfo[playerid][pDuty] = 0;
            if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(3)] == 3) QuitarArma(playerid, 3);
            DarArmas(playerid);
        }
        if(GetPlayerSkin(playerid) == 0)
        {
            SetPlayerSkin(playerid, PlayerInfo[playerid][pModelo]);
            SetPlayerColor(playerid,TEAM_BLUE_COLOR);
        }
        return 1;
    }
    else if(RopaMeca[playerid] == 1)
    {
        switch(PlayerInfo[playerid][pSexo])
        {
            case 2:
            {
                RemovePlayerAttachedObject(playerid, 3);
                RemovePlayerAttachedObject(playerid, 4);
                SetPlayerSkin(playerid, 309);
                SetPlayerAttachedObject(playerid,3,19773,1,0.227999,0.077000,0.090000,87.700004,57.700054,109.999763,1.165000,0.429000,0.433999);
                SetPlayerAttachedObject(playerid,4,19627,1,0.243999,0.108997,0.082998,108.500007,147.200057,149.900009,0.595997,0.907997,1.306998);
            }
            default: SetPlayerSkin(playerid, 50);
        }
    }
    else if(RopaMedi[playerid] == 1)
    {
        switch(PlayerInfo[playerid][pSexo])
        {
            case 2:
            {
                RemovePlayerAttachedObject(playerid, 3);
                RemovePlayerAttachedObject(playerid, 4);
                SetPlayerSkin(playerid,308);
            }
            default: SetPlayerSkin(playerid,276);
        }
    }
    else if(RopaBasu[playerid] == 1)
    {
        switch(PlayerInfo[playerid][pSexo])
        {
            case 2:
            {
                RemovePlayerAttachedObject(playerid, 3);
                RemovePlayerAttachedObject(playerid, 4);
                SetPlayerSkin(playerid, 131);
                SetPlayerAttachedObject(playerid,3,19904,1,0.103999,0.065000,-0.001998,2.099929,90.200180,174.199905,0.949001,1.222001,0.876000);
            }
            default: SetPlayerSkin(playerid, 16);
        }
    }
    else if(RopaMine[playerid] == 1)
    {
        switch(PlayerInfo[playerid][pSexo])
        {
            case 2:
            {
                RemovePlayerAttachedObject(playerid, 3);
                RemovePlayerAttachedObject(playerid, 4);
                SetPlayerSkin(playerid, 131);
                SetPlayerAttachedObject(playerid,4,18638,2,0.136,0.018999,0.002999,-0.600001,-2.10002,-12.4,1,1,1.072);
            }
            default: SetPlayerSkin(playerid, 27);
        }
    }
    else SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
    DarPrendas(playerid);
    return 1;
}
ExpTrans(playerid)
{
    PlayerTemp[playerid][pt_Transportista] = false;
    if(RoboTienda[playerid] == 1) return SendClientMessage(playerid,-1,"Nos llegó un informe de que {FF0000}asaltaste una tienda{FFFFFF} durante tu trabajo, ahora {FF0000}no se te pagará.");
    if(PlayerInfo[playerid][pExpTransportista] < 49) {
        if(PlayerInfo[playerid][pVip] > 0) {
            new pago = random(3);
            switch(pago)
            {
                case 0: { PlayerInfo[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
                case 1: { PlayerInfo[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
                case 2: { PlayerInfo[playerid][pExpTransportista]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +2 puntos."); }
            }
        }
        else { PlayerInfo[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
    }
    else if(PlayerInfo[playerid][pExpTransportista] >= 49) {
        if(PlayerInfo[playerid][pNivelTransportista] == 6) return SendClientMessage(playerid,-1,"{00CC00}Llegaste al nivel máximo actual de transportista.");
        PlayerInfo[playerid][pNivelTransportista]++;
        PlayerInfo[playerid][pExpTransportista] = 0;
        SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de transportista.");
    }
    return true;
}
MonedaVenta(coin,precio)
{
	new moneda[100];
	switch(coin) { case 0: format(moneda, sizeof(moneda), "$%d",precio); case 1: format(moneda, sizeof(moneda), "%d "SERVER_COIN"",precio); }
	return moneda;
}
MonedaVenta2(coin)
{
	new moneda[10];
	switch(coin) { case 0: moneda = "$"; case 1: moneda = ""SERVER_COIN""; }
	return moneda;
}
NoTeleportHack(playerid)
{
    Tiempos[playerid][Entrando] = gettime() + 3;
    return 1;
}
QuitarConsumibles(playerid)
{
    TieneSprunk[playerid] = 0; TieneVino[playerid] = 0; TieneCerveza[playerid] = 0; TienePizza[playerid] = 0; TieneAquariu[playerid] = 0; TienePorro[playerid] = 0;
    return 1;
}
CancelarRobo(playerid,actor)
{
    for(new i = 0; i < MAX_NPC_ROBOS; i++)
    {
        if(RoboTiendas[i][Actor] == actor)
        {
            KillTimer(PlayerTemp[playerid][TimerRobar]);
            new id = RoboTiendas[i][rID];
            ApplyDynamicActorAnimation(actor,"RIOT","RIOT_FUKU", 4.000000, 0, 0, 0, 1, 0);
            RoboTiendas[id][RoboProceso] = 0;
        }
    }
    return 1;
}
GetPlayerArrestedPositions(playerid, &Float:x, &Float:y, &Float:z, &Float:a)
{
    if(IsPlayerInRangeOfPoint(playerid,10,-28.3834,-89.9474,1003.5469))
    {
        x = -28.5330;
        y = -88.5960;
        z = 1003.5469;
        a = 145.1751;
    }
    if(IsPlayerInRangeOfPoint(playerid,10,-28.6914,-185.8927,1007.7300))
    {
        x = -28.6914;
        y = -185.8927;
        z = 1007.7300;
        a = 229.6577;
    }
    if(IsPlayerInRangeOfPoint(playerid,20,370.4197,-123.0341,1001.4995))
    {
        x = 370.4197;
        y = -123.0341;
        z = 1001.4995;
        a = 188.7337;
    }
    return 1;
}
Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By milous22 (https://github.com/milous22)
{
    return floatsqroot(floatadd(floatadd(floatpower(floatsub(x1,x2),2),floatpower(floatsub(y1,y2),2)),floatpower(floatsub(z1,z2),2)));
}
PermiteRobar(playerid,id)
{
    if(PlayerInfo[playerid][pFaccion] == 1) return PlayerTemp[playerid][PuedeRobar] = 0;
    if(GetPlayerInterior(playerid) == 0) return PlayerTemp[playerid][PuedeRobar] = 0;
    if(PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico || PlayerInfo[playerid][pTrabajo] == T_Basurero || PlayerInfo[playerid][pTrabajo2] == T_Basurero)
    {
        if(Tiempos[playerid][TiempoMensajeRobar] - gettime() <= 0)
        {
            if(PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico) SendClientMessage(playerid,-1,"No puedes asaltar negocios siendo médico.");
            else if(PlayerInfo[playerid][pTrabajo] == T_Basurero || PlayerInfo[playerid][pTrabajo2] == T_Basurero) SendClientMessage(playerid,-1,"No puedes asaltar negocios siendo basurero.");
            Tiempos[playerid][TiempoMensajeRobar] = gettime() + 2;
        }
        PlayerTemp[playerid][PuedeRobar] = 0;
        KillTimer(PlayerTemp[playerid][TimerRobar]);
        return 0;
    }
    if(GetPlayerWantedLevel(playerid) > 0)
    {
        if(Tiempos[playerid][TiempoMensajeRobar] - gettime() <= 0)
        {
            SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} te está buscando, {FF0000}no puedes robar{FFFFFF} un negocio en este momento.");
            Tiempos[playerid][TiempoMensajeRobar] = gettime() + 2;
        }
        PlayerTemp[playerid][PuedeRobar] = 0;
        KillTimer(PlayerTemp[playerid][TimerRobar]);
        return 0;
    }
    if(UltimoRobado[playerid] == id)
    {
        if(Tiempos[playerid][TiempoMensajeRobar] - gettime() <= 0)
        {
            SendClientMessage(playerid,-1,"No puedes robar el {FF0000}mismo negocio{FFFFFF} seguidamente.");
            Tiempos[playerid][TiempoMensajeRobar] = gettime() + 2;
        }
        PlayerTemp[playerid][PuedeRobar] = 0;
        KillTimer(PlayerTemp[playerid][TimerRobar]);
        return 0;
    }
    new last = UltimoRobado[playerid];
    new Float:CordX = RoboTiendas[id][EntradaX];
    new Float:CordY = RoboTiendas[id][EntradaY];
    new Float:CordZ = RoboTiendas[id][EntradaZ];
    new Float:CordAX = RoboTiendas[last][EntradaX];
    new Float:CordAY = RoboTiendas[last][EntradaY];
    new Float:CordAZ = RoboTiendas[last][EntradaZ];
    new Float:dis = GetDistanceBetweenPoints(CordX,CordY,CordZ,CordAX,CordAY,CordAZ);
    if(dis < 250)
    {
        if(UltimoRobado[playerid] != 0)
        {
            if(Tiempos[playerid][TiempoMensajeRobar] - gettime() <= 0)
            {
                SendClientMessage(playerid,-1,"No puedes robar un negocio {FF0000}tan cercano{FFFFFF} al de tu último robo.");
                Tiempos[playerid][TiempoMensajeRobar] = gettime() + 2;
            }
            PlayerTemp[playerid][PuedeRobar] = 0;
            KillTimer(PlayerTemp[playerid][TimerRobar]);
            return 0;
        }
    }
    return 1;
}
KickAntiCheat(playerid, type, arma, razon[] = "Anti-Cheat")
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] > CMD_ADM) return 1;
	if(type == 0) format(string, sizeof(string), "{FFFFFF}El jugador {FF3300}%s(ID: %d){FFFFFF} fue expulsado por el anticheat razón: {FF3300}%s.", PlayerInfo[playerid][Nickname], playerid, razon);
	else if(type == 1)
	{
		if(Tiempos[playerid][TIMER_WEAPONS] > gettime()) return 1;
		QuitarArmas(playerid);
		format(string, sizeof(string), "{FFFFFF}El jugador {FF3300}%s(ID: %d){FFFFFF} fue expulsado por el anticheat razón: {FF3300}Cheat de armas{FFFFFF} (%d).", PlayerInfo[playerid][Nickname], playerid, arma);
	}
	MandarMensajeTodos(string);
	ExpulsarJugador(playerid, razon);
	return 1;
}
CalcularCargos(playerid, &content)
{
    new Float:value,time;
    switch(PlayerInfo[playerid][pCargos])
    {
        case 1: time = 6; case 2: time = 16; case 3: time = 21;
        case 4: time = 26; case 5: time = 31; default: time = 36;
    }
    value = time/100;
    value = value*time;
    value = time + (time * PlayerInfo[playerid][arrestado] / 100);
    switch(PlayerInfo[playerid][pVip])
    {
        case 1: value = value/100 * 90; case 2: value = value/100 * 75;
        case 3: value = value/100 * 55; case 4: value = value/100 * 35;
    }
    content = floatround(value);
    return true;
}
stock ReiniciarCosas(playerid)
{
	new reiniciar_numeros[Phone_Book_Enum]; for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = reiniciar_numeros;
    new reiniciar_cuenta2[E_TEMP_INFO]; PlayerTemp[playerid] = reiniciar_cuenta2;
    new reiniciar_cuenta[jInfo]; PlayerInfo[playerid] = reiniciar_cuenta;
    new reiniciar_tiempos[Times]; Tiempos[playerid] = reiniciar_tiempos;
    new reiniciar_toys[pToysInfo]; for(new i = 0; i < MAX_PTOYS; i++) PlayerToys[playerid][i] = reiniciar_toys;
    return 1;
}
LimpiarCuenta(playerid)
{
    ReiniciarCosas(playerid);
    PlayerTemp[playerid][LoroHabla] = false;
    PlayerTemp[playerid][pt_SELECTED_POLICE_OBJECT_ID] = INVALID_OBJECT_ID;
    Emisoras[playerid][TieneEmisora] = 0;
    Emisoras[playerid][EmisoraID]= -1;
   	PlayerInfo[playerid][pRemedios] = 0;
	PlayerTemp[playerid][@Specteando] = 0;
    format(Emisoras[playerid][NombreEmisora], 90, "Ninguno");
    format(Emisoras[playerid][URLEmisora], 120, "http://45.153.184.239:8080/listen.pls");
    EditingCopObjectID[playerid] = -1;
    Tiempos[playerid][TiempoBolso] = 0;
    MedicoReanimo[playerid] = INVALID_PLAYER_ID;
    CeldaJugador[playerid] = 0;
    YaMostroAlertaSed[playerid] = 0;
    KillTimer(TimerMedico[playerid]);
    KillTimer(TimerMeca[playerid]);
    KillTimer(TimerTaxista[playerid]);
    new nombrefaster[32];
    randomString(nombrefaster, 20);
    SetPlayerTeam(playerid, NO_TEAM);
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, 0);
    ResetPlayerWeapons(playerid);
    GameTextForPlayer(playerid, "", 0, 3);
    TiempoForzarCerradura[playerid] = 0;
    ForzarCerraduraID[playerid] = 0;
    CasaForzada[playerid] = 0;
    for(new i = 0; i < 7; i++) DineroTirado[playerid][i] = 0;
    SexoOral[playerid] = INVALID_PLAYER_ID;
    KillTimer(Tiempos[playerid][TimerChupar]);
    if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
    ContadorBaile[playerid] = 0;
    PlayerInfo[playerid][pBarras] = 1;
    Paciente2[playerid] = INVALID_PLAYER_ID;
    EmpezoCarreraP[playerid] = 0;
    ContadorCBug[playerid] = 0;
    Contador[playerid] = 0;
    KillTimer(Tiempos[playerid][TimerRevisando]);
    QuitarConsumibles(playerid);
    SpecJugador[playerid] = INVALID_PLAYER_ID;
    KillTimer(Tiempos[playerid][TiempoSacarClub]);
    KillTimer(Tiempos[playerid][TiempoCargo]);
    RoboTienda[playerid] = 0;
    if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
    if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
    valortotal[playerid] = 0;
    format(PlayerTemp[playerid][NAMES],10," ");
    _Select_Status[ playerid ] = false;
    KillTimer(Cargas[playerid]);
    VirtualWorldAutos[playerid] = 0;
    suicidio[playerid] = 0;
    AdminDuty[playerid] = 0;
    TowedCar[playerid][0] = 0;
    TowedCar[playerid][1] = 0;
    TowedCar[playerid][2] = 0;
    TowedCar[playerid][3] = 0;
    TimerReparar[playerid] = 0;
    TimerRevisar[playerid] = 0;
    PlayerInfo[playerid][pEdad] = 0;
    PlayerInfo[playerid][pInterior] = 0;
    PlayerInfo[playerid][pMundoVirtual] = 0;
    TimerRecoleccion[playerid] = 0;
    TimerDescargarCamion[playerid] = 0;
    TimerCamionero[playerid] = 0;
    TimerPescador[playerid] = 0;
    Tiempos[playerid][TiempoCaramelos] = gettime() + 30;
    ViajeAvion[playerid] = 0;
    TimerBasurero[playerid] = 0;
    TimerCargarCamion[playerid] = 0;
    TimerMalherido[playerid] = 0;
    TimerCombustible[playerid] = 0;
    VerAdmin[playerid] = 1;
    LogeoCorrecto[playerid] = 0;
    NotificacionConectado[playerid] = 0;
    Tiempos[playerid][TiempoCarrera2] = 0;
    Tiempos[playerid][TiempoCarrera] = 0;
    FabricaMedica[playerid] = 0;
    KillTimer(DANOF[playerid]);
    BaldeAgua[playerid] = 0;
    RecienDuda[playerid] = 0;
    TieneSombrero[playerid] = 0;
    Halloween[playerid][P1Hora] = 0;
    Halloween[playerid][P2Hora] = 0;
    Halloween[playerid][P3Hora] = 0;
    Halloween[playerid][P4Hora] = 0;
    Halloween[playerid][P5Hora] = 0;
    Halloween[playerid][P6Hora] = 0;
    Halloween[playerid][P7Hora] = 0;
    Halloween[playerid][P8Hora] = 0;
    Halloween[playerid][P9Hora] = 0;
    Halloween[playerid][P10Hora] = 0;
    Halloween[playerid][P11Hora] = 0;
    Halloween[playerid][P12Hora] = 0;
    Halloween[playerid][P13Hora] = 0;
    Halloween[playerid][P14Hora] = 0;
    Halloween[playerid][P15Hora] = 0;
    Halloween[playerid][P16Hora] = 0;
    Halloween[playerid][P17Hora] = 0;
    Halloween[playerid][P18Hora] = 0;
    Halloween[playerid][P19Hora] = 0;
    Halloween[playerid][P20Hora] = 0;
    Halloween[playerid][P21Hora] = 0;
    Halloween[playerid][P22Hora] = 0;
    Halloween[playerid][P23Hora] = 0;
    Halloween[playerid][P24Hora] = 0;
    Halloween[playerid][P25Hora] = 0;
    Halloween[playerid][P26Hora] = 0;
    Halloween[playerid][P27Hora] = 0;
    Halloween[playerid][P28Hora] = 0;
    Halloween[playerid][P29Hora] = 0;
    Halloween[playerid][P30Hora] = 0;
    Halloween[playerid][P31Hora] = 0;
    Halloween[playerid][P32Hora] = 0;
    PlayerInfo[playerid][pHechizado] = 0;
    PlayerInfo[playerid][pCaramelos] = 0;
    PlayerInfo[playerid][pAfinidad1] = 0;
    PlayerInfo[playerid][pAfinidad2] = 0;
    PlayerInfo[playerid][pAfinidad3] = 0;
    PlayerInfo[playerid][pAfinidad4] = 0;
    PlayerInfo[playerid][pAfinidad5] = 0;
    PlayerInfo[playerid][pAfinidad6] = 0;
    PlayerInfo[playerid][Totems] = 0;
    VariableCaido[playerid] = 0;
    TiempoReparar[playerid] = 0;
    LoggedYet[playerid] = 0;
    TipoCargo[playerid] = 0;
    ValueTimerBugH[playerid] = 1;
    Cosechas[playerid][CosechaLugar] = 0;
    Cosechas[playerid][RutaCosecha] = 0;
    Cosechas[playerid][ProgresoCosecha] = 0;
    EventoBolo[playerid] = 0;
    Piso[playerid] = 0;
    Forzando[playerid] = 0;
    TieneGPSActivo[playerid] = 0;
    MensajeSinGasoEnviado[playerid] = 0;
    LlamadaTipo[playerid] = 0;
   	TieneCrisol[playerid] = 0;
    HornoUsarP[playerid] = 0;
    Participo[playerid] = 0;
    TraeDinero[playerid] = 0;
    SexoOral[playerid] = -1;
    precioofertax[playerid] = 0;
    CaidaTaxi[0][playerid] = 0;
    CaidaTaxi[1][playerid] = 0;
    CaidaTaxi[2][playerid] = 0;
    MinutoLlamada[playerid] = 0;
    TieneHerramientaEnMano[playerid] = 0;
    YoLlame[playerid] = 0;
    EstaDomiciliaria[playerid] = 0;
    PrendaMarcada[playerid] = 0;
    PermisoSalon[playerid] = false;
    Boleto[playerid] = false;
    Escuchando[playerid] = true;
    TienePorro[playerid] = 0;
    TieneSprunk[playerid] = 0;
    TieneAquariu[playerid] = 0;
    TienePizza[playerid] = 0;
    TieneVino[playerid] = 0;
    Frecuencia[playerid] = 0;
    TieneCerveza[playerid] = 0;
    PuntoTraY[playerid] = 0;
    NombresOcultos[playerid] = 0;
    Boletos[playerid] = 0;
    EstaEnBus[playerid] = 0;
    tipogrua[playerid] = 0;
    RecorridoPescador[playerid] = 0;
    VWTemporal[playerid] = 0;
    PuntoCX[playerid] = 0;
    PuntoCY[playerid] = 0;
    PuntoCZ[playerid] = 0;
    PuntoBaX[playerid] = 0;
    PuntoBaY[playerid] = 0;
    PuntoBaZ[playerid] = 0;
    PuntoBaA[playerid] = 0;
    PuntoTraX[playerid] = 0;
    PuntoTraZ[playerid] = 0;
    RopaBasu[playerid] = 0;
    RopaMedi[playerid] = 0;
    RopaMeca[playerid] = 0;
    RopaMine[playerid] = 0;
    NoQuitar[playerid] = 0;
    CagoSeguro[playerid] = 0;
    EnLlamada[playerid] = 0;
    EnLlamada911[playerid] = -1;
    IDReporte[playerid] = -1;
    HCalculo[playerid] = 0;
    CColocado[playerid] = 0;
    EnCombate[playerid] = 0;
    Transportistas[playerid][Ruta] = 0;
    Avisos[playerid] = 0;
    AutoBuscado[playerid] = 0;
    Objeto[playerid] = 0;
    MRepuestos[playerid] = 0;
    MConductor[playerid] = 0;
    LlamadaMeca[playerid] = 0;
    Monto[playerid] = 0;
    EnTaxi[playerid] = 0;
    LlamadaTaxi[playerid] = 0;
    Localizando[playerid] = 0;
    CargandoC[playerid] = 0;
    recogiendo[playerid] = 0;
    RecorridoBasu[playerid] = 0;
    PBasura[playerid] = 0;
    Muriendo[playerid] = 0;
    Bidon[playerid] = 0;
    Jail[playerid] = 0;
    San[playerid] = 0;
    EnPatrulla[playerid] = 0;
    BajandoV[playerid] = 1;
    CanalDudas[playerid] = 1;
    CanalAnuncios[playerid] = 1;
    Ficha[playerid] = 0;
    Manejando[playerid] = 0;
    AvisosAuto[playerid] = 0;
    Carga[playerid] = 0;
    Mats1[playerid] = 0;
    Mats2[playerid] = 0;
    Mats3[playerid] = 0;
    tviaje[playerid] = 0;
    DudaOff[playerid] = 0;
    Curando[playerid] = 0;
    Esposando[playerid] = 0;
    MedicoCP2[playerid] = 0;
    Reanimado[playerid] = 0;
    PrimerSpawn[playerid] = 0;
    armaofertada[playerid] = 0;
    dineropedido[playerid] = 0;
    PacienteAmbu[playerid] = 0;
    JugadorLogeado[playerid] = 0;
    MarcadoMedicos[playerid] = 0;
    LlamadaMedicos[playerid] = 0;
    TelefonoEstado[playerid] = 0;
    EstadoRadio[playerid] = 1;
    CamionID[playerid] = INVALID_VEHICLE_ID;
    Paciente[playerid] = INVALID_PLAYER_ID;
    GuardaEspalda[playerid] = INVALID_PLAYER_ID;
    Deposito[playerid] = INVALID_PLAYER_ID;
    ofertador[playerid] = INVALID_PLAYER_ID;
    ofertador[playerid] = INVALID_PLAYER_ID;
    Agresor[playerid] = INVALID_PLAYER_ID;
    LeOfreci[playerid] = INVALID_PLAYER_ID;
    VerBaul[playerid] = INVALID_PLAYER_ID;
    EnAuto[playerid] = INVALID_VEHICLE_ID;
    Taxista[playerid] = INVALID_PLAYER_ID;
    Pasajero[playerid] = INVALID_PLAYER_ID;
    Mecanico[playerid] = INVALID_PLAYER_ID;
    Oficial[playerid] = INVALID_PLAYER_ID;
    Companero[playerid] = INVALID_PLAYER_ID;
    reportar[playerid] = INVALID_PLAYER_ID;
    SetPVarInt(playerid, "TempName", 0);
    KillTimer(TM[playerid]);
    KillTimer(LCHAT[playerid]);
    KillTimer(CLlamada[playerid]);
    KillTimer(llamadasonido1[playerid]);
    KillTimer(llamadasonido2[playerid]);
    KillTimer(asdtren[playerid]);
    KillTimer(asd[playerid]);
    PlayerTemp[playerid][pt_Transportista] = false;
    format(PlayerInfo[playerid][Nickname],128,"%s",nombrefaster);
    PlayerInfo[playerid][BaneosD2] = gettime();
    format(PlayerInfo[playerid][ContraTemporal], 128, "dkaodowqpeoqñdasldas-dlsad");
    TieneBarril[playerid] = 0;
    TiempoEntrada[playerid] = 0;
    PlayerInfo[playerid][pAdmin] = 0;
    PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
    format(PlayerInfo[playerid][jConexion], 90, "0");
    PlayerInfo[playerid][pSemillas] = 0;
    SetPlayerColor(playerid, COLOR_WHITE);
    SetPlayerWantedLevel(playerid, 0);
    DisablePlayerCheckpoint(playerid);
    QuitarArmas(playerid);
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, 0);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Velocimetro], 120);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Combustible], 100);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Camionero], 10.0);
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], 10.0);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 20.0);
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha], 0.00);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][ReparandoBar], 10.0);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Picar], 10.0);
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][Picar], 10.0);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Revisar], 5.0);
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][ReparandoBar], 10.0);
    return 1;
}
ExpMedico(playerid)
{
    switch(PlayerInfo[playerid][pNivelMedico])
    {
        case 1:
        {
            if(PlayerInfo[playerid][pExpMedico] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMedico] >= 49)
            {
                PlayerInfo[playerid][pNivelMedico]++;
                PlayerInfo[playerid][pExpMedico] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
            }
        }
        case 2:
        {
            if(PlayerInfo[playerid][pExpMedico] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMedico] >= 49)
            {
                PlayerInfo[playerid][pNivelMedico]++;
                PlayerInfo[playerid][pExpMedico] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
            }
        }
        case 3:
        {
            if(PlayerInfo[playerid][pExpMedico] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMedico] >= 49)
            {
                PlayerInfo[playerid][pNivelMedico]++;
                PlayerInfo[playerid][pExpMedico] = 0;
                SendClientMessage(playerid,-1,"{00CC00}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
            }
        }
        case 4:
        {
            if(PlayerInfo[playerid][pExpMedico] < 49)
            {
                if(PlayerInfo[playerid][pVip] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PlayerInfo[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
            }
            else if(PlayerInfo[playerid][pExpMedico] >= 49) SendClientMessage(playerid,0x00CC00FF,"Llegaste al nivel máximo como médico.");
        }
    }
}

stock ExpPescador(playerid,peso,atext[])
{
    new pagatotal,preciorandom = random(764),pesorandom = random(150),string[128],exp;
    if(PlayerInfo[playerid][pNivelPescador] == 1) {
        pagatotal = preciorandom+6000;
        if(PlayerInfo[playerid][pVip] == 0) peso = 200+pesorandom;
        else peso = 260+pesorandom;
    }
    else if(PlayerInfo[playerid][pNivelPescador] == 2) {
        pagatotal = preciorandom+7000;
        if(PlayerInfo[playerid][pVip] == 0) peso = 300+pesorandom;
        else peso = 360+pesorandom;
    }
    else {
        pagatotal = preciorandom+8000;
        if(PlayerInfo[playerid][pVip] == 0) peso = 320+pesorandom;
        else peso = 380+pesorandom;
    }
    format(string, 150, "¡Excelente pesca! Te pagamos {00CC00}$%s{FFFFFF} por %s de {00CCFF}%dkg{FFFFFF} que acabas de entregar.", Numeros(pagatotal), atext, peso);
    SendClientMessage(playerid, -1, string);
    SendClientMessage(playerid,-1,"Si quieres volver a pescar, tienes que solicitar un nuevo {DBED15}/permiso pesca{FFFFFF}.");
    DarDinero(playerid,pagatotal);
    if(PlayerInfo[playerid][pVip] == 0) exp = random(3);
    else exp = random(2);
    switch(exp)
    {
        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste habilidad.");
        case 1:
        {
            if(PlayerInfo[playerid][pExpPescador] < 49){ SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); PlayerInfo[playerid][pExpPescador]++; }
            else if(PlayerInfo[playerid][pExpPescador] >= 49){ SendClientMessage(playerid,-1,"Felicidades, has aumentado tu nivel en este trabajo."); PlayerInfo[playerid][pExpPescador] = 0; PlayerInfo[playerid][pNivelPescador]++; }
        }
        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste habilidad.");
    }
    if(PlayerInfo[playerid][pTortuga] == 0 && peso >= 310 && pesca[playerid] == 1) RevisarLogro(playerid, 5, peso, pesca[playerid]);
    return 1;
}

EnComisaria(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,10.0,1564.5568,-1694.7732,5.8906)) return 1;         // LSPD
    else if(IsPlayerInRangeOfPoint(playerid,10.0,-1589.4796,706.9417,-5.6748)) return 1;    // SFPD
    else if(IsPlayerInRangeOfPoint(playerid,10.0,2281.4912,2429.3406,3.2734)) return 1;     // LVPD
    else if(IsPlayerInRangeOfPoint(playerid,10.0,-1679.5967,705.8658,30.7528)) return 1;    // SFPD (H)
    else if(IsPlayerInRangeOfPoint(playerid,10.0,2291.7383,2451.4404,10.8203)) return 1;    // LVPD ARRIBA
    return 0;
}

Armado(playerid)
{
    for(new i = 0; i < 13; i++)
    {
        if(PlayerInfo[playerid][j_ARMAS][i] != 0) return 1;
    }
    return 0;
}
Armados(playerid)
{
    if(PlayerInfo[playerid][j_ARMAS][0] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][2] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][3] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][4] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][5] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][6] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][7] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][8] > 0) return 1;
    else if(PlayerInfo[playerid][j_ARMAS][9] > 0) return 1;
    return 0;
}
stock ArmadoP(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(GetPlayerWeapon(playerid) == 25) return 1;
        else if(GetPlayerWeapon(playerid) == 27) return 1;
        else if(GetPlayerWeapon(playerid) == 29) return 1;
        else if(GetPlayerWeapon(playerid) == 30) return 1;
        else if(GetPlayerWeapon(playerid) == 31) return 1;
        else if(GetPlayerWeapon(playerid) == 33) return 1;
        else if(GetPlayerWeapon(playerid) == 16) return 1;
        else if(GetPlayerWeapon(playerid) == 38) return 1;
        else if(GetPlayerWeapon(playerid) == 26) return 1;
    }
    return 0;
}
EnAscensor(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,10.8428)) { Piso[playerid] = 1; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,15.1228)) { Piso[playerid] = 2; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,19.4428)) { Piso[playerid] = 3; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,23.7228)) { Piso[playerid] = 4; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,28.0428)) { Piso[playerid] = 5; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,32.3428)) { Piso[playerid] = 6; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,36.6228)) { Piso[playerid] = 7; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,40.9428)) { Piso[playerid] = 8; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,45.2228)) { Piso[playerid] = 9; return 1;}
    else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,49.5428)) { Piso[playerid] = 10; return 1;}
    return 0;
}
stock EnCelda(playerid)
{
	for(new i = 0; i < sizeof(CeldasPositions);i++)
	if(IsPlayerInRangeOfPoint(playerid,2.0, CeldasPositions[i][0], CeldasPositions[i][1], CeldasPositions[i][2])) return 1;
	return 0;
}
stock RangoPolicia(playerid)
{
	new rango[20];
    if (PlayerInfo[playerid][pRango] == 7) format(rango, sizeof(rango), "Inspector"); if (PlayerInfo[playerid][pRango] == 8) format(rango, sizeof(rango), "Comisario");
	if (PlayerInfo[playerid][pRango] == 5) format(rango, sizeof(rango), "Capitán"); if (PlayerInfo[playerid][pRango] == 6) format(rango, sizeof(rango), "Teniente");
    if (PlayerInfo[playerid][pRango] == 3) format(rango, sizeof(rango), "Cabo"); if (PlayerInfo[playerid][pRango] == 4) format(rango, sizeof(rango), "Sargento");
    if (PlayerInfo[playerid][pRango] == 1) format(rango, sizeof(rango), "Cadete"); if (PlayerInfo[playerid][pRango] == 2) format(rango, sizeof(rango), "Oficial");
    return rango;
}
EnPesca(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 40.0, 890.69623, -2448.19629, -3.40480)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 40.0, 42.95105, -1692.88330, -2.80000)) return 1;
    return 0;
}
EnVerMapa(playerid)
{
    for(new i = 0; i < sizeof(VerMapasPositions);i++)
    if(IsPlayerInRangeOfPoint(playerid,2.0, VerMapasPositions[i][0], VerMapasPositions[i][1], VerMapasPositions[i][2])) return 1;
    return 0;
}
EnEntregarse(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 240.4520,112.8195,1003.2188)) return 1;       	// Entregarse Interiores
    else if(IsPlayerInRangeOfPoint(playerid, 7.0, 235.2946,166.3358,1003.0300)) return 1;   // Entregarse Interiores
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1560.4916,-1693.5004,5.8906)) return 1;   // Entregar LS
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.6255,-1693.5498,5.8906)) return 1;   // Entregar LS
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1590.2043,707.8610,-5.2422)) return 1;   // Entregar SF
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1589.9172,716.4757,-5.2422)) return 1;   // Entregar SF
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2291.9436,2451.4192,10.8203)) return 1;   // Entregar LV
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2291.8071,2468.6799,10.8203)) return 1;   // Entregar LV
    return 0;
}
EnSexShop(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 7.0, -103.9013,-22.6749,1000.7188)) return 1;
    return 0;
}
EnBaldes(playerid)
{
    for(new i = 0; i < sizeof(LlenarBaldePos);i++)
    if(IsPlayerInRangeOfPoint(playerid,2.0, LlenarBaldePos[i][0], LlenarBaldePos[i][1], LlenarBaldePos[i][2])) return 1;
    return 0;
}
EnGasolinera(playerid)
{
    for(new i = 0; i < sizeof(GasolineraPositions);i++)
    if(IsPlayerInRangeOfPoint(playerid,15.0, GasolineraPositions[i][0], GasolineraPositions[i][1], GasolineraPositions[i][2])) return 1;
    return 0;
}
EnCajero(playerid)
{
    for(new i = 0; i < sizeof(OperacionesPositions);i++)
    if(IsPlayerInRangeOfPoint(playerid,2.0, OperacionesPositions[i][0], OperacionesPositions[i][1], OperacionesPositions[i][2])) return 1;
    return 0;
}
EnPicarMinero(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 4.0, -729.0903,2410.1563,7.2710)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, -728.3772,2422.0627,7.1895)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, -745.1193,2408.8325,1.3375)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, -740.4136,2392.6699,4.1117)) return 1;
    return 0;
}
CheckArma(playerid,id)
{
    if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(id)] == id) return 1;
    return 0;
}
public CargarPuertas()
{
    new Query[128];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `doors`");
    mysql_tquery(handle_db, Query, "LoadDoor");
}
public LoadDoor()
{
    new count,count2;
    cache_get_result_count(count);
    for(new i = 0; i < cache_num_rows(); i++)
    {
        new content[40],p = 0;
        cache_get_value_name(i, "ID", content); p = strval(content); DoorInfo[p][dID] = strval(content);
        if(p > 0)
        {
            new type,pickup,localID;
            cache_get_value_name(i, "Type", content);           type = strval(content);
            cache_get_value_name(i, "Pickup", content);         pickup = strval(content);
            cache_get_value_name(i, "Extra", content); 			localID = strval(content);
            cache_get_value_name(i, "Nombre", content);         format(DoorInfo[p][dName],64,"%s",content);
            cache_get_value_name(i, "X", content);              DoorInfo[p][dExitX] = floatstr(content);
            cache_get_value_name(i, "Y", content);              DoorInfo[p][dExitY] = floatstr(content);
            cache_get_value_name(i, "Z", content);              DoorInfo[p][dExitZ] = floatstr(content);
            cache_get_value_name(i, "Propietario", content);    format(DoorInfo[p][dOwner],MAX_PLAYER_NAME,content);
            new string[256];
            switch(type)
            {
                case 1: format(string,sizeof(string),"{37db45}%s\n{02b79f}Franquicia (%d)\n{FFFFFF}Propietario: {00ccff}%s\n\n"ENTRADAPORF".",DoorInfo[p][dName],localID,DoorInfo[p][dOwner]);
			    case 2: format(string,sizeof(string),"{37db45}%s\n{FFFFFF}Propietario: {00ccff}%s\n\n"ENTRADAPORF".",DoorInfo[p][dName],DoorInfo[p][dOwner]);
			    case 3: format(string,sizeof(string),"{37db45}%s{FFFFFF}\n\n"ENTRADAPORF".",DoorInfo[p][dName]);
			    case 4: format(string,sizeof(string),"{37db45}%s{FFFFFF}\n\n"ENTRADAPORY".",DoorInfo[p][dName]);
            }
            if(type > 0 && type < 5) if(!IsValidDynamic3DTextLabel(DoorInfo[p][dLabel])) DoorInfo[p][dLabel] = CreateDynamic3DTextLabel(string, COLOR_ROJO, DoorInfo[p][dExitX], DoorInfo[p][dExitY], DoorInfo[p][dExitZ]+0.75, 23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            if(!IsValidDynamicPickup(DoorInfo[p][dPickup])) DoorInfo[p][dPickup] = CreateDynamicPickup(pickup, 23, DoorInfo[p][dExitX], DoorInfo[p][dExitY], DoorInfo[p][dExitZ], 0, 0, -1, 70.0);
            count2++;
        }
    }
    printf("[PUERTAS DINAMICAS]: %d", count2);
    return 1;
}
stock EsconderVelocimetro(playerid)
{
    TextDrawHideForPlayer(playerid, TEXTDRAWBOX1); 
    TextDrawHideForPlayer(playerid, TEXTDRAWBOX2); 
    TextDrawHideForPlayer(playerid, TEXTDRAWBOX3); 
    TextDrawHideForPlayer(playerid, TEXTDRAWBOX4); 
    TextDrawHideForPlayer(playerid, TEXTDRAWBOX5);
    PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][0]);
    PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][1]);
    HidePlayerProgressBar(playerid, Progressbar[playerid][Combustible]);
    KillTimer(Bajando[playerid]);
    HidePlayerProgressBar(playerid, Progressbar[playerid][Velocimetro]);
    return 1;
}
stock MostrarVelocimetro(playerid)
{
    new Float: fCurrentSpeed, szSpeed[8];
    fCurrentSpeed = player_get_speed(playerid);
    fVehSpeed[playerid] = fCurrentSpeed;
    iVehicle[playerid] = GetPlayerVehicleID(playerid);
    new autoid = GetPlayerVehicleID(playerid);
    if(BICI(autoid)) return 1;
    new modelo = GetVehicleModel(autoid);
    new vehiclefuel = CombustibleCoche(modelo);
    new maxvehiclespeed = VelocidadMaxAuto(modelo);
    format(szSpeed, sizeof(szSpeed),"%d/%d",VehicleFuel[iVehicle[playerid]],vehiclefuel);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Combustible], vehiclefuel);
    SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Velocimetro], maxvehiclespeed+1);
    PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][1], szSpeed);
    format(szSpeed, sizeof(szSpeed),"%.0f", fCurrentSpeed);
    PlayerTextDrawSetString(playerid, ContadorVelocimetro[playerid][0], szSpeed);
    Manejando[playerid] = 1;
    KillTimer(Bajando[playerid]);
    UpdatePlayerProgressBar(playerid,Progressbar[playerid][Combustible]);
    TextDrawShowForPlayer(playerid, TEXTDRAWBOX1);
    TextDrawShowForPlayer(playerid, TEXTDRAWBOX2);
    TextDrawShowForPlayer(playerid, TEXTDRAWBOX3);
    TextDrawShowForPlayer(playerid, TEXTDRAWBOX4);
    TextDrawShowForPlayer(playerid, TEXTDRAWBOX5);
    PlayerTextDrawShow(playerid, ContadorVelocimetro[playerid][0]);
    PlayerTextDrawShow(playerid, ContadorVelocimetro[playerid][1]);
    new color1,color2;
    GetVehicleColor(autoid, color1, color2);
    if(!color1) color1 = 1;
    SetPlayerProgressBarColor(playerid,Progressbar[playerid][Combustible],VEHICLE_COLORS[color1]);
    SetPlayerProgressBarColor(playerid,Progressbar[playerid][Velocimetro],VEHICLE_COLORS[color1]);
    ShowPlayerProgressBar(playerid, Progressbar[playerid][Combustible]);
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][Combustible],VehicleFuel[iVehicle[playerid]]);
    UpdatePlayerProgressBar(playerid,Progressbar[playerid][Combustible]);
    ShowPlayerProgressBar(playerid, Progressbar[playerid][Velocimetro]);
    return 1;
}
AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

LoopingAnim(playerid, animlib[], animnamex[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    ApplyAnimation(playerid, animlib, animnamex, Speed, looping, lockx, locky, lockz, lp);
}
EnBotiquin(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7440,-1353.4617,-10.7922)) return 1; //Botiquin LS
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,1235.0582,-821.8716,1164.2759)) return 1;  //GANTONLS
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2720.8923,647.0943,1385.6534)) return 1; //SF
    return 0;
}
EstaHospital(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 70.0,1157.3018,-1345.9318,-10.7849)) return 1;  //LS
    else if(IsPlayerInRangeOfPoint(playerid, 70.0,-2712.8232,618.8465,1385.6534)) return 1;  //SF
    else if(IsPlayerInRangeOfPoint(playerid, 70.0,1238.9851,-823.2172,1164.2759)) return 1;  //GANTON / LV
    return 0;
}

CreateFCActorStatic(amodelo, Float:x, Float:y, Float:z, Float:a, aid)
{
    ActorFC[aid] = CreateDynamicActor(amodelo, x, y, z, a, 1, 100.0, 0, 0);
    ApplyActorAnimation(ActorFC[aid], "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    if(aid < 3) LabelFC[aid] = CreateDynamic3DTextLabel("\tCerveza artesanal\n\n{FFFFFF}Precio: {00CC00}$10\n\n{FFFF00}/comprar cerveza", 0x2BD5C4FF, x+2, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
    if(aid > 2 && aid < 6) LabelFC[aid] = CreateDynamic3DTextLabel("\tCerveza artesanal\n\n{FFFFFF}Precio: {00CC00}$10\n\n{FFFF00}/comprar cerveza", 0x2BD5C4FF, x-2, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
}

EventoHall(bool:activo)
{
    if(activo == true)
    {
        HallX = true;
        MapaHall[0] = CreateDynamicObject(19320, 1551.25000, -1678.76001, 16.01000,   0.00000, 0.00000, 16.73000);
        MapaHall[1] = CreateDynamicObject(19320, 1551.25000, -1672.45996, 16.01000,   0.00000, 0.00000, 0.00000);
        MapaHall[2] = CreateDynamicObject(3106, 1551.01001, -1678.54004, 16.01000,   54.00000, 4.00000, 40.00000);
        MapaHall[3] = CreateDynamicObject(3106, 1551.03003, -1672.68005, 16.01000,   76.00000, 4.00000, 142.00000);
        MapaHall[4] = CreateDynamicObject(19138, 1551.01001, -1672.58997, 15.88000,   0.00000, 0.00000, 207.39000);
        MapaHall[5] = CreateDynamicObject(19138, 1551.00000, -1678.69995, 15.84000,   0.00000, 0.00000, 165.27000);
        MapaHall[6] = CreateDynamicObject(3106, 1550.94995, -1672.47998, 16.01000,   76.00000, 4.00000, 142.00000);
        MapaHall[7] = CreateDynamicObject(3106, 1550.93005, -1678.78003, 16.01000,   54.00000, 4.00000, 40.00000);
        MapaHall[8] = CreateDynamicObject(11704, 1554.94995, -1675.57996, 21.60000,   0.00000, 0.00000, 270.12000);
        MapaHall[9] = CreateDynamicObject(1498, 1564.19995, -1690.08997, 5.22000,   0.00000, 0.00000, 180.00000);
        MapaHall[10] = CreateDynamicObject(994, 1556.56006, -1698.00000, 5.00000,   0.00000, 0.00000, 90.00000);
        MapaHall[11] = CreateDynamicObject(994, 1564.72998, -1698.00000, 5.00000,   0.00000, 0.00000, 90.00000);
        MapaHall[12] = CreateDynamicObject(970, 1544.72998, -1635.41003, 13.20000,   0.00000, 0.00000, 270.00000);
        MapaHall[13] = CreateDynamicObject(2886, 1582.38000, -1638.34998, 14.00000,   0.00000, 0.00000, 0.00000);
        MapaHall[14] = CreateDynamicObject(1495, 1582.59998, -1638.05005, 14.87000,   0.00000, 0.00000, -1.40000);
        MapaHall[15] = CreateDynamicObject(2886, 1582.44995, -1637.83997, 14.00000,   0.00000, 0.00000, 178.00000);
        MapaHall[16] = CreateDynamicObject(970, 1544.72998, -1620.41003, 13.20000,   0.00000, 0.00000, 90.00000);
        MapaHall[17] = CreateDynamicObject(16410, 1497.54004, -1691.19995, 14.88000,   0.00000, 0.00000, 11.17000);
        MapaHall[18] = CreateDynamicObject(734, 1496.20996, -1688.32996, 12.53000,   0.00000, 0.00000, 115.05000);
        MapaHall[19] = CreateDynamicObject(19339, 1495.27002, -1692.43994, 13.94000,   0.00000, 0.00000, 18.78000);
        MapaHall[20] = CreateDynamicObject(16374, 1493.03003, -1670.25000, 18.03000,   0.00000, 0.00000, 26.82000);
        MapaHall[21] = CreateDynamicObject(2907, 1490.44995, -1669.81995, 13.65000,   0.00000, 0.00000, 0.00000);
        MapaHall[22] = CreateDynamicObject(19527, 1503.15002, -1714.84998, 13.55000,   0.00000, 0.00000, 0.00000);
        MapaHall[23] = CreateDynamicObject(838, 1494.75000, -1701.01001, 16.08000,   0.00000, 0.00000, 75.79000);
        MapaHall[24] = CreateDynamicObject(16374, 1489.89417, -1682.41943, 18.95000,   0.00000, 0.00000, 83.82000);
        MapaHall[25] = CreateDynamicObject(16374, 1493.14001, -1654.03003, 18.71000,   0.00000, 0.00000, 339.88000);
        MapaHall[26] = CreateDynamicObject(1369, 1500.57996, -1637.84998, 13.67000,   0.00000, 0.00000, 0.00000);
        MapaHall[27] = CreateDynamicObject(19339, 1495.17004, -1705.29004, 13.94000,   0.00000, 0.00000, 89.59000);
        MapaHall[28] = CreateDynamicObject(3106, 1506.46997, -1627.38000, 15.93000,   47.00000, 0.00000, -127.00000);
        MapaHall[29] = CreateDynamicObject(734, 1495.84998, -1710.03003, 12.53000,   0.00000, 0.00000, 63.89000);
        MapaHall[30] = CreateDynamicObject(639, 1487.63000, -1688.09998, 14.17000,   0.00000, 0.00000, 180.00000);
        MapaHall[31] = CreateDynamicObject(19138, 1506.42004, -1627.27002, 15.74000,   0.00000, 0.00000, 0.00000);
        MapaHall[32] = CreateDynamicObject(3106, 1506.46997, -1627.13000, 15.95000,   62.00000, 0.00000, -84.00000);
        MapaHall[33] = CreateDynamicObject(19320, 1506.17004, -1627.25000, 15.93000,   0.00000, 0.00000, 0.00000);
        MapaHall[34] = CreateDynamicObject(19339, 1486.84998, -1666.58997, 13.94000,   0.00000, 0.00000, 358.07999);
        MapaHall[35] = CreateDynamicObject(639, 1485.45996, -1685.69995, 14.17000,   0.00000, 0.00000, -90.00000);
        MapaHall[36] = CreateDynamicObject(19590, 1485.67004, -1688.00000, 13.82000,   98.00000, -33.00000, -18.00000);
        MapaHall[37] = CreateDynamicObject(3092, 1485.71997, -1688.23999, 13.30000,   180.00000, 90.00000, 89.60000);
        MapaHall[38] = CreateDynamicObject(639, 1485.52002, -1688.33997, 16.06000,   0.00000, 90.00000, 0.00000);
        MapaHall[39] = CreateDynamicObject(19838, 1487.10999, -1695.87000, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[40] = CreateDynamicObject(19075, 1485.12000, -1688.20996, 14.54000,   0.00000, 0.00000, 0.00000);
        MapaHall[41] = CreateDynamicObject(19632, 1485.06995, -1688.35999, 13.20000,   0.00000, 0.00000, 0.00000);
        MapaHall[42] = CreateDynamicObject(639, 1485.43994, -1690.71997, 14.17000,   0.00000, 0.00000, 90.00000);
        MapaHall[43] = CreateDynamicObject(3092, 1485.03003, -1689.23999, 13.30000,   180.00000, 98.00000, 40.00000);
        MapaHall[44] = CreateDynamicObject(18691, 1485.02002, -1688.53003, 10.43000,   0.00000, 0.00000, 0.00000);
        MapaHall[45] = CreateDynamicObject(3092, 1484.45996, -1688.09998, 13.30000,   0.00000, 90.00000, 89.59000);
        MapaHall[46] = CreateDynamicObject(19838, 1483.06006, -1679.19995, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[47] = CreateDynamicObject(734, 1482.62000, -1665.90002, 12.53000,   0.00000, 0.00000, 115.05000);
        MapaHall[48] = CreateDynamicObject(12957, 1485.56995, -1700.81995, 13.66000,   0.00000, 0.00000, 286.76001);
        MapaHall[49] = CreateDynamicObject(2908, 1491.10999, -1713.29004, 13.61000,   0.00000, 0.00000, 119.00000);
        MapaHall[50] = CreateDynamicObject(19527, 1490.68994, -1714.84998, 13.55000,   0.00000, 0.00000, 0.00000);
        MapaHall[51] = CreateDynamicObject(16374, 1490.91003, -1715.18994, 20.35000,   0.00000, 0.00000, 0.00000);
        MapaHall[52] = CreateDynamicObject(2908, 1498.43994, -1625.08997, 13.91000,   0.00000, 0.00000, 0.00000);
        MapaHall[53] = CreateDynamicObject(18963, 1483.75000, -1702.10999, 14.15000,   0.00000, 0.00000, 257.76999);
        MapaHall[54] = CreateDynamicObject(2907, 1499.65002, -1623.37000, 13.91000,   0.00000, 0.00000, 0.00000);
        MapaHall[55] = CreateDynamicObject(734, 1501.41003, -1621.60999, 12.53000,   0.00000, 0.00000, 89.18000);
        MapaHall[56] = CreateDynamicObject(335, 1483.55005, -1702.13000, 14.26000,   0.00000, 90.00000, 351.16000);
        MapaHall[57] = CreateDynamicObject(2906, 1498.09998, -1621.68005, 13.91000,   0.00000, 0.00000, 97.85000);
        MapaHall[58] = CreateDynamicObject(19838, 1487.20996, -1715.14001, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[59] = CreateDynamicObject(19838, 1482.31006, -1706.18994, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[60] = CreateDynamicObject(3092, 1482.03003, -1643.42004, 16.03000,   0.00000, 62.00000, 90.00000);
        MapaHall[61] = CreateDynamicObject(838, 1475.32996, -1667.54004, 16.08000,   0.00000, 0.00000, 47.47000);
        MapaHall[62] = CreateDynamicObject(3524, 1484.37000, -1715.95996, 14.44000,   0.00000, 0.00000, 0.00000);
        MapaHall[63] = CreateDynamicObject(19838, 1474.62000, -1695.66003, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[64] = CreateDynamicObject(19527, 1497.96997, -1615.54004, 13.79000,   0.00000, 0.00000, 0.00000);
        MapaHall[65] = CreateDynamicObject(18862, 1479.42004, -1639.72998, 17.30000,   0.00000, 0.00000, 0.00000);
        MapaHall[66] = CreateDynamicObject(19320, 1481.92004, -1716.83997, 13.39000,   0.00000, 0.00000, 0.00000);
        MapaHall[67] = CreateDynamicObject(3106, 1482.05005, -1717.12000, 13.45000,   -18.00000, -171.00000, -142.00000);
        MapaHall[68] = CreateDynamicObject(19138, 1481.92004, -1717.13000, 13.27000,   0.00000, 0.00000, 277.28000);
        MapaHall[69] = CreateDynamicObject(3106, 1481.83997, -1717.13000, 13.45000,   0.00000, 142.00000, 84.00000);
        MapaHall[70] = CreateDynamicObject(19838, 1471.06995, -1685.73999, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[71] = CreateDynamicObject(3092, 1474.67004, -1642.66003, 15.43000,   0.00000, 62.00000, 25.00000);
        MapaHall[72] = CreateDynamicObject(932, 1471.81995, -1700.39001, 13.05000,   0.00000, 0.00000, 74.10000);
        MapaHall[73] = CreateDynamicObject(3434, 1478.39001, -1717.83997, 21.71000,   0.00000, 0.00000, 0.00000);
        MapaHall[74] = CreateDynamicObject(19339, 1489.52002, -1615.83997, 13.41000,   0.00000, 0.00000, 0.00000);
        MapaHall[75] = CreateDynamicObject(6865, 1473.94995, -1639.08997, 15.10000,   -40.00000, 0.00000, 335.42999);
        MapaHall[76] = CreateDynamicObject(19838, 1472.55005, -1710.18994, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[77] = CreateDynamicObject(19320, 1474.85999, -1716.83997, 13.39000,   0.00000, 0.00000, 0.00000);
        MapaHall[78] = CreateDynamicObject(3106, 1474.95996, -1717.14001, 13.43000,   324.00000, -91.00000, -98.00000);
        MapaHall[79] = CreateDynamicObject(19138, 1474.84998, -1717.13000, 13.26000,   0.00000, 0.00000, 264.48999);
        MapaHall[80] = CreateDynamicObject(3106, 1474.70996, -1717.12000, 13.42000,   0.00000, 142.00000, 76.00000);
        MapaHall[81] = CreateDynamicObject(337, 1464.45996, -1685.31995, 14.19000,   180.00000, 0.00000, 0.00000);
        MapaHall[82] = CreateDynamicObject(16690, 1463.82996, -1673.42004, 17.11000,   0.00000, 0.00000, 90.02000);
        MapaHall[83] = CreateDynamicObject(3524, 1485.55005, -1615.76001, 14.96000,   0.00000, 0.00000, 180.00000);
        MapaHall[84] = CreateDynamicObject(3524, 1472.39001, -1715.95996, 14.44000,   0.00000, 0.00000, 0.00000);
        MapaHall[85] = CreateDynamicObject(16052, 1465.29004, -1699.04004, 15.13000,   0.00000, 0.00000, 270.00000);
        MapaHall[86] = CreateDynamicObject(19838, 1471.43005, -1717.60999, 13.05000,   0.00000, 0.00000, 0.00000);
        MapaHall[87] = CreateDynamicObject(2905, 1466.27002, -1706.60999, 13.62000,   0.00000, 0.00000, 282.72000);
        MapaHall[88] = CreateDynamicObject(2905, 1466.14001, -1707.65002, 13.62000,   0.00000, 0.00000, 233.36000);
        MapaHall[89] = CreateDynamicObject(8131, 1479.68994, -1618.60999, 12.99000,   0.00000, 0.00000, 0.00000);
        MapaHall[90] = CreateDynamicObject(734, 1460.94995, -1687.06006, 12.53000,   0.00000, 0.00000, 191.70000);
        MapaHall[91] = CreateDynamicObject(11427, 1479.66003, -1617.77002, 20.19000,   0.00000, 0.00000, -90.00000);
        MapaHall[92] = CreateDynamicObject(11704, 1459.20996, -1673.76001, 18.85000,   0.00000, 0.00000, 0.00000);
        MapaHall[93] = CreateDynamicObject(11704, 1479.65002, -1616.12000, 16.34000,   0.00000, 0.00000, 180.00000);
        MapaHall[94] = CreateDynamicObject(16410, 1460.56995, -1695.82996, 14.88000,   0.00000, 0.00000, 11.17000);
        MapaHall[95] = CreateDynamicObject(19527, 1466.35999, -1714.82996, 13.55000,   0.00000, 0.00000, 0.00000);
        MapaHall[96] = CreateDynamicObject(19339, 1461.92004, -1704.06995, 13.94000,   0.00000, 0.00000, 0.00000);
        MapaHall[97] = CreateDynamicObject(19339, 1459.06006, -1692.81006, 13.94000,   0.00000, 0.00000, 0.00000);
        MapaHall[98] = CreateDynamicObject(734, 1460.98999, -1710.13000, 12.53000,   0.00000, 0.00000, 0.00000);
        MapaHall[99] = CreateDynamicObject(3524, 1473.89001, -1615.76001, 14.96000,   0.00000, 0.00000, 180.00000);
        MapaHall[100] = CreateDynamicObject(3594, 1459.19995, -1639.41003, 13.56000,   0.00000, 0.00000, 101.11000);
        MapaHall[101] = CreateDynamicObject(2905, 1458.82996, -1639.35999, 14.06000,   0.00000, 0.00000, 53.86000);
        MapaHall[102] = CreateDynamicObject(19527, 1453.85999, -1714.82996, 13.55000,   0.00000, 0.00000, 0.00000);
        MapaHall[103] = CreateDynamicObject(2745, 1460.88000, -1620.62000, 14.29000,   0.00000, 0.00000, 191.16000);
        MapaHall[104] = CreateDynamicObject(11734, 1460.78003, -1617.90002, 13.83009,   -10.75946, 0.00000, 95.00000);
        MapaHall[105] = CreateDynamicObject(734, 1458.16003, -1622.22998, 12.53000,   0.00000, 0.00000, 169.34000);
        MapaHall[106] = CreateDynamicObject(19320, 1455.96997, -1615.45996, 14.13000,   0.00000, 0.00000, 0.00000);
        MapaHall[107] = CreateDynamicObject(19528, 1455.96997, -1615.41003, 14.32000,   0.00000, -90.00000, 0.00000);
        MapaHall[108] = CreateDynamicObject(3106, 1456.06995, -1615.16003, 14.16000,   0.00000, -69.00000, 10.00000);
        MapaHall[109] = CreateDynamicObject(19138, 1455.96997, -1615.18994, 13.98000,   0.00000, 0.00000, 92.04000);
        MapaHall[110] = CreateDynamicObject(3106, 1455.85999, -1615.16003, 14.15000,   76.00000, -11.00000, 0.00000);
        MapaHall[111] = CreateDynamicObject(19320, 1184.30005, -1296.93005, 14.76000,   0.00000, 0.00000, 0.00000);
        MapaHall[112] = CreateDynamicObject(19527, 1184.67004, -1300.79004, 13.21000,   0.00000, 0.00000, 298.10999);
        MapaHall[113] = CreateDynamicObject(19626, 1184.65002, -1300.41003, 14.13000,   -33.00000, -11.00000, 0.00000);
        MapaHall[114] = CreateDynamicObject(3106, 1184.46997, -1297.18005, 14.79000,   -127.00000, -40.00000, 0.00000);
        MapaHall[115] = CreateDynamicObject(11712, 1184.59998, -1297.14001, 14.67000,   180.00000, 0.00000, 320.00000);
        MapaHall[116] = CreateDynamicObject(3106, 1184.59998, -1297.01001, 14.79000,   0.00000, -135.00000, 0.00000);

        //PUESTO CAMIONERO
        PuestoCamioneros[0] = CreateDynamicObject(19583, -1716.49207, -39.66760, 2.58220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[1] = CreateDynamicObject(19836, -1716.51208, -39.90760, 2.58220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[2] = CreateDynamicObject(2597, -1718.18213, -41.30760, 3.40220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[3] = CreateDynamicObject(18735, -1716.04211, -40.24760, 2.55220,   0.00000, -40.00000, 180.00000);
        PuestoCamioneros[4] = CreateDynamicObject(19626, -1715.16211, -40.29760, 3.42220,   -18.00000, 0.00000, 0.00000);
        PuestoCamioneros[5] = CreateDynamicObject(18963, -1715.23206, -40.64760, 3.38220,   0.00000, -40.00000, 0.00000);
        PuestoCamioneros[6] = CreateDynamicObject(19527, -1715.12207, -40.62760, 2.56220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[7] = CreateDynamicObject(3106, -1715.66211, -41.42760, 4.38220,   90.00000, 0.00000, 0.00000);
        PuestoCamioneros[8] = CreateDynamicObject(19138, -1715.62207, -41.45760, 4.22220,   0.00000, 0.00000, 108.13000);
        PuestoCamioneros[9] = CreateDynamicObject(3106, -1715.48206, -41.44760, 4.38220,   90.00000, 0.00000, 0.00000);
        PuestoCamioneros[10] = CreateDynamicObject(19138, -1715.50208, -41.46760, 4.22220,   0.00000, 0.00000, 71.24000);
        PuestoCamioneros[11] = CreateDynamicObject(19320, -1715.58203, -41.72760, 4.36220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[12] = CreateDynamicObject(19919, -1715.56213, -41.74760, 2.56220,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[13] = CreateDynamicObject(3106, -1702.89001, 68.67000, 8.94000,   222.00000, 0.00000, 0.00000);
        PuestoCamioneros[14] = CreateDynamicObject(19138, -1702.76001, 68.68000, 8.78000,   0.00000, 0.00000, 271.00000);
        PuestoCamioneros[15] = CreateDynamicObject(3106, -1702.63000, 68.67000, 8.95000,   84.00000, -142.00000, 0.00000);
        PuestoCamioneros[16] = CreateDynamicObject(19320, -1702.75000, 68.95000, 8.93000,   0.00000, 0.00000, 0.00000);
        PuestoCamioneros[17] = CreateDynamicObject(19528, -1702.76001, 68.95000, 9.13000,   0.00000, -90.00000, 173.98000);

        EstMuni[0] = CreateDynamicObject(2597, 152.06090, -288.74341, 1.42560,   0.00000, 0.00000, 0.00000);
        EstMuni[1] = CreateDynamicObject(19320, 154.66089, -289.16339, 2.38560,   0.00000, 0.00000, 0.00000);
        EstMuni[2] = CreateDynamicObject(19919, 154.68089, -289.18341, 0.58560,   0.00000, 0.00000, 0.00000);
        EstMuni[3] = CreateDynamicObject(3106, 154.58090, -288.86340, 2.40560,   90.00000, 0.00000, 0.00000);
        EstMuni[4] = CreateDynamicObject(19138, 154.62090, -288.89340, 2.24560,   0.00000, 0.00000, 108.13000);
        EstMuni[5] = CreateDynamicObject(19138, 154.74089, -288.90338, 2.24560,   0.00000, 0.00000, 71.24000);
        EstMuni[6] = CreateDynamicObject(3106, 154.76089, -288.88339, 2.40560,   90.00000, 0.00000, 0.00000);
        EstMuni[7] = CreateDynamicObject(19836, 153.73090, -287.34338, 0.60560,   0.00000, 0.00000, 0.00000);
        EstMuni[8] = CreateDynamicObject(18735, 154.20090, -287.68341, 0.57560,   0.00000, -40.00000, 180.00000);
        EstMuni[9] = CreateDynamicObject(19583, 153.75090, -287.10339, 0.60560,   0.00000, 0.00000, 0.00000);
        EstMuni[10] = CreateDynamicObject(18963, 155.01089, -288.08340, 1.40560,   0.00000, -40.00000, 0.00000);
        EstMuni[11] = CreateDynamicObject(19527, 155.12090, -288.06339, 0.58560,   0.00000, 0.00000, 0.00000);
        EstMuni[12] = CreateDynamicObject(19626, 155.08090, -287.73340, 1.44560,   -18.00000, 0.00000, 0.00000);
        EstMuni[13] = CreateDynamicObject(12934, 133.92000, -265.03000, 3.91000,   0.00000, 0.00000, 0.00000);

        //Puestos puente bayside
        PuestosPuentesote[0] = CreateDynamicObject(19583, -2673.86084, 1373.75330, 6.11630,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[1] = CreateDynamicObject(19836, -2673.88086, 1373.51331, 6.11630,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[2] = CreateDynamicObject(2597, -2675.55078, 1372.11340, 6.93630,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[3] = CreateDynamicObject(19583, -2547.09961, 1215.41406, 36.44940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[4] = CreateDynamicObject(19626, -2672.34131, 1372.18262, 6.86262,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[5] = CreateDynamicObject(19527, -2672.47510, 1372.11450, 6.10206,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[6] = CreateDynamicObject(18963, -2672.60229, 1372.03650, 6.86260,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[7] = CreateDynamicObject(19320, -2546.18970, 1213.35413, 38.22940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[8] = CreateDynamicObject(3106, -2546.08960, 1213.63416, 38.24940,   90.00000, 0.00000, 0.00000);
        PuestosPuentesote[9] = CreateDynamicObject(19138, -2546.10962, 1213.61414, 38.08940,   0.00000, 0.00000, 71.24000);
        PuestosPuentesote[10] = CreateDynamicObject(3106, -2546.26953, 1213.65417, 38.24940,   90.00000, 0.00000, 0.00000);
        PuestosPuentesote[11] = CreateDynamicObject(19626, -2545.76953, 1214.78418, 37.28940,   -18.00000, 0.00000, 0.00000);
        PuestosPuentesote[12] = CreateDynamicObject(19919, -2546.16968, 1213.33411, 36.42940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[13] = CreateDynamicObject(19138, -2546.22974, 1213.62415, 38.08940,   0.00000, 0.00000, 108.13000);
        PuestosPuentesote[14] = CreateDynamicObject(19527, -2545.72974, 1214.45410, 36.42940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[15] = CreateDynamicObject(2597, -2548.78955, 1213.77417, 37.26940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[16] = CreateDynamicObject(18735, -2546.64966, 1214.83411, 36.41940,   0.00000, -40.00000, 180.00000);
        PuestosPuentesote[17] = CreateDynamicObject(19836, -2547.11963, 1215.17407, 36.44940,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[18] = CreateDynamicObject(18963, -2545.83960, 1214.43408, 37.24940,   0.00000, -40.00000, 0.00000);
        PuestosPuentesote[19] = CreateDynamicObject(19919, -2673.88013, 1371.80310, 6.10010,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[20] = CreateDynamicObject(19320, -2673.85962, 1371.81372, 7.56608,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[21] = CreateDynamicObject(19138, -2673.80200, 1372.08154, 7.44550,   0.00000, 0.00000, 64.60238);
        PuestosPuentesote[22] = CreateDynamicObject(19138, -2673.91846, 1372.08411, 7.44550,   0.00000, 0.00000, 114.09920);
        PuestosPuentesote[23] = CreateDynamicObject(3106, -2673.79541, 1372.10925, 7.59060,   0.00000, 0.00000, 0.00000);
        PuestosPuentesote[24] = CreateDynamicObject(3106, -2673.92847, 1372.11060, 7.58370,   0.00000, 0.00000, 0.00000);

        PUnity[0] = CreateDynamicObject(19626, 1703.30005, -1870.21863, 13.43730,   -18.00000, 0.00000, 0.00000);
        PUnity[1] = CreateDynamicObject(19527, 1703.34009, -1870.54871, 12.57730,   0.00000, 0.00000, 0.00000);
        PUnity[2] = CreateDynamicObject(18963, 1703.23010, -1870.56873, 13.39730,   0.00000, -40.00000, 0.00000);
        PUnity[3] = CreateDynamicObject(3106, 1702.98010, -1871.36865, 14.39730,   90.00000, 0.00000, 0.00000);
        PUnity[4] = CreateDynamicObject(19138, 1702.96008, -1871.38867, 14.23730,   0.00000, 0.00000, 71.24000);
        PUnity[5] = CreateDynamicObject(19138, 1702.84009, -1871.37866, 14.23730,   0.00000, 0.00000, 108.13000);
        PUnity[6] = CreateDynamicObject(19919, 1702.90002, -1871.66870, 12.57730,   0.00000, 0.00000, 0.00000);
        PUnity[7] = CreateDynamicObject(19320, 1702.88013, -1871.64868, 14.37730,   0.00000, 0.00000, 0.00000);
        PUnity[8] = CreateDynamicObject(3106, 1702.80005, -1871.34863, 14.39730,   90.00000, 0.00000, 0.00000);
        PUnity[9] = CreateDynamicObject(18735, 1702.42004, -1870.16870, 12.56730,   0.00000, -40.00000, 180.00000);
        PUnity[10] = CreateDynamicObject(19583, 1701.97009, -1869.58875, 12.59730,   0.00000, 0.00000, 0.00000);
        PUnity[11] = CreateDynamicObject(19836, 1701.95007, -1869.82874, 12.59730,   0.00000, 0.00000, 0.00000);
        PUnity[12] = CreateDynamicObject(2597, 1700.28003, -1871.22864, 13.41730,   0.00000, 0.00000, 0.00000);
        PUnity[13] = CreateDynamicObject(19626, 1692.49573, -1973.77905, 8.69220,   -18.00000, 0.00000, 0.00000);
        PUnity[14] = CreateDynamicObject(19583, 1691.16577, -1973.14917, 7.85220,   0.00000, 0.00000, 0.00000);
        PUnity[15] = CreateDynamicObject(19836, 1691.14575, -1973.38916, 7.85220,   0.00000, 0.00000, 0.00000);
        PUnity[16] = CreateDynamicObject(19527, 1692.53577, -1974.10913, 7.83220,   0.00000, 0.00000, 0.00000);
        PUnity[17] = CreateDynamicObject(18963, 1692.42578, -1974.12915, 8.65220,   0.00000, -40.00000, 0.00000);
        PUnity[18] = CreateDynamicObject(18735, 1691.61572, -1973.72913, 7.82220,   0.00000, -40.00000, 180.00000);
        PUnity[19] = CreateDynamicObject(3106, 1692.17578, -1974.92908, 9.65220,   90.00000, 0.00000, 0.00000);
        PUnity[20] = CreateDynamicObject(19138, 1692.15576, -1974.94910, 9.49220,   0.00000, 0.00000, 71.24000);
        PUnity[21] = CreateDynamicObject(3106, 1691.99573, -1974.90906, 9.65220,   90.00000, 0.00000, 0.00000);
        PUnity[22] = CreateDynamicObject(19138, 1692.03577, -1974.93909, 9.49220,   0.00000, 0.00000, 108.13000);
        PUnity[23] = CreateDynamicObject(19320, 1692.07581, -1975.20911, 9.63220,   0.00000, 0.00000, 0.00000);
        PUnity[24] = CreateDynamicObject(19919, 1692.09570, -1975.22913, 7.83220,   0.00000, 0.00000, 0.00000);
        PUnity[25] = CreateDynamicObject(2597, 1689.47571, -1974.78906, 8.67220,   0.00000, 0.00000, 0.00000);

        PMontana[0] = CreateDynamicObject(19583, 2353.39893, -643.47888, 127.11729,   0.00000, 0.00000, 0.00000);
        PMontana[1] = CreateDynamicObject(2597, 2351.70898, -645.11890, 127.93730,   0.00000, 0.00000, 0.00000);
        PMontana[2] = CreateDynamicObject(19836, 2353.37891, -643.71887, 127.11729,   0.00000, 0.00000, 0.00000);
        PMontana[3] = CreateDynamicObject(18735, 2353.84888, -644.05890, 127.08730,   0.00000, -40.00000, 180.00000);
        PMontana[4] = CreateDynamicObject(19626, 2354.72900, -644.10889, 127.95730,   -18.00000, 0.00000, 0.00000);
        PMontana[5] = CreateDynamicObject(18963, 2354.65894, -644.45886, 127.91730,   0.00000, -40.00000, 0.00000);
        PMontana[6] = CreateDynamicObject(19527, 2354.76880, -644.43890, 127.09730,   0.00000, 0.00000, 0.00000);
        PMontana[7] = CreateDynamicObject(3106, 2354.22900, -645.23889, 128.91730,   90.00000, 0.00000, 0.00000);
        PMontana[8] = CreateDynamicObject(19138, 2354.26880, -645.26886, 128.75729,   0.00000, 0.00000, 108.13000);
        PMontana[9] = CreateDynamicObject(19138, 2354.38892, -645.27887, 128.75729,   0.00000, 0.00000, 71.24000);
        PMontana[10] = CreateDynamicObject(3106, 2354.40894, -645.25891, 128.91730,   90.00000, 0.00000, 0.00000);
        PMontana[11] = CreateDynamicObject(19919, 2354.32886, -645.55890, 127.09730,   0.00000, 0.00000, 0.00000);
        PMontana[12] = CreateDynamicObject(19320, 2354.30884, -645.53888, 128.89729,   0.00000, 0.00000, 0.00000);

        PBell[0] = CreateDynamicObject(2597, -2674.17773, 228.83400, 4.18910,   0.00000, 0.00000, 0.00000);
        PBell[1] = CreateDynamicObject(19919, -2671.55786, 228.39400, 3.34910,   0.00000, 0.00000, 0.00000);
        PBell[2] = CreateDynamicObject(19320, -2671.57788, 228.41400, 5.14910,   0.00000, 0.00000, 0.00000);
        PBell[3] = CreateDynamicObject(19138, -2671.61792, 228.68399, 5.00910,   0.00000, 0.00000, 108.13000);
        PBell[4] = CreateDynamicObject(19138, -2671.49780, 228.67400, 5.00910,   0.00000, 0.00000, 71.24000);
        PBell[5] = CreateDynamicObject(3106, -2671.65771, 228.71400, 5.16910,   90.00000, 0.00000, 0.00000);
        PBell[6] = CreateDynamicObject(3106, -2671.47778, 228.69400, 5.16910,   90.00000, 0.00000, 0.00000);
        PBell[7] = CreateDynamicObject(18963, -2671.22778, 229.49400, 4.16910,   0.00000, -40.00000, 0.00000);
        PBell[8] = CreateDynamicObject(19527, -2671.11792, 229.51399, 3.34910,   0.00000, 0.00000, 0.00000);
        PBell[9] = CreateDynamicObject(18735, -2672.03784, 229.89400, 3.33910,   0.00000, -40.00000, 180.00000);
        PBell[10] = CreateDynamicObject(19626, -2671.15771, 229.84399, 4.20910,   -18.00000, 0.00000, 0.00000);
        PBell[11] = CreateDynamicObject(19836, -2672.50781, 230.23399, 3.36910,   0.00000, 0.00000, 0.00000);
        PBell[12] = CreateDynamicObject(19583, -2672.48779, 230.47400, 3.36910,   0.00000, 0.00000, 0.00000);

        PTung[0] = CreateDynamicObject(19919, -2748.94336, 196.10699, 6.11540,   0.00000, 0.00000, 0.00000);
        PTung[1] = CreateDynamicObject(19320, -2748.96338, 196.12700, 7.91540,   0.00000, 0.00000, 0.00000);
        PTung[2] = CreateDynamicObject(19138, -2748.88330, 196.38699, 7.77540,   0.00000, 0.00000, 71.24000);
        PTung[3] = CreateDynamicObject(3106, -2748.86328, 196.40700, 7.93540,   90.00000, 0.00000, 0.00000);
        PTung[4] = CreateDynamicObject(19138, -2749.00342, 196.39699, 7.77540,   0.00000, 0.00000, 108.13000);
        PTung[5] = CreateDynamicObject(3106, -2749.04321, 196.42700, 7.93540,   90.00000, 0.00000, 0.00000);
        PTung[6] = CreateDynamicObject(2597, -2751.56323, 196.54700, 6.95540,   0.00000, 0.00000, 0.00000);
        PTung[7] = CreateDynamicObject(19527, -2748.50342, 197.22699, 6.11540,   0.00000, 0.00000, 0.00000);
        PTung[8] = CreateDynamicObject(18963, -2748.61328, 197.20700, 6.93540,   0.00000, -40.00000, 0.00000);
        PTung[9] = CreateDynamicObject(19626, -2748.54321, 197.55699, 6.97540,   -18.00000, 0.00000, 0.00000);
        PTung[10] = CreateDynamicObject(18735, -2749.42334, 197.60699, 6.10540,   0.00000, -40.00000, 180.00000);
        PTung[11] = CreateDynamicObject(19836, -2749.89331, 197.94699, 6.13540,   0.00000, 0.00000, 0.00000);
        PTung[12] = CreateDynamicObject(19583, -2749.87329, 198.18700, 6.13540,   0.00000, 0.00000, 0.00000);

        PColinas[0] = CreateDynamicObject(2597, 2182.36377, -1344.89929, 23.83190,   0.00000, 0.00000, 0.00000);
        PColinas[1] = CreateDynamicObject(19320, 2184.96362, -1345.31934, 24.79190,   0.00000, 0.00000, 0.00000);
        PColinas[2] = CreateDynamicObject(3106, 2184.88379, -1345.01929, 24.81190,   90.00000, 0.00000, 0.00000);
        PColinas[3] = CreateDynamicObject(19919, 2184.98364, -1345.33936, 22.99190,   0.00000, 0.00000, 0.00000);
        PColinas[4] = CreateDynamicObject(19138, 2184.92358, -1345.04932, 24.65190,   0.00000, 0.00000, 108.13000);
        PColinas[5] = CreateDynamicObject(19138, 2185.04370, -1345.05933, 24.65190,   0.00000, 0.00000, 71.24000);
        PColinas[6] = CreateDynamicObject(19836, 2184.03369, -1343.49939, 23.01190,   0.00000, 0.00000, 0.00000);
        PColinas[7] = CreateDynamicObject(3106, 2185.06372, -1345.03931, 24.81190,   90.00000, 0.00000, 0.00000);
        PColinas[8] = CreateDynamicObject(19583, 2184.05371, -1343.25940, 23.01190,   0.00000, 0.00000, 0.00000);
        PColinas[9] = CreateDynamicObject(18735, 2184.50366, -1343.83936, 22.98190,   0.00000, -40.00000, 180.00000);
        PColinas[10] = CreateDynamicObject(18963, 2185.31372, -1344.23938, 23.81190,   0.00000, -40.00000, 0.00000);
        PColinas[11] = CreateDynamicObject(19527, 2185.42358, -1344.21936, 22.99190,   0.00000, 0.00000, 0.00000);
        PColinas[12] = CreateDynamicObject(19626, 2185.38379, -1343.88928, 23.85190,   -18.00000, 0.00000, 0.00000);

        PCNN[0] = CreateDynamicObject(19583, -2490.02905, -716.81592, 138.34779,   0.00000, 0.00000, 0.00000);
        PCNN[1] = CreateDynamicObject(19836, -2490.04907, -717.05591, 138.34779,   0.00000, 0.00000, 0.00000);
        PCNN[2] = CreateDynamicObject(18735, -2489.57910, -717.39594, 138.31779,   0.00000, -40.00000, 180.00000);
        PCNN[3] = CreateDynamicObject(19626, -2488.69897, -717.44592, 139.18779,   -18.00000, 0.00000, 0.00000);
        PCNN[4] = CreateDynamicObject(19527, -2488.65918, -717.77594, 138.32780,   0.00000, 0.00000, 0.00000);
        PCNN[5] = CreateDynamicObject(18963, -2488.76904, -717.79590, 139.14780,   0.00000, -40.00000, 0.00000);
        PCNN[6] = CreateDynamicObject(3106, -2489.01904, -718.59595, 140.14780,   90.00000, 0.00000, 0.00000);
        PCNN[7] = CreateDynamicObject(19138, -2489.03906, -718.61591, 139.98779,   0.00000, 0.00000, 71.24000);
        PCNN[8] = CreateDynamicObject(3106, -2489.19897, -718.57593, 140.14780,   90.00000, 0.00000, 0.00000);
        PCNN[9] = CreateDynamicObject(19138, -2489.15918, -718.60590, 139.98779,   0.00000, 0.00000, 108.13000);
        PCNN[10] = CreateDynamicObject(19919, -2489.09912, -718.89594, 138.32780,   0.00000, 0.00000, 0.00000);
        PCNN[11] = CreateDynamicObject(2597, -2491.71899, -718.45593, 139.16780,   0.00000, 0.00000, 0.00000);
        PCNN[12] = CreateDynamicObject(19320, -2489.11914, -718.87592, 140.12779,   0.00000, 0.00000, 0.00000);

        PBAY[0] = CreateDynamicObject(19583, -2490.07080, 2358.13599, 9.30170,   0.00000, 0.00000, 0.00000);
        PBAY[1] = CreateDynamicObject(2597, -2491.76074, 2356.49609, 10.12170,   0.00000, 0.00000, 0.00000);
        PBAY[2] = CreateDynamicObject(19836, -2490.09082, 2357.89600, 9.30170,   0.00000, 0.00000, 0.00000);
        PBAY[3] = CreateDynamicObject(18735, -2489.62085, 2357.55615, 9.27170,   0.00000, -40.00000, 180.00000);
        PBAY[4] = CreateDynamicObject(19626, -2488.74072, 2357.50610, 10.14170,   -18.00000, 0.00000, 0.00000);
        PBAY[5] = CreateDynamicObject(18963, -2488.81079, 2357.15601, 10.10170,   0.00000, -40.00000, 0.00000);
        PBAY[6] = CreateDynamicObject(19527, -2488.70093, 2357.17603, 9.28170,   0.00000, 0.00000, 0.00000);
        PBAY[7] = CreateDynamicObject(3106, -2489.24072, 2356.37598, 11.10170,   90.00000, 0.00000, 0.00000);
        PBAY[8] = CreateDynamicObject(19138, -2489.20093, 2356.34595, 10.94170,   0.00000, 0.00000, 108.13000);
        PBAY[9] = CreateDynamicObject(3106, -2489.06079, 2356.35596, 11.10170,   90.00000, 0.00000, 0.00000);
        PBAY[10] = CreateDynamicObject(19138, -2489.08081, 2356.33594, 10.94170,   0.00000, 0.00000, 71.24000);
        PBAY[11] = CreateDynamicObject(19320, -2489.16089, 2356.07593, 11.08170,   0.00000, 0.00000, 0.00000);
        PBAY[12] = CreateDynamicObject(19919, -2489.14087, 2356.05615, 9.28170,   0.00000, 0.00000, 0.00000);

        PELQUE[0] = CreateDynamicObject(2597, -1318.29651, 2508.72485, 86.88950,   0.00000, 0.00000, 0.00000);
        PELQUE[1] = CreateDynamicObject(19583, -1316.60645, 2510.36475, 86.06950,   0.00000, 0.00000, 0.00000);
        PELQUE[2] = CreateDynamicObject(19836, -1316.62646, 2510.12476, 86.06950,   0.00000, 0.00000, 0.00000);
        PELQUE[3] = CreateDynamicObject(18735, -1316.15649, 2509.78491, 86.03950,   0.00000, -40.00000, 180.00000);
        PELQUE[4] = CreateDynamicObject(19919, -1315.67651, 2508.28491, 86.04950,   0.00000, 0.00000, 0.00000);
        PELQUE[5] = CreateDynamicObject(3106, -1315.77649, 2508.60474, 87.86950,   90.00000, 0.00000, 0.00000);
        PELQUE[6] = CreateDynamicObject(19527, -1315.23645, 2509.40479, 86.04950,   0.00000, 0.00000, 0.00000);
        PELQUE[7] = CreateDynamicObject(19138, -1315.73645, 2508.57471, 87.70950,   0.00000, 0.00000, 108.13000);
        PELQUE[8] = CreateDynamicObject(19626, -1315.27649, 2509.73486, 86.90950,   -18.00000, 0.00000, 0.00000);
        PELQUE[9] = CreateDynamicObject(18963, -1315.34644, 2509.38477, 86.86950,   0.00000, -40.00000, 0.00000);
        PELQUE[10] = CreateDynamicObject(19138, -1315.61646, 2508.56470, 87.70950,   0.00000, 0.00000, 71.24000);
        PELQUE[11] = CreateDynamicObject(19320, -1315.69641, 2508.30469, 87.84950,   0.00000, 0.00000, 0.00000);
        PELQUE[12] = CreateDynamicObject(3106, -1315.59644, 2508.58472, 87.86950,   90.00000, 0.00000, 0.00000);

        PEME[0] = CreateDynamicObject(19527, 2108.28931, 2204.73608, 9.82780,   0.00000, 0.00000, 0.00000);
        PEME[1] = CreateDynamicObject(19919, 2107.84937, 2203.61621, 9.82780,   0.00000, 0.00000, 0.00000);
        PEME[2] = CreateDynamicObject(19320, 2107.82935, 2203.63599, 11.62780,   0.00000, 0.00000, 0.00000);
        PEME[3] = CreateDynamicObject(3106, 2107.92944, 2203.91602, 11.64780,   90.00000, 0.00000, 0.00000);
        PEME[4] = CreateDynamicObject(2597, 2105.22949, 2204.05615, 10.66780,   0.00000, 0.00000, 0.00000);
        PEME[5] = CreateDynamicObject(19836, 2106.89941, 2205.45605, 9.84780,   0.00000, 0.00000, 0.00000);
        PEME[6] = CreateDynamicObject(19583, 2106.91943, 2205.69604, 9.84780,   0.00000, 0.00000, 0.00000);
        PEME[7] = CreateDynamicObject(18735, 2107.36938, 2205.11621, 9.81780,   0.00000, -40.00000, 180.00000);
        PEME[8] = CreateDynamicObject(3106, 2107.74951, 2203.93604, 11.64780,   90.00000, 0.00000, 0.00000);
        PEME[9] = CreateDynamicObject(19626, 2108.24951, 2205.06616, 10.68780,   -18.00000, 0.00000, 0.00000);
        PEME[10] = CreateDynamicObject(19138, 2107.78931, 2203.90601, 11.48780,   0.00000, 0.00000, 108.13000);
        PEME[11] = CreateDynamicObject(18963, 2108.17944, 2204.71606, 10.64780,   0.00000, -40.00000, 0.00000);
        PEME[12] = CreateDynamicObject(19138, 2107.90942, 2203.89600, 11.48780,   0.00000, 0.00000, 71.24000);

        PTRANS[0] = CreateDynamicObject(19919, 1033.78369, 2095.76099, 9.82780,   0.00000, 0.00000, 0.00000);
        PTRANS[1] = CreateDynamicObject(19320, 1033.76379, 2095.78076, 11.62780,   0.00000, 0.00000, 0.00000);
        PTRANS[2] = CreateDynamicObject(3106, 1033.86377, 2096.06079, 11.64780,   90.00000, 0.00000, 0.00000);
        PTRANS[3] = CreateDynamicObject(19138, 1033.84375, 2096.04077, 11.48780,   0.00000, 0.00000, 71.24000);
        PTRANS[4] = CreateDynamicObject(19527, 1034.22375, 2096.88086, 9.82780,   0.00000, 0.00000, 0.00000);
        PTRANS[5] = CreateDynamicObject(19138, 1033.72375, 2096.05078, 11.48780,   0.00000, 0.00000, 108.13000);
        PTRANS[6] = CreateDynamicObject(18963, 1034.11377, 2096.86084, 10.64780,   0.00000, -40.00000, 0.00000);
        PTRANS[7] = CreateDynamicObject(3106, 1033.68372, 2096.08081, 11.64780,   90.00000, 0.00000, 0.00000);
        PTRANS[8] = CreateDynamicObject(19626, 1034.18372, 2097.21094, 10.68780,   -18.00000, 0.00000, 0.00000);
        PTRANS[9] = CreateDynamicObject(18735, 1033.30371, 2097.26099, 9.81780,   0.00000, -40.00000, 180.00000);
        PTRANS[10] = CreateDynamicObject(19836, 1032.83374, 2097.60083, 9.84780,   0.00000, 0.00000, 0.00000);
        PTRANS[11] = CreateDynamicObject(19583, 1032.85376, 2097.84082, 9.84780,   0.00000, 0.00000, 0.00000);
        PTRANS[12] = CreateDynamicObject(2597, 1031.16370, 2096.20093, 10.66780,   0.00000, 0.00000, 0.00000);

        PESTALV[0] = CreateDynamicObject(19583, 1098.56213, 1401.01672, 5.66030,   0.00000, 0.00000, 0.00000);
        PESTALV[1] = CreateDynamicObject(19836, 1098.54211, 1400.77673, 5.66030,   0.00000, 0.00000, 0.00000);
        PESTALV[2] = CreateDynamicObject(2597, 1096.87207, 1399.37683, 6.48030,   0.00000, 0.00000, 0.00000);
        PESTALV[3] = CreateDynamicObject(18735, 1099.01208, 1400.43677, 5.63030,   0.00000, -40.00000, 180.00000);
        PESTALV[4] = CreateDynamicObject(19626, 1099.89209, 1400.38684, 6.50030,   -18.00000, 0.00000, 0.00000);
        PESTALV[5] = CreateDynamicObject(18963, 1099.82214, 1400.03674, 6.46030,   0.00000, -40.00000, 0.00000);
        PESTALV[6] = CreateDynamicObject(19527, 1099.93213, 1400.05676, 5.64030,   0.00000, 0.00000, 0.00000);
        PESTALV[7] = CreateDynamicObject(3106, 1099.39209, 1399.25684, 7.46030,   90.00000, 0.00000, 0.00000);
        PESTALV[8] = CreateDynamicObject(19138, 1099.43213, 1399.22681, 7.30030,   0.00000, 0.00000, 108.13000);
        PESTALV[9] = CreateDynamicObject(3106, 1099.57214, 1399.23682, 7.46030,   90.00000, 0.00000, 0.00000);
        PESTALV[10] = CreateDynamicObject(19138, 1099.55212, 1399.21680, 7.30030,   0.00000, 0.00000, 71.24000);
        PESTALV[11] = CreateDynamicObject(19320, 1099.47217, 1398.95679, 7.44030,   0.00000, 0.00000, 0.00000);
        PESTALV[12] = CreateDynamicObject(19919, 1099.49207, 1398.93677, 5.64030,   0.00000, 0.00000, 0.00000);

        PMARK[0] = CreateDynamicObject(19583, 963.34491, -1542.51221, 12.63140,   0.00000, 0.00000, 0.00000);
        PMARK[1] = CreateDynamicObject(19836, 963.32489, -1542.75220, 12.63140,   0.00000, 0.00000, 0.00000);
        PMARK[2] = CreateDynamicObject(18735, 963.79486, -1543.09216, 12.60140,   0.00000, -40.00000, 180.00000);
        PMARK[3] = CreateDynamicObject(19626, 964.67487, -1543.14209, 13.47140,   -18.00000, 0.00000, 0.00000);
        PMARK[4] = CreateDynamicObject(2597, 961.65491, -1544.15210, 13.45140,   0.00000, 0.00000, 0.00000);
        PMARK[5] = CreateDynamicObject(18963, 964.60486, -1543.49219, 13.43140,   0.00000, -40.00000, 0.00000);
        PMARK[6] = CreateDynamicObject(19527, 964.71490, -1543.47217, 12.61140,   0.00000, 0.00000, 0.00000);
        PMARK[7] = CreateDynamicObject(3106, 964.17487, -1544.27209, 14.43140,   90.00000, 0.00000, 0.00000);
        PMARK[8] = CreateDynamicObject(19138, 964.21490, -1544.30212, 14.27140,   0.00000, 0.00000, 108.13000);
        PMARK[9] = CreateDynamicObject(3106, 964.35486, -1544.29211, 14.43140,   90.00000, 0.00000, 0.00000);
        PMARK[10] = CreateDynamicObject(19138, 964.33490, -1544.31213, 14.27140,   0.00000, 0.00000, 71.24000);
        PMARK[11] = CreateDynamicObject(19320, 964.25488, -1544.57214, 14.41140,   0.00000, 0.00000, 0.00000);
        PMARK[12] = CreateDynamicObject(19919, 964.27490, -1544.59216, 12.61140,   0.00000, 0.00000, 0.00000);

        PSANT[0] = CreateDynamicObject(19626, 324.91241, -1755.72827, 4.37360,   -18.00000, 0.00000, 0.00000);
        PSANT[1] = CreateDynamicObject(19527, 324.95239, -1756.05835, 3.51360,   0.00000, 0.00000, 0.00000);
        PSANT[2] = CreateDynamicObject(18963, 324.84241, -1756.07837, 4.33360,   0.00000, -40.00000, 0.00000);
        PSANT[3] = CreateDynamicObject(3106, 324.59241, -1756.87830, 5.33360,   90.00000, 0.00000, 0.00000);
        PSANT[4] = CreateDynamicObject(19138, 324.57242, -1756.89832, 5.17360,   0.00000, 0.00000, 71.24000);
        PSANT[5] = CreateDynamicObject(19138, 324.45239, -1756.88831, 5.17360,   0.00000, 0.00000, 108.13000);
        PSANT[6] = CreateDynamicObject(19320, 324.49240, -1757.15833, 5.31360,   0.00000, 0.00000, 0.00000);
        PSANT[7] = CreateDynamicObject(3106, 324.41241, -1756.85828, 5.33360,   90.00000, 0.00000, 0.00000);
        PSANT[8] = CreateDynamicObject(19919, 324.51242, -1757.17834, 3.51360,   0.00000, 0.00000, 0.00000);
        PSANT[9] = CreateDynamicObject(18735, 324.03241, -1755.67834, 3.50360,   0.00000, -40.00000, 180.00000);
        PSANT[10] = CreateDynamicObject(19583, 323.58240, -1755.09839, 3.53360,   0.00000, 0.00000, 0.00000);
        PSANT[11] = CreateDynamicObject(19836, 323.56241, -1755.33838, 3.53360,   0.00000, 0.00000, 0.00000);
        PSANT[12] = CreateDynamicObject(2597, 321.89240, -1756.73828, 4.35360,   0.00000, 0.00000, 0.00000);

        PBASU[0] = CreateDynamicObject(19919, -51.03440, -1398.94873, 1.38140,   0.00000, 0.00000, 0.00000);
        PBASU[1] = CreateDynamicObject(19320, -51.05440, -1398.92871, 3.18140,   0.00000, 0.00000, 0.00000);
        PBASU[2] = CreateDynamicObject(3106, -50.95440, -1398.64868, 3.20140,   90.00000, 0.00000, 0.00000);
        PBASU[3] = CreateDynamicObject(19138, -50.97440, -1398.66870, 3.04140,   0.00000, 0.00000, 71.24000);
        PBASU[4] = CreateDynamicObject(19138, -51.09440, -1398.65869, 3.04140,   0.00000, 0.00000, 108.13000);
        PBASU[5] = CreateDynamicObject(3106, -51.13440, -1398.62866, 3.20140,   90.00000, 0.00000, 0.00000);
        PBASU[6] = CreateDynamicObject(19527, -50.59440, -1397.82874, 1.38140,   0.00000, 0.00000, 0.00000);
        PBASU[7] = CreateDynamicObject(18963, -50.70440, -1397.84875, 2.20140,   0.00000, -40.00000, 0.00000);
        PBASU[8] = CreateDynamicObject(19626, -50.63440, -1397.49866, 2.24140,   -18.00000, 0.00000, 0.00000);
        PBASU[9] = CreateDynamicObject(18735, -51.51440, -1397.44873, 1.37140,   0.00000, -40.00000, 180.00000);
        PBASU[10] = CreateDynamicObject(19836, -51.98440, -1397.10876, 1.40140,   0.00000, 0.00000, 0.00000);
        PBASU[11] = CreateDynamicObject(19583, -51.96440, -1396.86877, 1.40140,   0.00000, 0.00000, 0.00000);
        PBASU[12] = CreateDynamicObject(2597, -53.65440, -1398.50867, 2.22140,   0.00000, 0.00000, 0.00000);

        PLSSF[0] = CreateDynamicObject(19527, -345.81161, -1034.46228, 58.32000,   0.00000, 0.00000, 0.00000);
        PLSSF[1] = CreateDynamicObject(19626, -345.85159, -1034.13220, 59.18000,   -18.00000, 0.00000, 0.00000);
        PLSSF[2] = CreateDynamicObject(18963, -345.92160, -1034.48230, 59.14000,   0.00000, -40.00000, 0.00000);
        PLSSF[3] = CreateDynamicObject(18735, -346.73160, -1034.08228, 58.31000,   0.00000, -40.00000, 180.00000);
        PLSSF[4] = CreateDynamicObject(19583, -347.18161, -1033.50232, 58.34000,   0.00000, 0.00000, 0.00000);
        PLSSF[5] = CreateDynamicObject(19919, -346.25159, -1035.58228, 58.32000,   0.00000, 0.00000, 0.00000);
        PLSSF[6] = CreateDynamicObject(3106, -346.17160, -1035.28223, 60.14000,   90.00000, 0.00000, 0.00000);
        PLSSF[7] = CreateDynamicObject(19138, -346.19159, -1035.30225, 59.98000,   0.00000, 0.00000, 71.24000);
        PLSSF[8] = CreateDynamicObject(19836, -347.20160, -1033.74231, 58.34000,   0.00000, 0.00000, 0.00000);
        PLSSF[9] = CreateDynamicObject(19138, -346.31161, -1035.29224, 59.98000,   0.00000, 0.00000, 108.13000);
        PLSSF[10] = CreateDynamicObject(3106, -346.35159, -1035.26221, 60.14000,   90.00000, 0.00000, 0.00000);
        PLSSF[11] = CreateDynamicObject(19320, -346.27161, -1035.56226, 60.12000,   0.00000, 0.00000, 0.00000);
        PLSSF[12] = CreateDynamicObject(2597, -348.87161, -1035.14221, 59.16000,   0.00000, 0.00000, 0.00000);

        PGILI[0] = CreateDynamicObject(19919, -2814.71021, -1530.67590, 139.85130,   0.00000, 0.00000, 0.00000);
        PGILI[1] = CreateDynamicObject(19320, -2814.73022, -1530.65588, 141.65129,   0.00000, 0.00000, 0.00000);
        PGILI[2] = CreateDynamicObject(19138, -2814.65015, -1530.39587, 141.51129,   0.00000, 0.00000, 71.24000);
        PGILI[3] = CreateDynamicObject(3106, -2814.63013, -1530.37585, 141.67130,   90.00000, 0.00000, 0.00000);
        PGILI[4] = CreateDynamicObject(19138, -2814.77026, -1530.38586, 141.51129,   0.00000, 0.00000, 108.13000);
        PGILI[5] = CreateDynamicObject(3106, -2814.81006, -1530.35583, 141.67130,   90.00000, 0.00000, 0.00000);
        PGILI[6] = CreateDynamicObject(2597, -2817.33008, -1530.23584, 140.69130,   0.00000, 0.00000, 0.00000);
        PGILI[7] = CreateDynamicObject(18963, -2814.38013, -1529.57593, 140.67130,   0.00000, -40.00000, 0.00000);
        PGILI[8] = CreateDynamicObject(19527, -2814.27026, -1529.55591, 139.85130,   0.00000, 0.00000, 0.00000);
        PGILI[9] = CreateDynamicObject(19626, -2814.31006, -1529.22583, 140.71129,   -18.00000, 0.00000, 0.00000);
        PGILI[10] = CreateDynamicObject(18735, -2815.19019, -1529.17590, 139.84129,   0.00000, -40.00000, 180.00000);
        PGILI[11] = CreateDynamicObject(19836, -2815.66016, -1528.83594, 139.87129,   0.00000, 0.00000, 0.00000);
        PGILI[12] = CreateDynamicObject(19583, -2815.64014, -1528.59595, 139.87129,   0.00000, 0.00000, 0.00000);

        PJULIU[0] = CreateDynamicObject(19919, 2624.55591, 2416.33838, 9.82780,   0.00000, 0.00000, 0.00000);
        PJULIU[1] = CreateDynamicObject(19320, 2624.53589, 2416.35815, 11.62780,   0.00000, 0.00000, 0.00000);
        PJULIU[2] = CreateDynamicObject(19138, 2624.61597, 2416.61816, 11.48780,   0.00000, 0.00000, 71.24000);
        PJULIU[3] = CreateDynamicObject(3106, 2624.63599, 2416.63818, 11.64780,   90.00000, 0.00000, 0.00000);
        PJULIU[4] = CreateDynamicObject(19138, 2624.49585, 2416.62817, 11.48780,   0.00000, 0.00000, 108.13000);
        PJULIU[5] = CreateDynamicObject(3106, 2624.45605, 2416.65820, 11.64780,   90.00000, 0.00000, 0.00000);
        PJULIU[6] = CreateDynamicObject(19527, 2624.99585, 2417.45825, 9.82780,   0.00000, 0.00000, 0.00000);
        PJULIU[7] = CreateDynamicObject(18963, 2624.88599, 2417.43823, 10.64780,   0.00000, -40.00000, 0.00000);
        PJULIU[8] = CreateDynamicObject(19626, 2624.95605, 2417.78833, 10.68780,   -18.00000, 0.00000, 0.00000);
        PJULIU[9] = CreateDynamicObject(2597, 2621.93604, 2416.77832, 10.66780,   0.00000, 0.00000, 0.00000);
        PJULIU[10] = CreateDynamicObject(18735, 2624.07593, 2417.83838, 9.81780,   0.00000, -40.00000, 180.00000);
        PJULIU[11] = CreateDynamicObject(19836, 2623.60596, 2418.17822, 9.84780,   0.00000, 0.00000, 0.00000);
        PJULIU[12] = CreateDynamicObject(19583, 2623.62598, 2418.41821, 9.84780,   0.00000, 0.00000, 0.00000);

        PPICKE[0] = CreateDynamicObject(2597, 2109.84351, 2736.91846, 10.66780,   0.00000, 0.00000, 0.00000);
        PPICKE[1] = CreateDynamicObject(19919, 2112.46338, 2736.47852, 9.82780,   0.00000, 0.00000, 0.00000);
        PPICKE[2] = CreateDynamicObject(19320, 2112.44336, 2736.49829, 11.62780,   0.00000, 0.00000, 0.00000);
        PPICKE[3] = CreateDynamicObject(3106, 2112.36353, 2736.79834, 11.64780,   90.00000, 0.00000, 0.00000);
        PPICKE[4] = CreateDynamicObject(19138, 2112.40332, 2736.76831, 11.48780,   0.00000, 0.00000, 108.13000);
        PPICKE[5] = CreateDynamicObject(19138, 2112.52344, 2736.75830, 11.48780,   0.00000, 0.00000, 71.24000);
        PPICKE[6] = CreateDynamicObject(3106, 2112.54346, 2736.77832, 11.64780,   90.00000, 0.00000, 0.00000);
        PPICKE[7] = CreateDynamicObject(19836, 2111.51343, 2738.31836, 9.84780,   0.00000, 0.00000, 0.00000);
        PPICKE[8] = CreateDynamicObject(18735, 2111.98340, 2737.97852, 9.81780,   0.00000, -40.00000, 180.00000);
        PPICKE[9] = CreateDynamicObject(19583, 2111.53345, 2738.55835, 9.84780,   0.00000, 0.00000, 0.00000);
        PPICKE[10] = CreateDynamicObject(18963, 2112.79346, 2737.57837, 10.64780,   0.00000, -40.00000, 0.00000);
        PPICKE[11] = CreateDynamicObject(19527, 2112.90332, 2737.59839, 9.82780,   0.00000, 0.00000, 0.00000);
        PPICKE[12] = CreateDynamicObject(19626, 2112.86353, 2737.92847, 10.68780,   -18.00000, 0.00000, 0.00000);

        PAA[0] = CreateDynamicObject(2597, 417.85608, 2543.32349, 16.26830,   0.00000, 0.00000, 0.00000);
        PAA[1] = CreateDynamicObject(19836, 419.52609, 2544.72339, 15.44830,   0.00000, 0.00000, 0.00000);
        PAA[2] = CreateDynamicObject(19583, 419.54608, 2544.96338, 15.44830,   0.00000, 0.00000, 0.00000);
        PAA[3] = CreateDynamicObject(18735, 419.99609, 2544.38354, 15.41830,   0.00000, -40.00000, 180.00000);
        PAA[4] = CreateDynamicObject(3106, 420.37610, 2543.20337, 17.24830,   90.00000, 0.00000, 0.00000);
        PAA[5] = CreateDynamicObject(19320, 420.45609, 2542.90332, 17.22830,   0.00000, 0.00000, 0.00000);
        PAA[6] = CreateDynamicObject(19138, 420.41608, 2543.17334, 17.08830,   0.00000, 0.00000, 108.13000);
        PAA[7] = CreateDynamicObject(19919, 420.47610, 2542.88354, 15.42830,   0.00000, 0.00000, 0.00000);
        PAA[8] = CreateDynamicObject(19138, 420.53610, 2543.16333, 17.08830,   0.00000, 0.00000, 71.24000);
        PAA[9] = CreateDynamicObject(3106, 420.55609, 2543.18335, 17.24830,   90.00000, 0.00000, 0.00000);
        PAA[10] = CreateDynamicObject(18963, 420.80609, 2543.98340, 16.24830,   0.00000, -40.00000, 0.00000);
        PAA[11] = CreateDynamicObject(19527, 420.91608, 2544.00342, 15.42830,   0.00000, 0.00000, 0.00000);
        PAA[12] = CreateDynamicObject(19626, 420.87610, 2544.33350, 16.28830,   -18.00000, 0.00000, 0.00000);

        PPAYA[0] = CreateDynamicObject(2597, -280.91211, 2654.35791, 62.58410,   0.00000, 0.00000, 0.00000);
        PPAYA[1] = CreateDynamicObject(19583, -279.22211, 2655.99780, 61.76410,   0.00000, 0.00000, 0.00000);
        PPAYA[2] = CreateDynamicObject(19836, -279.24210, 2655.75781, 61.76410,   0.00000, 0.00000, 0.00000);
        PPAYA[3] = CreateDynamicObject(18735, -278.77209, 2655.41797, 61.73410,   0.00000, -40.00000, 180.00000);
        PPAYA[4] = CreateDynamicObject(3106, -278.39209, 2654.23779, 63.56410,   90.00000, 0.00000, 0.00000);
        PPAYA[5] = CreateDynamicObject(19138, -278.35211, 2654.20776, 63.40410,   0.00000, 0.00000, 108.13000);
        PPAYA[6] = CreateDynamicObject(19626, -277.89209, 2655.36792, 62.60410,   -18.00000, 0.00000, 0.00000);
        PPAYA[7] = CreateDynamicObject(18963, -277.96210, 2655.01782, 62.56410,   0.00000, -40.00000, 0.00000);
        PPAYA[8] = CreateDynamicObject(19138, -278.23209, 2654.19775, 63.40410,   0.00000, 0.00000, 71.24000);
        PPAYA[9] = CreateDynamicObject(3106, -278.21210, 2654.21777, 63.56410,   90.00000, 0.00000, 0.00000);
        PPAYA[10] = CreateDynamicObject(19320, -278.31210, 2653.93774, 63.54410,   0.00000, 0.00000, 0.00000);
        PPAYA[11] = CreateDynamicObject(19919, -278.29208, 2653.91797, 61.74410,   0.00000, 0.00000, 0.00000);
        PPAYA[12] = CreateDynamicObject(19527, -277.85211, 2655.03784, 61.74410,   0.00000, 0.00000, 0.00000);

        PELQ[0] = CreateDynamicObject(2597, -1480.22400, 2612.55957, 58.62880,   0.00000, 0.00000, 0.00000);
        PELQ[1] = CreateDynamicObject(19919, -1477.60400, 2612.11963, 57.78880,   0.00000, 0.00000, 0.00000);
        PELQ[2] = CreateDynamicObject(19320, -1477.62390, 2612.13940, 59.58880,   0.00000, 0.00000, 0.00000);
        PELQ[3] = CreateDynamicObject(19138, -1477.66394, 2612.40942, 59.44880,   0.00000, 0.00000, 108.13000);
        PELQ[4] = CreateDynamicObject(3106, -1477.70398, 2612.43945, 59.60880,   90.00000, 0.00000, 0.00000);
        PELQ[5] = CreateDynamicObject(19138, -1477.54395, 2612.39941, 59.44880,   0.00000, 0.00000, 71.24000);
        PELQ[6] = CreateDynamicObject(3106, -1477.52393, 2612.41943, 59.60880,   90.00000, 0.00000, 0.00000);
        PELQ[7] = CreateDynamicObject(18735, -1478.08398, 2613.61963, 57.77880,   0.00000, -40.00000, 180.00000);
        PELQ[8] = CreateDynamicObject(19836, -1478.55396, 2613.95947, 57.80880,   0.00000, 0.00000, 0.00000);
        PELQ[9] = CreateDynamicObject(18963, -1477.27393, 2613.21948, 58.60880,   0.00000, -40.00000, 0.00000);
        PELQ[10] = CreateDynamicObject(19527, -1477.16394, 2613.23950, 57.78880,   0.00000, 0.00000, 0.00000);
        PELQ[11] = CreateDynamicObject(19583, -1478.53394, 2614.19946, 57.80880,   0.00000, 0.00000, 0.00000);
        PELQ[12] = CreateDynamicObject(19626, -1477.20398, 2613.56958, 58.64880,   -18.00000, 0.00000, 0.00000);

        PLSF[0] = CreateDynamicObject(19527, -1846.16101, 1280.77979, 21.57000,   0.00000, 0.00000, 0.00000);
        PLSF[1] = CreateDynamicObject(19626, -1846.20105, 1281.10986, 22.43000,   -18.00000, 0.00000, 0.00000);
        PLSF[2] = CreateDynamicObject(18963, -1846.27100, 1280.75977, 22.39000,   0.00000, -40.00000, 0.00000);
        PLSF[3] = CreateDynamicObject(19919, -1846.60107, 1279.65979, 21.57000,   0.00000, 0.00000, 0.00000);
        PLSF[4] = CreateDynamicObject(3106, -1846.52100, 1279.95984, 23.39000,   90.00000, 0.00000, 0.00000);
        PLSF[5] = CreateDynamicObject(19138, -1846.54102, 1279.93982, 23.23000,   0.00000, 0.00000, 71.24000);
        PLSF[6] = CreateDynamicObject(19320, -1846.62097, 1279.67981, 23.37000,   0.00000, 0.00000, 0.00000);
        PLSF[7] = CreateDynamicObject(19138, -1846.66101, 1279.94983, 23.23000,   0.00000, 0.00000, 108.13000);
        PLSF[8] = CreateDynamicObject(3106, -1846.70105, 1279.97986, 23.39000,   90.00000, 0.00000, 0.00000);
        PLSF[9] = CreateDynamicObject(18735, -1847.08105, 1281.15979, 21.56000,   0.00000, -40.00000, 180.00000);
        PLSF[10] = CreateDynamicObject(19836, -1847.55103, 1281.49976, 21.59000,   0.00000, 0.00000, 0.00000);
        PLSF[11] = CreateDynamicObject(19583, -1847.53101, 1281.73975, 21.59000,   0.00000, 0.00000, 0.00000);
        PLSF[12] = CreateDynamicObject(2597, -1849.22107, 1280.09985, 22.41000,   0.00000, 0.00000, 0.00000);

        PPIZEA[0] = CreateDynamicObject(19583, 2105.72778, -1939.40137, 12.57440,   0.00000, 0.00000, 0.00000);
        PPIZEA[1] = CreateDynamicObject(19836, 2105.70776, -1939.64136, 12.57440,   0.00000, 0.00000, 0.00000);
        PPIZEA[2] = CreateDynamicObject(18735, 2106.17773, -1939.98132, 12.54440,   0.00000, -40.00000, 180.00000);
        PPIZEA[3] = CreateDynamicObject(19626, 2107.05786, -1940.03125, 13.41440,   -18.00000, 0.00000, 0.00000);
        PPIZEA[4] = CreateDynamicObject(18963, 2106.98779, -1940.38135, 13.37440,   0.00000, -40.00000, 0.00000);
        PPIZEA[5] = CreateDynamicObject(19527, 2107.09766, -1940.36133, 12.55440,   0.00000, 0.00000, 0.00000);
        PPIZEA[6] = CreateDynamicObject(2597, 2104.03784, -1941.04126, 13.39440,   0.00000, 0.00000, 0.00000);
        PPIZEA[7] = CreateDynamicObject(3106, 2106.55786, -1941.16125, 14.37440,   90.00000, 0.00000, 0.00000);
        PPIZEA[8] = CreateDynamicObject(19138, 2106.59766, -1941.19128, 14.21440,   0.00000, 0.00000, 108.13000);
        PPIZEA[9] = CreateDynamicObject(3106, 2106.73779, -1941.18127, 14.37440,   90.00000, 0.00000, 0.00000);
        PPIZEA[10] = CreateDynamicObject(19138, 2106.71777, -1941.20129, 14.21440,   0.00000, 0.00000, 71.24000);
        PPIZEA[11] = CreateDynamicObject(19320, 2106.63770, -1941.46130, 14.35440,   0.00000, 0.00000, 0.00000);
        PPIZEA[12] = CreateDynamicObject(19919, 2106.65771, -1941.48132, 12.55440,   0.00000, 0.00000, 0.00000);

        PDELAPI[0] = CreateDynamicObject(19919, 2025.33191, -1781.54272, 12.55440,   0.00000, 0.00000, 0.00000);
        PDELAPI[1] = CreateDynamicObject(19320, 2025.31201, -1781.52271, 14.35440,   0.00000, 0.00000, 0.00000);
        PDELAPI[2] = CreateDynamicObject(19138, 2025.39197, -1781.26270, 14.21440,   0.00000, 0.00000, 71.24000);
        PDELAPI[3] = CreateDynamicObject(3106, 2025.41199, -1781.24268, 14.37440,   90.00000, 0.00000, 0.00000);
        PDELAPI[4] = CreateDynamicObject(19138, 2025.27197, -1781.25269, 14.21440,   0.00000, 0.00000, 108.13000);
        PDELAPI[5] = CreateDynamicObject(3106, 2025.23193, -1781.22266, 14.37440,   90.00000, 0.00000, 0.00000);
        PDELAPI[6] = CreateDynamicObject(19527, 2025.77197, -1780.42273, 12.55440,   0.00000, 0.00000, 0.00000);
        PDELAPI[7] = CreateDynamicObject(18963, 2025.66199, -1780.44275, 13.37440,   0.00000, -40.00000, 0.00000);
        PDELAPI[8] = CreateDynamicObject(19626, 2025.73193, -1780.09265, 13.41440,   -18.00000, 0.00000, 0.00000);
        PDELAPI[9] = CreateDynamicObject(18735, 2024.85193, -1780.04272, 12.54440,   0.00000, -40.00000, 180.00000);
        PDELAPI[10] = CreateDynamicObject(2597, 2022.71191, -1781.10266, 13.39440,   0.00000, 0.00000, 0.00000);
        PDELAPI[11] = CreateDynamicObject(19836, 2024.38196, -1779.70276, 12.57440,   0.00000, 0.00000, 0.00000);
        PDELAPI[12] = CreateDynamicObject(19583, 2024.40198, -1779.46277, 12.57440,   0.00000, 0.00000, 0.00000);

        PFADO[0] = CreateDynamicObject(2597, -2131.12891, 260.03220, 35.70670,   0.00000, 0.00000, 0.00000);
        PFADO[1] = CreateDynamicObject(19919, -2128.50903, 259.59219, 34.86670,   0.00000, 0.00000, 0.00000);
        PFADO[2] = CreateDynamicObject(19320, -2128.52905, 259.61221, 36.66670,   0.00000, 0.00000, 0.00000);
        PFADO[3] = CreateDynamicObject(19138, -2128.56909, 259.88220, 36.52670,   0.00000, 0.00000, 108.13000);
        PFADO[4] = CreateDynamicObject(3106, -2128.60889, 259.91220, 36.68670,   90.00000, 0.00000, 0.00000);
        PFADO[5] = CreateDynamicObject(19138, -2128.44897, 259.87222, 36.52670,   0.00000, 0.00000, 71.24000);
        PFADO[6] = CreateDynamicObject(3106, -2128.42896, 259.89221, 36.68670,   90.00000, 0.00000, 0.00000);
        PFADO[7] = CreateDynamicObject(18735, -2128.98901, 261.09219, 34.85670,   0.00000, -40.00000, 180.00000);
        PFADO[8] = CreateDynamicObject(19836, -2129.45898, 261.43222, 34.88670,   0.00000, 0.00000, 0.00000);
        PFADO[9] = CreateDynamicObject(18963, -2128.17896, 260.69220, 35.68670,   0.00000, -40.00000, 0.00000);
        PFADO[10] = CreateDynamicObject(19583, -2129.43896, 261.67221, 34.88670,   0.00000, 0.00000, 0.00000);
        PFADO[11] = CreateDynamicObject(19527, -2128.06909, 260.71222, 34.86670,   0.00000, 0.00000, 0.00000);
        PFADO[12] = CreateDynamicObject(19626, -2128.10889, 261.04221, 35.72670,   -18.00000, 0.00000, 0.00000);

        PASF[0] = CreateDynamicObject(2597, -1363.31238, 15.58540, 6.18340,   0.00000, 0.00000, 0.00000);
        PASF[1] = CreateDynamicObject(19919, -1360.69238, 15.14540, 5.34340,   0.00000, 0.00000, 0.00000);
        PASF[2] = CreateDynamicObject(19320, -1360.71228, 15.16540, 7.14340,   0.00000, 0.00000, 0.00000);
        PASF[3] = CreateDynamicObject(19138, -1360.75232, 15.43540, 7.00340,   0.00000, 0.00000, 108.13000);
        PASF[4] = CreateDynamicObject(19138, -1360.63232, 15.42540, 7.00340,   0.00000, 0.00000, 71.24000);
        PASF[5] = CreateDynamicObject(3106, -1360.79236, 15.46540, 7.16340,   90.00000, 0.00000, 0.00000);
        PASF[6] = CreateDynamicObject(3106, -1360.61230, 15.44540, 7.16340,   90.00000, 0.00000, 0.00000);
        PASF[7] = CreateDynamicObject(18963, -1360.36230, 16.24540, 6.16340,   0.00000, -40.00000, 0.00000);
        PASF[8] = CreateDynamicObject(19527, -1360.25232, 16.26540, 5.34340,   0.00000, 0.00000, 0.00000);
        PASF[9] = CreateDynamicObject(18735, -1361.17236, 16.64540, 5.33340,   0.00000, -40.00000, 180.00000);
        PASF[10] = CreateDynamicObject(19626, -1360.29236, 16.59540, 6.20340,   -18.00000, 0.00000, 0.00000);
        PASF[11] = CreateDynamicObject(19836, -1361.64233, 16.98540, 5.36340,   0.00000, 0.00000, 0.00000);
        PASF[12] = CreateDynamicObject(19583, -1361.62231, 17.22540, 5.36340,   0.00000, 0.00000, 0.00000);

        PC1[0] = CreateDynamicObject(19583, -2221.16675, -144.83220, 34.34780,   0.00000, 0.00000, 0.00000);
        PC1[1] = CreateDynamicObject(19836, -2221.18677, -145.07220, 34.34780,   0.00000, 0.00000, 0.00000);
        PC1[2] = CreateDynamicObject(18735, -2220.71680, -145.41220, 34.31780,   0.00000, -40.00000, 180.00000);
        PC1[3] = CreateDynamicObject(19138, -2220.29688, -146.62221, 35.98780,   0.00000, 0.00000, 108.13000);
        PC1[4] = CreateDynamicObject(19320, -2220.25684, -146.89220, 36.12780,   0.00000, 0.00000, 0.00000);
        PC1[5] = CreateDynamicObject(18963, -2219.90674, -145.81219, 35.14780,   0.00000, -40.00000, 0.00000);
        PC1[6] = CreateDynamicObject(3106, -2220.15674, -146.61220, 36.14780,   90.00000, 0.00000, 0.00000);
        PC1[7] = CreateDynamicObject(2597, -2222.85669, -146.47220, 35.16780,   0.00000, 0.00000, 0.00000);
        PC1[8] = CreateDynamicObject(19626, -2219.83667, -145.46220, 35.18780,   -18.00000, 0.00000, 0.00000);
        PC1[9] = CreateDynamicObject(19138, -2220.17676, -146.63220, 35.98780,   0.00000, 0.00000, 71.24000);
        PC1[10] = CreateDynamicObject(19919, -2220.23682, -146.91220, 34.32780,   0.00000, 0.00000, 0.00000);
        PC1[11] = CreateDynamicObject(3106, -2220.33667, -146.59219, 36.14780,   90.00000, 0.00000, 0.00000);
        PC1[12] = CreateDynamicObject(19527, -2219.79688, -145.79221, 34.32780,   0.00000, 0.00000, 0.00000);

        TextoDulces[0] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 1703.4247, -1870.5588, 13.7403,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[1] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 1692.5258, -1974.1092, 8.7722,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[2] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -1715.1521, -40.6276, 3.4822,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[3] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 155.1109, -288.0634, 1.5656,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[4] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2672.5023, 1372.1165, 7.1026,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[5] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2545.7396, 1214.4541, 37.3694,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[6] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2354.7189, -644.4589, 128.0773,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[7] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2671.1478, 229.4940, 4.2891,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[8] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2748.5333, 197.2070, 7.0754,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[9] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2185.3937, -1344.2394, 23.9319,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[10] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2488.6890, -717.7959, 139.2878,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[11] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2488.7308, 2357.1545, 10.2017,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[12] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -1315.2464, 2509.3848, 87.0095,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[13] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2108.2594, 2204.7161, 10.7878,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[14] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 1034.1938, 2096.8608, 10.7878,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[15] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 1099.9021, 1400.0367, 6.6603,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[16] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 964.6849, -1543.4922, 13.6514,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[17] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 324.9424, -1756.0784, 4.5136,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[18] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -345.8416, -1034.4823, 59.2600,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[19] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2814.3001, -1529.5759, 140.7513,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[20] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2624.9660, 2417.4382, 10.7278,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[21] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2112.8735, 2737.5784, 10.7278,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[22] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 420.8861, 2543.9834, 16.3283,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[23] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -277.8821, 2655.0178, 62.6441,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[24] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -1477.1939, 2613.2195, 58.6888,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[25] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -1846.1910, 1280.7598, 22.4700,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[26] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2107.0678, -1940.3813, 13.4744,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[27] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2128.0990, 260.6922, 35.7667,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[28] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -1360.2823, 16.2454, 6.2434,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[29] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -2219.8267, -145.8122, 35.2278,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[30] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, -50.6244, -1397.8488, 2.2814,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoDulces[31] = CreateDynamic3DTextLabel("{a51cff}Fuente mágica de dulces\n{d6eb10}/sacar caramelos",COLOR_ROJO, 2025.7420, -1780.4427, 13.4544,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//

        TextoSombrero[0] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 1700.2800, -1871.2286, 13.4173,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[1] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 1689.4757, -1974.7891, 8.6722,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[2] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -1718.1821, -41.3076, 3.4022,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[3] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 152.0609, -288.7434, 1.4256,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[4] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2675.5508, 1372.1134, 6.9363,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[5] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2351.7090, -645.1189, 127.9373,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[6] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2548.7896, 1213.7742, 37.2694,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[7] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2674.1777, 228.8340, 4.1891,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[8] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2751.5632, 196.5470, 6.9554,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[9] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2182.3638, -1344.8993, 23.8319,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[10] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2491.7190, -718.4559, 139.1678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[11] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2491.7607, 2356.4961, 10.1217,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[12] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -1318.2965, 2508.7249, 86.8895,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[13] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2105.2295, 2204.0562, 10.6678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[14] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 1031.1637, 2096.2009, 10.6678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[15] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 1096.8721, 1399.3768, 6.4803,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[16] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 961.6549, -1544.1521, 13.4514,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[17] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 321.8924, -1756.7383, 4.3536,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[18] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -348.8716, -1035.1422, 59.1600,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[19] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2817.3301, -1530.2358, 140.6913,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[20] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2621.9360, 2416.7783, 10.6678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[21] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2109.8435, 2736.9185, 10.6678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[22] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 417.8561, 2543.3235, 16.2683,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[23] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -280.9121, 2654.3579, 62.5841,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[24] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -1480.2240, 2612.5596, 58.6288,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[25] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -1849.2211, 1280.0999, 22.4100,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[26] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2104.0378, -1941.0413, 13.3944,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[27] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, 2022.7119, -1781.1027, 13.3944,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[28] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2131.1289, 260.0322, 35.7067,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[29] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -1363.3124, 15.5854, 6.1834,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[30] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -53.6544, -1398.5087, 2.2214,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        TextoSombrero[31] = CreateDynamic3DTextLabel("{a51cff}Sombreros descartables\n\n{d6eb10}/comprar sombrero{FFFFFF}\nCosto: {00cb00}$500",COLOR_ROJO, -2222.8567, -146.4722, 35.1678,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);//
        t_cerveza = SetTimer("MusicaEventos", 1000, true);

        E_Halloween[Payasos][0] = CreateDynamicActor(264, 1701.4641,-1871.5433,13.5699,0.0000); //UNITY1
        E_Halloween[Payasos][1] = CreateDynamicActor(264, 1690.8203,-1975.2551,8.8247,  0.0000); //UNITY2
        E_Halloween[Payasos][2] = CreateDynamicActor(264, 2024.1447,-1781.4346,13.5469, 0.0000); //DELANTE DE LA PIZZERIA GANTON
        E_Halloween[Payasos][3] = CreateDynamicActor(264, 2105.6074,-1941.1617,13.5469, 0.0000); //PUESTO AL LADO DE LA PIZZERIA GANTON
        E_Halloween[Payasos][4] = CreateDynamicActor(162, 2183.8794,-1345.0969,23.9844, 0.0000); //PUESTO COLINAS
        E_Halloween[Payasos][5] = CreateDynamicActor(264, 963.0246,-1544.2631,13.5965,  0.0000); //PUESTO MARKET
        E_Halloween[Payasos][6] = CreateDynamicActor(264, 323.3364,-1757.1311,4.5065,   0.0000); //PUESTO SANTA MARIA BEACH
        E_Halloween[Payasos][7] = CreateDynamicActor(264, -52.4887,-1399.3075,2.3163,   0.0000); //PUESTO DEBAJO DEL PUENTE DE BASURERO
        E_Halloween[Payasos][8] = CreateDynamicActor(264, -347.3540,-1035.5245,59.3118, 0.0000); //PUESTO MINI GRANJA
        E_Halloween[Payasos][9] = CreateDynamicActor(264, 2352.9741,-645.4590,128.1030, 0.0000); //PUESTO COLINAS - MONTAÑA
        E_Halloween[Payasos][10] = CreateDynamicActor(264, 2623.4084,2416.6296,10.8203, 0.0000); //PUESTO JULIUS LAS VENTURAS
        E_Halloween[Payasos][11] = CreateDynamicActor(264, 2106.5540,2203.8977,10.8203, 0.0000); //PUESTO AUTOPISTA LAS VENTURAS
        E_Halloween[Payasos][12] = CreateDynamicActor(264, 2111.2954,2736.5513,10.8203, 0.0000); //PUESTO GASOLINERA ARRIBA DE LV
        E_Halloween[Payasos][13] = CreateDynamicActor(264, 1032.5673,2095.9473,10.8203, 0.0000); //PUESTO ENTREGA TRANSPORTISTA
        E_Halloween[Payasos][14] = CreateDynamicActor(264, 1098.2841,1398.9840,6.6328,  0.0000); //PUESTO ESTADIO LAS VENTURAS
        E_Halloween[Payasos][15] = CreateDynamicActor(264, -1716.1309,-42.4674,3.5547,47.8420);
        E_Halloween[Payasos][16] = CreateDynamicActor(264, -2547.3767,1213.6947,37.4219,359.4128);
        E_Halloween[Payasos][17] = CreateDynamicActor(264, -2674.5356,1371.9504,7.0884,352.8837);

        E_Halloween[sombreros][24] = CreateDynamicObject(19528, -1717.87402, -41.27636, 3.06317,   0.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][25] = CreateDynamicObject(19528, -1717.87402, -41.27636, 3.76617,   0.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][26] = CreateDynamicObject(19528, -1718.40002, -41.27060, 4.12820,   0.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][27] = CreateDynamicObject(19528, -1718.40002, -41.27060, 3.38120,   0.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][8] = CreateDynamicObject(19528, 151.84090, -288.70340, 2.16560,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][9] = CreateDynamicObject(19528, 151.84090, -288.70340, 1.40560,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][10] = CreateDynamicObject(19528, 152.36090, -288.68341, 1.83470,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][11] = CreateDynamicObject(19528, 152.36090, -288.68341, 1.08560,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][28] = CreateDynamicObject(19528, -2675.27832, 1372.14355, 6.59570,   0.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][29] = CreateDynamicObject(19528, -2675.27832, 1372.14355, 7.30174,   0.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][30] = CreateDynamicObject(19528, -2675.79858, 1372.14355, 7.68170,   0.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][31] = CreateDynamicObject(19528, -2675.79858, 1372.14355, 6.93570,   0.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][36] = CreateDynamicObject(19528, -2548.52100, 1213.80835, 36.96060,   0.00000, -45.00000, 0.00000);
        E_Halloween[sombreros][37] = CreateDynamicObject(19528, -2548.52100, 1213.80835, 37.63890,   0.00000, -45.00000, 359.79901);
        E_Halloween[sombreros][38] = CreateDynamicObject(19528, -2548.98096, 1213.80835, 37.27596,   0.00000, -135.00000, 0.00000);
        E_Halloween[sombreros][39] = CreateDynamicObject(19528, -2548.98096, 1213.80835, 37.98097,   0.00000, -135.00000, 0.00000);

        E_Halloween[sombreros][0] = CreateDynamicObject(19528, 1700.06006, -1871.18872, 13.39730,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][1] = CreateDynamicObject(19528, 1700.06006, -1871.18872, 14.15730,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][2] = CreateDynamicObject(19528, 1700.58008, -1871.16870, 13.81730,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][3] = CreateDynamicObject(19528, 1700.58008, -1871.16870, 13.07730,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][4] = CreateDynamicObject(19528, 1689.25574, -1974.74915, 9.41220,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][5] = CreateDynamicObject(19528, 1689.25574, -1974.74915, 8.65220,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][6] = CreateDynamicObject(19528, 1689.77576, -1974.72913, 9.07220,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][7] = CreateDynamicObject(19528, 1689.77576, -1974.72913, 8.33220,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][32] = CreateDynamicObject(19528, 2352.00879, -645.05890, 127.59730,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][33] = CreateDynamicObject(19528, 2352.00879, -645.05890, 128.33730,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][34] = CreateDynamicObject(19528, 2351.48901, -645.07886, 127.91730,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][35] = CreateDynamicObject(19528, 2351.48901, -645.07886, 128.67729,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][48] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.16910,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][49] = CreateDynamicObject(19528, -2674.39771, 228.87399, 4.92910,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][50] = CreateDynamicObject(19528, -2673.87793, 228.89400, 3.84910,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][51] = CreateDynamicObject(19528, -2673.87793, 228.89400, 4.58910,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][60] = CreateDynamicObject(19528, -2751.26343, 196.60699, 6.61540,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][61] = CreateDynamicObject(19528, -2751.26343, 196.60699, 7.35540,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][62] = CreateDynamicObject(19528, -2751.78320, 196.58699, 6.93540,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][63] = CreateDynamicObject(19528, -2751.78320, 196.58699, 7.69540,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][20] = CreateDynamicObject(19528, 2182.14380, -1344.85938, 24.57190,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][21] = CreateDynamicObject(19528, 2182.14380, -1344.85938, 23.81190,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][22] = CreateDynamicObject(19528, 2182.66357, -1344.83936, 24.23190,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][23] = CreateDynamicObject(19528, 2182.66357, -1344.83936, 23.49190,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][64] = CreateDynamicObject(19528, -2491.93896, -718.41589, 139.90779,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][65] = CreateDynamicObject(19528, -2491.41919, -718.39594, 139.53987,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][66] = CreateDynamicObject(19528, -2491.93896, -718.41589, 139.14780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][67] = CreateDynamicObject(19528, -2491.41919, -718.39594, 138.82780,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][56] = CreateDynamicObject(19528, -2491.98071, 2356.53613, 10.86170,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][57] = CreateDynamicObject(19528, -2491.98071, 2356.53613, 10.10170,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][58] = CreateDynamicObject(19528, -2491.46094, 2356.55615, 9.78170,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][59] = CreateDynamicObject(19528, -2491.46094, 2356.55615, 10.52170,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][68] = CreateDynamicObject(19528, -1318.51648, 2508.76489, 86.86950,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][69] = CreateDynamicObject(19528, -1318.51648, 2508.76489, 87.62950,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][70] = CreateDynamicObject(19528, -1317.99646, 2508.78491, 86.54950,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][71] = CreateDynamicObject(19528, -1317.99646, 2508.78491, 87.28950,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][72] = CreateDynamicObject(19528, 2105.52930, 2204.11621, 10.32780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][73] = CreateDynamicObject(19528, 2105.52930, 2204.11621, 11.06780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][74] = CreateDynamicObject(19528, 2105.00952, 2204.09619, 10.64780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][75] = CreateDynamicObject(19528, 2105.00952, 2204.09619, 11.40780,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][44] = CreateDynamicObject(19528, 1031.46375, 2096.26099, 10.32780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][45] = CreateDynamicObject(19528, 1031.46375, 2096.26099, 11.06780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][46] = CreateDynamicObject(19528, 1030.94373, 2096.24097, 10.64780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][47] = CreateDynamicObject(19528, 1030.94373, 2096.24097, 11.40780,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][88] = CreateDynamicObject(19528, 1096.65210, 1399.41675, 7.22030,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][89] = CreateDynamicObject(19528, 1096.65210, 1399.41675, 6.46030,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][90] = CreateDynamicObject(19528, 1097.17212, 1399.43677, 6.88030,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][91] = CreateDynamicObject(19528, 1097.17212, 1399.43677, 6.14030,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][92] = CreateDynamicObject(19528, 961.43488, -1544.11218, 13.43140,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][93] = CreateDynamicObject(19528, 961.43488, -1544.11218, 14.19140,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][94] = CreateDynamicObject(19528, 961.95490, -1544.09216, 13.11140,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][95] = CreateDynamicObject(19528, 961.95490, -1544.09216, 13.85140,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][96] = CreateDynamicObject(19528, 321.67239, -1756.69836, 5.09360,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][97] = CreateDynamicObject(19528, 321.67239, -1756.69836, 4.33360,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][98] = CreateDynamicObject(19528, 322.19241, -1756.67834, 4.75360,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][99] = CreateDynamicObject(19528, 322.19241, -1756.67834, 4.01360,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][108] = CreateDynamicObject(19528, -53.87440, -1398.46875, 2.96140,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][109] = CreateDynamicObject(19528, -53.87440, -1398.46875, 2.20140,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][110] = CreateDynamicObject(19528, -53.35440, -1398.44873, 2.62140,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][111] = CreateDynamicObject(19528, -53.35440, -1398.44873, 1.88140,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][124] = CreateDynamicObject(19528, -348.57159, -1035.08228, 58.82000,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][125] = CreateDynamicObject(19528, -348.57159, -1035.08228, 59.56000,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][126] = CreateDynamicObject(19528, -349.09161, -1035.10229, 59.14000,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][127] = CreateDynamicObject(19528, -349.09161, -1035.10229, 59.90000,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][100] = CreateDynamicObject(19528, -2817.55005, -1530.19592, 141.43129,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][101] = CreateDynamicObject(19528, -2817.55005, -1530.19592, 140.67130,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][102] = CreateDynamicObject(19528, -2817.03027, -1530.17590, 141.09129,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][103] = CreateDynamicObject(19528, -2817.03027, -1530.17590, 140.35130,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][115] = CreateDynamicObject(19528, 2621.71606, 2416.81836, 10.64780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][116] = CreateDynamicObject(19528, 2621.71606, 2416.81836, 11.40780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][117] = CreateDynamicObject(19528, 2622.23584, 2416.83838, 10.32780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][118] = CreateDynamicObject(19528, 2622.23584, 2416.83838, 11.06780,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][104] = CreateDynamicObject(19528, 2109.62354, 2736.95850, 10.64780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][105] = CreateDynamicObject(19528, 2109.62354, 2736.95850, 11.40780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][106] = CreateDynamicObject(19528, 2110.14331, 2736.97852, 10.32780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][107] = CreateDynamicObject(19528, 2110.14331, 2736.97852, 11.06780,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][40] = CreateDynamicObject(19528, 418.15610, 2543.38354, 16.66830,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][41] = CreateDynamicObject(19528, 418.15610, 2543.38354, 15.92830,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][42] = CreateDynamicObject(19528, 417.63608, 2543.36353, 16.24830,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][43] = CreateDynamicObject(19528, 417.63608, 2543.36353, 17.00830,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][120] = CreateDynamicObject(19528, -280.61209, 2654.41797, 62.98410,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][121] = CreateDynamicObject(19528, -280.61209, 2654.41797, 62.24410,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][122] = CreateDynamicObject(19528, -281.13211, 2654.39795, 63.32410,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][123] = CreateDynamicObject(19528, -281.13211, 2654.39795, 62.56410,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][116] = CreateDynamicObject(19528, -1479.92395, 2612.61963, 58.28880,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][117] = CreateDynamicObject(19528, -1479.92395, 2612.61963, 59.02880,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][118] = CreateDynamicObject(19528, -1480.44397, 2612.59961, 58.60880,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][119] = CreateDynamicObject(19528, -1480.44397, 2612.59961, 59.36880,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][84] = CreateDynamicObject(19528, -1848.92102, 1280.15979, 22.07000,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][85] = CreateDynamicObject(19528, -1848.92102, 1280.15979, 22.81000,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][86] = CreateDynamicObject(19528, -1849.44104, 1280.13977, 22.39000,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][87] = CreateDynamicObject(19528, -1849.44104, 1280.13977, 23.15000,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][16] = CreateDynamicObject(19528, 2104.33765, -1940.98132, 13.05440,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][17] = CreateDynamicObject(19528, 2104.33765, -1940.98132, 13.79440,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][18] = CreateDynamicObject(19528, 2103.81787, -1941.00134, 13.37440,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][19] = CreateDynamicObject(19528, 2103.81787, -1941.00134, 14.13440,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][12] = CreateDynamicObject(19528, 2023.01196, -1781.04272, 13.05440,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][13] = CreateDynamicObject(19528, 2023.01196, -1781.04272, 13.79440,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][14] = CreateDynamicObject(19528, 2022.49194, -1781.06274, 13.37440,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][15] = CreateDynamicObject(19528, 2022.49194, -1781.06274, 14.13440,   4.00000, -127.00000, 0.00000);

        E_Halloween[sombreros][76] = CreateDynamicObject(19528, -2131.34888, 260.07220, 35.68670,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][77] = CreateDynamicObject(19528, -2131.34888, 260.07220, 36.44670,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][78] = CreateDynamicObject(19528, -2130.82910, 260.09219, 35.36670,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][79] = CreateDynamicObject(19528, -2130.82910, 260.09219, 36.10670,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][52] = CreateDynamicObject(19528, -1363.53235, 15.62540, 6.16340,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][53] = CreateDynamicObject(19528, -1363.53235, 15.62540, 6.92340,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][54] = CreateDynamicObject(19528, -1363.01233, 15.64540, 5.84340,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][55] = CreateDynamicObject(19528, -1363.01233, 15.64540, 6.58340,   4.00000, -47.00000, 0.00000);

        E_Halloween[sombreros][80] = CreateDynamicObject(19528, -2223.07666, -146.43221, 35.14780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][81] = CreateDynamicObject(19528, -2223.07666, -146.43221, 35.90780,   4.00000, -127.00000, 0.00000);
        E_Halloween[sombreros][82] = CreateDynamicObject(19528, -2222.55688, -146.41220, 34.82780,   4.00000, -47.00000, 0.00000);
        E_Halloween[sombreros][83] = CreateDynamicObject(19528, -2222.55688, -146.41220, 35.56780,   4.00000, -47.00000, 0.00000);
    }
    else
    {
        HallX = false;
        KillTimer(t_cerveza);
        for(new o = 0, oj = sizeof(MapaHall); o < oj; o++) DestroyDynamicObject(MapaHall[o]);
        for(new p1 = 0, p1j = sizeof(PuestoCamionero); p1 < p1j; p1++) DestroyDynamicObject(PuestoCamionero[p1]);
        for(new p2 = 0, p2j = sizeof(EstMuni); p2 < p2j; p2++) DestroyDynamicObject(EstMuni[p2]);
        for(new p3 = 0, p3j = sizeof(PuestosPuentesote); p3 < p3j; p3++) DestroyDynamicObject(PuestosPuentesote[p3]);
        for(new p4 = 0, p4j = sizeof(PUnity); p4 < p4j; p4++) DestroyDynamicObject(PUnity[p4]);
        for(new p6 = 0, p6j = sizeof(PMontana); p6 < p6j; p6++) DestroyDynamicObject(PMontana[p6]);
        for(new p7 = 0, p7j = sizeof(PBell); p7 < p7j; p7++) DestroyDynamicObject(PBell[p7]);
        for(new p8 = 0, p8j = sizeof(PTung); p8 < p8j; p8++) DestroyDynamicObject(PTung[p8]);
        for(new p9 = 0, p9j = sizeof(PColinas); p9 < p9j; p9++) DestroyDynamicObject(PColinas[p9]);
        for(new p10 = 0, p10j = sizeof(PCNN); p10 < p10j; p10++) DestroyDynamicObject(PCNN[p10]);
        for(new p11 = 0, p11j = sizeof(PBAY); p11 < p11j; p11++) DestroyDynamicObject(PBAY[p11]);
        for(new p12 = 0, p12j = sizeof(PELQUE); p12 < p12j; p12++) DestroyDynamicObject(PELQUE[p12]);
        for(new p13 = 0, p13j = sizeof(PEME); p13 < p13j; p13++) DestroyDynamicObject(PEME[p13]);
        for(new p14 = 0, p14j = sizeof(PTRANS); p14 < p14j; p14++) DestroyDynamicObject(PTRANS[p14]);
        for(new p15 = 0, p15j = sizeof(PESTALV); p15 < p15j; p15++) DestroyDynamicObject(PESTALV[p15]);
        for(new p16 = 0, p16j = sizeof(PMARK); p16 < p16j; p16++) DestroyDynamicObject(PMARK[p16]);
        for(new p17 = 0, p17j = sizeof(PSANT); p17 < p17j; p17++) DestroyDynamicObject(PSANT[p17]);
        for(new p18 = 0, p18j = sizeof(PBASU); p18 < p18j; p18++) DestroyDynamicObject(PBASU[p18]);
        for(new p19 = 0, p19j = sizeof(PLSSF); p19 < p19j; p19++) DestroyDynamicObject(PLSSF[p19]);
        for(new p20 = 0, p20j = sizeof(PGILI); p20 < p20j; p20++) DestroyDynamicObject(PGILI[p20]);
        for(new p21 = 0, p21j = sizeof(PJULIU); p21 < p21j; p21++) DestroyDynamicObject(PJULIU[p21]);
        for(new p22 = 0, p22j = sizeof(PPICKE); p22 < p22j; p22++) DestroyDynamicObject(PPICKE[p22]);
        for(new p23 = 0, p23j = sizeof(PAA); p23 < p23j; p23++) DestroyDynamicObject(PAA[p23]);
        for(new p24 = 0, p24j = sizeof(PPAYA); p24 < p24j; p24++) DestroyDynamicObject(PPAYA[p24]);
        for(new p25 = 0, p25j = sizeof(PELQ); p25 < p25j; p25++) DestroyDynamicObject(PELQ[p25]);
        for(new p26 = 0, p26j = sizeof(PLSF); p26 < p26j; p26++) DestroyDynamicObject(PLSF[p26]);
        for(new p27 = 0, p27j = sizeof(PPIZEA); p27 < p27j; p27++) DestroyDynamicObject(PPIZEA[p27]);
        for(new p28 = 0, p28j = sizeof(PDELAPI); p28 < p28j; p28++) DestroyDynamicObject(PDELAPI[p28]);
        for(new p29 = 0, p29j = sizeof(PFADO); p29 < p29j; p29++) DestroyDynamicObject(PFADO[p29]);
        for(new p30 = 0, p30j = sizeof(PASF); p30 < p30j; p30++) DestroyDynamicObject(PASF[p30]);
        for(new p31 = 0, p31j = sizeof(PC1); p31 < p31j; p31++) DestroyDynamicObject(PC1[p31]);
        for(new textoS = 0; textoS < 32; textoS ++) { if(IsValidDynamic3DTextLabel(TextoSombrero[textoS])) DestroyDynamic3DTextLabel(TextoSombrero[textoS]); }
        for(new textoc = 0; textoc < 32; textoc ++) { if(IsValidDynamic3DTextLabel(TextoDulces[textoc])) DestroyDynamic3DTextLabel(TextoDulces[textoc]); }
        foreach(new i : Player)
        {
            if(GetPVarInt(i,"escuchafc") == 1)
            {
                DeletePVar(i,"escuchafc");
                StopAudioStreamForPlayer(i);
            }
        }
        for(new sombrero = 0; sombrero < 128; sombrero++) { if(IsValidDynamicObject(E_Halloween[sombreros][sombrero])) DestroyDynamicObject(E_Halloween[sombreros][sombrero]); }
        for(new payasos = 0; payasos < 32; payasos++) { if(IsValidDynamicActor(E_Halloween[Payasos][payasos])) DestroyDynamicActor(E_Halloween[Payasos][payasos]); }
        HallX = false;
    }
}

EventoFC(bool:activo)
{
    if(activo == true)
    {
        EventoActivo = true;
        t_cerveza = SetTimer("MusicaEventos", 1000, true);
        CreateFCActorStatic(11, 1468.3059,-1708.6754,14.0469,269.4558, 0);
        CreateFCActorStatic(171, 1488.5924,-1688.5847,14.0469,89.8875, 5);
        //
        MapaFC[0] = CreateDynamicObject(983, 1512.71204, -1718.77197, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[1] = CreateDynamicObject(983, 1506.31677, -1718.78125, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[2] = CreateDynamicObject(983, 1499.94507, -1718.78333, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[3] = CreateDynamicObject(983, 1495.15002, -1718.79175, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[4] = CreateDynamicObject(983, 1515.59998, -1639.37805, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[5] = CreateDynamicObject(983, 1515.59998, -1632.98206, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[6] = CreateDynamicObject(983, 1515.59998, -1626.57202, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[7] = CreateDynamicObject(983, 1461.16272, -1605.77173, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[8] = CreateDynamicObject(983, 1456.35779, -1605.77087, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[9] = CreateDynamicObject(2232, 1481.46399, -1677.80518, 13.63520,   0.00000, 0.00000, 323.65170);
        MapaFC[10] = CreateDynamicObject(2232, 1482.31555, -1678.18225, 13.63520,   0.00000, 0.00000, 0.00000);
        MapaFC[11] = CreateDynamicObject(1486, 1487.31128, -1687.36047, 13.97850,   0.00000, 0.00000, 0.00000);
        MapaFC[12] = CreateDynamicObject(1486, 1487.39380, -1688.17761, 13.97850,   0.00000, 0.00000, 0.00000);
        MapaFC[13] = CreateDynamicObject(1486, 1469.67480, -1699.49329, 13.99030,   0.00000, 0.00000, 0.00000);
        MapaFC[14] = CreateDynamicObject(1486, 1469.36218, -1697.86951, 13.99030,   0.00000, 0.00000, 0.00000);
        MapaFC[15] = CreateDynamicObject(1486, 1469.77808, -1688.53674, 14.03460,   0.00000, 0.00000, 0.00000);
        MapaFC[16] = CreateDynamicObject(1486, 1469.44482, -1686.77649, 14.03460,   0.00000, 0.00000, 0.00000);
        MapaFC[17] = CreateDynamicObject(1486, 1469.59900, -1709.49463, 14.00890,   0.00000, 0.00000, 0.00000);
        MapaFC[18] = CreateDynamicObject(983, 1451.56055, -1605.77063, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[19] = CreateDynamicObject(983, 1443.56006, -1608.95203, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[20] = CreateDynamicObject(983, 1464.02002, -1718.69995, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[21] = CreateDynamicObject(983, 1457.61865, -1718.70398, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[22] = CreateDynamicObject(983, 1451.21997, -1718.69995, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[23] = CreateDynamicObject(983, 1446.41602, -1718.69800, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[24] = CreateDynamicObject(983, 1443.22766, -1689.87524, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[25] = CreateDynamicObject(983, 1443.22961, -1685.06982, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[26] = CreateDynamicObject(700, 1498.74097, -1710.37708, 13.72656,   356.85840, 0.00000, 3.14159);
        MapaFC[27] = CreateDynamicObject(700, 1499.50281, -1696.61536, 13.72656,   356.85840, 0.00000, 3.14159);
        MapaFC[28] = CreateDynamicObject(641, 1494.62268, -1710.68396, 11.10156,   356.85840, 0.00000, 3.14159);
        MapaFC[29] = CreateDynamicObject(620, 1499.42749, -1706.87927, 11.83594,   356.85840, 0.00000, 3.14159);
        MapaFC[30] = CreateDynamicObject(673, 1493.28943, -1708.06934, 12.39844,   356.85840, 0.00000, 3.14159);
        MapaFC[31] = CreateDynamicObject(1231, 1491.70972, -1682.38379, 15.63281,   356.85840, 0.00000, 3.14159);
        MapaFC[32] = CreateDynamicObject(1231, 1491.73425, -1713.63037, 15.62500,   356.85840, 0.00000, 3.14159);
        MapaFC[33] = CreateDynamicObject(1231, 1465.30127, -1713.59302, 15.62500,   356.85840, 0.00000, 3.14159);
        MapaFC[34] = CreateDynamicObject(1231, 1465.17444, -1682.35266, 15.63281,   356.85840, 0.00000, 3.14159);
        MapaFC[35] = CreateDynamicObject(18761, 1478.94067, -1670.88538, 17.77470,   0.00000, 0.00000, 0.72560);
        MapaFC[36] = CreateDynamicObject(19608, 1479.29980, -1675.19836, 13.01500,   0.00000, 0.00000, 359.99899);
        MapaFC[37] = CreateDynamicObject(19609, 1477.16357, -1674.45325, 13.06040,   0.00000, 0.00000, 0.00000);
        MapaFC[38] = CreateDynamicObject(17055, 1497.48132, -1675.66064, 13.87740,   0.00000, 0.00000, 180.00000);
        MapaFC[39] = CreateDynamicObject(832, 1481.28723, -1700.39063, 12.95090,   0.00000, 0.00000, 219.33569);
        MapaFC[40] = CreateDynamicObject(832, 1481.33325, -1695.90991, 12.95090,   0.00000, 0.00000, 226.56580);
        MapaFC[41] = CreateDynamicObject(1486, 1487.61548, -1710.25769, 13.97900,   0.00000, 0.00000, 0.00000);
        MapaFC[42] = CreateDynamicObject(1486, 1487.42468, -1708.62646, 13.97900,   0.00000, 0.00000, 0.00000);
        MapaFC[43] = CreateDynamicObject(832, 1478.35901, -1699.35620, 12.82991,   0.00000, 0.00000, 30.27012);
        MapaFC[44] = CreateDynamicObject(832, 1478.25269, -1695.00073, 12.82382,   0.00000, 0.00000, 28.04523);
        MapaFC[45] = CreateDynamicObject(1362, 1467.76501, -1691.53235, 13.64250,   0.00000, 0.00000, 0.00000);
        MapaFC[46] = CreateDynamicObject(1362, 1489.20435, -1695.68347, 13.64250,   0.00000, 0.00000, 0.00000);
        MapaFC[47] = CreateDynamicObject(2357, 1479.74915, -1700.09753, 13.53090,   0.00000, 0.00000, 90.00000);
        MapaFC[48] = CreateDynamicObject(2357, 1479.73193, -1695.62366, 13.53090,   0.00000, 0.00000, 90.00000);
        MapaFC[49] = CreateDynamicObject(19820, 1480.17700, -1701.81750, 13.88919,   0.00000, 0.00000, 0.00000);
        MapaFC[50] = CreateDynamicObject(983, 1490.35803, -1718.78931, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[51] = CreateDynamicObject(983, 1465.61975, -1718.69556, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[52] = CreateDynamicObject(13367, 1460.16016, -1673.33130, 9.81790,   0.00000, 0.00000, 0.00000);
        MapaFC[53] = CreateDynamicObject(983, 1515.21045, -1690.02991, 13.70000,   0.00000, 0.00000, 12.80110);
        MapaFC[54] = CreateDynamicObject(982, 1515.92188, -1705.94910, 13.69590,   0.00000, 0.00000, 0.00000);
        MapaFC[55] = CreateDynamicObject(982, 1443.22485, -1705.87866, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[56] = CreateDynamicObject(982, 1443.55542, -1623.35718, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[57] = CreateDynamicObject(982, 1515.59753, -1618.56494, 13.70000,   0.00000, 0.00000, 0.00000);
        MapaFC[58] = CreateDynamicObject(982, 1502.78198, -1605.77515, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[59] = CreateDynamicObject(982, 1477.16895, -1605.77698, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[60] = CreateDynamicObject(983, 1446.75427, -1605.77393, 13.70000,   0.00000, 0.00000, 90.00000);
        MapaFC[61] = CreateDynamicObject(1486, 1480.09229, -1697.34497, 14.24250,   0.00000, 0.00000, 0.00000);
        MapaFC[62] = CreateDynamicObject(1486, 1479.93115, -1699.07031, 14.24250,   0.00000, 0.00000, 0.00000);
        MapaFC[63] = CreateDynamicObject(3861, 1488.19421, -1688.08167, 14.19930,   0.00000, 0.00000, 269.59970);
        MapaFC[64] = CreateDynamicObject(3861, 1488.19421, -1699.01074, 14.19930,   0.00000, 0.00000, 269.59970);
        MapaFC[65] = CreateDynamicObject(3861, 1468.84741, -1688.02112, 14.19930,   0.00000, 0.00000, 89.77130);
        MapaFC[66] = CreateDynamicObject(3861, 1468.84741, -1699.00305, 14.19930,   0.00000, 0.00000, 89.77130);
        MapaFC[67] = CreateDynamicObject(3861, 1488.19421, -1709.41479, 14.19930,   0.00000, 0.00000, 269.59973);
        MapaFC[68] = CreateDynamicObject(3861, 1468.84741, -1708.81409, 14.19930,   0.00000, 0.00000, 89.77126);
        //OTROS
        MapasTexturizados[0] = CreateDynamicObject(12921, 1477.80725, -1718.48755, 16.15080,   0.00000, 0.00000, 0.00000);
        MapasTexturizados[1] = CreateDynamicObject(19812, 1469.65149, -1707.77307, 14.09240,   90.00000, 0.00000, 270.00000);
        MapasTexturizados[2] = CreateDynamicObject(19812, 1487.38135, -1689.11743, 14.14640,   0.00000, 90.00000, 0.00000);
        MapasTexturizados[3] = CreateDynamicObject(19812, 1469.62573, -1718.40686, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[4] = CreateDynamicObject(19812, 1472.61548, -1718.28003, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[5] = CreateDynamicObject(19812, 1460.55164, -1644.54797, 13.45478,   0.00000, 0.00000, 0.00000);
        MapasTexturizados[6] = CreateDynamicObject(19812, 1498.45264, -1645.04199, 13.54905,   0.00000, 0.00000, 0.00000);
        MapasTexturizados[7] = CreateDynamicObject(19812, 1485.27295, -1613.93701, 13.47220,   0.00000, 0.00000, 0.00000);
        MapasTexturizados[8] = CreateDynamicObject(19812, 1480.67273, -1717.96887, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[9] = CreateDynamicObject(19812, 1483.03955, -1718.25085, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[10] = CreateDynamicObject(19812, 1488.94177, -1699.95435, 13.37090,   0.00000, 0.00000, 0.00000);
        MapasTexturizados[11] = CreateDynamicObject(19812, 1486.14343, -1718.40515, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[12] = CreateDynamicObject(19812, 1474.88391, -1717.89111, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[13] = CreateDynamicObject(19812, 1478.12585, -1718.00891, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[14] = CreateDynamicObject(19812, 1477.43347, -1718.14954, 13.52320,   0.00000, 0.00000, 26.00050);
        MapasTexturizados[15] = CreateDynamicObject(19812, 1477.68628, -1717.46594, 13.52320,   0.00000, 0.00000, 20.55360);
        MapasTexturizados[16] = CreateDynamicObject(19812, 1477.74670, -1717.99500, 14.19505,   90.00000, -0.31430, 215.19220);

        for(new map = 1; map < sizeof(MapasTexturizados); map++) SetDynamicObjectMaterial(MapasTexturizados[map], 0, 2988, "kcomp_gX", "kmwood_gate",0xFFFFFFFF);
        for(new map = 1; map < sizeof(MapasTexturizados); map++) SetDynamicObjectMaterial(MapasTexturizados[map], 1, 2988, "kcomp_gX", "kmwood_gate",0xFFFFFFFF);
        for(new map = 1; map < sizeof(MapasTexturizados); map++) SetDynamicObjectMaterial(MapasTexturizados[map], 2, 2988, "kcomp_gX", "kmwood_gate",0xFFFFFFFF);

        fiestaCervezaTexturaTexto[0] = CreateDynamicObject(19353, 1474.77576, -1718.61035, 18.07710, 0.00000, 0.00000, 90.00000); SetDynamicObjectMaterialText(fiestaCervezaTexturaTexto[0], 0,"{FFFFFF}FIESTA", OBJECT_MATERIAL_SIZE_128x128, "Arial", 24, 1, -16730675, 0, 1);
        fiestaCervezaTexturaTexto[1] = CreateDynamicObject(19353, 1477.93787, -1718.61035, 18.07710, 0.00000, 0.00000, 90.00000); SetDynamicObjectMaterialText(fiestaCervezaTexturaTexto[1], 0,"{FFFFFF}DE LA", OBJECT_MATERIAL_SIZE_128x128, "Arial", 24, 1, -16730675, 0, 1);
        fiestaCervezaTexturaTexto[2] = CreateDynamicObject(19353, 1480.92993, -1718.61035, 18.07710, 0.00000, 0.00000, 90.00000); SetDynamicObjectMaterialText(fiestaCervezaTexturaTexto[2], 0,"{FFFFFF}CERVEZA", OBJECT_MATERIAL_SIZE_128x128, "Arial", 24, 1, -16730675, 0, 1);
    }
    else
    {
        EventoActivo = false;
        KillTimer(t_cerveza);
        foreach(new i : Player)
        {
            if(GetPVarInt(i,"escuchafc") == 1) DeletePVar(i,"escuchafc"),StopAudioStreamForPlayer(i);
        }
        for(new m = 0, mj = sizeof(MapaFC); m < mj; m++) DestroyDynamicObject(MapaFC[m]);
        for(new n = 0, nj = sizeof(MapasTexturizados); n < nj; n++) DestroyDynamicObject(MapasTexturizados[n]);
        for(new l = 0, lj = sizeof(LabelFC); l < lj; l++) { if(IsValidDynamic3DTextLabel(LabelFC[l])) DestroyDynamic3DTextLabel(LabelFC[l]); }
        for(new a = 0, aj = sizeof(ActorFC); a < aj; a++) { if(IsValidDynamicActor(ActorFC[a])) DestroyDynamicActor(ActorFC[a]); }
        for(new i = 0, mj = sizeof(fiestaCervezaTexturaTexto); i < mj; i++) DestroyDynamicObject(fiestaCervezaTexturaTexto[i]);
    }
}
EventoNavi(bool:activo)
{
    if(activo == true)
    {
        NidadX = true;
        //
        MapaNavi[0] = CreateDynamicObject(19076, 121.16208, -1574.92578, 9.38736,   0.00000, 0.00000, 0.00000);
        MapaNavi[1] = CreateDynamicObject(19076, 1181.94067, -1298.20972, 13.21434,   0.00000, 0.00000, 0.00000);
        MapaNavi[2] = CreateDynamicObject(19076, 1763.81494, -1309.83044, 12.59019,   0.00000, 0.00000, 0.00000);
        MapaNavi[3] = CreateDynamicObject(19076, 1413.81287, -1168.94092, 22.81257,   0.00000, 0.00000, 0.00000);
        MapaNavi[4] = CreateDynamicObject(19076, 186.96976, -1411.46313, 45.08032,   0.00000, 0.00000, 0.00000);
        MapaNavi[5] = CreateDynamicObject(19076, -2617.34766, 581.85077, 14.61531,   0.00000, 0.00000, 0.00000);
        MapaNavi[6] = CreateDynamicObject(19076, 1582.51257, 1850.76685, 9.81215,   0.00000, 0.00000, 0.00000);
        MapaNavi[7] = CreateDynamicObject(19076, 1511.32275, -1611.90784, 13.04041,   0.00000, 0.00000, 0.00000);
        MapaNavi[8] = CreateDynamicObject(19058, 1514.13110, -1613.13330, 13.47272,   0.00000, 0.00000, 337.32285);
        MapaNavi[9] = CreateDynamicObject(19055, 1514.01807, -1611.29736, 13.45324,   0.00000, 0.00000, 3.69078);
        MapaNavi[10] = CreateDynamicObject(19054, 1513.24670, -1609.58289, 13.55740,   0.00000, 90.00000, 42.16126);
        MapaNavi[11] = CreateDynamicObject(19054, 1512.47534, -1614.52612, 13.04725,   0.00000, 0.00000, 0.00000);
        MapaNavi[12] = CreateDynamicObject(19055, 1510.55139, -1613.90710, 13.51257,   0.00000, 0.00000, 27.92576);
        MapaNavi[13] = CreateDynamicObject(19054, 1509.36902, -1612.42773, 13.04759,   0.00000, 0.00000, 0.81311);
        MapaNavi[14] = CreateDynamicObject(19054, 1509.44128, -1610.81543, 13.44098,   0.00000, 0.00000, 48.53526);
        MapaNavi[15] = CreateDynamicObject(19056, 1510.04395, -1609.32678, 13.13857,   0.00000, 0.00000, 22.44990);
        MapaNavi[16] = CreateDynamicObject(19057, 1511.54639, -1609.04822, 13.25057,   0.00000, 0.00000, 348.69772);
        TextoNavi = Create3DTextLabel("A partir del día 25 puedes abrir tu {DBED16}/regalo{FFFFFF} de navidad",-1, 1511.3228, -1611.9078, 14.0244,30.0,0,0);
    }
    else
    {
        NidadX = false;
        Delete3DTextLabel(TextoNavi);
        for(new m = 0, mj = sizeof(MapaNavi); m < mj; m++) DestroyDynamicObject(MapaNavi[m]);
    }
}

EstaCerveza(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0,1470.5787,-1708.7308,14.0469)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 5.0,1486.4961,-1688.5503,14.0469)) return 1;
    return 0;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == RoadblockList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return SendClientMessage(playerid, COLOR_WHITE, "Se alcanzó el límite de objetos.");
	    CopObjectData[id][ObjCreated] = true;
	    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
	    CopObjectData[id][Type] = OBJECT_TYPE_ROADBLOCK;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);
	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;
		new string[96];
		format(string, sizeof(string), "Barricada (ID: %d)\n{FFFFFF}Puesta por %s", id, CopObjectData[id][Owner]);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 1.35, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
	}
	if(listid == SignList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return SendClientMessage(playerid, COLOR_WHITE, "Se alcanzó el límite de objetos.");
	    CopObjectData[id][ObjCreated] = true;
	    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
	    CopObjectData[id][Type] = OBJECT_TYPE_SIGN;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);
	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.25;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z - 1.25, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;
		new string[96];
		format(string, sizeof(string), "Señal (ID: %d)\n{FFFFFF}Puesta por %s", id, CopObjectData[id][Owner]);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 2.0, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
	}
    new DB_Query[256];
    if(listid == Helrp)
    {
        if(response)
        {
            if(modelid == 447) modelid = 469;
            ComproVehiculoTienda(playerid, modelid, 1, 80);
        }
        else callcmd::tienda(playerid);
        return 1;
    }
    if(listid == Motosrp)
    {
        if(response) ComproVehiculoTienda(playerid, modelid, 1, 35);
        else callcmd::tienda(playerid);
        return 1;
    }
    if(listid == vehrp)
    {
        if(response) ComproVehiculoTienda(playerid, modelid, 1, 40);
        else callcmd::tienda(playerid);
        return 1;
    }
    if(listid == barp)
    {
        if(response) ComproVehiculoTienda(playerid, modelid, 1, 30);
        else callcmd::tienda(playerid);
        return 1;
    }
    if(listid == RopaHombre)
    {
        if(response)
        {
            PlayerInfo[playerid][pRopa] = modelid;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PlayerInfo[playerid][Nickname]);
            mysql_pquery(handle_db, DB_Query);
            SendClientMessage(playerid,-1,"Has comprado una nueva, con un precio de {00CC00}$1500");
            QuitarDinero(playerid, 1500);
        }
        return 1;
    }
    if(listid == RopaMujer)
    {
        if(response)
        {
            PlayerInfo[playerid][pRopa] = modelid;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PlayerInfo[playerid][Nickname]);
            mysql_pquery(handle_db, DB_Query);
            SendClientMessage(playerid,-1,"Has comprado una nueva, con un precio de {00CC00}$1500");
            QuitarDinero(playerid, 1500);
        }
        return 1;
    }
    if(listid == objetos)
    {
        if(response)
        {
            if(ContarPrendas(playerid) >= MAX_PTOYS) return SendClientMessage(playerid,-1,"No puedes tener mas prendas.");
            if(PlayerInfo[playerid][Totems] < 3) return SendClientMessage(playerid,-1,"Comprar una prenda cuesta {00CC00}3 Totems{FFFFFF}.");
            for(new i = 0; i != MAX_PTOYS; i ++)
            {
                if(PlayerToys[playerid][i][pToyValid] && PlayerToys[playerid][i][pModelID] == modelid) return SendClientMessage(playerid, -1, "Ya tienes esta {3399FF}prenda{FFFFFF}.");
            }
            PrendaMarcada[playerid] = modelid;
            ShowPlayerDialog(playerid, COMPRAR_PRENDA, DIALOG_STYLE_MSGBOX, "{dbed15}!ATENCIÓN!", "{FFFFFF}El objeto solicitado cuesta {DBED15}3 Totems.\n\n{FFFFFF}¿Quieres comprar este objeto?","Comprar","Cancelar");
        }
    }
    if(listid == RopaHombreBZ)
    {
        if(response)
        {
            PlayerInfo[playerid][pRopa] = modelid;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PlayerInfo[playerid][Nickname]);
            mysql_pquery(handle_db, DB_Query);
            PlayerInfo[playerid][Moneda] -= 5;
            SendClientMessage(playerid,-1,"Has comprado una nueva {BBE2FF}ropa{FFFFFF} por {00CC00}5 "SERVER_COIN"");
        }
        return 1;
    }
    if(listid == policiahombre || listid == policiamujer)
    {
        if(response)
        {
            if(PlayerInfo[playerid][pRango] < 8)
            {
                if(modelid == 302 || modelid == 310 || modelid == 282 || modelid == 288 || modelid == 311 || modelid == 283 || modelid == 303 || modelid == 304 || modelid == 305 || modelid == 2 || modelid == 240)
                    return SendClientMessage(playerid, COLOR_WHITE, "Este uniforme es solo para líderes.");
            }
            Frecuencia[playerid] = 1;
            frecuencias[1]++;
            PlayerInfo[playerid][pDuty] = 1;
            SendClientMessage(playerid, COLOR_MEGAPHONE, "Te pusiste el uniforme de policía.");
            SetPlayerSkin(playerid, modelid);
            SetPlayerColor(playerid,COLOR_POLICIA);
            PlayerInfo[playerid][pModelo] = GetPlayerSkin(playerid);
            RopaMine[playerid] = 0, RopaMedi[playerid] = 0, RopaBasu[playerid] = 0,RopaMeca[playerid] = 0;
        }
        else return 1;
    }
    if(listid == RopaMujerBZ)
    {
        if(response)
        {
            PlayerInfo[playerid][pRopa] = modelid;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PlayerInfo[playerid][Nickname]);
            mysql_pquery(handle_db, DB_Query);
            PlayerInfo[playerid][Moneda] -= 5;
            SendClientMessage(playerid,-1,"Has comprado una nueva {BBE2FF}ropa{FFFFFF} por {00CC00}5 "SERVER_COIN"");
        }
        return 1;
    }
    return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerClickMap) PlayerID: %d", playerid);
    #endif
    if(PlayerInfo[playerid][pAdmin] > 3)
    {
        Tiempos[playerid][TiempoAntiTP] = gettime() + 3;
        if(GetPlayerState(playerid) == 2) return SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ);
        else SetPlayerPosEx(playerid, fX, fY, fZ);
	}    
    return 1;
}
public MostrarBoxMedico(playerid)
{
    new string[360],string2[360], string3[360], string4[360], medicos = GetMedicalWorking();
	if(medicos < 1) format(string3,sizeof(string3),"\n{00CC00}- {FFFFFF}Solicitar servicio medico\tUn medico ira a buscarte\t{00cc00}No{FFFFFF}");
    else format(string3,sizeof(string3),"\n{00CC00}- {FFFFFF}Solicitar servicio medico\tUn medico ira a buscarte {FFFB00}(%d en servicio){FFFFFF}\t{00cc00}No{FFFFFF}",medicos);
	format(string4,sizeof(string4),"\n{52b4be}-{FFFFFF} Ir al hospital\tTranslado directo al hospital\t{EB0000}Si{FFFFFF}");
	for(new f = 0; f<MAX_FABRICAS; f++)
	{
	    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
	    {
	        if(Fabricas[f][MedicoContratado] != 0)
	        {
	            if(IsPlayerInRangeOfPoint(playerid,500.0,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ]) || IsPlayerInRangeOfPoint(playerid,500.0,Fabricas[f][pSalidaX],Fabricas[f][pSalidaY],Fabricas[f][pSalidaZ]))
	            {
	                if(Fabricas[f][EstadoMedico] == 0) format(string2,sizeof(string2),"\n{00CC00}- {FFFFFF}Atencion clandestina\tTranslado directo a tu fabrica\t\t{00cc00}No{FFFFFF}");
	            }
	        }
	    }
	}
	format(string,sizeof(string),"Accion\tDetalles\tPerdida de armas\n%s%s%s",string3,string4,string2);
	ShowPlayerDialog(playerid, MMEDICO, DIALOG_STYLE_TABLIST_HEADERS, "Necesitas atencion medica, selecciona una opcion.", string, "Aceptar","Cancelar");
	return 1;
}
public DestruirDineroColegiala(dinero)
{
    DestroyDynamicObject(DineroColegiala[dinero]);
    return 1;
}
public RutraTransportista(playerid)
{
    tcarga[playerid] = SetTimerEx("RutaTransportista",1000,true,"d",playerid);
    TimerCargarCamion[playerid] = 10;
    TogglePlayerControllable(playerid, 0);
    SetPVarInt(playerid, "IsFrozen", 0);
    DisablePlayerCheckpoint(playerid);
    return 1;
}
public MandarMensajeTransportistas(playerid)
{
    new randomNumberTransport;
    switch(PlayerInfo[playerid][pNivelTransportista])
    {
        case 1: randomNumberTransport = 2; case 2: randomNumberTransport = 4;
        case 3: randomNumberTransport = 6; case 4: randomNumberTransport = 8;
        case 5: randomNumberTransport = 10; case 6: randomNumberTransport = 12;
        default: randomNumberTransport = 12;
    }
    new punto = random(randomNumberTransport);
    switch(punto) {
        case 0: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Hunter Quarry?"); Transportistas[playerid][Ruta] = 1; }
        case 1: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de sprunk de Montgomery?"); Transportistas[playerid][Ruta] = 2; }
        case 2: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Hunter Quarry?"); Transportistas[playerid][Ruta] = 3; }
        case 3: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la maderera de Angel Pine?"); Transportistas[playerid][Ruta] = 4; }
        case 4: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la distribuidora de Sprunk de Whitewood Estates?"); Transportistas[playerid][Ruta] = 5; }
        case 5: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Esplanade North?"); Transportistas[playerid][Ruta] = 6; }
        case 6: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Bone County?"); Transportistas[playerid][Ruta] = 7; }
        case 7: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de transformadores de Bayside?"); Transportistas[playerid][Ruta] = 8; }
        case 8: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Bayside?"); Transportistas[playerid][Ruta] = 9; }
        case 9: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Bayside?"); Transportistas[playerid][Ruta] = 10; }
        case 10: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón ferroviario de Sobell Rail Yards?"); Transportistas[playerid][Ruta] = 11; }
        case 11: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de importaciones de Blue Berry?"); Transportistas[playerid][Ruta] = 12; }
    }
    PlayerInfo[playerid][Mobile] = 2540;
    if(PlayerInfo[playerid][Agonizando] == 0) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}
public RutaTransportista(playerid)
{
    if(Cargando2[playerid] <= 10)
    {
        Cargando2[playerid]++;
        if(Cargando2[playerid] == 10) {
            TimerCargarCamion[playerid] = 0;
            new vehicleid = GetPlayerVehicleID(playerid);
            if(!IsPlayerInAnyVehicle(playerid)) return 1;
            if(DFT(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                TogglePlayerControllable(playerid, 1);
                SetPVarInt(playerid, "IsFrozen", 1);
                KillTimer(tcarga[playerid]);
                Cargando2[playerid] = 0;
                switch(Transportistas[playerid][Ruta])  {
                    case 1: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(758,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(758,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.6750000,-0.1500000,-0.3000000,-2.7000000,2.7000000,-24.3000060);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), 0.7500000,-3.7500010,-0.3000000,-2.7000000,2.7000000,-24.3000060);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Market");
                        MarcadoTransportistaGPS(playerid,1251.0417,-1258.1145,13.1514,7.0);
                    }
                    case 2: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto3] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0750000,1.1250000,0.0000000,0.0000000,0.0000000,0.0000000);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), -0.0750000,-1.5750000,0.0000000,-0.0000010,0.0000000,18.8999990);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto3], GetPlayerVehicleID(playerid), -0.0750000,-4.1250010,0.0000000,-0.0000010,0.0000000,-0.0000020);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en la distribuidora de Sprunk de Whitewood Estates");
                        MarcadoTransportistaGPS(playerid,1048.7633,2111.3118,10.8203,7.0);
                    }
                    case 3: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3502,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-2.4000000,1.3500000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Doherty");
                        MarcadoTransportistaGPS(playerid,-2097.1208,208.2063,35.3177,7.0);
                    }
                    case 4: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(684,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(684,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.4162200,-1.6781400,0.0417000,180.0000000,178.0000000,0.0000000);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), 0.3304200,-1.6368600,0.0417000,0.0000000,4.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el aserradero de Flint Country");
                        MarcadoTransportistaGPS(playerid,-267.1364,-2151.0940,28.8347,7.0);
                    }
                    case 5: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2934,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0150000,-1.2660000,1.1910000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el puerto de Easter Basin");
                        MarcadoTransportistaGPS(playerid,-1733.7360,184.4388,3.5547,7.0);
                    }
                    case 6: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(934,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0916400,-0.7947100,1.0587000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el deposito ferroviario de Sobell Rail Yards");
                        MarcadoTransportistaGPS(playerid,2811.3918,1654.1230,10.8203,7.0);
                    }
                    case 7: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3502,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-2.4000000,1.3500000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Starfish Casino");
                        MarcadoTransportistaGPS(playerid,2415.1252,1893.7064,6.0156,7.0);
                    }
                    case 8: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3273,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0711300,-1.5323400,-0.2663500,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en la central eléctrica de Bone Country");
                        MarcadoTransportistaGPS(playerid,789.2708,2028.4414,6.7109,7.0);
                    }
                    case 9: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2785,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-1.2750000,0.5999990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el casino Caligula de Caligula's Palace");
                        MarcadoTransportistaGPS(playerid,2316.5032,1733.3368,10.8203,7.0);
                    }
                    case 10:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2785,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-1.2750000,0.5999990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el depósito de The Four Dragons Casino");
                        MarcadoTransportistaGPS(playerid,1905.8856,958.5278,10.8203,7.0);
                    }
                    case 11:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3585,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0167000,-1.7397000,1.3390000,0.0000000,0.0000000,90.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el puerto de Ocean Docks");
                        MarcadoTransportistaGPS(playerid,2609.3381,-2202.1799,13.5469,7.0);
                    }
                    case 12:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(1348,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(1348,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.5249990,-2.1000000,0.4499990,-0.0000010,0.0000000,89.0999830);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), -0.5249990,-2.1000000,0.4499990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {00CC00}cargado correctamente{FFFFFF}, entrega la carga en el hospital de Las Venturas Airport");
                        MarcadoTransportistaGPS(playerid,1607.8633,1718.3813,10.8203,7.0);
                    }
                }
                tviaje[playerid] = 2;
            }
        }
    }
    return 1;
}
public TextoMarcelo(playerid)
{
    new texto = random(7);
    switch(texto)
    {
        case 0: SetPlayerChatBubble(playerid, "No puede pasar, personal autorizado solamente.", COLOR_WHITE, 30.0, 5000);
        case 1: SetPlayerChatBubble(playerid, "Fuego a discreción, disparar a matar.", COLOR_WHITE, 30.0, 5000);
        case 2: SetPlayerChatBubble(playerid, "Si no se va en este momento, tendré que llevarlo al calabozo.", COLOR_WHITE, 30.0, 5000);
        case 3: SetPlayerChatBubble(playerid, "¡Salga de aquí ahora mismo!", COLOR_WHITE, 30.0, 5000);
        case 4: SetPlayerChatBubble(playerid, "Largo, ¡vete!", COLOR_WHITE, 30.0, 5000);
        case 5: SetPlayerChatBubble(playerid, "Señor, salga de aquí.", COLOR_WHITE, 30.0, 5000);
        case 6: SetPlayerChatBubble(playerid, "Puede pasar.", COLOR_WHITE, 30.0, 5000);
    }
    return 1;
}
public CurandoHospital(playerid)
{
    if(ValueTimerBugH[playerid] == 0)
    {
        if(PlayerInfo[playerid][j_HEALTH] < 100)
        {
            GivePlayerHealth(playerid, 2.0);
            if(GetPlayerAnimationIndex(playerid) != 695) ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0,1);
        }
        else
        {
            new Float:Angle;
            if(PlayerInfo[playerid][j_HEALTH] > 100) SetPlayerHealthEx(playerid, 100);
            HCalculo[playerid] = 0;
            GetPlayerFacingAngle(playerid, Angle);
            SetPlayerFacingAngle(playerid, Angle + 180);
            ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",3.00,0,0,0,0,0,1);
            ValueTimerBugH[playerid] = 1;
            KillTimer(HCurando[playerid]);
        	switch(FabricaMedica[playerid])
			{
				case 0:
				{
					KillTimer(HCurando[playerid]);
					SendClientMessage(playerid,-1,"Ya te has recuperado completamente, puedes ir a tu casa.");
					switch(PlayerInfo[playerid][enHospital])
					{
						case 1: CamillaLS[PlayerInfo[playerid][pCama]-1] = 0;
						case 2: CamillaSF[PlayerInfo[playerid][pCama]-1] = 0;
						case 3: CamillaLV[PlayerInfo[playerid][pCama]-1] = 0;
						case 4: CamillaGA[PlayerInfo[playerid][pCama]-1] = 0;
					}
					PlayerInfo[playerid][pCama] = 0;
				}
				case 1: SendClientMessage(playerid,-1,"Tu recuperación fue un éxito, puedes volver a trabajar.");
			}
			FabricaMedica[playerid] = 0;
		}
	}
	return 0;
}
public DescongelarCBUG(playerid)
{
    TogglePlayerControllable(playerid,1);
    SetPVarInt(playerid, "IsFrozen", 1);
}
public MostrarLuegoDe(playerid)
{
    TextDrawShowForPlayer(playerid, LuegoDe);
    TextDrawShowForPlayer(playerid, Completonegro);
    SetTimerEx("OcultarLuegoDe",3000,false,"d",playerid);
    return 1;
}
LlevarClubPrivada(playerid,club)
{
    if(EnClub[playerid] == 0)
    {
        NoTeleportHack(playerid);
        EnClub[playerid] = club;
        SetPlayerVirtualWorld(playerid,playerid+999);
        SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219);
        SetPlayerFacingAngle(playerid,143.2940);
        SetPlayerInterior(playerid,2);
        ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1,0);
        return 1;
    }
    return true;
}
public LlevarClub(playerid,club)
{
    if(EnClub[playerid] == 0)
    {
        NoTeleportHack(playerid);
        EnClub[playerid] = club;
        SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219);
        SetPlayerFacingAngle(playerid,143.2940);
        SetPlayerInterior(playerid,2);
        ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1,0);
        return 1;
    }
    return 1;
}
public ProstitutaJugador(playerid)
{
    new elactor,laafinidad;
    if(EnClub[playerid] > 0)
    {
        switch(EnClub[playerid])
        {
            case 1: elactor = Stripx[2],laafinidad = PlayerInfo[playerid][pAfinidad1];
            case 2: elactor = Stripx[8],laafinidad = PlayerInfo[playerid][pAfinidad2];
            case 3: elactor = Stripx[4],laafinidad = PlayerInfo[playerid][pAfinidad3];
            case 4: elactor = Stripx[9],laafinidad = PlayerInfo[playerid][pAfinidad4];
            case 5: elactor = Stripx[7],laafinidad = PlayerInfo[playerid][pAfinidad5];
            case 6: elactor = Stripx[3],laafinidad = PlayerInfo[playerid][pAfinidad6];
        }
        if(laafinidad < 45) //Baja
        {
            ContadorBaile[playerid] ++;
            switch(ContadorBaile[playerid])
            {
                case 1: SetActorVirtualWorld(elactor,GetPlayerVirtualWorld(playerid)),ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 4: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 7: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 12: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 15: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 20: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 23: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 28: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 31: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 36: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 39: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 43: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 48: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 51: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 56: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 59: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 63: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 68: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 71: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 76: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 79: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 81: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 86: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 89: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 91: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 96: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 99: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 101: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
                case 106: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
                case 111: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
            }
            switch(ContadorBaile[playerid])
            {
                case 1: SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219),ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,0,0,0,segundos(2),0);
                case 2..112: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 113:
                {
                    if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
                    SacarClub(playerid);
                    KillTimer(Tiempos[playerid][TiempoSacarClub]);
                    ContadorBaile[playerid] = 0;
                    return 1;
                }
            }
        }
        else if(laafinidad >= 45) //ALTA
        {
            ContadorBaile[playerid] ++;
            switch(ContadorBaile[playerid])
            {
                case 1: SetActorVirtualWorld(elactor,GetPlayerVirtualWorld(playerid)),ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
                case 4: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,4,1,1,0);
                case 8: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
                case 12: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
                case 16: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
                case 20: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
                case 24: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
                case 28: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
                case 31:
                {
                    if(!IsValidDynamicObject(Dildo[playerid])) Dildo[playerid] = CreateDynamicObject(322, 1204.274048, 17.332500, 1000.546997, 30.000000, 0.000000, 0.000000, GetPlayerVirtualWorld(playerid), -1);
                    ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                    Streamer_Update(playerid,0);
                } //ATTACH DILDO
                case 32: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_START_W",3.9,1,0,5,3500,0);
                case 35..46: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
                case 47: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
                case 50..61: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
                case 62: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
                case 65..76: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
                case 77: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
                case 80..91: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
                case 92: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
                case 95..106: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
                case 107: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
            }
            switch(ContadorBaile[playerid])
            {
                case 1: SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219),ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,0,0,0,segundos(2),0);
                case 2..46: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 47: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
                case 50..61: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 62: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
                case 64..76: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 77: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
                case 80..91: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 92: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
                case 95..106: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
                case 107:ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.5,0,0,0,0,segundos(10),0);
                case 113:
                {
                    if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
                    SacarClub(playerid);
                    KillTimer(Tiempos[playerid][TiempoSacarClub]);
                    ContadorBaile[playerid] = 0;
                    return 1;
                }
            }
        }
        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
    }
    return true;
}
SacarClubLogeado(playerid)
{
    NoTeleportHack(playerid);
    SetPlayerPosEx(playerid,1204.8300,12.6649,1000.9219);
    SetPlayerFacingAngle(playerid,143.0000);
    SetPlayerInterior(playerid,2);
    SetPlayerVirtualWorld(playerid,5);
    ClearAnimations(playerid);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    EnClub[playerid] = 0;
    return true;
}
public SacarClub(playerid)
{
    if(EnClub[playerid] > 0)
    {
        new elactor,elactor2;
        switch(EnClub[playerid])
        {
            case 1: elactor2 = Strips[2]; case 2: elactor2 = Strips[8];
            case 3: elactor2 = Strips[4]; case 4: elactor2 = Strips[9];
            case 5: elactor2 = Strips[7]; case 6: elactor2 = Strips[3];
        }
        switch(EnClub[playerid])
        {
            case 1: elactor = Stripx[2]; case 2: elactor = Stripx[8];
            case 3: elactor = Stripx[4]; case 4: elactor = Stripx[9];
            case 5: elactor = Stripx[7]; case 6: elactor = Stripx[3];
        }
        LeaveDancer(EnClub[playerid]);
        ClearActorAnimations(elactor);
        SetActorVirtualWorld(elactor,9999);
        SetActorVirtualWorld(elactor2,5);
        NoTeleportHack(playerid);
        SetPlayerPosEx(playerid,1204.8300,12.6649,1000.9219);
        SetPlayerFacingAngle(playerid,143.0000);
        SetPlayerInterior(playerid,2);
        SetPlayerVirtualWorld(playerid,5);
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
        EnClub[playerid] = 0;
        return 1;
    }
    return 1;
}
public LeaveDancer(id)
{
    switch(id)
    {
        case 1: { SetActorVirtualWorld(Strips[2], 5),Bailarina1 = 0; }
        case 2: { SetActorVirtualWorld(Strips[8], 5),Bailarina2 = 0; }
        case 3: { SetActorVirtualWorld(Strips[4], 5),Bailarina3 = 0; }
        case 4: { SetActorVirtualWorld(Strips[4], 5),Bailarina4 = 0; }
        case 5: { SetActorVirtualWorld(Strips[7], 5),Bailarina5 = 0; }
        case 6: { SetActorVirtualWorld(Strips[3], 5),Bailarina6 = 0; }
    }
}
public OcultarLuegoDe(playerid)
{
    TextDrawHideForPlayer(playerid, LuegoDe);
    TextDrawHideForPlayer(playerid, Completonegro);
    return 1;
}
public LimpiarSombrero(playerid)
{
    for(new i = 0; i < 4; i++)
    {
        PuestoUnityTiene[playerid][i] = 0;
        PuestoUnityxTiene[playerid][i] = 0;
        PuestoCamioneroTiene[playerid][i] = 0;
        PuestoEstMuniTiene[playerid][i] = 0;
        GorrosSFBridgeTiene[playerid][i] = 0;
        PuestoMountTiene[playerid][i] = 0;
        GorrosBridgeTiene[playerid][i] = 0;
        PuestoCBTiene[playerid][i] = 0;
        PuestoWeelsTiene[playerid][i] = 0;
        PuestoColinasTiene[playerid][i] = 0;
        PuestoCNNTiene[playerid][i] = 0;
        PuestoBaysideTiene[playerid][i] = 0;
        PuestoQuebradoTiene[playerid][i] = 0;
        PuestoEmeTiene[playerid][i] = 0;
        PuestoTransTiene[playerid][i] = 0;
        PuestoEstaLVTiene[playerid][i] = 0;
        PuestoSMBTiene[playerid][i] = 0;
        PuestoLSFTiene[playerid][i] = 0;
        PuestoMCTiene[playerid][i] = 0;
        PuestoJTTiene[playerid][i] = 0;
        PuestoPPTiene[playerid][i] = 0;
        PuestoAATiene[playerid][i] = 0;
        PuestoPayaTiene[playerid][i] = 0;
        PuestoElqTiene[playerid][i] = 0;
        PuestoLeSFTiene[playerid][i] = 0;
        PuestoPGTiene[playerid][i] = 0;
        PuestoBasuTiene[playerid][i] = 0;
        PuestoAGTiene[playerid][i] = 0;
        PuestoFaDoTiene[playerid][i] = 0;
        PuestoAESFTiene[playerid][i] = 0;
        PuestoC1Tiene[playerid][i] = 0;
        break;
    }
    return 1;
}
public pVomitar(playerid)
{
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
    return 1;
}
public MostrarAfinidad(playerid)
{
    TextDrawShowForPlayer(playerid, Cuadroputi);
    TextDrawShowForPlayer(playerid, Cuadroputi1);
    TextDrawShowForPlayer(playerid, PuticlubMedia);
    TextDrawShowForPlayer(playerid, PuticlubAlta);
    TextDrawShowForPlayer(playerid, FlechasArribaPuti);
    TextDrawShowForPlayer(playerid, FlechasArribaPuti2);
    PlayerTextDrawShow(playerid, LineasPutiNivel[playerid]);
    PlayerTextDrawShow(playerid, AfinidadconX[playerid]);
    return 1;
}
public OcultarAfinidad(playerid)
{
    TextDrawHideForPlayer(playerid, Cuadroputi);
    TextDrawHideForPlayer(playerid, Cuadroputi1);
    PlayerTextDrawHide(playerid, AfinidadconX[playerid]);
    PlayerTextDrawHide(playerid, LineasPutiNivel[playerid]);
    TextDrawHideForPlayer(playerid, PuticlubMedia);
    TextDrawHideForPlayer(playerid, PuticlubAlta);
    TextDrawHideForPlayer(playerid, FlechasArribaPuti);
    TextDrawHideForPlayer(playerid, FlechasArribaPuti2);
    return 1;
}
public MoverAvion()
{
    MoveObject(avion[0], 172.6095, -2180.5474, 1954.9325, 12.0);
    MoveObject(avion[1], 172.6095, -2180.5474, 1954.9325, 12.0);
    return 1;
}
public Revisado(playerid,id)
{
	new var = -1,Float:Pos[3],string[200];
	for(new a = 0; a < MAX_PAUTOS; a++)
	{
		if(!IsValidVehicle(autos[a][id])) continue;
		GetVehiclePos(autos[a][id], Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2])) var = a;
	}
	if(var == -1)
	{
		TimerRevisar[playerid] = 0;
		HidePlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
		KillTimer(Tiempos[playerid][TimerRevisando]);
		SendClientMessage(playerid, -1, "Tienes que estar más cerca del baúl.");
		return 1;
	}
	if(TimerRevisar[playerid] > 5)
	{
		HidePlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
		KillTimer(Tiempos[playerid][TimerRevisando]);
		Tiempos[playerid][RevisadoTime] = 0;
		TimerRevisar[playerid] = 0;
		if(Baul[autos[var][id]] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			VerBaul[playerid] = id;
			new counter = 4,contador = 1;
			if(BAUL6(var)) counter = 6;
			if(BAUL8(var)) counter = 8;
			if(MOTO(var)) counter = 0;
			counter = counter/2;
			for(new i = 1; i <= counter; i++)
			{
				format(string, sizeof(string), "Lugar {DBED16}%d{FFFFFF}: %s {AFAFAF}| Lugar {DBED16}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador]),contador+1,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador+1]));
				SendClientMessage(playerid,0xAFAFAFFF,string);
				contador += 2;
			}
			if(PlayerInfo[id][pVip] > 0) format(string,sizeof(string),"Lugar {DBED16}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador]));
			if(PlayerInfo[id][pVip] > 1) format(string,sizeof(string),"Lugar {DBED16}%d{FFFFFF}: %s {AFAFAF}| Lugar {DBED16}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador]),contador+1,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador+1]));
			if(PlayerInfo[id][pVip] > 2) format(string,sizeof(string),"Lugar {DBED16}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][var][contador]));
			if(PlayerInfo[id][pVip] > 0) SendClientMessage(playerid,0xAFAFAFFF,string);
		}
		else return SendClientMessage(playerid,-1,"Han cerrado el baul del vehículo");
	}
	else
	{
		KillTimer(Tiempos[playerid][TimerRevisando]);
		Tiempos[playerid][TimerRevisando] = SetTimerEx("Revisado",1000,false,"dd",playerid,id);
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Revisar],Tiempos[playerid][RevisadoTime]);
		ShowPlayerProgressBar(playerid,Progressbar[playerid][Revisar]);
		Tiempos[playerid][RevisadoTime] ++;
	}
	return 1;
}
public CerrarPuerta(casa)
{
	switch(casa)
	{
		case 1: EscaparLabel[0] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2396.0605,-14.3567,36.0650,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta = 0,MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 269.1064);
		case 2: EscaparLabel[4] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,932.2437,1975.8787,11.6227,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta2 = 0,MoveDynamicObject(PuertasRobo[1], 931.28186, 1974.06372, 10.61430, 100.0,   0.00000, 0.00000, 0.00000);
		case 3: EscaparLabel[1] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2396.0010,-13.0565,35.3486,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta3 = 0,MoveDynamicObject(PuertasRobo[2],  -2395.2427, -15.0817, 34.9091, 100.0,  0.00000, 0.00000, 90.3030);
		case 4: EscaparLabel[2] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,2373.7302,-1136.8610,30.0583,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta4 = 0,MoveDynamicObject(PuertasRobo[3], 2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 0.0000);
		case 5: EscaparLabel[5] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2729.9800,-50.8513,7.0453,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta5 = 0,MoveDynamicObject(PuertasRobo[4], -2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 269.9401);
		case 6: EscaparLabel[6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2729.9695,-155.6657,7.2174,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta6 = 0,MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 269.8600);
		case 7: EscaparLabel[8] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1762.7701,-2098.9631,13.9989,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta7 = 0,MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 0.00000);
		case 8: EscaparLabel[7] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,2485.1780,-1994.7223,13.6275,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta8 = 0,MoveDynamicObject(PuertasRobo[7],2484.4265, -1996.1842, 13.2355, 100.0, 0.0000, 0.0000,0.00000);
		case 9: EscaparLabel[9] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1841.8738,770.7863,11.5959,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta9 = 0,MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 90.0000);
		case 10: EscaparLabel[3] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-1449.7598,2647.9287,56.5345,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta10 = 0,MoveDynamicObject(PuertasRobo[9],-1449.19824, 2647.20459, 55.48900, 100.0,  0.00000, 0.00000, 90.00000);
		case 11: EscaparLabel[10] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1344.4647,2612.5925,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta11 = 0,MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 0.0000);
		case 12: EscaparLabel[11] = CreateDynamic3DTextLabel("{FFFFFF}Escribe{DBED16} /escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1666.9180,2612.6965,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0),CasaAbierta12 = 0,MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 0.0000);
	}
	return 1;
}
public ColgarLlamada(playerid)
{
    if(PlayerInfo[playerid][MobileSub] == 2540)
    {
        Mobile2[playerid] = 0;
        SendClientMessage(playerid,-1,"Colgaron la llamada.");
        finllamada(playerid);
    }
}
public CurarON(playerid)
{
    Curando[playerid] = 1;
}
public CargarCasa1()
{
    if(!IsValidDynamicObject(ObjetoRobo[0])) ObjetoRobo[0] = CreateDynamicObject(1429, -2280.60376, -14.82680, 38.03000,   0.00000, 0.00000, 70.61990);
    if(!IsValidDynamicObject(ObjetoRobo[1])) ObjetoRobo[1] = CreateDynamicObject(1518, -2280.63721, -16.44526, 38.05420,   0.00000, 0.00000, 120.36000);
    if(!IsValidDynamicObject(ObjetoRobo[2])) ObjetoRobo[2] = CreateDynamicObject(2912, -2278.36792, -14.86620, 37.29990,   0.00000, 0.00000, -1.62000);
    if(!IsValidDynamicObject(ObjetoRobo[3])) ObjetoRobo[3] = CreateDynamicObject(2190, -2280.72827, -15.26394, 37.77455,   0.00000, 0.00000, 50.69999);
    if(!IsValidDynamicObject(ObjetoRobo[4])) ObjetoRobo[4] = CreateDynamicObject(1788, -2280.53418, -16.19723, 37.44304,   0.00000, 0.00000, -49.37999);
    if(!IsValidDynamicObject(ObjetoRobo[5])) ObjetoRobo[5] = CreateDynamicObject(1790, -2280.39893, -14.92786, 37.45214,   0.00000, 0.00000, 88.37997);
    if(!IsValidDynamicObject(ObjetoRobo[6])) ObjetoRobo[6] = CreateDynamicObject(2028, -2278.22900, -16.77450, 37.40304,   0.00000, 0.00000, 0.00000);
    Forzada1 = 0;
}
public CargarCasa2()
{
    if(!IsValidDynamicObject(ObjetoRobo[7])) ObjetoRobo[7] = CreateDynamicObject(1429, 942.56305, 1976.67395, 11.34690,   0.00000, 0.00000, -62.10000);
    if(!IsValidDynamicObject(ObjetoRobo[8])) ObjetoRobo[8] = CreateDynamicObject(1518, 942.44531, 1974.96301, 11.42232,   0.00000, 0.00000, -112.56001);
    if(!IsValidDynamicObject(ObjetoRobo[9])) ObjetoRobo[9] = CreateDynamicObject(2912, 939.79364, 1974.82947, 10.62529,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[10])) ObjetoRobo[10] = CreateDynamicObject(1788, 942.32104, 1976.73279, 10.83022,   0.00000, 0.00000, -85.32000);
    if(!IsValidDynamicObject(ObjetoRobo[11])) ObjetoRobo[11] = CreateDynamicObject(1790, 942.38721, 1975.06116, 10.73031,   0.00000, 0.00000, -90.17999);
    if(!IsValidDynamicObject(ObjetoRobo[12])) ObjetoRobo[12] = CreateDynamicObject(2028, 940.09308, 1977.05005, 10.82510,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[13])) ObjetoRobo[13] = CreateDynamicObject(2190, 939.99139, 1977.32190, 11.11951,   0.00000, 0.00000, 0.00000);
    Forzada2 = 0;
}
public CargarCasa3()
{
    if(!IsValidDynamicObject(ObjetoRobo[14])) ObjetoRobo[14] = CreateDynamicObject(1429, -2394.2876, -19.4195, 36.0900,   0.00000, 0.00000, 180.00000);
    if(!IsValidDynamicObject(ObjetoRobo[15])) ObjetoRobo[15] = CreateDynamicObject(1518, -2397.3396, -16.3303, 36.9830,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[16])) ObjetoRobo[16] = CreateDynamicObject(2912, -2395.1929, -19.5658, 34.9895,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[17])) ObjetoRobo[17] = CreateDynamicObject(2190, -2396.2659, -16.0642, 36.6930,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[18])) ObjetoRobo[18] = CreateDynamicObject(1788, -2396.7344, -16.3155, 35.9279,   0.00000, 0.00000, 180.00000);
    if(!IsValidDynamicObject(ObjetoRobo[19])) ObjetoRobo[19] = CreateDynamicObject(2028, -2397.2722, -16.2995, 35.4529,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[20])) ObjetoRobo[20] = CreateDynamicObject(1790, -2396.1167, -16.3145, 35.4559,   0.00000, 0.00000, 180.00000);
    Forzada3 = 0;
}
public CargarCasa4()
{
    if(!IsValidDynamicObject(ObjetoRobo[21])) ObjetoRobo[21] = CreateDynamicObject(1429, 2368.61401, -1131.40259, 30.97320,   0.00000, 0.00000, 160.32001);
    if(!IsValidDynamicObject(ObjetoRobo[22])) ObjetoRobo[22] = CreateDynamicObject(1518, 2370.30200, -1131.43127, 30.97320,   0.00000, 0.00000, 201.35999);
    if(!IsValidDynamicObject(ObjetoRobo[23])) ObjetoRobo[23] = CreateDynamicObject(2912, 2370.40674, -1129.14221, 28.96821,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[24])) ObjetoRobo[24] = CreateDynamicObject(2190, 2369.12378, -1131.64221, 30.68020,   0.00000, 0.00000, 164.82001);
    if(!IsValidDynamicObject(ObjetoRobo[25])) ObjetoRobo[25] = CreateDynamicObject(1788, 2368.51880, -1131.42798, 29.94000,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[26])) ObjetoRobo[26] = CreateDynamicObject(2028, 2370.12720, -1131.46106, 29.94000,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[27])) ObjetoRobo[27] = CreateDynamicObject(1790, 2369.39893, -1131.51331, 29.46600,   0.00000, 0.00000, 0.00000);
    Forzada4 = 0;
}
public CargarCasa5()
{
    if(!IsValidDynamicObject(ObjetoRobo[28])) ObjetoRobo[28] = CreateDynamicObject(1429, -2730.06982, -59.74450, 7.20490,   0.00000, 0.00000, 196.14000);
    if(!IsValidDynamicObject(ObjetoRobo[29])) ObjetoRobo[29] = CreateDynamicObject(1518, -2731.72534, -59.64209, 7.20490,   0.00000, 0.00000, 178.20003);
    if(!IsValidDynamicObject(ObjetoRobo[30])) ObjetoRobo[30] = CreateDynamicObject(2912, -2731.85327, -57.35418, 6.03176,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[31])) ObjetoRobo[31] = CreateDynamicObject(2190, -2731.16846, -59.89901, 6.93235,   0.00000, 0.00000, 174.30002);
    if(!IsValidDynamicObject(ObjetoRobo[32])) ObjetoRobo[32] = CreateDynamicObject(1788, -2730.06030, -59.85120, 6.16510,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[33])) ObjetoRobo[33] = CreateDynamicObject(2028, -2730.97656, -59.74975, 6.60280,   0.00000, 0.00000, -2.40000);
    if(!IsValidDynamicObject(ObjetoRobo[34])) ObjetoRobo[34] = CreateDynamicObject(1790, -2731.64380, -59.69650, 6.16510,   0.00000, 0.00000, -5.64000);
    Forzada5 = 0;
}
public CargarCasa6()
{
    if(!IsValidDynamicObject(ObjetoRobo[35])) ObjetoRobo[35] = CreateDynamicObject(1429, -2731.07056, -164.54240, 7.68000,   0.00000, 0.00000, 196.80000);
    if(!IsValidDynamicObject(ObjetoRobo[36])) ObjetoRobo[36] = CreateDynamicObject(1518, -2732.74170, -164.46756, 7.68000,   0.00000, 0.00000, 164.58005);
    if(!IsValidDynamicObject(ObjetoRobo[37])) ObjetoRobo[37] = CreateDynamicObject(2912, -2733.24390, -163.87219, 6.20990,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[38])) ObjetoRobo[38] = CreateDynamicObject(2190, -2732.13647, -164.68983, 7.42307,   0.00000, 0.00000, 182.57997);
    if(!IsValidDynamicObject(ObjetoRobo[39])) ObjetoRobo[39] = CreateDynamicObject(1788, -2731.10449, -164.46933, 7.08504,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[40])) ObjetoRobo[40] = CreateDynamicObject(2028, -2731.81323, -164.44690, 6.67120,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[41])) ObjetoRobo[41] = CreateDynamicObject(1790, -2732.57373, -164.33932, 7.12180,   0.00000, 0.00000, 0.00000);
    Forzada6 = 0;
}
public CargarCasa7()
{
    if(!IsValidDynamicObject(ObjetoRobo[42])) ObjetoRobo[42] = CreateDynamicObject(1429, 1758.10046, -2094.56860, 14.84190,   0.00000, 0.00000, 181.00000);
    if(!IsValidDynamicObject(ObjetoRobo[43])) ObjetoRobo[43] = CreateDynamicObject(1518, 1757.27979, -2094.54028, 14.86940,   0.00000, 0.00000, 185.00000);
    if(!IsValidDynamicObject(ObjetoRobo[44])) ObjetoRobo[44] = CreateDynamicObject(2912, 1756.40784, -2093.84546, 12.97720,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[45])) ObjetoRobo[45] = CreateDynamicObject(2190, 1756.16321, -2094.66846, 14.58550,   0.00000, 0.00000, 160.00000);
    if(!IsValidDynamicObject(ObjetoRobo[46])) ObjetoRobo[46] = CreateDynamicObject(1788, 1757.77637, -2094.57056, 14.23650,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[47])) ObjetoRobo[47] = CreateDynamicObject(2028, 1756.81677, -2094.56934, 14.25400,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[48])) ObjetoRobo[48] = CreateDynamicObject(1790, 1757.29041, -2094.61108, 13.80020,   0.00000, 0.00000, 0.00000);
    Forzada7 = 0;
}
public CargarCasa9()
{
    if(!IsValidDynamicObject(ObjetoRobo[49])) ObjetoRobo[49] = CreateDynamicObject(1429, 1841.54749, 768.94519, 12.49500,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[50])) ObjetoRobo[50] = CreateDynamicObject(1518, 1842.49048, 768.88428, 12.51880,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[51])) ObjetoRobo[51] = CreateDynamicObject(2912, 1843.43506, 768.10840, 10.54610,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[52])) ObjetoRobo[52] = CreateDynamicObject(2190, 1843.46643, 769.13379, 12.23620,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[53])) ObjetoRobo[53] = CreateDynamicObject(1788, 1842.00537, 768.90112, 11.88750,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[54])) ObjetoRobo[54] = CreateDynamicObject(2028, 1843.04565, 769.07501, 11.90490,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[55])) ObjetoRobo[55] = CreateDynamicObject(1790, 1842.38196, 769.15088, 11.42320,   0.00000, 0.00000, 0.00000);
    Forzada9 = 0;
}
public CargarCasa11()
{
    if(!IsValidDynamicObject(ObjetoRobo[56])) ObjetoRobo[56] = CreateDynamicObject(1429, 1355.97156, 2613.77515, 12.45300,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[57])) ObjetoRobo[57] = CreateDynamicObject(1518, 1356.83423, 2613.72314, 12.47980,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[58])) ObjetoRobo[58] = CreateDynamicObject(2912, 1354.72119, 2613.42578, 11.02990,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[59])) ObjetoRobo[59] = CreateDynamicObject(2190, 1357.78296, 2613.98975, 12.19500,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[60])) ObjetoRobo[60] = CreateDynamicObject(1788, 1356.28943, 2613.73511, 11.84600,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[61])) ObjetoRobo[61] = CreateDynamicObject(2028, 1357.32434, 2613.74854, 11.86400,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[62])) ObjetoRobo[62] = CreateDynamicObject(1790, 1356.62915, 2613.61646, 11.40970,   0.00000, 0.00000, 0.00000);
    Forzada11 = 0;
}
public CargarCasa12()
{
    if(!IsValidDynamicObject(ObjetoRobo[63])) ObjetoRobo[63] = CreateDynamicObject(1429, 1678.29834, 2613.74878, 12.45260,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[64])) ObjetoRobo[64] = CreateDynamicObject(1518, 1679.14563, 2613.73535, 12.48270,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[65])) ObjetoRobo[65] = CreateDynamicObject(2912, 1677.09839, 2613.43970, 11.03870,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[66])) ObjetoRobo[66] = CreateDynamicObject(2190, 1680.08850, 2613.91479, 12.19470,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[67])) ObjetoRobo[67] = CreateDynamicObject(1788, 1678.56201, 2613.76880, 11.84410,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[68])) ObjetoRobo[68] = CreateDynamicObject(2028, 1679.57751, 2613.75708, 11.86450,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[69])) ObjetoRobo[69] = CreateDynamicObject(1790, 1678.98792, 2613.76904, 11.41040,   0.00000, 0.00000, 0.00000);
    Forzada12 = 0;
}
public CargarCasa8()
{
    if(!IsValidDynamicObject(ObjetoRobo[70])) ObjetoRobo[70] = CreateDynamicObject(1429, 2479.80347, -1991.63013, 14.94380,   0.00000, 0.00000, 170.00000);
    if(!IsValidDynamicObject(ObjetoRobo[71])) ObjetoRobo[71] = CreateDynamicObject(1518, 2480.99023, -1991.63306, 14.96380,   0.00000, 0.00000, 180.00000);
    if(!IsValidDynamicObject(ObjetoRobo[72])) ObjetoRobo[72] = CreateDynamicObject(2912, 2480.36865, -1989.44714, 12.98640,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[73])) ObjetoRobo[73] = CreateDynamicObject(2190, 2481.31323, -1989.23254, 12.97840,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[74])) ObjetoRobo[74] = CreateDynamicObject(1788, 2481.37158, -1991.57483, 13.46180,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[75])) ObjetoRobo[75] = CreateDynamicObject(2028, 2480.21411, -1991.66187, 13.41110,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[76])) ObjetoRobo[76] = CreateDynamicObject(1790, 2480.85669, -1991.62415, 13.92380,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[77])) ObjetoRobo[77] = CreateDynamicObject(2226, 2480.38745, -1991.64294, 14.29180,   0.00000, 0.00000, 180.00000);
    Forzada8 = 0;
}
public CargarCasa10()
{
    if(!IsValidDynamicObject(ObjetoRobo[78])) ObjetoRobo[78] = CreateDynamicObject(1429, -1449.86682, 2645.77490, 56.87230,   0.00000, 0.00000, 8.10000);
    if(!IsValidDynamicObject(ObjetoRobo[79])) ObjetoRobo[79] = CreateDynamicObject(1518, -1448.15234, 2645.76807, 56.92000,   0.00000, 0.00000, -20.88000);
    if(!IsValidDynamicObject(ObjetoRobo[80])) ObjetoRobo[80] = CreateDynamicObject(2912, -1450.80640, 2642.91479, 55.52976,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[81])) ObjetoRobo[81] = CreateDynamicObject(2190, -1447.24390, 2643.42358, 56.43425,   0.00000, 0.00000, -115.86000);
    if(!IsValidDynamicObject(ObjetoRobo[82])) ObjetoRobo[82] = CreateDynamicObject(1788, -1448.96399, 2645.68677, 56.28100,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[83])) ObjetoRobo[83] = CreateDynamicObject(2028, -1449.89099, 2645.64771, 55.88598,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[84])) ObjetoRobo[84] = CreateDynamicObject(1790, -1448.14539, 2645.64087, 55.85600,   0.00000, 0.00000, 0.00000);
    if(!IsValidDynamicObject(ObjetoRobo[85])) ObjetoRobo[85] = CreateDynamicObject(2226, -1449.01904, 2645.76733, 56.64311,   0.00000, 0.00000, 0.00000);
    Forzada10 = 0;
}
public Reparando(playerid,reparaid,vehicleid,darexp)
{
    if(darexp == 0)
    {
        new msjadm[135];
        format(msjadm, sizeof(msjadm), "%s repara su vehículo (ID: %d - Nivel: %d).", PlayerInfo[playerid][Nickname], playerid, PlayerInfo[playerid][pNivel], PlayerInfo[playerid][horasjugadas]);
        MensajeAdmin(COLOR_YELLOW, msjadm, 3);
        SendClientMessage(playerid,-1,"Vehículo reparado.");
    }
    AceptoRepara[reparaid] = 0;
    SetVehicleHealth(vehicleid, 1000.0);
    if(AVION(vehicleid)) RepairVehicle(vehicleid);
    TimerReparar[playerid] = 0;
    TimerReparar[reparaid] = 0;
    LoopingAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    if(darexp == 0) SacarVehiculo(playerid);
    if(darexp == 1)
    {
        if(PlayerInfo[playerid][pExpMecanico] < 49)
        {
            if(PlayerInfo[playerid][pVip] > 0)
            {
                new pago = random(3);
                switch(pago)
                {
                    case 0:{ PlayerInfo[playerid][pExpMecanico]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                    case 1:{ PlayerInfo[playerid][pExpMecanico]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                    case 2:{ PlayerInfo[playerid][pExpMecanico]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
                }
            }
            else { PlayerInfo[playerid][pExpMecanico]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
        }
        else if(PlayerInfo[playerid][pExpMecanico] >= 49)
        {
            PlayerInfo[playerid][pExpMecanico] = 0;
            PlayerInfo[playerid][pNivelMecanico]++;
            SendClientMessage(playerid,0x0080C2FF,"Felicidades, Has aumentado tu nivel de mecánico.");
        }
    }
    Descongelar(playerid);
}
funcion CheckVIP(playerid)
{
	new day,month,year,Query[200];
	getdate(year,month,day);
	if(month >= 13) { month = 1; }
	if(day >= PlayerInfo[playerid][findia] && month >= PlayerInfo[playerid][finmes] && year >= PlayerInfo[playerid][finano])
	{
		SendClientMessage(playerid,-1,"Tu membresia VIP ha expirado, puedes comprar un mes nuevamente para seguir obteniendo las ventajas.");
		PlayerInfo[playerid][pVip] = 0;
		mysql_format(handle_db, Query, sizeof(Query),"UPDATE `usuarios` SET `FinDia`='0',`FinMes`='0',`FinAno`='0' WHERE `Username`='%s'",PlayerName(playerid));
		mysql_tquery(handle_db, Query);
	}
	if(day >= PlayerInfo[playerid][findialicencia] && month >= PlayerInfo[playerid][finmeslicencia] && year >= PlayerInfo[playerid][finanolicencia] && PlayerInfo[playerid][pLicencia] == 1)
	{
		PlayerInfo[playerid][pLicencia] = 0;
		mysql_format(handle_db, Query, sizeof(Query),"UPDATE `usuarios` SET `FinMesL`='0',`FinMesL`='0',`FinAnoL`='0' WHERE `Username`='%s'",PlayerName(playerid));
		mysql_tquery(handle_db, Query);
	}
}
ptask Taximetro[15000](playerid)
{
    new veh = GetPlayerVehicleID(playerid);
    if(TAXI(veh) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    {
        foreach(new i : Player)
        {
            if(IsPlayerInVehicle(i,veh) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
            {
                Taxista[playerid] = i;
                Pasajero[i] = playerid;
                LlamadaTaxi[playerid] = 0;
                SetPlayerColor(playerid, COLOR_WHITE);
                TextDrawShowForPlayer(playerid,TAXIMET); PlayerTextDrawShow(playerid,TAXIMET2[i]);
                TextDrawShowForPlayer(playerid,TAXIMET3); TextDrawShowForPlayer(playerid,TAXIMET4);
            }
        }
        if(PlayerInfo[playerid][pDinero] >= Ficha[Taxista[playerid]])
        {
            new cuenta,string[256];
            if(GetVehicleSpeed(veh) > 0)
            {
                cuenta = Monto[Taxista[playerid]]+Ficha[Taxista[playerid]];
                QuitarDinero(playerid, cuenta);
                DarDinero(Taxista[playerid],cuenta);
                format(string,256,"$%d",Monto[Taxista[playerid]] = cuenta);
                PlayerTextDrawSetString(playerid,TAXIMET2[playerid], string);
                PlayerTextDrawSetString(playerid,TAXIMET2[Taxista[playerid]], string);
            }
        }
        else
        {
            SendClientMessage(playerid,-1,"Te has quedado sin dinero para pagar el taxi");
            SendClientMessage(Taxista[playerid],-1,"Tu pasajero se ha quedado sin dinero");
            RemovePlayerFromVehicle(playerid);
        }
    }
    return 1;
}
public LlamadaCops(playerid)
{
    new string[200];
    SendClientMessage(playerid,-1,"{3399FF}[Central de policía]{FFFFFF} Romina: Hola, ya le transfiero con un oficial, aguarde un momento por favor.");
    format(string, 200,"{3399FF}[Central de policía]{FFFFFF} Romina: Hola, %s (%d) está llamando al 911.",PlayerInfo[playerid][Nickname], playerid);
    SendRadioPoliceMessage(-1, string);
    SendRadioPoliceMessage(-1,"Cualquier oficial disponible, por favor {DBED15}/atender{FFFFFF} la llamada",INVALID_PLAYER_ID);
}
public LlamadaGrua(playerid)
{
	SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Hola, ¿quieres utilizar nuestro servicio de grúas?.");
	ShowPlayerDialog(playerid, LLAMAGRUA, DIALOG_STYLE_MSGBOX, "Información sobre el servicio de grúa","{FFFFFF}El servicio de grúa sirve para recuperar el vehículo, en caso de que haya quedado\nen un lugar inaccesible.\nPor ejemplo: en el agua, dentro del estacionamiento de una propiedad, en una pileta, etc.\n\nNota: Los jugadores {40FF00}VIP{FFFFFF} tienen este servicio de manera gratuita.\n\n{FFEE00}¿Quieres utilizar este servicio?","Si","No");
	return true;
}

public LlamadaGrua2(playerid)
{
	SendClientMessage(playerid, -1, "{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Perfecto, ¿a dónde quiere que llevemos su vehículo?");
	ShowPlayerDialog(playerid, LLAMAGRUA2, DIALOG_STYLE_LIST,"¿Dónde quieres que enviemos tu vehículo?","Estacionamiento actual\nEstacionamiento municipal\nA tu posicion","Aceptar","Cancelar");
	return true;
}

public LlamadaGrua3(playerid)
{
	SendClientMessage(playerid, -1, "{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: ¿Podría decirme la matrícula?");
	new string[150*MAX_PAUTOS];
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(VehicleInfo[playerid][i][vModelo] < 400) continue;
		format(string, sizeof(string), "%s Vehículo: {F6E200}%s{FFFFFF} | %s | Costo del servicio: {00CC00}$%s\n",string,GetVehicleName(autos[i][playerid]),ConvertirNumero(VehicleInfo[playerid][i][vPrecio]/100));
	}
	ShowPlayerDialog(playerid, LLAMAGRUA3, DIALOG_STYLE_LIST, "Vehículo que deseas recuperar con el servicio de grúa", string, "Recuperar","Cancelar");
	return true;
}

public LlamadaGrua4(playerid, idveh)
{
	if(AutoOcupado(autos[idveh][playerid]) != 0)
	{
		SendClientMessage(playerid,-1,"{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Encontramos una persona dentro del vehículo, no podemos remolcarlo.");
		SendClientMessage(playerid,-1,"{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Llama a la policía si crees que tu vehículo ha sido robado.");
		ColgarLaLlamada(playerid);
		return 1;
	}
	MensajeEx(playerid,-1,"{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Acabamos de enviar una grúa a buscar tu %s matrícula %s.", GetVehicleName(autos[idveh][playerid]), Patente[playerid][idveh]);
	if(VehicleInfo[playerid][idveh][vPrecio]/100 > 0)
	{
		MensajeEx(playerid,-1,"{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Se cobró $%s de tu cuenta bancaria.", ConvertirNumero(VehicleInfo[playerid][idveh][vPrecio]/100));
	   	PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco] - VehicleInfo[playerid][idveh][vPrecio]/100;
  	}
	SendClientMessage(playerid, -1, "{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: Muchas gracias por utilizar nuestro servicio.");
 	switch(tipogrua[playerid])
  	{
		case 1: Respawnear(autos[idveh][playerid]);
		case 2:
		{
			new lugar = random(4);
			switch(lugar)
			{
				case 0: { VehicleInfo[playerid][idveh][pOX] = -13.0813; VehicleInfo[playerid][idveh][pOY] = -374.6711; VehicleInfo[playerid][idveh][pOZ] = 5.4297; VehicleInfo[playerid][idveh][pOA] = 358.1299; }
				case 1: { VehicleInfo[playerid][idveh][pOX] = -29.7148; VehicleInfo[playerid][idveh][pOY] = -375.2507; VehicleInfo[playerid][idveh][pOZ] = 5.4297; VehicleInfo[playerid][idveh][pOA] = 354.9965; }
				case 2: { VehicleInfo[playerid][idveh][pOX] = -2.0937; VehicleInfo[playerid][idveh][pOY] = -346.8077; VehicleInfo[playerid][idveh][pOZ] = 5.4297; VehicleInfo[playerid][idveh][pOA] = 89.6241; }
				case 3: { VehicleInfo[playerid][idveh][pOX] = -3.3296; VehicleInfo[playerid][idveh][pOY] = -332.9302; VehicleInfo[playerid][idveh][pOZ] = 5.4297; VehicleInfo[playerid][idveh][pOA] = 91.8175; }
			}
			SetPosVeh(autos[idveh][playerid],VehicleInfo[playerid][idveh][pOX],VehicleInfo[playerid][idveh][pOY],VehicleInfo[playerid][idveh][pOZ],VehicleInfo[playerid][idveh][pOA],0,0);
		}
		case 3:
		{
			new lugar = random(4);
			switch(lugar)
			{
				case 0: { VehicleInfo[playerid][idveh][pOX] = 2634.2881; VehicleInfo[playerid][idveh][pOY] = -2486.2009; VehicleInfo[playerid][idveh][pOZ] = -0.7707; VehicleInfo[playerid][idveh][pOA] = 2.5868; }
				case 1: { VehicleInfo[playerid][idveh][pOX] = 2623.3982; VehicleInfo[playerid][idveh][pOY] = -2488.3628; VehicleInfo[playerid][idveh][pOZ] = -0.6238; VehicleInfo[playerid][idveh][pOA] = 2.1582; }
				case 2: { VehicleInfo[playerid][idveh][pOX] = 2607.7522; VehicleInfo[playerid][idveh][pOY] = -2487.5833; VehicleInfo[playerid][idveh][pOZ] = -0.4461; VehicleInfo[playerid][idveh][pOA] = 0.4526; }
				case 3: { VehicleInfo[playerid][idveh][pOX] = 2594.8560; VehicleInfo[playerid][idveh][pOY] = -2484.1121; VehicleInfo[playerid][idveh][pOZ] = -0.3442; VehicleInfo[playerid][idveh][pOA] = 357.9986; }
			}
			SetPosVeh(autos[idveh][playerid],VehicleInfo[playerid][idveh][pOX],VehicleInfo[playerid][idveh][pOY],VehicleInfo[playerid][idveh][pOZ],VehicleInfo[playerid][idveh][pOA],0,0);
		}
	}
    ColgarLaLlamada(playerid);
	return true;
}
public DarGasolina(driver, autoid, petroleo)
{
    if(IsPlayerInVehicle(driver, autoid) && IsPlayerConnected(driver))
    {
        if(VehicleFuel[autoid] < petroleo)
        {
            SetPlayerProgressBarValue(driver, Progressbar[driver][Combustible],VehicleFuel[autoid]);
            UpdatePlayerProgressBar(driver, Progressbar[driver][Combustible]);
            VehicleFuel[autoid]++;
        }
        else if(VehicleFuel[autoid] >= petroleo)
        {
            VehicleFuel[autoid] = petroleo;
            KillTimer(llenado[autoid]);
            TogglePlayerControllable(driver, 1);
            SetPVarInt(driver, "IsFrozen", 1);
            TimerCombustible[driver] = 0;
            Tiempos[driver][TiempoLlenar] = gettime();
        }
    }
    return 1;
}
public Maneja(playerid)
{
    Manejando[playerid] = 0;
}
public DArmas(playerid)
{
    DarArmas(playerid);
    return 1;
}
public LlamadaAceptada(playerid)
{
    EnLlamada[playerid] = 0;
    SendClientMessage(playerid, COLOR_DORADO, "Lo estan esperando, vaya con su camión en buenas condiciones.");
    PlayerTemp[playerid][pt_Transportista] = true;
    switch(Transportistas[playerid][Ruta])
    {
        case 1: MarcadoTransportistaGPS(playerid,586.4625,856.0408,-42.9917,7.0); //Cantera Hunter Quarry - Rocas a Hospital LS.
        case 2: MarcadoTransportistaGPS(playerid,1335.5570,286.8253,19.5615,7.0); //Sprunk - Montgomery a Fabrica LV.
        case 3: MarcadoTransportistaGPS(playerid,684.1342,896.0093,-39.7265,7.0); //Tubo de cantera a Obra SF
        case 4: MarcadoTransportistaGPS(playerid,-2003.7317,-2413.3181,30.6250,7.0); //Maderera Angel Pine
        case 5: MarcadoTransportistaGPS(playerid,1023.9153,2110.9341,10.8203,7.0); //Contenedor Whitewood States a Camionero
        case 6: MarcadoTransportistaGPS(playerid,-1741.5210,1425.7820,7.1875,7.0); //Galpon Explanade North
        case 7: MarcadoTransportistaGPS(playerid,305.6055,887.2976,20.4063,7.0); //Cantera Bone Country a Obra LV
        case 8: MarcadoTransportistaGPS(playerid,-2458.4258,2292.2588,4.9844,7.0); //Transformadores Bayside
        case 9: MarcadoTransportistaGPS(playerid,-2473.1599,2303.7029,4.9844,7.0); //Maquinas de casino 1
        case 10: MarcadoTransportistaGPS(playerid,-2473.1599,2303.7029,4.9844,7.0); //Maquinas de casino 2
        case 11: MarcadoTransportistaGPS(playerid,2880.5110,1751.4082,10.8203,7.0); //Vagon a LS desde LV
        case 12: MarcadoTransportistaGPS(playerid,208.3321,-28.7516,1.5781,7.0); //Bidones BlueBerry a Aereopuerto LV
    }
    tviaje[playerid] = 1;
    PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
    SendClientMessage(playerid,-1,"Cortaron la comunicación.");
    RemovePlayerAttachedObject(playerid, 4);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    Mobile2[playerid] = 0;
}
public LlamadaCancelada(playerid)
{
    EnLlamada[playerid] = 0;
    SendClientMessage(playerid, COLOR_DORADO, "Le volveremos a llamar dentro de 2 horas. (5 minutos reales)");
    PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    SendClientMessage(playerid,-1,"Cortaron la comunicación.");
    RemovePlayerAttachedObject(playerid, 4);
    Mobile2[playerid] = 0;
    PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
}
public OfertaPerdida(playerid)
{
    if(ofertador[playerid] != INVALID_PLAYER_ID)
    {
        ofertador[playerid] = INVALID_PLAYER_ID;
        GuardaEspalda[playerid] = INVALID_PLAYER_ID;
        LeOfreci[playerid] = INVALID_PLAYER_ID;
    }
    return 1;
}
public TiempoVender(playerid)
{
    Tiempos[playerid][TiempoVenta] = gettime();
}
public Autos(playerid)
{
	if(!IsPlayerConnected(playerid) || JugadorLogeado[playerid] != 1) return 1;
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(VehicleInfo[playerid][i][vModelo]  > 0) Auto(playerid,i,0);
	}
	return 1;
}
public Auto(playerid, slot, tipo)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(JugadorLogeado[playerid] != 1) return 1;
	if(tipo == 3)
	{
		MensajeEx(playerid,-1, "Tu {DBED15}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(autos[slot][playerid]));
		if(autos[slot][playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos[slot][playerid]);
		autos[slot][playerid] = CreateVehicle(VehicleInfo[playerid][slot][vModelo],VehicleInfo[playerid][slot][pOX],VehicleInfo[playerid][slot][pOY],VehicleInfo[playerid][slot][pOZ],VehicleInfo[playerid][slot][pOA],VehicleInfo[playerid][slot][vColor1],VehicleInfo[playerid][slot][vColor2],-1);
		LinkVehicleToInterior(autos[slot][playerid], VehicleInfo[playerid][slot][v0_interior]);
		SetVehicleVirtualWorld(autos[slot][playerid], VehicleInfo[playerid][slot][v0_vw]);
		SetVehicleHealth(autos[slot][playerid], VehicleInfo[playerid][slot][pVidaVE]);
	}
	else if(tipo == 4 || tipo == 5 || tipo == 6)
	{
		new floor = 1, rand;
		if(autos[slot][playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos[slot][playerid]);
		switch(tipo)
		{
			case 4: rand = random(sizeof(EstacionamientoCamionero));
			case 5: rand = random(sizeof(EstacionamientoMinero));
			default: rand = random(sizeof(EstacionamientoNormal));
		}
		switch(tipo)
		{
			case 4:
			{
				new random1 = random(10), Float:Altitud;
				switch(random1)
				{
					case 0: { floor = 1; Altitud = 10.7177; } case 1: { floor = 2; Altitud = 14.9808; }
					case 2: { floor = 3; Altitud = 19.3031; } case 3: { floor = 4; Altitud = 23.5820; }
					case 4: { floor = 5; Altitud = 27.8949; } case 5: { floor = 6; Altitud = 32.2014; }
					case 6: { floor = 7; Altitud = 36.4815; } case 7: { floor = 8; Altitud = 40.8009; }
					case 8: { floor = 9; Altitud = 45.0817; } case 9: { floor = 10; Altitud = 49.4005; }
					default: { floor = 1; Altitud = 10.7177; }
				}
				autos[slot][playerid] = CreateVehicle(VehicleInfo[playerid][slot][vModelo],EstacionamientoCamionero[rand][0],EstacionamientoCamionero[rand][1],Altitud,EstacionamientoCamionero[rand][3],VehicleInfo[playerid][slot][vColor1],VehicleInfo[playerid][slot][vColor2],-1);
			}
			case 5: autos[slot][playerid] = CreateVehicle(VehicleInfo[playerid][slot][vModelo],EstacionamientoMinero[rand][0],EstacionamientoMinero[rand][1],EstacionamientoMinero[rand][2],EstacionamientoMinero[rand][3],VehicleInfo[playerid][slot][vColor1],VehicleInfo[playerid][slot][vColor2],-1);
			default: autos[slot][playerid] = CreateVehicle(VehicleInfo[playerid][slot][vModelo],EstacionamientoNormal[rand][0],EstacionamientoNormal[rand][1],EstacionamientoNormal[rand][2],EstacionamientoNormal[rand][3],VehicleInfo[playerid][slot][vColor1],VehicleInfo[playerid][slot][vColor2],-1);
		}
		if(tipo == 4) MensajeEx(playerid,-1, "Tu {DBED15}%s{FFFFFF} ha sido guardado en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {00CCFF}Easter Basin Docks{FFFFFF}.",GetVehicleName(autos[slot][playerid]),floor);
		if(tipo == 5) MensajeEx(playerid,-1, "Tu {DBED15}%s{FFFFFF} ha sido guardado en el estacionamiento de {00CCFF}El castillo del diablo{FFFFFF}.",	GetVehicleName(autos[slot][playerid]));
		if(tipo == 6) MensajeEx(playerid,-1, "Tu {DBED15}%s{FFFFFF} fue trasladado al estacionamiento del Salón de Eventos.",GetVehicleName(autos[slot][playerid]));
		if(tipo != 5) LinkVehicleToInterior(autos[slot][playerid], 1);
		else LinkVehicleToInterior(autos[slot][playerid], 30);
		if(tipo == 4) SetVehicleVirtualWorldEx(autos[slot][playerid], 4);
		else if(tipo == 5) SetVehicleVirtualWorldEx(autos[slot][playerid], 6);
		else SetVehicleVirtualWorldEx(autos[slot][playerid], tipo);
		SetVehicleHealth(autos[slot][playerid], VehicleInfo[playerid][slot][pVidaV]);
	}
	else
	{
		autos[slot][playerid] = CreateVehicle(VehicleInfo[playerid][slot][vModelo],VehicleInfo[playerid][slot][vX],VehicleInfo[playerid][slot][vY],VehicleInfo[playerid][slot][vZ],VehicleInfo[playerid][slot][vA],VehicleInfo[playerid][slot][vColor1],VehicleInfo[playerid][slot][vColor2],-1);
		LinkVehicleToInterior(autos[slot][playerid], VehicleInfo[playerid][slot][vinterior]);
		SetVehicleVirtualWorldEx(autos[slot][playerid], VehicleInfo[playerid][slot][vvw]);
		SetVehicleHealth(autos[slot][playerid], VehicleInfo[playerid][slot][pVidaV]);
	}
	SetVehicleNumberPlate(autos[slot][playerid], Patente[playerid][slot]);
	VehicleFuel[autos[slot][playerid]] = VehicleInfo[playerid][slot][vGas];
	for(new i = 0; i < 13; i++) if(ComponenteValido(VehicleInfo[playerid][slot][vModelo],Componentes[playerid][i][slot])) AddVehicleComponent(autos[slot][playerid], Componentes[playerid][i][slot]);
	UpdateVehicleDamageStatus(autos[slot][playerid], VehicleInfo[playerid][slot][VE1], VehicleInfo[playerid][slot][VE2], VehicleInfo[playerid][slot][VE3], VehicleInfo[playerid][slot][VE4]);
	if(VehicleInfo[playerid][slot][vPJ] >= 0) ChangeVehiclePaintjob(autos[slot][playerid], VehicleInfo[playerid][slot][vPJ]);
	if(VehicleInfo[playerid][slot][vSeguro] == 1)
	{
		bloqueado[autos[slot][playerid]] = 1;
		GetVehicleParamsEx(autos[slot][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos[slot][playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(VehicleInfo[playerid][slot][vSeguro] == 0)
	{
		bloqueado[autos[slot][playerid]] = 0;
		GetVehicleParamsEx(autos[slot][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos[slot][playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	}
	if(VehicleInfo[playerid][slot][vAlarma] == 1) alarma[autos[slot][playerid]] = 1;
	else if(VehicleInfo[playerid][slot][vAlarma] == 0) alarma[autos[slot][playerid]] = 0;
	ChangeVehicleColor(autos[slot][playerid], VehicleInfo[playerid][slot][vColor1], VehicleInfo[playerid][slot][vColor2]);
	Baul[autos[slot][playerid]] = 0;
	MotorAuto[autos[slot][playerid]] = 0;
	Balde[autos[slot][playerid]] = 0;
	Luces[autos[slot][playerid]] = 0;
	if(IsValidVehicle(autos[slot][playerid]) && VehicleInfo[playerid][slot][v_DBID] != 0)
 	{
	  	new Query[256];
	  	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",VehicleInfo[playerid][slot][v_DBID], MAX_OBJETOS);
	  	mysql_tquery(handle_db, Query, "L_Objetos", "i",autos[slot][playerid]);
	}
	return 1;
}
public RespawnearV(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
}
public RespawnearVF(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    SetVehicleHealth(vehicleid, 5000.0);
    return 1;
}
public RespawnearVF2(vehicleid)
{
    SetVehicleToRespawn(vehicleid);
    SetVehicleHealth(vehicleid, 1000.0);
    return 1;
}
stock PlayerNearObject(playerid,object,Float:range)
{
    new Float:Pos[3];
    GetDynamicObjectPos(object,Pos[0],Pos[1],Pos[2]);
    if(IsPlayerInRangeOfPoint(playerid,range,Pos[0],Pos[1],Pos[2])) return 1;
    return 0;
}
stock IsNumberEven(number)
{
    new remainder = number % 2;
    if(remainder > 0) return false;
    else return true;
}
stock LCaja(playerid)
{
    ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
    return 1;
}
stock DCaja(playerid)
{
    ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
    return 1;
}
stock TienePrendaFabrica(playerid)
{
    for(new i = 0; i != MAX_PTOYS; i ++)
	{
	    if(PlayerToys[playerid][i][pToyValid])
		{
		    if(PlayerToys[playerid][i][pUsando] && (PlayerToys[playerid][i][pModelID] == 12912 || PlayerToys[playerid][i][pModelID] == 18913)) return 1;
		    if(PlayerToys[playerid][i][pUsando] && (PlayerToys[playerid][i][pModelID] == 18914 || PlayerToys[playerid][i][pModelID] == 18915)) return 1;
		    if(PlayerToys[playerid][i][pUsando] && (PlayerToys[playerid][i][pModelID] == 18916 || PlayerToys[playerid][i][pModelID] == 18917)) return 1;
		    if(PlayerToys[playerid][i][pUsando] && (PlayerToys[playerid][i][pModelID] == 18918 || PlayerToys[playerid][i][pModelID] == 18919)) return 1;
		    if(PlayerToys[playerid][i][pUsando] && (PlayerToys[playerid][i][pModelID] == 18920 || PlayerToys[playerid][i][pModelID] == 19472)) return 1;
		}
	}
	//Skins invulnerables
	if(PlayerInfo[playerid][pRopa] == 146 || PlayerInfo[playerid][pRopa] == 145 || PlayerInfo[playerid][pRopa] == 144) return 1;
	return 0;
}
public Legal1(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,1832.3918,-1832.4200,13.1546,7.0);
                PuntoCX[playerid] = 1832.3918; PuntoCY[playerid] = -1832.4200; PuntoCZ[playerid] = 13.1546;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 1;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 1;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Legal2(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,1338.6766,-912.8005,35.6672,7.0);
                PuntoCX[playerid] = 1338.6766; PuntoCY[playerid] = -912.8005; PuntoCZ[playerid] = 35.6672;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 1;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 1;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Legal3(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,455.0953,-1502.9357,30.8655,7.0);
                PuntoCX[playerid] = 455.0953; PuntoCY[playerid] = -1502.9357; PuntoCZ[playerid] = 30.8655;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 2;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 2;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Legal4(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,810.9319,-1391.0319,13.8416,7.0);
                PuntoCX[playerid] = 810.9319; PuntoCY[playerid] = -1391.0319; PuntoCZ[playerid] = 13.8416;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 2;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 2;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Legal5(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,488.1939,-1277.0747,15.9604,7.0);
                PuntoCX[playerid] = 488.1939; PuntoCY[playerid] = -1277.0747; PuntoCZ[playerid] = 15.9604;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 2;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 2;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Ilegal1(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
                PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 3;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 3;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Ilegal2(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,2480.9316,-2115.3042,13.2740,7.0);
                PuntoCX[playerid] = 2480.9316; PuntoCY[playerid] = -2115.3042; PuntoCZ[playerid] = 13.2740;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 3;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 3;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Ilegal3(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
                PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 3;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 3;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}

public Ilegal4(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
                PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 4;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 4;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}
public Ilegal5(playerid)
{
    if(Cargando2[playerid] < 11)
    {
        Cargando2[playerid] ++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
        if(Cargando2[playerid] == 11)
        {
            if(CamionID[playerid] != INVALID_PLAYER_ID)
            {
                Cargando2[playerid] = 0;
                KillTimer(Cargas[playerid]);
                TimerCargarCamion[playerid] = 0;
                CerrarPuertasCamionero(playerid);
                SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
                PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
                SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
                TimerCamionero[playerid] = gettime() + 300;
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
                CamionCargado[CamionID[playerid]] = 4;
                Chofer[CamionID[playerid]] = playerid;
                Carga[playerid] = 4;
                PlayerTemp[playerid][pt_Camionero] = true;
                HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
            }
        }
    }
}
public DescargandoCamion(playerid)
{
    new autoid = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    if(CAMION(autoid))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            TimerDescargarCamion[playerid] = 0;
            CerrarPuertasCamionero(playerid);
            Descongelar(playerid);
            SendClientMessage(playerid, -1, "{00FF3F}Bien hecho{FFFFFF}, ahora regresa el camión al depósito para recibir el pago.");
            SetPlayerCheckpoint(playerid, -1699.9927,10.2943,3.5547, 7.0);
            PuntoCX[playerid] = -1699.9927; PuntoCY[playerid] = 10.2943; PuntoCZ[playerid] = 3.5547;
        }
    }
    return 1;
}

stock RevisarLogro(playerid, tipo,peso = 1, tortuga = 1)
{
    new Query[256],logroName[64],logroDescripcion[128],color[8],color2[8],logrotext[128],porcentaje;
    switch(tipo)
    {
        case 1: format(logroName,sizeof(logroName),"Nivel %d",PlayerInfo[playerid][pNivel]), format(logroDescripcion,sizeof(logroDescripcion),"Alcanza el nivel %d",PlayerInfo[playerid][pNivel]);
        case 2: format(logroName,sizeof(logroName),"Sobre ruedas"), format(logroDescripcion,sizeof(logroDescripcion),"Compra su primer vehiculo");
        case 3: format(logroName,sizeof(logroName),"Automedicado"), format(logroDescripcion,sizeof(logroDescripcion),"Consume medicamentos");
        case 4: format(logroName,sizeof(logroName),"Adicto al crack"), format(logroDescripcion,sizeof(logroDescripcion),"Consume gramos de crack");
        case 5: format(logroName,sizeof(logroName),"Tortuga mayor"), format(logroDescripcion,sizeof(logroDescripcion),"Pesca una tortuga de 310Kg en el sur de Los Santos");
        case 6: format(logroName,sizeof(logroName),"Marihuanero"), format(logroDescripcion,sizeof(logroDescripcion),"Fuma porros");
        case 7: format(logroName,sizeof(logroName),"Piloto experto"), format(logroDescripcion,sizeof(logroDescripcion),"Gana carreras en el estadio de Las Venturas");
        case 8: format(logroName,sizeof(logroName),"Negocio redondo"), format(logroDescripcion,sizeof(logroDescripcion),"Cosecha plantas de marihuana");
        case 9: format(logroName,sizeof(logroName),"Techo propio"), format(logroDescripcion,sizeof(logroDescripcion),"Compra una casa en cualquier lugar de San Andreas");
        case 10: format(logroName,sizeof(logroName),"Lugar de trabajo"), format(logroDescripcion,sizeof(logroDescripcion),"Compra una oficina en cualquier lugar de San Andreas");
        case 12: format(logroName,sizeof(logroName),"Iniciando negocios"), format(logroDescripcion,sizeof(logroDescripcion),"Compra un restaurante en cualquier lugar de San Andreas");
        case 13: format(logroName,sizeof(logroName),"Cerrajero nocturno"), format(logroDescripcion,sizeof(logroDescripcion),"Fuerza la cerradura de casas");
        case 14: format(logroName,sizeof(logroName),"Médico profesional"), format(logroDescripcion,sizeof(logroDescripcion),"Salva la vida de personas");
        case 15: format(logroName,sizeof(logroName),"Maestro cervecero"), format(logroDescripcion,sizeof(logroDescripcion),"Participar en la Fiesta de la cerveza");
        case 16: format(logroName,sizeof(logroName),"Truco o trato"), format(logroDescripcion,sizeof(logroDescripcion),"Consigue dulces de todos los puestos de Halloween");
        case 17: format(logroName,sizeof(logroName),"Hechizado"), format(logroDescripcion,sizeof(logroDescripcion),"Consigue un sombrero descartable durante Halloween");
        case 18: format(logroName,sizeof(logroName),"Ganador"), format(logroDescripcion,sizeof(logroDescripcion),"Consigue afinidad máxima con todas las bailarinas del club de Las Venturas");
    }
    switch(tipo)
    {
        case 1: {
            if(PlayerInfo[playerid][pLogroNivel] == 0) mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Titulo,Descripcion,Tipo,Completado) VALUES ('%e','%e','%e','1','1')",PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
            else {
                mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Fecha`= CURRENT_TIMESTAMP(), `Titulo` = 'Nivel %d',`Descripcion` = 'Alcanza el nivel %d', `Valor` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '1'",PlayerInfo[playerid][pNivel], PlayerInfo[playerid][pNivel],PlayerInfo[playerid][pNivel],PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, Query);
            }
        }
        case 2: {
            if(PlayerInfo[playerid][pSobreRuedas] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Titulo,Descripcion,Tipo,Completado) VALUES ('%e','%e','%e','2','1')",PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
                mysql_tquery(handle_db, Query);
            }
        }
        case 3: {
            if(PlayerInfo[playerid][pRemedios] == 0) PlayerInfo[playerid][pRemedios] ++,mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','3')",logroName,logroDescripcion,PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pRemedios]);
            else PlayerInfo[playerid][pRemedios] ++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '3'", PlayerInfo[playerid][pRemedios], PlayerInfo[playerid][Nickname]);
        }
        case 4: {
            if(PlayerInfo[playerid][pCracks] == 0) PlayerInfo[playerid][pCracks]++,mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','4')", logroName,logroDescripcion,PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pCracks]);
            else PlayerInfo[playerid][pCracks]++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '4'", PlayerInfo[playerid][pCracks], PlayerInfo[playerid][Nickname]);
        }
        case 5: {
            if(PlayerInfo[playerid][pTortuga] == 0 && peso >= 310 && tortuga == 1) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Tipo,Completado,Titulo,Descripcion) VALUES ('%e','5','1','%e','%e');", PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
                mysql_tquery(handle_db, Query);
            }
        }
        case 6: {
            if(PlayerInfo[playerid][pPorros] == 0) PlayerInfo[playerid][pPorros] ++,mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','6')", logroName,logroDescripcion,PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pPorros]);
            else PlayerInfo[playerid][pPorros] ++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '6'", PlayerInfo[playerid][pPorros], PlayerInfo[playerid][Nickname]);
        }
        case 7: {
            if(PlayerInfo[playerid][pGanadas] == 0) PlayerInfo[playerid][pGanadas]++, mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','7')", logroName,logroDescripcion,PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pGanadas]);
            else PlayerInfo[playerid][pGanadas]++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '7'", PlayerInfo[playerid][pGanadas], PlayerInfo[playerid][Nickname]);
        }
        case 8: {
            if(PlayerInfo[playerid][pCosecha] == 0) PlayerInfo[playerid][pCosecha]++, mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','8')", logroName,logroDescripcion,PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pCosecha]);
            else PlayerInfo[playerid][pCosecha]++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '8'", PlayerInfo[playerid][pCosecha], PlayerInfo[playerid][Nickname]);
        }
        case 9: {
            if(PlayerInfo[playerid][pCasa] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Tipo,Completado,Titulo,Descripcion) VALUES ('%e','9','1','%e','%e');", PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
                mysql_tquery(handle_db, Query);
            }
        }
        case 10: {
            if(PlayerInfo[playerid][pOficina] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Tipo,Completado,Titulo,Descripcion) VALUES ('%e','10','1','%e','%e');", PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
                mysql_tquery(handle_db, Query);
            }
        }
        case 11: {
            if(PlayerInfo[playerid][pRestaurante] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Tipo,Completado,Titulo,Descripcion) VALUES ('%e','11','1','%e','%e');", PlayerInfo[playerid][Nickname],logroName,logroDescripcion);
                mysql_tquery(handle_db, Query);
            }
        }
        case 12: {
            if(PlayerInfo[playerid][pForzadas] == 0) PlayerInfo[playerid][pForzadas] ++,mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e','%e','%d','12')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pForzadas]);
            else PlayerInfo[playerid][pForzadas] ++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '12'", PlayerInfo[playerid][pForzadas], PlayerInfo[playerid][Nickname]);
        }
        case 13: {
            if(PlayerInfo[playerid][pReanimados] == 0) PlayerInfo[playerid][pReanimados]++,mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Progreso,Tipo) VALUES ('%e','%e', '%e','%d','13')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pReanimados]);
            else PlayerInfo[playerid][pReanimados]++,mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Progreso` = '%d' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '13'", PlayerInfo[playerid][pReanimados], PlayerInfo[playerid][Nickname]);
        }
        case 14: {
            if(PlayerInfo[playerid][pFiestaCerveza] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Completado,Tipo) VALUES ('%e','%e','%e','1','14')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, Query);
            }
        }
        case 15: {
            if(PlayerInfo[playerid][pTrucoTrato] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Completado,Tipo) VALUES ('%e','%e','%e','1','15')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, Query);
            }
        }
        case 16: {
            if(PlayerInfo[playerid][pHechizado] == 0) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Completado,Tipo) VALUES ('%e','%e','%e','1','16')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, Query);
            }
        }
        case 17: {
            if(PlayerInfo[playerid][pLogroPutiClub] == 0 && PlayerInfo[playerid][pAfinidad1] > 89 && PlayerInfo[playerid][pAfinidad2] > 89 && PlayerInfo[playerid][pAfinidad3] > 89 && PlayerInfo[playerid][pAfinidad4] > 89 && PlayerInfo[playerid][pAfinidad5] > 89 && PlayerInfo[playerid][pAfinidad6] > 89) {
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Titulo,Descripcion,Nombre_Jugador,Completado,Tipo) VALUES ('%e','%e','%e','1','17')",logroName,logroDescripcion, PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, Query);
            }
        }
    }
    if(tipo != 17 && tipo != 15 && tipo != 14 && tipo != 16 && tipo != 9 && tipo != 10 && tipo != 11 && tipo != 2 && tipo != 5) mysql_tquery(handle_db, Query);
    if(tipo == 2 && PlayerInfo[playerid][pSobreRuedas] == 1) return 1;
    if(tipo == 3 && PlayerInfo[playerid][pRemedios] != 50 && PlayerInfo[playerid][pRemedios] != 200 && PlayerInfo[playerid][pRemedios] != 500 && PlayerInfo[playerid][pRemedios] != 1200 && PlayerInfo[playerid][pRemedios] != 2400 && PlayerInfo[playerid][pRemedios] != 5000) return 1;
    if(tipo == 4 && PlayerInfo[playerid][pCracks] != 50 && PlayerInfo[playerid][pCracks] != 200 && PlayerInfo[playerid][pCracks] != 500 && PlayerInfo[playerid][pCracks] != 1200 && PlayerInfo[playerid][pCracks] != 2400 && PlayerInfo[playerid][pCracks] != 5000) return 1;
    if(tipo == 5 && PlayerInfo[playerid][pTortuga] == 1) return 1;
    if(tipo == 6 && PlayerInfo[playerid][pPorros] != 30 && PlayerInfo[playerid][pPorros] != 30 && PlayerInfo[playerid][pPorros] != 70 && PlayerInfo[playerid][pPorros] != 160 && PlayerInfo[playerid][pPorros] != 350 && PlayerInfo[playerid][pPorros] != 800 && PlayerInfo[playerid][pPorros] != 2000) return 1;
    if(tipo == 7 && PlayerInfo[playerid][pGanadas] != 3 && PlayerInfo[playerid][pGanadas] != 8 && PlayerInfo[playerid][pGanadas] != 15 && PlayerInfo[playerid][pGanadas] != 25 && PlayerInfo[playerid][pGanadas] != 40) return 1;
    if(tipo == 8 && PlayerInfo[playerid][pCosecha] != 10 && PlayerInfo[playerid][pCosecha] != 25 && PlayerInfo[playerid][pCosecha] != 60 && PlayerInfo[playerid][pCosecha] != 140 && PlayerInfo[playerid][pCosecha] != 300) return 1;
    if(tipo == 9 && PlayerInfo[playerid][pCasa] == 1) return 1;
    if(tipo == 10 && PlayerInfo[playerid][pOficina] == 1) return 1;
    if(tipo == 11 && PlayerInfo[playerid][pRestaurante] == 1) return 1;
    if(tipo == 12 && PlayerInfo[playerid][pForzadas] != 10 && PlayerInfo[playerid][pForzadas] != 25 && PlayerInfo[playerid][pForzadas] != 60 && PlayerInfo[playerid][pForzadas] != 100 && PlayerInfo[playerid][pForzadas] != 200) return 1;
    if(tipo == 13 && PlayerInfo[playerid][pReanimados] != 5 && PlayerInfo[playerid][pReanimados] != 15 && PlayerInfo[playerid][pReanimados] != 40 && PlayerInfo[playerid][pReanimados] != 100 && PlayerInfo[playerid][pReanimados] != 250) return 1;
    if(tipo == 14 && PlayerInfo[playerid][pFiestaCerveza] == 1) return 1;
    if(tipo == 15 && PlayerInfo[playerid][pTrucoTrato] == 1) return 1;
    if(tipo == 16 && PlayerInfo[playerid][pHechizado] == 1) return 1;
    if(tipo == 17 && (PlayerInfo[playerid][pLogroPutiClub] == 1 || PlayerInfo[playerid][pAfinidad1] < 90 || PlayerInfo[playerid][pAfinidad2] < 90 || PlayerInfo[playerid][pAfinidad3] < 90 || PlayerInfo[playerid][pAfinidad4] < 90 || PlayerInfo[playerid][pAfinidad5] < 90 || PlayerInfo[playerid][pAfinidad6] < 90)) return 1;
    switch(tipo)
    {
        case 1: PlayerInfo[playerid][pLogroNivel] = 1;
        case 2: PlayerInfo[playerid][pSobreRuedas] = 1;
        case 5: PlayerInfo[playerid][pTortuga] = 1;
        case 7: PlayerInfo[playerid][pGanadas] = 1;
        case 9: PlayerInfo[playerid][pCasa] = 1;
        case 10: PlayerInfo[playerid][pOficina] = 1;
        case 11: PlayerInfo[playerid][pRestaurante] = 1;
        case 12: PlayerInfo[playerid][pFiestaCerveza] = 1;
        case 13: PlayerInfo[playerid][pTrucoTrato] = 1;
        case 14: PlayerInfo[playerid][pHechizado] = 1;
        case 15: PlayerInfo[playerid][pLogroPutiClub] = 1;
    }
    switch(tipo)
    {
        case 1: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Alcanzar el nivel %d.~n~_", PlayerInfo[playerid][pNivel]); if(PlayerInfo[playerid][pNivel] == 12) porcentaje = 120; else porcentaje = PlayerInfo[playerid][pNivel]*10; }
        case 2: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Compra su primer vehiculo.~n~_"); porcentaje = 10; }
        case 3: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Consume %d medicamentos~n~_",PlayerInfo[playerid][pRemedios]); porcentaje = 10; }
        case 4: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Consume %d gramos de Crack.~n~_",PlayerInfo[playerid][pCracks]); porcentaje = 10; }
        case 5: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Pesca una tortuga de 310Kg en~n~el sur de Los Santos.~n~_"); porcentaje = 50;}
        case 6: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Fuma %d porros~n~_",PlayerInfo[playerid][pPorros]); porcentaje = 10; }
        case 7: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Gana %d carreras en el estadio~n~de Las Venturas.~n~_",PlayerInfo[playerid][pGanadas]); porcentaje = 10; }
        case 8: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Cosechar %d plantas de~n~marihuana.~n~_",PlayerInfo[playerid][pCosecha]); porcentaje = 10; }
        case 9: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Compra una casa en cualquier~n~lugar de San Andreas.~n~_"); porcentaje = 20; }
        case 10: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Compra una oficina  en~n~cualquier lugar de San Andreas.~n~_"); porcentaje = 20; }
        case 11: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Compra un restaurante en~n~cualquier lugar de San Andreas.~n~_"); porcentaje = 30; }
        case 12: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Fuerza la cerradura de %d~n~casas.~n~_",PlayerInfo[playerid][pForzadas]); porcentaje = 10; }
        case 13: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Salva la vida de %d personas.~n~_",PlayerInfo[playerid][pReanimados]); porcentaje = 10; }
        case 14: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Participar en la Fiesta de la~n~cerveza.~n~_"); porcentaje = 10; }
        case 15: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Consigue dulces de todos los~n~puestos de Haloween.~n~_"); porcentaje = 50; }
        case 16: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Consigue un sombrero~n~descartable durante Halloween.~n~_"); porcentaje = 10; }
        case 17: { format(logrotext,sizeof(logrotext),"~n~_~n~_~n~Consigue afinidad mxima con~n~todas las bailarinas del club de~n~Las Venturas.~n~_"); porcentaje = 20; }
    }
    if(tipo == 3)
    {
        if(PlayerInfo[playerid][pRemedios] == 50) porcentaje = 10;
        if(PlayerInfo[playerid][pRemedios] == 200) porcentaje = 20;
        if(PlayerInfo[playerid][pRemedios] == 500) porcentaje = 30;
        if(PlayerInfo[playerid][pRemedios] == 1200) porcentaje = 40;
        if(PlayerInfo[playerid][pRemedios] == 2400) porcentaje = 50;
        if(PlayerInfo[playerid][pRemedios] == 5000) porcentaje = 60;
    }
    if(tipo == 4)
    {
        if(PlayerInfo[playerid][pCracks] == 50) porcentaje = 10;
        if(PlayerInfo[playerid][pCracks] == 200) porcentaje = 20;
        if(PlayerInfo[playerid][pCracks] == 500) porcentaje = 30;
        if(PlayerInfo[playerid][pCracks] == 1200) porcentaje = 40;
        if(PlayerInfo[playerid][pCracks] == 2400) porcentaje = 50;
        if(PlayerInfo[playerid][pCracks] == 5000) porcentaje = 60;
    }
    if(tipo == 6)
    {
        if(PlayerInfo[playerid][pPorros] == 30) porcentaje = 10;
        if(PlayerInfo[playerid][pPorros] == 70) porcentaje = 20;
        if(PlayerInfo[playerid][pPorros] == 160) porcentaje = 30;
        if(PlayerInfo[playerid][pPorros] == 350) porcentaje = 40;
        if(PlayerInfo[playerid][pPorros] == 800) porcentaje = 50;
        if(PlayerInfo[playerid][pPorros] == 2000) porcentaje = 60;
    }
    if(tipo == 7)
    {
        if(PlayerInfo[playerid][pGanadas] == 3) porcentaje = 10;
        if(PlayerInfo[playerid][pGanadas] == 8) porcentaje = 20;
        if(PlayerInfo[playerid][pGanadas] == 15) porcentaje = 30;
        if(PlayerInfo[playerid][pGanadas] == 25) porcentaje = 40;
        if(PlayerInfo[playerid][pGanadas] == 40) porcentaje = 50;
    }
    if(tipo == 8)
    {
        if(PlayerInfo[playerid][pCosecha] == 10) porcentaje = 10;
        if(PlayerInfo[playerid][pCosecha] == 25) porcentaje = 20;
        if(PlayerInfo[playerid][pCosecha] == 60) porcentaje = 30;
        if(PlayerInfo[playerid][pCosecha] == 140) porcentaje = 40;
        if(PlayerInfo[playerid][pCosecha] == 300) porcentaje = 50;
    }
    if(tipo == 12)
    {
        if(PlayerInfo[playerid][pForzadas] == 10) porcentaje = 10;
        if(PlayerInfo[playerid][pForzadas] == 25) porcentaje = 20;
        if(PlayerInfo[playerid][pForzadas] == 60) porcentaje = 30;
        if(PlayerInfo[playerid][pForzadas] == 100) porcentaje = 40;
        if(PlayerInfo[playerid][pForzadas] == 200) porcentaje = 50;
    }
    if(tipo == 13)
    {
        if(PlayerInfo[playerid][pReanimados] == 5) porcentaje = 10;
        if(PlayerInfo[playerid][pReanimados] == 15) porcentaje = 20;
        if(PlayerInfo[playerid][pReanimados] == 40) porcentaje = 30;
        if(PlayerInfo[playerid][pReanimados] == 100) porcentaje = 40;
        if(PlayerInfo[playerid][pReanimados] == 250) porcentaje = 50;
    }
    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `achievements` SET `Fecha` = CURRENT_TIMESTAMP(),`Completado`='1' WHERE `Nombre_Jugador` = '%e' AND `Tipo` = '%d'", PlayerInfo[playerid][Nickname],tipo);
    mysql_tquery(handle_db, Query);
    switch(PlayerInfo[playerid][pFaccion])
	{
		case 1: color = "{%06x}", color2 = "Radio";
		default: color = "{%06x}", color2 = "Banda";
	}
    if(tipo == 17) CerrarAviso(playerid);
    GameTextForPlayer(playerid, "~g~] ~w~LOGRO CONSEGUIDO ~g~]", 5000, 4);
    SendClientMessage(playerid,0xA385CBFF,"Conseguiste un logro, puedes ver tus logros y los de otras personas en el discord.");
    PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
    new porcento[5];
    valstr(porcento,porcentaje);
    MostrarLogro(playerid,logroName,logrotext,porcento);
    if(PlayerInfo[playerid][pFaccion] > 0)
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pFaccion] == PlayerInfo[playerid][pFaccion]) MensajeEx(i, -1, "{%s}[%s]{FFFFFF} El jugador {00CCFF}%s{FFFFFF} consiguió el logro {%06x}* %s *{FFFFFF} (%d puntos).",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8,color2,PlayerInfo[playerid][Nickname],logroName,porcentaje);
        }
    }
    SetTimerEx("QuitarLogro",6000,false,"d",playerid);
    return true;
}

public QuitarLogro(playerid)
{
    PlayerTextDrawHide(playerid, LogroRueda[playerid]);
    PlayerTextDrawHide(playerid, LogroLinea[playerid]);
    PlayerTextDrawHide(playerid, LogroNumero[playerid]);
    PlayerTextDrawHide(playerid, LogroTitulo[playerid]);
    PlayerTextDrawHide(playerid, LogroTexto[playerid]);
}
public SacarAnimF(playerid)
{
    ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
}
public Descongelar(playerid)
{
	TogglePlayerControllable(playerid,1);
	SetPVarInt(playerid, "IsFrozen", 1);
}
public OcultarAnim(playerid)
{
    LoopingAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    SendClientMessage(playerid, -1, "El paciente está listo para ser trasladado al hospital.");
    SendClientMessage(playerid, -1, "Sube a tu ambulancia y escribe {DBED15}/subir paciente{FFFFFF}, luego conduce al hospital más cercano.");
    SendClientMessage(playerid, -1, "Apresúrate porque está perdiendo mucha sangre y puede morir en el camino.");
}
public StopCell(playerid)
{
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    }
    return 1;
}
public DarDineroLogin(playerid)
{
    GivePlayerMoney(playerid,PlayerInfo[playerid][pDinero]);
}

public DarDinero(playerid,cantidad)
{
    if(cantidad < 0) return 1;
    PlayerInfo[playerid][pDinero] += cantidad;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid,PlayerInfo[playerid][pDinero]);
    return 1;
}
public QuitarDinero(playerid,cantidad)
{
    if(cantidad < 0) return 1;
    PlayerInfo[playerid][pDinero] -= cantidad;
    GivePlayerMoney(playerid,-cantidad);
    return 1;
}

public EncerrandoNombre(playerid,i)
{
    new string[128],dinerorobo, cargos = PlayerInfo[playerid][pCargos];
    format(string, sizeof(string), "%s encierra a %s en la celda.", PlayerInfo[playerid][Nickname],PlayerInfo[i][Nickname]);
    ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
    if(RoboTienda[i] == 1)
    {
        switch(cargos)
        {
            case 1: dinerorobo = 1000; case 2: dinerorobo = 2000;
            case 3: dinerorobo = 3000; case 4: dinerorobo = 4000;
            case 5: dinerorobo = 5000; case 6: dinerorobo = 6000;
        }
        RoboTienda[i] = 0;
        MensajeEx(playerid, -1, "Recibes un bono de {00CC00}$%d{FFFFFF} por el arresto.", dinerorobo);
        DarDinero(playerid,dinerorobo);
    }
}
public Encerrando(playerid)
{
	if(JugadorLogeado[playerid] != 1) return 1;
	new vw = GetPlayerVirtualWorld(playerid);
	BajandoV[playerid] = 1;
	SetPlayerHealthEx(playerid,100.0);
	if(PlayerInfo[playerid][pCargos] > 0)
	{
	    SetCameraBehindPlayer(playerid);
	    new tiempoCargos,celda = random(4);
		CalcularCargos(playerid,tiempoCargos);
		PlayerInfo[playerid][pTiempoCarcel] = (tiempoCargos * 60);
		PlayerInfo[playerid][arrestado]++;
		PlayerInfo[playerid][Agonizando] = 0;
		MensajeEx(playerid, -1, "{FF3300}Fuiste detenido{FFFFFF}, tendrás que cumplir una condena de {DBED16}%d minutos {FFFFFF}para ser liberado.", tiempoCargos);
		SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en prisión {DBED15}/domiciliaria");
  		SendClientMessage(playerid,-1,"Para ver cuanto tiempo te falta para cumplir la condena, escribe {DBED16}/tiempo{FFFFFF}.");
  		SendClientMessage(playerid,-1,"La policia le quita a los detenidos sus armas y drogas.");
  		if(RoboTienda[playerid] > 0)
		{
		    SendClientMessage(playerid,-1,"También se te cobró {00cc00}$500{FFFFFF} por los daños ocasionados.");
		    QuitarDinero(playerid,500);
		}
		DesCargarMapeosEx(playerid);
		PlayerInfo[playerid][pCargos] = 0;
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
		SetPlayerColor(playerid, COLOR_WHITE);
		Jail[playerid] = 1;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		QuitarArmas(playerid);
		SetCameraBehindPlayer(playerid);
		VariableCaido[playerid] = 0;
		if(PlayerInfo[playerid][pEnFC] == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,15.0,1564.5568,-1694.7732,5.8906) || IsPlayerInRangeOfPoint(playerid,7.0,240.4520,112.8195,1003.2188) && vw == 1)
			{
			    PlayerInfo[playerid][pTipoCarcel] = 1;
				SetPlayerVirtualWorld(playerid, 1);
				SetPlayerInterior(playerid, 10);
				if(celda == 0) SetPlayerPos(playerid, 227.3367,109.3470,999.0156);
				else if(celda == 1) SetPlayerPos(playerid, 223.0108,109.8135,999.0156);
				else if(celda == 2) SetPlayerPos(playerid, 219.0009,110.3388,999.0156);
				else if(celda == 3) SetPlayerPos(playerid, 215.2188,109.1792,999.0156);
			}
			else if(IsPlayerInRangeOfPoint(playerid,15.0,-1589.5292,716.2191,-5.6688) || IsPlayerInRangeOfPoint(playerid,7.0,240.4520,112.8195,1003.2188) && vw == 5)
			{
			    PlayerInfo[playerid][pTipoCarcel] = 2;
				SetPlayerVirtualWorld(playerid, 5);
				SetPlayerInterior(playerid, 10);
				if(celda == 0) SetPlayerPos(playerid, 227.3367,109.3470,999.0156);
				else if(celda == 1) SetPlayerPos(playerid, 223.0108,109.8135,999.0156);
				else if(celda == 2) SetPlayerPos(playerid, 219.0009,110.3388,999.0156);
				else if(celda == 3) SetPlayerPos(playerid, 215.2188,109.1792,999.0156);
			}
			else if(IsPlayerInRangeOfPoint(playerid,15.0,2293.1904,2451.6099,10.3875) || IsPlayerInRangeOfPoint(playerid,7.0,235.2946,166.3358,1003.0300) && vw == 7)
			{
			    PlayerInfo[playerid][pTipoCarcel] = 3;
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 7);
				if(celda == 0) SetPlayerPos(playerid, 197.6199, 174.8677, 1002.6390);
				else if(celda == 1) SetPlayerPos(playerid, 193.5631, 174.8843, 1002.6390);
				else if(celda == 2) SetPlayerPos(playerid, 194.5337, 163.1250, 1002.6390);
				else if(celda == 3) SetPlayerPos(playerid, 198.6272, 162.4750, 1002.6390);
			}
		}
		else
		{
			new rand = random(sizeof(FCSPAWN));
			SetPlayerPos(playerid, FCSPAWN[rand][0], FCSPAWN[rand][1], FCSPAWN[rand][2]);
			SetPlayerFacingAngle(playerid, FCSPAWN[rand][3]);
			FortCarsonX[playerid][0] = FCSPAWN[rand][0];
			FortCarsonX[playerid][1] = FCSPAWN[rand][1];
			FortCarsonX[playerid][2] = FCSPAWN[rand][2];
			FortCarsonX[playerid][3] = FCSPAWN[rand][3];
		}
	}
	return 1;
}

public Encerrando2(playerid)
{
	if(JugadorLogeado[playerid] != 1) return 1;
	if(PlayerInfo[playerid][pCargos] > 0)
	{
		new tiempox[32], tiempoCargos;
		CalcularCargos(playerid,tiempoCargos);
		PlayerInfo[playerid][arrestado] ++;
		PlayerInfo[playerid][pTiempoCarcel] = (tiempoCargos * 60);
	    PlayerInfo[playerid][pTipoCarcel] = 1;
		if(tiempoCargos > 1) tiempox = "minutos";
		else tiempox = "minuto";
		PlayerInfo[playerid][Agonizando] = 0;
		MensajeEx(playerid, -1, "{FF3300}Fuiste detenido{FFFFFF}, tendrás que cumplir una condena de {DBED16}%d %s {FFFFFF}para ser liberado.", tiempoCargos,tiempox);
		SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en prisión {DBED15}/domiciliaria{FFFFFF}.");
		SendClientMessage(playerid,-1,"Para ver cuanto tiempo te falta para cumplir la condena, usa {DBED16}/tiempo");
		SendClientMessage(playerid,-1,"La policia le quita a los detenidos, sus armas y drogas.");
		if(RoboTienda[playerid] > 0)
		{
		    SendClientMessage(playerid,-1,"También se te cobró {00cc00}$500{FFFFFF} por los daños ocasionados.");
		    QuitarDinero(playerid,500);
		}
		DesCargarMapeosEx(playerid);
		PlayerInfo[playerid][pCargos] = 0;
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
		SetPlayerColor(playerid, COLOR_WHITE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		QuitarArmas(playerid);
		Jail[playerid] = 1;
		if(PlayerInfo[playerid][pEnFC] == 0)
		{
			new celda = random(4);
			switch(celda)
			{
				case 0: SetPosEx(playerid,227.3367,109.3470,999.0156,0,10,1);
				case 1: SetPosEx(playerid,223.0108,109.8135,999.0156,0,10,1);
				case 2: SetPosEx(playerid,219.0009,110.3388,999.0156,0,10,1);
				case 3: SetPosEx(playerid,215.2188,109.1792,999.0156,0,10,1);
			}
		}
		else
		{
			new rand = random(sizeof(FCSPAWN));
			SetPlayerPos(playerid, FCSPAWN[rand][0], FCSPAWN[rand][1], FCSPAWN[rand][2]);
			SetPlayerFacingAngle(playerid, FCSPAWN[rand][3]);
			FortCarsonX[playerid][0] = FCSPAWN[rand][0];
			FortCarsonX[playerid][1] = FCSPAWN[rand][1];
			FortCarsonX[playerid][2] = FCSPAWN[rand][2];
			FortCarsonX[playerid][3] = FCSPAWN[rand][3];
		}
	}
	return 1;
}
public EnviarJail(playerid)
{
    NoTeleportHack(playerid);
    MensajeEx(playerid, -1, "Te encuentras sancionado por %s.", PlayerInfo[playerid][pRazonSan]);
    if(PlayerInfo[playerid][pTiempoJail] < 60) MensajeEx(playerid, -1, "Tiempo restante para cumplir la condena: {00CC00}%ds", PlayerInfo[playerid][pTiempoJail]);
    else if(PlayerInfo[playerid][pTiempoJail] >= 60) MensajeEx(playerid, -1, "Tiempo restante para cumplir la condena: {00CC00}%dm %ds", PlayerInfo[playerid][pTiempoJail]/60, PlayerInfo[playerid][pTiempoJail]%(60));
    SetPlayerPosEx(playerid, -992.1902,-6656.0366,52.8119);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, playerid);
    San[playerid] = 1;
    QuitarArma(playerid, 1);
    return 1;
}
public OnPlayerAkaLoaded(playerid)
{
    new content[MAX_PLAYER_NAME];
    if(cache_num_rows() > 0)
    {
        for(new i = 0; i < cache_num_rows(); i++)
        {
            PlayerTemp[playerid][pCuentasIP] ++;
            cache_get_value_name(i, "NAMES", content);
            format(PlayerTemp[playerid][NAMES],2500,"%s %s |",PlayerTemp[playerid][NAMES],content);
        }
    }
    else
    {
        new Query[256];
        mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `aka` (NAMES, IP) VALUES ('%e','%e')", PlayerInfo[playerid][Nickname],PlayerIP(playerid));
        mysql_tquery(handle_db, Query);
        mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `aka` WHERE IP = '%e'", PlayerIP(playerid));
        mysql_tquery(handle_db, Query, "OnPlayerAkaLoaded", "d", playerid);
        #if DEBUG_GM == 1
        printf("(OnPlayerAkaLoaded) PlayerID: %d | PlayerName: %s", playerid,PlayerInfo[playerid][Nickname]);
        #endif
    }
    return 1;
}
public OnPlayerDataLoaded(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerDataLoaded) PlayerID: %d", playerid);
    #endif
    if(GetPlayerScore(playerid) != 0) return ExpulsarJugador(playerid, "Posible bug");
    if(!IsValidName(PlayerInfo[playerid][Nickname]))
    {
        new Query[90];
        mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `admin_names` WHERE `Nickname`='%e' LIMIT 1", PlayerInfo[playerid][Nickname]);
        mysql_tquery(handle_db, Query, "CheckNickName", "dd", playerid,cache_num_rows());
        #if DEBUG_GM == 1
        printf("OnPlayerDataLoad %s[%d] - Load | Name without lastname",PlayerInfo[playerid][Nickname],playerid);
        #endif
        } else {
		InterpolateCameraPos(playerid, 2059.156982, -1752.315673, 15.471668, 2070.252929, -1753.890258, 15.375092, 2000);
		InterpolateCameraLookAt(playerid, 2064.153808, -1752.353271, 15.298171, 2073.002441, -1758.061767, 15.571113, 2000);
		SetPlayerPos(playerid, 2059.156982, -1752.315673, 15.471668);
        if(cache_num_rows() == 1) return ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD,"Esta cuenta está registrada","Ingresa tu contraseña:","Enviar","Salir");
        else ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT,"Registra una nueva cuenta","Ingresa tu contraseña:","Enviar","Salir");
        #if DEBUG_GM == 1
        printf("OnPlayerDataLoad %s[%d] - Load | Comprobando el nombre si su nombre está en la base de datos.",PlayerInfo[playerid][Nickname],playerid);
        #endif
    }
    return 1;
}
public CheckNickName(playerid,result)
{
    if(cache_num_rows() == 0)
    {
        ShowPlayerDialog(playerid, INMIGRACION, DIALOG_STYLE_MSGBOX, "Nombre inválido", "{DBED15}Departamento de inmigración:{FFFFFF} Tu nombre no es aceptable.\n{DBED15}Formato para el nombre:{FFFFFF} Nombre_Apellido\nPor favor, vuelve con un nombre válido.","Aceptar","");
        ExpulsarJugador(playerid,"Nombre inválido.");
        #if DEBUG_GM == 1
        printf("OnPlayerDataLoad %s[%d] - Load 3",PlayerInfo[playerid][Nickname],playerid);
        #endif
    } else {
        #if DEBUG_GM == 1
        printf("OnPlayerDataLoad %s[%d] - Load 4",PlayerInfo[playerid][Nickname],playerid);
        #endif
        new content = 0;
        cache_get_value_name_int(0, "owner", content); PlayerTemp[playerid][pOwner] = content;
        if(result == 1) return ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD,"Esta cuenta está registrada","Ingresa tu contraseña:","Enviar","Salir");
        else ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT,"Registra una nueva cuenta","Ingresa tu contraseña:","Enviar","Salir");
    }
    return 1;
}
public OnPlayerRegister(playerid,registro,skin)
{
	if(cache_num_rows() == 0)
	{
        new Query[1024], day, month, year;
        getdate(year,month,day);
        new Pais[30],dayR,monthR,yearR,FechaRegistro[30];
        getdate(yearR, monthR, dayR);
        GetPlayerCountry(playerid, Pais, sizeof(Pais));
        format(PlayerInfo[playerid][pPaisRegistro], 32, "%s", Pais);
        format(FechaRegistro, sizeof(FechaRegistro), "%d/%d/%d", dayR,monthR,yearR);
        new rplName[32];
        GetPlayerName(playerid, rplName, sizeof(rplName));
        for(new i = 0; i < strlen(rplName); i++)
        {
            if(rplName[i] == '_') rplName[i] = ' ';
        }
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `usuarios` (username,password,posX,posY,posZ,vida,Registro,Email,EMS,Edad,Pais_Registro,Registro_U,username_low,Sexo,Skin) VALUES ('%e','%e','1548.7921','-1366.2909','326.2109','100','%02d/%02d/%02d','%e',1,%d,'%e','%e','ninguno','%d','%d')",PlayerInfo[playerid][Nickname],PlayerInfo[playerid][pPassword],day,month,year,PlayerInfo[playerid][pEmail],PlayerInfo[playerid][pEdad],PlayerInfo[playerid][pPaisRegistro],FechaRegistro, registro, skin);
		mysql_pquery(handle_db, Query, "UsuarioRegistrado", "d", playerid);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin`='%d',`Sexo`='%d' WHERE `Username`='%e'",skin,registro,PlayerInfo[playerid][Nickname]);
		mysql_tquery(handle_db, Query);

		Usuarios[Cantidad]++;
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `registros` SET `Cantidad`='%d'",Usuarios[Cantidad]);
		mysql_pquery(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query),  "SELECT * FROM `usuarios` WHERE `Username` = '%e' AND `Password` = '%e';", PlayerInfo[playerid][Nickname], PlayerInfo[playerid][pPassword]);
		mysql_pquery(handle_db, Query, "OnPlayerSpawnLoaded", "d", playerid);
	}
    else
    {
        SendClientMessage(playerid, COLOR_ORANGE, "Ya hay una cuenta registrada con ese email.");
        ExpulsarJugador(playerid, "Correo en uso");
    }
    return 1;
}
public UsuarioRegistrado(playerid)
{
    new Query[512];
    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `achievements` (Nombre_Jugador,Tipo,Completado,Titulo,Descripcion) VALUES ('%e','1','1','Nivel 1','Alcanza el nivel %d')", PlayerInfo[playerid][Nickname], PlayerInfo[playerid][pNivel]);
    mysql_tquery(handle_db, Query);
    return 1;
}
public OnPlayerSpawnLoaded(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerSpawnLoaded) PlayerID: %d", playerid);
    #endif
    if(GetPlayerScore(playerid) != 0) return ExpulsarJugador(playerid, "Posible bug (2)");
    if(cache_num_rows() == 1)
    {
        new content[29];
        cache_get_value_name_int(0, "Striptease", EnClub[playerid]);
        cache_get_value_name_int(0, "suspendido", PlayerInfo[playerid][suspendido]);
        cache_get_value_name_int(0, "Sanciones", PlayerInfo[playerid][sancionado]);
        cache_get_value_name_int(0, "Skin",PlayerInfo[playerid][pRopa]);
        cache_get_value_name_int(0, "Bloqueado", PlayerInfo[playerid][pBloqueado]);
        cache_get_value_name_int(0, "ID",PlayerInfo[playerid][pID]);
        cache_get_value_name_int(0, "Online",PlayerInfo[playerid][pOnline]);
        cache_get_value_name_int(0, "Patines",  PlayerInfo[playerid][pPatines]);
        cache_get_value_name_int(0, "Baneado",  PlayerInfo[playerid][p_Ban]);
        cache_get_value_name_int(0, "Sed", 		PlayerInfo[playerid][pSed]);
        cache_get_value_name_int(0, "Hambre", 	PlayerInfo[playerid][pHambre]);
        cache_get_value_name_int(0, "LicenciaVuelo", PlayerInfo[playerid][pLicenciaVuelo]);
        cache_get_value_name_int(0, "SocioHP",  PlayerInfo[playerid][pSocioHP]);
        cache_get_value_name_int(0, "TipoCarcel",   PlayerInfo[playerid][pTipoCarcel]);
        cache_get_value_name_int(0, "TiempoCarcelS", PlayerInfo[playerid][pTiempoCarcel]);
        cache_get_value_name_int(0, "TerritorioMapa", PlayerInfo[playerid][pTerritorioMapa]);
        cache_get_value_name_int(0, "TerritorioAviso", PlayerInfo[playerid][pTerritorioAviso]);
        cache_get_value_name_int(0, "Numero",PlayerInfo[playerid][pNumero]);
        cache_get_value_name_int(0, "Guia",PlayerInfo[playerid][pGuia]);
        cache_get_value_name_int(0, "Sonidos",  PlayerInfo[playerid][pSonidos]);
        cache_get_value_name_int(0, "Muteos",PlayerInfo[playerid][pMuteos]);
        cache_get_value_name_int(0, "Barras",PlayerInfo[playerid][pBarras]);
        cache_get_value_name_int(0, "Alerta",PlayerInfo[playerid][pAlerta]);
        cache_get_value_name_int(0, "Velocimetro", PlayerInfo[playerid][pVelocimetro]);
        cache_get_value_name_int(0, "TiempoJail", PlayerInfo[playerid][pTiempoJail]);
        cache_get_value_name_int(0, "Cargos",PlayerInfo[playerid][pCargos]);
        cache_get_value_name_int(0, "Duty",PlayerInfo[playerid][pDuty]);
        cache_get_value_name_int(0, "SkinTrabajo", PlayerInfo[playerid][pModelo]);
        cache_get_value_name_int(0, "Agenda",PlayerInfo[playerid][pAgenda]);
        cache_get_value_name_int(0, "NivelPiloto", PlayerInfo[playerid][pNivelMecanico]);
        cache_get_value_name_int(0, "ExpPiloto", PlayerInfo[playerid][pExpMecanico]);
        cache_get_value_name_int(0, "EMS",PlayerInfo[playerid][pEMS]);
        cache_get_value_name_int(0, "Radio",PlayerInfo[playerid][pRadio]);
        cache_get_value_name_int(0, "GPS",PlayerInfo[playerid][pGPS]);
        cache_get_value_name_int(0, "Rango",PlayerInfo[playerid][pRango]);
        cache_get_value_name_int(0, "Edad",PlayerInfo[playerid][pEdad]);
        cache_get_value_name_int(0, "Sexo",PlayerInfo[playerid][pSexo]);
        cache_get_value_name_int(0, "Experiencia", PlayerInfo[playerid][pExperiencia]);
        cache_get_value_name_int(0, "Nivel",PlayerInfo[playerid][pNivel]);
        cache_get_value_name_int(0, "Martillo", PlayerInfo[playerid][pMartillo]);
        cache_get_value_name_int(0, "Destornillador", PlayerInfo[playerid][pDestornillador]);
        cache_get_value_name_int(0, "Barreta", PlayerInfo[playerid][pBarreta]);
        cache_get_value_name_int(0, "Balde", PlayerInfo[playerid][pBalde]);
        cache_get_value_name_int(0, "Faccion", PlayerInfo[playerid][pFaccion]);
        cache_get_value_name_int(0, "hprecio", PlayerInfo[playerid][hprecio]);
        cache_get_value_name_int(0, "hmoneda", PlayerInfo[playerid][hmoneda]);
        cache_get_value_name_int(0, "h2precio", PlayerInfo[playerid][h2precio]);
        cache_get_value_name_int(0, "h2moneda", PlayerInfo[playerid][h2moneda]);
        cache_get_value_name_int(0, "Repuestos",PlayerInfo[playerid][Repuestos]);
        cache_get_value_name_int(0, "FinMes",PlayerInfo[playerid][finmes]);
        cache_get_value_name_int(0, "FinDia",PlayerInfo[playerid][findia]);
        cache_get_value_name_int(0, "FinAno",PlayerInfo[playerid][finano]);
        cache_get_value_name_int(0, "FinMesL",PlayerInfo[playerid][finmeslicencia]);
        cache_get_value_name_int(0, "FinDiaL",PlayerInfo[playerid][findialicencia]);
        cache_get_value_name_int(0, "FinAnoL",PlayerInfo[playerid][finanolicencia]);
        cache_get_value_name_int(0, "EnCasa",PlayerInfo[playerid][EnCasa]);
        cache_get_value_name_int(0, "EnRopero", PlayerInfo[playerid][EnRopero]);
        cache_get_value_name_int(0, "EnGarage", PlayerInfo[playerid][EnGarage]);
        cache_get_value_name_int(0, "CasaID", PlayerInfo[playerid][CasaID]);
        cache_get_value_name_int(0, "CasaID2", PlayerInfo[playerid][CasaID2]);
        cache_get_value_name_int(0, "EstacionamientoID", PlayerInfo[playerid][EstacionamientoID]);
        cache_get_value_name_int(0, "Estacionado1", PlayerInfo[playerid][vEstacionado1]);
        cache_get_value_name_int(0, "Estacionado2", PlayerInfo[playerid][vEstacionado2]);
        cache_get_value_name_int(0, "Estacionado3", PlayerInfo[playerid][vEstacionado3]);
        cache_get_value_name_int(0, "Estacionado4", PlayerInfo[playerid][vEstacionado4]);
        cache_get_value_name_int(0, "EnEstacionamiento", PlayerInfo[playerid][pEnEstacionamiento]);
        cache_get_value_name_int(0, "Agonizando",   PlayerInfo[playerid][Agonizando]);
        cache_get_value_name_int(0, "VIP",PlayerInfo[playerid][pVip]);
        cache_get_value_name_int(0, "Banco",PlayerInfo[playerid][pBanco]);
        cache_get_value_name_int(0, "Moneda",PlayerInfo[playerid][Moneda]);
        cache_get_value_name_int(0, "Money",PlayerInfo[playerid][pDinero]);
        cache_get_value_name_int(0, "Medicamentos", PlayerInfo[playerid][pMedicamentos]);
        cache_get_value_name_int(0, "Tranquilizantes", PlayerInfo[playerid][pTranquilizantes]);
        cache_get_value_name_int(0, "Marihuana", PlayerInfo[playerid][pMarihuana]);
        cache_get_value_name_int(0, "Crack",PlayerInfo[playerid][pCrack]);
        cache_get_value_name_int(0, "Materiales", PlayerInfo[playerid][pMateriales]);
        cache_get_value_name_int(0, "Trabajo", PlayerInfo[playerid][pTrabajo]);
        cache_get_value_name_int(0, "Trabajo2", PlayerInfo[playerid][pTrabajo2]);
        cache_get_value_name_int(0, "Admin",PlayerInfo[playerid][pAdmin]);
        cache_get_value_name_int(0, "TiempoDuda",Tiempos[playerid][TiempoDuda]);
        cache_get_value_name_int(0, "TiempoVenderJ",Tiempos[playerid][TiempoVenderJ]);
        cache_get_value_name_int(0, "TiempoAnuncio",Tiempos[playerid][TiempoAnuncio]);
        cache_get_value_name_int(0, "RopaBasu", RopaBasu[playerid]);
        cache_get_value_name_int(0, "RopaMedi", RopaMedi[playerid]);
        cache_get_value_name_int(0, "RopaMeca", RopaMeca[playerid]);
        cache_get_value_name_int(0, "RopaMine", RopaMine[playerid]);
        cache_get_value_name_int(0, "Afinidad1", PlayerInfo[playerid][pAfinidad1]);
        cache_get_value_name_int(0, "Afinidad2", PlayerInfo[playerid][pAfinidad2]);
        cache_get_value_name_int(0, "Afinidad3", PlayerInfo[playerid][pAfinidad3]);
        cache_get_value_name_int(0, "Afinidad4", PlayerInfo[playerid][pAfinidad4]);
        cache_get_value_name_int(0, "Afinidad5", PlayerInfo[playerid][pAfinidad5]);
        cache_get_value_name_int(0, "Afinidad6", PlayerInfo[playerid][pAfinidad6]);
        cache_get_value_name_int(0, "PuntosCarrera",PlayerInfo[playerid][pPuntosCarrera]);
        cache_get_value_name_int(0, "Caramelos", PlayerInfo[playerid][pCaramelos]);
        cache_get_value_name_int(0, "WP0",PlayerInfo[playerid][j_ARMAS][0]);
        cache_get_value_name_int(0, "WP1",PlayerInfo[playerid][j_ARMAS][1]);
        cache_get_value_name_int(0, "WP2",PlayerInfo[playerid][j_ARMAS][2]);
        cache_get_value_name_int(0, "WP3",PlayerInfo[playerid][j_ARMAS][3]);
        cache_get_value_name_int(0, "WP4",PlayerInfo[playerid][j_ARMAS][4]);
        cache_get_value_name_int(0, "WP5",PlayerInfo[playerid][j_ARMAS][5]);
        cache_get_value_name_int(0, "WP6",PlayerInfo[playerid][j_ARMAS][6]);
        cache_get_value_name_int(0, "WP7",PlayerInfo[playerid][j_ARMAS][7]);
        cache_get_value_name_int(0, "WP8",PlayerInfo[playerid][j_ARMAS][8]);
        cache_get_value_name_int(0, "WP9",PlayerInfo[playerid][j_ARMAS][9]);
        cache_get_value_name_int(0, "WP10",PlayerInfo[playerid][j_ARMAS][10]);
        cache_get_value_name_int(0, "WP11",PlayerInfo[playerid][j_ARMAS][11]);
        cache_get_value_name_int(0, "WP12",PlayerInfo[playerid][j_ARMAS][12]);
        cache_get_value_name_int(0, "NivelPescador", PlayerInfo[playerid][pNivelPescador]);
        cache_get_value_name_int(0, "ExpPescador", PlayerInfo[playerid][pExpPescador]);
        cache_get_value_name_int(0, "NivelMinero", PlayerInfo[playerid][pNivelMinero]);
        cache_get_value_name_int(0, "ExpMinero", PlayerInfo[playerid][pExpMinero]);
        cache_get_value_name_int(0, "NivelArmero", PlayerInfo[playerid][pNivelArmero]);
        cache_get_value_name_int(0, "ExpArmero", PlayerInfo[playerid][pExpArmero]);
        cache_get_value_name_int(0, "NivelCamionero", PlayerInfo[playerid][pNivelCamionero]);
        cache_get_value_name_int(0, "ExpCamionero", PlayerInfo[playerid][pExpCamionero]);
        cache_get_value_name_int(0, "NivelBasurero", PlayerInfo[playerid][pNivelBasurero]);
        cache_get_value_name_int(0, "ExpBasurero", PlayerInfo[playerid][pExpBasurero]);
        cache_get_value_name_int(0, "NivelLadron", PlayerInfo[playerid][pNivelLadron]);
        cache_get_value_name_int(0, "ExpLadron", PlayerInfo[playerid][pExpLadron]);
        cache_get_value_name_int(0, "NivelMedico", PlayerInfo[playerid][pNivelMedico]);
        cache_get_value_name_int(0, "ExpMedico", PlayerInfo[playerid][pExpMedico]);
        cache_get_value_name_int(0, "NivelTransportista", PlayerInfo[playerid][pNivelTransportista]);
        cache_get_value_name_int(0, "ExpTransportista", PlayerInfo[playerid][pExpTransportista]);
        cache_get_value_name_int(0, "TiempoPD", PlayerInfo[playerid][TiempoPD]);
        cache_get_value_name_int(0, "totems",   PlayerInfo[playerid][Totems]);
		cache_get_value_name_int(0, "Interior", PlayerInfo[playerid][pInterior]);
		cache_get_value_name_int(0, "MundoVirtual",PlayerInfo[playerid][pMundoVirtual]);
        cache_get_value_name_int(0, "arrestado", PlayerInfo[playerid][arrestado]);
        cache_get_value_name_int(0, "horasjugadas", PlayerInfo[playerid][horasjugadas]);
        cache_get_value_name_float(0, "Vida",PlayerInfo[playerid][j_HEALTH]);
        cache_get_value_name_float(0, "Chaleco", PlayerInfo[playerid][j_ARMOUR]);
        cache_get_value_name_float(0, "posX",PlayerInfo[playerid][@X]);
        cache_get_value_name_float(0, "posY",PlayerInfo[playerid][@Y]);
        cache_get_value_name_float(0, "posZ",PlayerInfo[playerid][@Z]);
        cache_get_value_name_float(0, "posA",PlayerInfo[playerid][@A]);
        cache_get_value_name_float(0, "XE", PlayerInfo[playerid][jPosE_x]);
        cache_get_value_name_float(0, "YE", PlayerInfo[playerid][jPosE_y]);
        cache_get_value_name_float(0, "ZE", PlayerInfo[playerid][jPosE_z]);
        cache_get_value_name_float(0, "DeathX",DeathX[playerid]);
        cache_get_value_name_float(0, "DeathY",DeathY[playerid]);
        cache_get_value_name_float(0, "DeathZ",DeathZ[playerid]);
        cache_get_value_name(0, "Conexion", PlayerInfo[playerid][jConexion]);
        cache_get_value_name_int(0, "Semillas", PlayerInfo[playerid][pSemillas]);
        cache_get_value_name(0, "razon",PlayerInfo[playerid][pRazon]);
        cache_get_value_name(0, "Email",PlayerInfo[playerid][pEmail]);
        cache_get_value_name(0, "Pais_Registro",PlayerInfo[playerid][pPaisRegistro]);
        cache_get_value_name(0, "RazonSan", PlayerInfo[playerid][pRazonSan]);
        cache_get_value_name_int(0, "TieneEmisora", Emisoras[playerid][TieneEmisora]);
        cache_get_value_name(0, "NombreEmisora", Emisoras[playerid][NombreEmisora]);
        cache_get_value_name_int(0, "Acento", PlayerInfo[playerid][pAcento]);
        cache_get_value_name(0, "TempBan", 	PlayerInfo[playerid][pTempBan]);
        cache_get_value_name(0, "Puesto1H", content);       Halloween[playerid][P1Hora] = strval(content);
        cache_get_value_name(0, "Puesto2H", content);       Halloween[playerid][P2Hora] = strval(content);
        cache_get_value_name(0, "Puesto3H", content);       Halloween[playerid][P3Hora] = strval(content);
        cache_get_value_name(0, "Puesto4H", content);       Halloween[playerid][P4Hora] = strval(content);
        cache_get_value_name(0, "Puesto5H", content);       Halloween[playerid][P5Hora] = strval(content);
        cache_get_value_name(0, "Puesto6H", content);       Halloween[playerid][P6Hora] = strval(content);
        cache_get_value_name(0, "Puesto7H", content);       Halloween[playerid][P7Hora] = strval(content);
        cache_get_value_name(0, "Puesto8H", content);       Halloween[playerid][P8Hora] = strval(content);
        cache_get_value_name(0, "Puesto9H", content);       Halloween[playerid][P9Hora] = strval(content);
        cache_get_value_name(0, "Puesto10H", content);      Halloween[playerid][P10Hora] = strval(content);
        cache_get_value_name(0, "Puesto11H", content);      Halloween[playerid][P11Hora] = strval(content);
        cache_get_value_name(0, "Puesto12H", content);      Halloween[playerid][P12Hora] = strval(content);
        cache_get_value_name(0, "Puesto13H", content);      Halloween[playerid][P13Hora] = strval(content);
        cache_get_value_name(0, "Puesto14H", content);      Halloween[playerid][P14Hora] = strval(content);
        cache_get_value_name(0, "Puesto15H", content);      Halloween[playerid][P15Hora] = strval(content);
        cache_get_value_name(0, "Puesto16H", content);      Halloween[playerid][P16Hora] = strval(content);
        cache_get_value_name(0, "Puesto17H", content);      Halloween[playerid][P17Hora] = strval(content);
        cache_get_value_name(0, "Puesto18H", content);      Halloween[playerid][P18Hora] = strval(content);
        cache_get_value_name(0, "Puesto19H", content);      Halloween[playerid][P19Hora] = strval(content);
        cache_get_value_name(0, "Puesto20H", content);      Halloween[playerid][P20Hora] = strval(content);
        cache_get_value_name(0, "Puesto21H", content);      Halloween[playerid][P21Hora] = strval(content);
        cache_get_value_name(0, "Puesto22H", content);      Halloween[playerid][P22Hora] = strval(content);
        cache_get_value_name(0, "Puesto23H", content);      Halloween[playerid][P23Hora] = strval(content);
        cache_get_value_name(0, "Puesto24H", content);      Halloween[playerid][P24Hora] = strval(content);
        cache_get_value_name(0, "Puesto25H", content);      Halloween[playerid][P25Hora] = strval(content);
        cache_get_value_name(0, "Puesto26H", content);      Halloween[playerid][P26Hora] = strval(content);
        cache_get_value_name(0, "Puesto27H", content);      Halloween[playerid][P27Hora] = strval(content);
        cache_get_value_name(0, "Puesto28H", content);      Halloween[playerid][P28Hora] = strval(content);
        cache_get_value_name(0, "Puesto29H", content);      Halloween[playerid][P29Hora] = strval(content);
        cache_get_value_name(0, "Puesto30H", content);      Halloween[playerid][P30Hora] = strval(content);
        cache_get_value_name(0, "Puesto31H", content);      Halloween[playerid][P31Hora] = strval(content);
        cache_get_value_name(0, "Puesto32H", content);      Halloween[playerid][P32Hora] = strval(content);
        LoadVehicles(playerid);
        LogeoCorrecto[playerid] = 1;
        SetSpawnInfo(playerid,0,PlayerInfo[playerid][pRopa],PlayerInfo[playerid][@X], PlayerInfo[playerid][@Y], PlayerInfo[playerid][@Z],PlayerInfo[playerid][@A],0,0,0,0,0,0);
        SetPlayerSkin(playerid,PlayerInfo[playerid][pRopa]);
        SetPlayerScore(playerid,PlayerInfo[playerid][pNivel]);
        SetPlayerArmourEx(playerid,PlayerInfo[playerid][j_ARMOUR]);
        SetPlayerHealthEx(playerid,PlayerInfo[playerid][j_HEALTH]);
        Tiempos[playerid][TIMER_CHALECO] = gettime() + 3;
        Tiempos[playerid][TIMER_VIDA] = gettime() + 3;
        if(PlayerInfo[playerid][pBloqueado] == 1)
        {
            KillTimer(LCHAT[playerid]);
            SendClientMessage(playerid, COLOR_MUTE, " Su cuenta se encuentra bloqueada por ingresar desde un país distinto.");
            ExpulsarJugador(playerid,"Cuenta Bloqueada.");
            return 1;
        }
        new tiempobaneo = PlayerInfo[playerid][pTempBan] + gettime();
		if(PlayerInfo[playerid][pTempBan] > tiempobaneo)
		{
		    MensajeEx(playerid,COLOR_MUTE,"Su cuenta se encuentra baneada temporalmente, razón: %s.",PlayerInfo[playerid][pRazon],tiempobaneo);
			SetTimerEx("KickXD",500,false,"d",playerid);
			return 1;
		}
		if(PlayerInfo[playerid][p_Ban] == 1)
		{
		    MensajeEx(playerid,COLOR_MUTE,"Su cuenta se encuentra baneada, razón: %s.",PlayerInfo[playerid][pRazon]);
			SetTimerEx("KickXD",500,false,"d",playerid);
			return 1;
		}
        if(EnClub[playerid] > 0)
        {
            SacarClubLogeado(playerid);
            return true;
        }
        if(PlayerInfo[playerid][Agonizando] == 1)
        {
            Muriendo[playerid] = 1;
            TextDrawShowForPlayer(playerid, NewPlayer[2]),TextDrawShowForPlayer(playerid, NewPlayer[0]),PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
            TextDrawShowForPlayer(playerid, Sangre);
        }
        if(PlayerInfo[playerid][pTiempoJail] > 0)
        {
            Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
            San[playerid] = 1;
            SetTimerEx("EnviarJail", 2000, false, "d", playerid);
            SpawnPlayer(playerid);
            return 1;
        }
        if(PlayerInfo[playerid][pCargos] > 0)
        {
            Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
            new dineroquitado = PlayerInfo[playerid][pCargos]*500+200;
            QuitarDinero(playerid, dineroquitado);
            SpawnPlayer(playerid);
            SetTimerEx("Encerrando2",3000,false,"d",playerid);
            return 1;
        }
        if(PlayerInfo[playerid][pEMS] == 0)
        {
            new string[128];
            format(string,sizeof(string),"Ingresa un e-mail válido para recuperar tu contraseña en caso de perderla.\n\nTu e-mail:");
            ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT,"Ingresa tu dirección de e-mail",string,"Siguiente","");
            return 1;
        }
        if(PlayerInfo[playerid][pSexo] == -1) return ShowPlayerDialog(playerid,SEXO, DIALOG_STYLE_LIST,"¿Eres hombre o mujer?","Hombre\nMujer","Seleccionar","Salir");
        else
        {
            Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
            JugadorLogeado[playerid] = 1;
            SpawnPlayer(playerid);
            return 1;
        }
    }
    else if(cache_num_rows() == 0)
	{
		if(JugadorLogeado[playerid] == 0)
		{
			new plrIP[16];
			if(PlayerTemp[playerid][@ContraVacia] == 1) ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_INPUT,"Entrar","Ingresa tu contraseña","Entrar","Salir");
			else if(PlayerTemp[playerid][@ContraVacia] == 0) ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_INPUT,"Contraseña Incorrecta - Intenta nuevamente","Ingresa tu contraseña:","Entrar","Salir"),SendClientMessage(playerid, 0xAFAFAFAA, "Contraseña Incorrecta.");
			PlayerTemp[playerid][@ContraVacia] = 0;
			GetPlayerIp(playerid, plrIP, sizeof(plrIP));
			printf("El jugador %s se equivoco al poner su contraseña. (IP: %s)", PlayerInfo[playerid][Nickname], plrIP);
		}
	}
    return 1;
}

public OnPlayerUpdate(playerid)
{
    if(!IsPlayerNPC(playerid))
    {
        if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID)
        {
            if(TAXI(GetPlayerSurfingVehicleID(playerid)))
            {
                if(GetVehicleSpeed(GetPlayerSurfingVehicleID(playerid)) >= 23)
                {
                    new x = 0;
                    if(x == 0)
                    {
                        x = 1;
                        GetPlayerPos(playerid, CaidaTaxi[0][playerid],CaidaTaxi[1][playerid],CaidaTaxi[2][playerid]);
                        SetTimerEx("Equilibrio",1000,false,"d",playerid);
                    }
                }
            }
            new interior = GetVehicleInterior(GetPlayerSurfingVehicleID(playerid));
            new virtualw = GetVehicleVirtualWorld(GetPlayerSurfingVehicleID(playerid));
            if(virtualw != GetPlayerVirtualWorld(playerid)) SetPlayerVirtualWorld(playerid,virtualw);
            if(interior != GetPlayerInterior(playerid)) SetPlayerInterior(playerid,interior);
            Tiempos[playerid][TIMER_SURFING] = gettime() + 2;
        }
    }
    if(!IsPlayerNPC(playerid))
    {
        if(PlayerTemp[playerid][PuedeRobar] == 0)
        {
            new actor = GetPlayerTargetDynamicActor(playerid),permiterobar = 0;
            for(new act = 0; act < MAX_NPC_ROBOS; act++)
            {
                if(actor == RoboTiendas[act][Actor]) permiterobar = 1;
            }
            if(actor != INVALID_ACTOR_ID && permiterobar == 1)
            {
                switch(GetPlayerWeapon(playerid))
                {
                    case 22 .. 33:
                    {
                        if(IsValidDynamicActor(actor))
                        {
                            new Float:x,Float:y,Float:z;
                            GetDynamicActorPos(actor, x,y,z);
                            if(IsPlayerInRangeOfPoint(playerid,10.0,x,y,z))
                            {
                                RoboActual[playerid] = actor;
                                PlayerTemp[playerid][PuedeRobar] = 1;
                                LevantarMano(playerid,actor);
                            }
                            else PlayerTemp[playerid][PuedeRobar] = 0;
                        }
                    }
                }
            }
        }
    }
    if(!IsPlayerNPC(playerid))
    {
        if(PlayerInfo[playerid][pDinero] != GetPlayerMoney(playerid))
        {
            ResetPlayerMoney(playerid);
            GivePlayerMoney(playerid,PlayerInfo[playerid][pDinero]);
        }
    }
    return 1;
}

public cargar_logros(resultid, extraid)
{
    new Rows, Fields, content[29];
    if(resultid != 0) cache_get_row_count(Rows),cache_get_field_count(Fields);
    switch(resultid) {
        case 1:
        {
            if(Rows > 0) { PlayerInfo[extraid][pLogroNivel] = 1; return 1; }
            else PlayerInfo[extraid][pLogroNivel] = 0;
        }
        case 2:
        {
            if(Rows > 0) { PlayerInfo[extraid][pSobreRuedas] = 1; return 1; }
            else return PlayerInfo[extraid][pSobreRuedas] = 0;
        }
        case 3:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pAutomedicado] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pRemedios] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pAutomedicado] = 0,PlayerInfo[extraid][pRemedios] = 0;
        }
        case 4:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pAdicto] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pCracks] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pAdicto] = 0,PlayerInfo[extraid][pCracks] = 0;
        }
        case 5:
        {
            if(Rows > 0) { PlayerInfo[extraid][pTortuga] = 1; return 1; }
            else return PlayerInfo[extraid][pTortuga] = 0;
        }
        case 6:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pMarihuanero] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pPorros] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pMarihuanero] = 0,PlayerInfo[extraid][pPorros] = 0;
        }
        case 7:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pPilotoExperto] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pGanadas] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pPilotoExperto] = 0,PlayerInfo[extraid][pGanadas] = 0;
        }
        case 8:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pNegocioRedondo] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pCosecha] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pNegocioRedondo] = 0,PlayerInfo[extraid][pCosecha] = 0;
        }
        case 9:
        {
            if(Rows > 0) { PlayerInfo[extraid][pCasa] = 1; return 1; }
            else return PlayerInfo[extraid][pCasa] = 0;
        }
        case 10:
        {
            if(Rows > 0) { PlayerInfo[extraid][pOficina] = 1; return 1; }
            else return PlayerInfo[extraid][pOficina] = 0;
        }
        case 11:
        {
            if(Rows > 0) { PlayerInfo[extraid][pRestaurante] = 1; return 1; }
            else return PlayerInfo[extraid][pRestaurante] = 0;
        }
        case 12:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pCerrajero] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pForzadas] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pCerrajero] = 0, PlayerInfo[extraid][pForzadas] = 0;
        }
        case 13:
        {
            if(Rows > 0) {
                cache_get_value_name(0, "Completado",content);  PlayerInfo[extraid][pMedico] = strval(content);
                cache_get_value_name(0, "Progreso",content);    PlayerInfo[extraid][pReanimados] = strval(content);
                return 1;
            }
            else return PlayerInfo[extraid][pMedico] = 0, PlayerInfo[extraid][pReanimados] = 0;
        }
        case 14:
        {
            if(Rows > 0) { PlayerInfo[extraid][pFiestaCerveza] = 1; return 1; }
            else return PlayerInfo[extraid][pFiestaCerveza] = 0;
        }
        case 15:
        {
            if(Rows > 0) { PlayerInfo[extraid][pTrucoTrato] = 1; return 1; }
            else return PlayerInfo[extraid][pTrucoTrato] = 0;
        }
        case 16:
        {
            if(Rows > 0) { PlayerInfo[extraid][pHechizado] = 1; return 1; }
            else return PlayerInfo[extraid][pHechizado] = 0;
        }
        case 17:
        {
            if(Rows > 0) { PlayerInfo[extraid][pLogroPutiClub] = 1; return 1; }
            else return PlayerInfo[extraid][pLogroPutiClub] = 0;
        }
    }
    return 1;
}
public VehicleLoad(resultid,playerid)
{
	if(cache_num_rows() > 0)
	{
		cache_get_value_name_int(0, "ID", VehicleInfo[playerid][resultid][v_DBID]);
		cache_get_value_name_int(0, "Modelo", VehicleInfo[playerid][resultid][vModelo]);
		cache_get_value_name_int(0, "vTraba", VehicleInfo[playerid][resultid][vTraba]);
		cache_get_value_name_int(0, "VE1", VehicleInfo[playerid][resultid][VE1]);
		cache_get_value_name_int(0, "VE2", VehicleInfo[playerid][resultid][VE2]);
		cache_get_value_name_int(0, "VE3", VehicleInfo[playerid][resultid][VE3]);
		cache_get_value_name_int(0, "VE4", VehicleInfo[playerid][resultid][VE4]);
		cache_get_value_name_int(0, "vMoneda", VehicleInfo[playerid][resultid][vMonedaa]);
		cache_get_value_name_int(0, "vGas", VehicleInfo[playerid][resultid][vGas]);
		cache_get_value_name_int(0, "vinterior", VehicleInfo[playerid][resultid][vinterior]);
		cache_get_value_name_int(0, "vvw", VehicleInfo[playerid][resultid][vvw]);
		cache_get_value_name_int(0, "Color1", VehicleInfo[playerid][resultid][vColor1]);
		cache_get_value_name_int(0, "Color2", VehicleInfo[playerid][resultid][vColor2]);
		cache_get_value_name_int(0, "vBaul", EspacioBaul[playerid][resultid][1]);
		cache_get_value_name_int(0, "vBaul2", EspacioBaul[playerid][resultid][2]);
		cache_get_value_name_int(0, "vBaul3", EspacioBaul[playerid][resultid][3]);
		cache_get_value_name_int(0, "vBaul4", EspacioBaul[playerid][resultid][4]);
		cache_get_value_name_int(0, "vBaul5", EspacioBaul[playerid][resultid][5]);
		cache_get_value_name_int(0, "vBaul6", EspacioBaul[playerid][resultid][6]);
		cache_get_value_name_int(0, "vBaul7", EspacioBaul[playerid][resultid][7]);
		cache_get_value_name_int(0, "vBaul8", EspacioBaul[playerid][resultid][8]);
		cache_get_value_name_int(0, "vBaul9", EspacioBaul[playerid][resultid][9]);
		cache_get_value_name_int(0, "vBaul10", EspacioBaul[playerid][resultid][10]);
		cache_get_value_name_int(0, "PaintJob", VehicleInfo[playerid][resultid][vPJ]);
		cache_get_value_name_int(0, "1Componentes0", Componentes[playerid][0][resultid]);
		cache_get_value_name_int(0, "1Componentes1", Componentes[playerid][1][resultid]);
		cache_get_value_name_int(0, "1Componentes2", Componentes[playerid][2][resultid]);
		cache_get_value_name_int(0, "1Componentes3", Componentes[playerid][3][resultid]);
		cache_get_value_name_int(0, "1Componentes4", Componentes[playerid][4][resultid]);
		cache_get_value_name_int(0, "1Componentes5", Componentes[playerid][5][resultid]);
		cache_get_value_name_int(0, "1Componentes6", Componentes[playerid][6][resultid]);
		cache_get_value_name_int(0, "1Componentes7", Componentes[playerid][7][resultid]);
		cache_get_value_name_int(0, "1Componentes8", Componentes[playerid][8][resultid]);
		cache_get_value_name_int(0, "1Componentes9", Componentes[playerid][9][resultid]);
		cache_get_value_name_int(0, "1Componentes10", Componentes[playerid][10][resultid]);
		cache_get_value_name_int(0, "1Componentes11", Componentes[playerid][11][resultid]);
		cache_get_value_name_int(0, "1Componentes12", Componentes[playerid][12][resultid]);
		cache_get_value_name_int(0, "1Componentes13", Componentes[playerid][13][resultid]);
		cache_get_value_name_int(0, "Precio", VehicleInfo[playerid][resultid][vPrecio]);
		cache_get_value_name_int(0, "Ovw", VehicleInfo[playerid][resultid][v0_vw]);
		cache_get_value_name_int(0, "Segurov", VehicleInfo[playerid][resultid][vSeguro]);
		cache_get_value_name_int(0, "Ointerior", VehicleInfo[playerid][resultid][v0_interior]);
		cache_get_value_name_float(0, "OX", VehicleInfo[playerid][resultid][pOX]);
		cache_get_value_name_float(0, "OY", VehicleInfo[playerid][resultid][pOY]);
		cache_get_value_name_float(0, "OZ", VehicleInfo[playerid][resultid][pOZ]);
		cache_get_value_name_float(0, "OA", VehicleInfo[playerid][resultid][pOA]);
		cache_get_value_name_float(0, "VidaV", VehicleInfo[playerid][resultid][pVidaV]);
		cache_get_value_name_float(0, "VidaVE", VehicleInfo[playerid][resultid][pVidaVE]);
		cache_get_value_name_float(0, "X", VehicleInfo[playerid][resultid][vX]);
		cache_get_value_name_float(0, "Y", VehicleInfo[playerid][resultid][vY]);
		cache_get_value_name_float(0, "Z", VehicleInfo[playerid][resultid][vZ]);
		cache_get_value_name_float(0, "A", VehicleInfo[playerid][resultid][vA]);
		cache_get_value_name(0, "1Patente", Patente[playerid][resultid]);
		cache_get_value_name_int(0, "Alarm", VehicleInfo[playerid][resultid][vAlarm]);
		cache_get_value_name_int(0, "Alarma", VehicleInfo[playerid][resultid][vAlarma]);
	}
	else
	{
		autos[resultid][playerid] = 0;
		new temp_VehicleInfo[vInfo];
		VehicleInfo[playerid][resultid] = temp_VehicleInfo;
	}
	return 1;
}
public CargarRegistros()
{
    new Query[200];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM registros");
    mysql_query(handle_db, Query,true);
    for(new i = 0; i < 1; i++)
    {
        new content[30];
        cache_get_value_name(i, "Cantidad",  content); Usuarios[Cantidad] = strval(content);
        cache_get_value_name(i, "Arbol",  content); ArbolStatus = strval(content);
        cache_get_value_name(i, "Cerveza",  content); CervezaStatus = strval(content);
        cache_get_value_name(i, "Halloween",  content); HalloweenStatus = strval(content);
    }
    if(ArbolStatus != 0) EventoNavi(true),NidadX = true;
    if(CervezaStatus != 0) EventoFC(true),EventoActivo = true;
    if(HalloweenStatus != 0) EventoHall(true),HallX = true;
    return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
    #if DEBUG_GM == 1
    printf("(OnVehicleMod) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
    #endif
    QuitarDinero(playerid, GetVehicleComponentPrice(componentid));
    new interior = GetPlayerInterior(playerid);
    if(interior == 2 && IsPlayerInRangeOfPoint(playerid,15.0,616.7820,-74.815,997.6350))    return 1;   //Loco Low
    if(interior == 3 && IsPlayerInRangeOfPoint(playerid,15.0,615.2851,-124.2390,997.6350))  return 1;   //Wheel Arch Angels
    if(interior == 1 && IsPlayerInRangeOfPoint(playerid,15.0,617.5380,-1.9900,1000.6829))   return 1;   //Transfender
    KickAntiCheat(playerid, 0, 0, "Posible cheat de tuneo");
    return 1;
}
UpdatePlayerToy(playerid, index)
{
    RemovePlayerAttachedObject(playerid, index);
    SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][ index ][pModelID],PlayerToys[playerid][ index ][pBone],PlayerToys[playerid][ index ][pOffsetX],PlayerToys[playerid][ index ][pOffsetY],PlayerToys[playerid][ index ][pOffsetZ],PlayerToys[playerid][ index ][pRotX],PlayerToys[playerid][ index ][pRotY],PlayerToys[playerid][ index ][pRotZ],PlayerToys[playerid][ index ][pScaleX],PlayerToys[playerid][ index ][pScaleY],PlayerToys[playerid][ index ][pScaleZ],PlayerToys[playerid][ index ][pColor1],PlayerToys[playerid][ index ][pColor2]);
    return 1;
}
EditPlayerToy(playerid)
{
    if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
    SetPlayerAttachedObject(playerid,PlayerTemp[playerid][p_SELECTED_TOY_SLOT],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pModelID],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2]);
    SendClientMessage(playerid, -1, "Ajusta la prenda y haz clic en el icono de guardar, si pulsas {DBED15}'ESCAPE'{FFFFFF} no se guardará la configuración.");
    SendClientMessage(playerid, -1, "Mantén presionado {DBED15}'ESPACIO'{FFFFFF} para mover la cámara.");
    EditAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
    return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(EditingCopObjectID[playerid] != -1)
	{
	    new id = EditingCopObjectID[playerid];
	    switch(response)
	    {
			case EDIT_RESPONSE_FINAL:
			{
			    CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z;
				CopObjectData[id][ObjRX] = rx;
				CopObjectData[id][ObjRY] = ry;
				CopObjectData[id][ObjRZ] = rz;
			    SetDynamicObjectPos(objectid, x, y, z);
	            SetDynamicObjectRot(objectid, rx, ry, rz);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_X, x);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Y, y);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);
	            if(IsValidDynamicArea(CopObjectData[id][ObjArea]))
	            {
	                Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_X, x);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Y, y);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);
	            }
			    EditingCopObjectID[playerid] = -1;
			}
	        case EDIT_RESPONSE_CANCEL:
	        {
	            SetDynamicObjectPos(objectid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ]);
	            SetDynamicObjectRot(objectid, CopObjectData[id][ObjRX], CopObjectData[id][ObjRY], CopObjectData[id][ObjRZ]);
	            EditingCopObjectID[playerid] = -1;
	        }
	    }
	}
	if(response == EDIT_RESPONSE_UPDATE) return 1;
	return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(index != PlayerTemp[playerid][p_SELECTED_TOY_SLOT]) return 0;
    if(response)
    {
        if(fScaleX >= 3.5 || fScaleY >= 3.5 || fScaleZ >= 3.5)
        {
            SendClientMessage(playerid, -1, "{999999}El tamaño de la prenda es demasiado grande.");
            RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
            if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) SetPlayerAttachedObject(playerid,PlayerTemp[playerid][p_SELECTED_TOY_SLOT],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pModelID],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2]);
            return 1;
        }
        if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendClientMessage(playerid, -1, "{999999}La posición del objeto está demasiado lejos de ti.");
            RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
            if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) SetPlayerAttachedObject(playerid,PlayerTemp[playerid][p_SELECTED_TOY_SLOT],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pModelID],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2]);
            return 1;
        }
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX] = fOffsetX;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY] = fOffsetY;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ] = fOffsetZ;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX] = fRotX;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY] = fRotY;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ] = fRotZ;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX] = fScaleX;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY] = fScaleY;
        PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ] = fScaleZ;
        if(!PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando] = true;
        SendClientMessage(playerid,-1,"Se ha modificado la posición del objeto.");
    }
    else
    {
        RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
        if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) SetPlayerAttachedObject(playerid,PlayerTemp[playerid][p_SELECTED_TOY_SLOT],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pModelID],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2]);
    }
    return 1;
}
VenderVehiculoJugador(playerid)
{
	new sellcar[128*MAX_PAUTOS];
	for(new i = 0; i < MAX_PAUTOS; i++)
	{
		if(VehicleInfo[playerid][i][vModelo] < 400) continue;
		format(sellcar, sizeof(sellcar), "%s Vehículo: {F6E200}%s{FFFFFF} | %s | Precio: {00CC00}%s\n",sellcar,GetVehicleName(autos[i][playerid]), MonedaVenta(VehicleInfo[playerid][i][vMonedaa],VehicleInfo[playerid][i][vPrecio]));
	}
	ShowPlayerDialog(playerid, VPLAYERAUTO, DIALOG_STYLE_LIST, "¿Que vehículo deseas vender?", sellcar, "Vender","Cancelar");
	return 1;
}
EscribePrecioVender(playerid,tipo)
{
	switch(tipo)
	{
		case 1: ShowPlayerDialog(playerid, VPLAYERAUTO2, DIALOG_STYLE_INPUT,"{FFFFFF}Escribe el precio a vender tu vehículo", "{FFFFFF}Ingresa el precio por cuál venderás tu vehículo.\n{DBED15}SMS:{FFFFFF} No puedes venderlo por un precio menor que {DBED15}(0){FFFFFF}.","{FFFFFF}Siguiente","{FFFFFF}Cancelar");
		//case 2: ShowPlayerDialog(playerid, VPLAYERCASA2, DIALOG_STYLE_INPUT,"{FFFFFF}Escribe el precio a vender tu propiedad", "{FFFFFF}Ingresa el precio por cuál venderás tu propiedad.\n{DBED15}SMS:{FFFFFF} No puedes venderla por un precio menor que {DBED15}(0){FFFFFF}.","{FFFFFF}Siguiente","{FFFFFF}Cancelar");
	}
	return 1;
}
EscribeIDVender(playerid,tipo)
{
	switch(tipo)
	{
		case 1: ShowPlayerDialog(playerid, VPLAYERAUTO3, DIALOG_STYLE_INPUT,"{FFFFFF}Vender vehículo", "{FFFFFF}Ingresa el ID de la persona a vender:","{FFFFFF}Siguiente","{FFFFFF}Cancelar");
		//case 2: ShowPlayerDialog(playerid, VPLAYERCASA3, DIALOG_STYLE_INPUT,"{FFFFFF}Vender propiedad", "{FFFFFF}Ingresa el ID de la persona a vender:","{FFFFFF}Siguiente","{FFFFFF}Cancelar");
	}
	return 1;
}
ObtenerVehiculoDeJugador(playerid,slot)
{
	if(VehicleInfo[playerid][slot][vModelo] > 0)
	{
		new Float:Pb[3];
		GetVehiclePos(autos[slot][playerid],Pb[0],Pb[1],Pb[2]),VentaVehiculo[playerid][SLOT] = slot;
		VentaVehiculo[playerid][GASOLINA] = VehicleFuel[autos[slot][playerid]],VentaVehiculo[playerid][MODELO] = VehicleInfo[playerid][slot][vModelo];
		VentaVehiculo[playerid][TRABA] = VehicleInfo[playerid][slot][vTraba],VentaVehiculo[playerid][ALARMA] = VehicleInfo[playerid][slot][vAlarma];
		VentaVehiculo[playerid][INTERIOR] = VehicleInfo[playerid][slot][vinterior],VentaVehiculo[playerid][SEGURO] = VehicleInfo[playerid][slot][vSeguro];
		VentaVehiculo[playerid][MUNDO] = VehicleInfo[playerid][slot][vvw],VentaVehiculo[playerid][PRECIO] = VehicleInfo[playerid][slot][vPrecio];
		format(VentaVehiculo[playerid][PLACA], 24,"%s", Patente[playerid][slot]),VentaVehiculo[playerid][MONEDA] = VehicleInfo[playerid][slot][vMonedaa];
		VentaVehiculo[playerid][IDV] = autos[slot][playerid],VentaVehiculo[playerid][SQL] = VehicleInfo[playerid][slot][v_DBID];
		switch(VehicleInfo[playerid][slot][vMonedaa])
		{
			case 0: VentaVehiculo[playerid][TIPO] = 0;
			case 1: VentaVehiculo[playerid][TIPO] = 1;
			case 2: VentaVehiculo[playerid][TIPO] = 2;
		}
		VentaVehiculo[playerid][XAV] = Pb[0],VentaVehiculo[playerid][YAV] = Pb[1];
		VentaVehiculo[playerid][ZAV] = Pb[2],EscribePrecioVender(playerid,1);
	}
	return 1;
}
DarAutoJugador(playerid,v,gas,modelo,traba,alarms,int,seguro,mundo,precio,monedas,pat[],Float:x,Float:y,Float:z,c1,c2,slots)
{
	new Query[200], slot = CompraSlot(playerid);
	if(slot != -1)
	{
		autos[slot][playerid] = v,VehicleInfo[playerid][slot][vModelo] = modelo;
		VehicleInfo[playerid][slot][vX] = x,VehicleInfo[playerid][slot][vY] = y;
		VehicleInfo[playerid][slot][vZ] = z,VehicleInfo[playerid][slot][vA] = 90;
		VehicleInfo[playerid][slot][vColor1] = c1,VehicleInfo[playerid][slot][vColor2] = c2;
		VehicleInfo[playerid][slot][vPrecio] = precio,VehicleInfo[playerid][slot][vMonedaa] = monedas;
		bloqueado[autos[slot][playerid]] = 0,VehicleInfo[playerid][slot][vSeguro] = seguro;
		VehicleInfo[playerid][slot][vinterior] = int,VehicleInfo[playerid][slot][vvw] = mundo;
		VehicleInfo[playerid][slot][vTraba] = traba,alarma[autos[slot][playerid]] = alarms;
		VehicleFuel[autos[slot][playerid]] = gas,VehicleInfo[playerid][slot][vGas] = gas;
		format(Patente[playerid][slot], 10,"%s", pat),VehicleInfo[playerid][slot][v_DBID] = slots;
		mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `UserID` = '%d' WHERE `ID`='%d'",PlayerInfo[playerid][pID],slots);
		mysql_tquery(handle_db,Query);
		ReinicioVentaAuto(playerid);
		return 1;
	}
	else SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "Este jugador no puede tener más vehiculos.");
	return 1;
}
QuitarVehiculoJugador(playerid,x)
{
	if(VehicleInfo[playerid][x][vModelo] > 0)
	{
		DarAutoJugador(VentaVehiculo[playerid][IDU],VentaVehiculo[playerid][IDV],VentaVehiculo[playerid][GASOLINA],VentaVehiculo[playerid][MODELO],VentaVehiculo[playerid][TRABA],VentaVehiculo[playerid][ALARMA],VentaVehiculo[playerid][INTERIOR],VentaVehiculo[playerid][SEGURO],VentaVehiculo[playerid][MUNDO],VentaVehiculo[playerid][PRECIO],VentaVehiculo[playerid][MONEDA],VentaVehiculo[playerid][PLACA],VentaVehiculo[playerid][XAV],VentaVehiculo[playerid][YAV],VentaVehiculo[playerid][ZAV],VentaVehiculo[playerid][COLOR1],VentaVehiculo[playerid][COLOR2],VentaVehiculo[playerid][SQL]);
		VehicleInfo[playerid][x][vModelo] = 0,VehicleInfo[playerid][x][vTraba] = 0,VehicleInfo[playerid][x][vAlarma] = 0,VehicleInfo[playerid][x][vinterior] = 0;
		VehicleInfo[playerid][x][vSeguro] = 0,VehicleInfo[playerid][x][vvw] = 0,VehicleInfo[playerid][x][vPrecio] = 0,autos[x][playerid] = 0,VehicleInfo[playerid][x][v_DBID] = 0;
	}
}
ReinicioVentaAuto(playerid)
{
    VentaVehiculo[playerid][IDU] = - 1,VentaVehiculo[playerid][IDVEN] = -1;
    VentaVehiculo[playerid][PRECIO] = 0,VentaVehiculo[playerid][PMAX] = 0;
    VentaVehiculo[playerid][TIPO] = 0,VentaVehiculo[playerid][SLOT] = 0;
    VentaVehiculo[playerid][IDV] = 0,VentaVehiculo[playerid][GASOLINA] = 0;
    VentaVehiculo[playerid][MODELO] = 0,VentaVehiculo[playerid][TRABA] = 0;
    VentaVehiculo[playerid][ALARMA] = 0,VentaVehiculo[playerid][INTERIOR] = 0;
    VentaVehiculo[playerid][SEGURO] = 0,VentaVehiculo[playerid][MUNDO] = 0;
    VentaVehiculo[playerid][PLACA] = 0,VentaVehiculo[playerid][COLOR1] = 0;
    VentaVehiculo[playerid][COLOR2] = 0,VentaVehiculo[playerid][XAV] = 0;
    VentaVehiculo[playerid][YAV] = 0,VentaVehiculo[playerid][ZAV] = 0;
    VentaVehiculo[playerid][MONEDA] = 0,VentaVehiculo[playerid][SQL] = -1;
    return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    #if DEBUG_GM == 1
    printf("(OnDialogResponse) PlayerID: %d | DialogID: %d | Response: %d | ListItem: %d", playerid, dialogid, response, listitem);
    #endif
    new string[1500],Query[256];
    switch(dialogid)
    {
		case VPLAYERAUTO:
		{
			if(!response) return 1;
			new car = ObtenerOrdenAuto(playerid,listitem);
			
			if(autos[car][playerid] == 0) return SendClientMessage(playerid,-1,"No puedes vender un vehículo que no existe.");
			ObtenerVehiculoDeJugador(playerid,car);
		}
		case VPLAYERAUTO2:
		{
			if(!response) return 1;
			if(isnull(inputtext) || IsNumeric(inputtext) == 0) return EscribePrecioVender(playerid,1);
			if(strval(inputtext) <= 0) return EscribePrecioVender(playerid,1);
			VentaVehiculo[playerid][PRECIO] = strval(inputtext);
			EscribeIDVender(playerid,1);
		}
		case VPLAYERAUTO3:
		{
			if(!response) return 1;
			new value = strval(inputtext),msgven[250];
			VentaVehiculo[playerid][IDU] = value;
			if(value == playerid) return SendClientMessage(playerid,0x25AB26FF,"No puedes usar el comando contigo mismo.");
			if(!IsPlayerConnected(value)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
			if(JugadorLogeado[value] == 0) return SendClientMessage(playerid,0x25AB26FF,"Jugador no logeado.");
			new Float:x,Float:y,Float:z;
			if(IsPlayerConnected(value)) GetPlayerPos(value, x,y,z);
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,-1,"No estás cerca de ese jugador.");
			VentaVehiculo[value][IDVEN] = playerid;
			MensajeEx(playerid, -1, "{FFFFFF}Ofreciste a {DBED15}%s{FFFFFF} tu {DBED15}%s{FFFFFF} por %s, espera que acepte o rechaze.",PlayerInfo[VentaVehiculo[playerid][IDU]][Nickname],NombreAuto[GetVehicleModel(VentaVehiculo[playerid][IDV])-400],MonedaVenta(VentaVehiculo[playerid][TIPO],VentaVehiculo[playerid][PRECIO]));
			format(msgven,sizeof(msgven),"{DBED15}%s{FFFFFF} te ofrece su {DBED15}%s{FFFFFF} por %s.",PlayerInfo[playerid][Nickname],NombreAuto[GetVehicleModel(VentaVehiculo[playerid][IDV])-400],MonedaVenta(VentaVehiculo[playerid][TIPO],VentaVehiculo[playerid][PRECIO]));
			ShowPlayerDialog(value, VPLAYERAUTO4, DIALOG_STYLE_MSGBOX,"Comprar vehículo", msgven,"Aceptar","Rechazar");
			return 1;
		}
		case VPLAYERAUTO4:
		{
			if(!response) MensajeEx(VentaVehiculo[playerid][IDVEN], -1, "VENTAS: %s rechazó la venta del vehículo.",PlayerInfo[playerid][Nickname]),SendClientMessage(playerid, -1, "VENTAS: rechazaste la compra del vehículo ofertado.");
			if(response)
			{
				switch(PlayerInfo[playerid][pVip])
				{
					case 1: if(ObtenerAutos(playerid) > 3) return SendClientMessage(playerid, -1, "Ya tienes 4 vehículos, compra una membresía VIP 2 para poder comprar más vehículos."),SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
					case 2: if(ObtenerAutos(playerid) > 4) return SendClientMessage(playerid, -1, "Ya tienes 5 vehículos, compra una membresía VIP 3 para poder comprar más vehículos."),SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
					case 3: if(ObtenerAutos(playerid) > 5) return SendClientMessage(playerid, -1, "Ya tienes 6 vehículos, compra una membresía VIP 4 para poder comprar más vehículos."),SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
					case 4: if(ObtenerAutos(playerid) > 7) return SendClientMessage(playerid, -1, "Ya tienes 8 vehículos."),SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
					default: if(ObtenerAutos(playerid) > 1) return SendClientMessage(playerid, -1, "Ya tienes 2 vehículos, compra una membresía VIP para poder comprar más vehículos."),SendClientMessage(VentaVehiculo[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
				}
				new obertador = VentaVehiculo[playerid][IDVEN], moneda = PlayerInfo[playerid][pDinero];
				if(VentaVehiculo[obertador][TIPO] == 1) moneda = PlayerInfo[playerid][Moneda];
				if(moneda < VentaVehiculo[obertador][PRECIO]) return SendClientMessage(playerid, -1, "No tienes suficiente dinero."),SendClientMessage(obertador, -1, "El comprador no tiene suficiente dinero.");
				switch(VentaVehiculo[obertador][TIPO])
				{
					case 0: QuitarDinero(playerid,VentaVehiculo[obertador][PRECIO]),DarDinero(obertador,VentaVehiculo[obertador][PRECIO]);
					case 1: PlayerInfo[playerid][Moneda] -= VentaVehiculo[obertador][PRECIO],PlayerInfo[obertador][Moneda] += VentaVehiculo[obertador][PRECIO];
				}
				MensajeEx(obertador, -1, "{00CCFF}%s{FFFFFF} aceptó comprarte tu %s por %s.",PlayerInfo[playerid][Nickname],NombreAuto[GetVehicleModel(VentaVehiculo[obertador][IDV])-400],MonedaVenta(VentaVehiculo[obertador][TIPO],VentaVehiculo[obertador][PRECIO]));
				MensajeEx(playerid, -1, "{00CCFF}%s{FFFFFF} le compraste a %s su %s por %s.",PlayerInfo[playerid][Nickname],PlayerInfo[obertador][Nickname],NombreAuto[GetVehicleModel(VentaVehiculo[obertador][IDV])-400],MonedaVenta(VentaVehiculo[obertador][TIPO],VentaVehiculo[obertador][PRECIO]));
				QuitarVehiculoJugador(obertador,VentaVehiculo[obertador][SLOT]);
				Tiempos[obertador][TiempoVenderJ] = 60;
			}
		}
		case AUTOVENDER:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, VENDERAUTO, DIALOG_STYLE_MSGBOX, "Información sobre la venta de vehículos", "Te vamos a pagar la mitad de la cantidad del precio de venta actual del vehículo.\n¿Quieres vender el vehículo?", "Si","No");
					case 1:
					{
						if(PlayerInfo[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Necesitas nivel 4 para poder hacer esto.");
						if(Tiempos[playerid][TiempoVenderJ] > 0)
						{
							if(Tiempos[playerid][TiempoVenderJ] > 60) return MensajeEx(playerid, -1, "Por favor espera {FF0000}%d:%d {FFFFFF}(m:s){FFFFFF}.",Tiempos[playerid][TiempoVenderJ]/60, Tiempos[playerid][TiempoVenderJ]%(60));
							else if(Tiempos[playerid][TiempoVenderJ] < 60) return MensajeEx(playerid, -1, "Por favor espera {FF0000}%d segundos{FFFFFF}.",Tiempos[playerid][TiempoVenderJ]%(60));
						}
						VenderVehiculoJugador(playerid);
					}
	  			}
			}
		}
		case C_ARMASF:
		{
			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            for(new f = 0; f<MAX_FABRICAS; f++)
						if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
						{
							if(Fabricas[f][pCantidadDinero] >= 10000000)
							{
							    if(Fabricas[f][pSniper] > 0)
								{
								    SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
								 	return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos los Snipers de el estante.");
								}
							    Fabricas[f][pCantidadDinero] -= 10000000;
							    Fabricas[f][pSniper] = 10;
								ActualizarDineroPared(f);
								ResetSnipers(f);
								UpdateAllBagsMoney(f);
								ActualizarLabelArmas(f);
								GuardarFabrica(f);
								SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fabrica.");
							}
							else SendClientMessage(playerid,-1,"No tienes el suficiente dinero para comprar el paquete de armas.");
						}
			        }
			        case 1:
			        {
			            for(new f = 0; f<MAX_FABRICAS; f++)
						if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
						{
							if(Fabricas[f][pCantidadDinero] >= 4000000)
							{
							    if(Fabricas[f][pRecortada] > 0)
								{
								    SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
								 	return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Escopetas recortadas de el estante.");
								}
							    Fabricas[f][pCantidadDinero] -= 4000000;
							    Fabricas[f][pRecortada] = 10;
								ActualizarDineroPared(f);
								ResetRecortada(f);
								UpdateAllBagsMoney(f);
								ActualizarLabelArmas(f);
								GuardarFabrica(f);
								SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fabrica.");
							}
							else SendClientMessage(playerid,-1,"No tienes el suficiente dinero para comprar el paquete de armas.");
						}
			        }
			        case 2:
			        {
			            for(new f = 0; f<MAX_FABRICAS; f++)
						if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
						{
							if(Fabricas[f][pCantidadDinero] >= 2000000)
							{
							    if(Fabricas[f][pUzi] > 0)
								{
								    SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
								 	return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Uzi de el estante.");
								}
							    Fabricas[f][pCantidadDinero] -= 2000000;
							    Fabricas[f][pUzi] = 10;
								ActualizarDineroPared(f);
								ResetUzi(f);
								UpdateAllBagsMoney(f);
								ActualizarLabelArmas(f);
								GuardarFabrica(f);
								SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fabrica.");
							}
							else SendClientMessage(playerid,-1,"No tienes el suficiente dinero para comprar el paquete de armas.");
						}
			        }
			        case 3:
			        {
			            for(new f = 0; f<MAX_FABRICAS; f++)
						if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
						{
							if(Fabricas[f][pCantidadDinero] >= 2500000)
							{
							    if(Fabricas[f][pTec9] > 0)
								{
								    SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
								 	return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Tec9 de el estante.");
								}
							    Fabricas[f][pCantidadDinero] -= 2500000;
							    Fabricas[f][pTec9] = 10;
								ActualizarDineroPared(f);
								ResetTec(f);
								UpdateAllBagsMoney(f);
								ActualizarLabelArmas(f);
								GuardarFabrica(f);
								SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fabrica.");
							}
							else SendClientMessage(playerid,-1,"No tienes el suficiente dinero para comprar el paquete de armas.");
						}
			        }
                }
            }
        }
        case C_EMPLEADOS2:
        {
        	if(response)
		    {
		        switch(listitem)
				{
				    case 0:
					{
						for(new f = 0; f<MAX_FABRICAS; f++)
						{
							if(Fabricas[f][pEnUso] == 1)
							{
								if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
									if(PlayerInfo[playerid][pRango] != 8) return 1;
									if(Fabricas[f][pCantidadDinero] >= 1000000)
									{
									    new count;
										for(new i = 0; i < 5; i++)
										{
										    if(Fabricas[f][TieneCocinero][i] == 0)
										    {
										        if(i == 0) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(146, -2016.4310,227.9705,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												if(i == 1) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(146, -2012.5667,226.0623,1035.8225,0.0000,1,100,Fabricas[f][pVW]);
												if(i == 2) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(146, -2008.7354,227.9745,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												if(i == 3) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(146, -2004.8615,226.0628,1035.8162,0.0000,1,100,Fabricas[f][pVW]);
												if(i == 4) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(146, -2001.0369,227.9719,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												Fabricas[f][TieneCocinero][i] = 1;
												Fabricas[f][EstadoCocinero][i] = 2;
												ActualizarLabelMoledores(f,i+1);
												ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][i], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
												SendClientMessage(playerid,-1,"Has contratado {3399FF}un moledor de cristal{FFFFFF}, el costo fue de {00CC00}$1.000.000{FFFFFF}.");
                                                QuitarDineroFabrica(f,1000000);
                                                SetDynamicActorInvulnerable(Fabricas[f][ActorCocinero][i], false);
                                                count ++;
												break;
											}
										}
										if(count == 0) SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
					                    GuardarFabrica(f);
		                            }
							    }
							}
						}
       				}
					case 1:
					{
					    for(new f = 0; f<MAX_FABRICAS; f++)
					    {
	                        if(Fabricas[f][pEnUso] == 1)
	                        {
								if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
									if(PlayerInfo[playerid][pRango] != 8) return 1;
									if(Fabricas[f][pCantidadDinero] >= 1000000)
									{
									    new count;
										for(new i = 0; i < 5; i++)
										{
										    if(Fabricas[f][TieneCocinero][i] == 0)
										    {
										        if(i == 0) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(145, -2016.4310,227.9705,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												if(i == 1) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(145, -2012.5667,226.0623,1035.8225,0.0000,1,100,Fabricas[f][pVW]);
												if(i == 2) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(145, -2008.7354,227.9745,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												if(i == 3) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(145, -2004.8615,226.0628,1035.8162,0.0000,1,100,Fabricas[f][pVW]);
												if(i == 4) if(!IsValidDynamicActor(Fabricas[f][ActorCocinero][i])) Fabricas[f][ActorCocinero][i] = CreateDynamicActor(145, -2001.0369,227.9719,1035.8162,180.0000,1,100,Fabricas[f][pVW]);
												Fabricas[f][TieneCocinero][i] = 2;
												Fabricas[f][EstadoCocinero][i] = 2;
												ActualizarLabelMoledores(f,i+1);
												ApplyDynamicActorAnimation(Fabricas[f][ActorCocinero][i], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
												SendClientMessage(playerid,-1,"Has contratado {3399FF}un moledor de cristal{FFFFFF}, el costo fue de {00CC00}$1.000.000{FFFFFF}.");
                                                QuitarDineroFabrica(f,1000000);
                                                SetDynamicActorInvulnerable(Fabricas[f][ActorCocinero][i], false);
                                                count ++;
												break;
											}
										}
										if(count == 0) SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
					                    GuardarFabrica(f);
		                            }
								}
							}
						}
					}
                }
            }
        }
        case C_EMPLEADOS:
		{
		    if(response)
		    {
		        switch(listitem)
				{
				    case 0:
					{
						new textbuy[256];
						format(textbuy,sizeof(textbuy),"{FFFFFF}Sexo\tCosto\nMasculino\t{00CC00}$1.000.000{FFFFFF}\nFemenino\t{00CC00}$1.000.000");
                        ShowPlayerDialog(playerid,C_EMPLEADOS2,DIALOG_STYLE_TABLIST_HEADERS,"Moledor de cristal",textbuy,"Aceptar","Salir");
					}
					case 1:
					{
					    new textbuy[256];
						format(textbuy,sizeof(textbuy),"{FFFFFF}Origen\tCosto\nLos Santos\t{00CC00}$2.800.000{FFFFFF}\nSan Fierro\t{00CC00}$2.000.000{FFFFFF}\nLas Venturas\t{00CC00}$4.000.000{FFFFFF}");
                        ShowPlayerDialog(playerid,FMEDICO,DIALOG_STYLE_TABLIST_HEADERS,"Médico",textbuy,"Aceptar","Salir");
					}
					case 2:
					{
                        for(new f = 0; f<MAX_FABRICAS; f++)
					    {
	                        if(Fabricas[f][pEnUso] == 1)
	                        {
							    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
									if(PlayerInfo[playerid][pRango] != 8) return 1;
									if(Fabricas[f][pCantidadDinero] >= 800000)
									{
									    new contador;
										for(new i = 0; i < 5; i++)
										{
										    if(Fabricas[f][TieneGuardia][i] == 0)
										    {
										        switch(i)
												{
													case 0: if(!IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) Fabricas[f][ActorGuardia][i] = CreateDynamicActor(66, -1983.3815,207.0429,1040.0468,76.4343, 1, 100.0, Fabricas[f][pVW], Fabricas[f][pInt]);
										        	case 1: if(!IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) Fabricas[f][ActorGuardia][i] = CreateDynamicActor(125, -1997.6844,205.5098,1035.8162,359.5049, 1, 100.0, Fabricas[f][pVW], Fabricas[f][pInt]);
										        	case 2: if(!IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) Fabricas[f][ActorGuardia][i] = CreateDynamicActor(223, -2016.1063,233.2106,1035.8162,229.3722, 1, 100.0, Fabricas[f][pVW], Fabricas[f][pInt]);
					        						case 3: if(!IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) Fabricas[f][ActorGuardia][i] = CreateDynamicActor(165, -2022.6560,243.8168,1035.8162,145.2300, 1, 100.0, Fabricas[f][pVW], Fabricas[f][pInt]);
										        	default: if(!IsValidDynamicActor(Fabricas[f][ActorGuardia][i])) Fabricas[f][ActorGuardia][i] = CreateDynamicActor(124, -2023.5002,244.8579,1035.8389,1.5771, 1, 100.0, Fabricas[f][pVW], Fabricas[f][pInt]);
												}
												Fabricas[f][TieneGuardia][i] = 1;
												SendClientMessage(playerid,-1,"Contrataste un {00CC00}nuevo empleado {FFFFFF}para la fabrica.");
												SetDynamicActorInvulnerable(Fabricas[f][ActorGuardia][i], false);
												QuitarDineroFabrica(f,800000);
												contador = 1;
												GuardarFabrica(f);
												break;
										    }
										}
										if(contador == 0) SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
		                            }
							    }
							}
						}
					}
                }
            }
     	}
		case F_SACARMA:
		{
		    if(response)
		    {
		        switch(listitem)
				{
				    case 0:
					{
					    for(new f = 0; f<MAX_FABRICAS; f++)
					    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
					    {
					        if(PlayerInfo[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"Necesitas mínimo nivel 2 para sacar un arma de la estantería.");
					        if(Fabricas[f][pSniper] > 0)
					        {
					            if(GetPlayerWeapon(playerid) == 34) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
					            Fabricas[f][pSniper] --;
					            ActualizarSnipers(f,2);
                                DarArma(playerid,34);
                                ActualizarLabelArmas(f);
                                GuardarFabrica(f);
					        }
					        else SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
					    }
					}
					case 1:
					{
					    for(new f = 0; f<MAX_FABRICAS; f++)
					    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
					    {
					        if(PlayerInfo[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"Necesitas mínimo nivel 2 para sacar un arma de la estantería.");
					        if(Fabricas[f][pRecortada] > 0)
					        {
					            if(GetPlayerWeapon(playerid) == 26) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
					            Fabricas[f][pRecortada] --;
					            ActualizarRecortadas(f,2);
                                DarArma(playerid,26);
                                ActualizarLabelArmas(f);
                                GuardarFabrica(f);
					        }
					        else SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
					    }
					}
					case 2:
					{
					    for(new f = 0; f<MAX_FABRICAS; f++)
					    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
					    {
					        if(PlayerInfo[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"Necesitas mínimo nivel 2 para sacar un arma de la estantería.");
					        if(Fabricas[f][pUzi] > 0)
					        {
					            if(GetPlayerWeapon(playerid) == 28) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
					            Fabricas[f][pUzi] --;
					            ActualizarUzi(f,2);
                                DarArma(playerid,28);
                                ActualizarLabelArmas(f);
                                GuardarFabrica(f);
					        }
					        else SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
					    }
					}
					case 3:
					{
					    for(new f = 0; f<MAX_FABRICAS; f++)
					    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
					    {
					        if(PlayerInfo[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"Necesitas mínimo nivel 2 para sacar un arma de la estantería.");
					        if(Fabricas[f][pTec9] > 0)
					        {
					            if(GetPlayerWeapon(playerid) == 32) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
					            Fabricas[f][pTec9] --;
					            ActualizarTec(f,2);
                                DarArma(playerid,32);
                                ActualizarLabelArmas(f);
                                GuardarFabrica(f);
					        }
					        else SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
					    }
					}
                }
            }
        }
        case DCONFIG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: { switch(CanalDudas[playerid]) { case 0: CanalDudas[playerid] = 1; default: CanalDudas[playerid] = 0; } }
					case 1: { switch(PlayerInfo[playerid][pMuteos]) { case 0: PlayerInfo[playerid][pMuteos] =1; default: PlayerInfo[playerid][pMuteos] = 0; } }
					case 2: { switch(PlayerInfo[playerid][pSonidos]) { case 0: PlayerInfo[playerid][pSonidos] = 1; default: PlayerInfo[playerid][pSonidos] = 0; } }
					case 3: { switch(PlayerInfo[playerid][pAlerta]) { case 0: PlayerInfo[playerid][pAlerta] = 1; default: PlayerInfo[playerid][pAlerta] = 0; } }
					case 4: { switch(PlayerInfo[playerid][pGuia]) { case 0: PlayerInfo[playerid][pGuia] = 1; default: PlayerInfo[playerid][pGuia] = 0; } }
					case 5: { switch(PlayerInfo[playerid][pBarras]) { case 0: PlayerInfo[playerid][pBarras] = 1,BarrasFunciones(playerid, 1); default: PlayerInfo[playerid][pBarras] = 0,BarrasFunciones(playerid, 2); } }
					case 6:
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) { switch(PlayerInfo[playerid][pVelocimetro]) { case 0: PlayerInfo[playerid][pVelocimetro] = 0,EsconderVelocimetro(playerid); default: PlayerInfo[playerid][pVelocimetro] = 1,MostrarVelocimetro(playerid); } }
						if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { switch(PlayerInfo[playerid][pVelocimetro]) { case 0: PlayerInfo[playerid][pVelocimetro] = 1; default: PlayerInfo[playerid][pVelocimetro] = 0; } }
					}
					case 7:
                    {
	                    new message[128];
	                    if(PlayerInfo[playerid][pFaccion] < 2) return ShowConfig(playerid);
	                    switch(PlayerInfo[playerid][pTerritorioAviso])
	                    {
	                        case 0:
	                        {
	                            new index = PlayerInfo[playerid][pt_LAST_TERRITORY];
	                            if(PlayerInfo[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID && IsPlayerInDynamicArea(playerid, TerritorioInfo[index][Territorio_Area]))
	                            {
	                                if(PlayerInfo[playerid][pFaccion] > 1)
									{
										if(TerritorioInfo[index][Territorio_BandaID2] > 1) format(message, sizeof message, "Territorio de ~b~%s",BandasInfo[TerritorioInfo[index][Territorio_BandaID]][BNombre]);
										else if(TerritorioInfo[index][Territorio_BandaID2] == 0) format(message, sizeof message, "Territorio libre");
										PlayerTextDrawSetString(playerid, MensajeTD[playerid], message),PlayerTextDrawShow(playerid, MensajeTD[playerid]);
									}
	                            }
	                            PlayerInfo[playerid][pTerritorioAviso] = 1;
	                        }
	                        default: PlayerTextDrawHide(playerid, MensajeTD[playerid]),PlayerInfo[playerid][pTerritorioAviso] = 0;
	                    }
         			}
					case 8: { if(PlayerInfo[playerid][pFaccion] < 2) return ShowConfig(playerid); switch(PlayerInfo[playerid][pTerritorioMapa]) { case 0: SetPlayerGangZones(playerid),PlayerInfo[playerid][pTerritorioMapa] = 1; default: HidePlayerGangZones(playerid),PlayerInfo[playerid][pTerritorioMapa] = 0; } }
					case 9: { switch(VerAdmin[playerid]) { case 0: VerAdmin[playerid] = 1,SendClientMessage(playerid, -1, "Mostrando log de admin."); default: VerAdmin[playerid] = 0,SendClientMessage(playerid, -1, "Ocultando log de admin."); } }
				}
				ShowConfig(playerid);
				PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
			}
		}
        case COMPRAR_VIP:
		{
			if(response)
			{
				new dia,mes,ano,price,moneda,tipomoneda;
				getdate(ano,mes,dia);
				switch(listitem)
				{
					case 0: price = 15000,	tipomoneda = 0,		moneda = PlayerInfo[playerid][pDinero];
					case 1: price = 35,		tipomoneda = 1,		moneda = PlayerInfo[playerid][Moneda];
				}
				if(moneda < price) return MensajeEx(playerid,-1,"No tienes los {00CC00}%s{FFFFFF} necesarios para comprar esta membresía.",MonedaVenta(tipomoneda,price));
				PlayerInfo[playerid][pVip] = listitem + 1;
				PlayerInfo[playerid][findia] = dia;
				PlayerInfo[playerid][finmes] = mes+1;
				PlayerInfo[playerid][finano] = ano;
				moneda -= price;
				MensajeEx(playerid,-1,"Felicidades! Adquiriste una membresía VIP {DBED15}%d{FFFFFF} hasta el %d/%d/%d por {00CC00}%s{FFFFFF}.",listitem+1,dia,mes+1,ano,MonedaVenta(tipomoneda,price));
			}
		}
        case AlquilarSalon1:
		{
	    	if(!response) return LimpiarSalon();
			if(IsNumeric(inputtext) == 0 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
		    if(strval(inputtext) <= 0) return 1;
			if(strval(inputtext) > 8)
			{
				ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
				return true;
			}
			new Precio = 20000 * HorasSalon;
			if(GetPlayerMoney(playerid) < Precio)
			{
				SendClientMessage(playerid,-1,"Necesitas {00D61C}$20.000{FFFFFF} para pagar el contrato del alquiler.");
				LimpiarSalon();
				return 1;
			}
			HorasSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon2,DIALOG_STYLE_INPUT,"Nombre del evento","Máximo 100 caracteres:","Siguiente","Salir");
		}
		case AlquilarSalon2:
		{
	    	if(!response) return LimpiarSalon();
	    	if(strlen(inputtext) > 100 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon2,DIALOG_STYLE_INPUT,"Nombre del evento","Máximo 100 caracteres:","Siguiente","Salir");
			format(NombreEvento,sizeof(NombreEvento),"%s",inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon3,DIALOG_STYLE_INPUT,"Descripción del evento","Máximo 150 caracteres:","Siguiente","Salir");
		}
		case AlquilarSalon3:
		{
	    	if(!response) return LimpiarSalon();
		    if(strlen(inputtext) > 150 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon3,DIALOG_STYLE_INPUT,"Descripción del evento","Máximo 150 caracteres:","Siguiente","Salir");
			format(DescriEvento,sizeof(DescriEvento),"%s",inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
		}
		case AlquilarSalon4:
		{
	    	if(!response) return LimpiarSalon();
		    if(isnull(inputtext) || IsNumeric(inputtext) == 0) return ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
		    if(strval(inputtext) <= 0)
			{
				SendClientMessage(playerid,-1,"El precio de las entradas {FF3300}tiene que ser superior{FFFFFF} a {00CC00}$0");
				ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
				return 1;
			}
		    if(strval(inputtext) > 900)
			{
		    	SendClientMessage(playerid,-1,"El precio de las entradas {FF3300}tiene que ser menor{FFFFFF} a {00CC00}$900");
				ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
				return 1;
			}
			PrecioSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
		}
		case AlquilarSalon5:
		{
	    	if(!response) return LimpiarSalon();
	    	if(isnull(inputtext) || IsNumeric(inputtext) == 0) return ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
			if(strval(inputtext) <= 1)
			{
			    SendClientMessage(playerid,-1,"El nivel requerido para ingresar {FF3300}tiene que ser superior{FFFFFF} a {00CC00}1");
		    	ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
			    return 1;
			}
			NivelSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon6,DIALOG_STYLE_LIST,"Tipo de evento:","General\nArtes marciales\nExposición de autos\nConcierto","Siguiente","Salir");
		}
		case AlquilarSalon6:
		{
	    	if(!response) return LimpiarSalon();
		    TipoEvento = listitem+1;
		    format(string,sizeof(string),"{FFFFFF}Nombre del evento: %s",NombreEvento);
	    	format(string,sizeof(string),"%s\nDescripción: %s",string,DescriEvento);
	    	format(string,sizeof(string),"%s\nCosto de las entradas: {00CC00}$%d",string,PrecioSalon);
		    format(string,sizeof(string),"%s\nNivel requerido: %d",string,NivelSalon);
		    format(string,sizeof(string),"%s\nDuración del contrato de alquiler: %d",string,HorasSalon);
	    	if(TipoEvento == 1) format(string,sizeof(string),"%s\nTipo de evento: General",string);
		    if(TipoEvento == 2) format(string,sizeof(string),"%s\nTipo de evento: Artes marciales",string);
		    if(TipoEvento == 3) format(string,sizeof(string),"%s\nTipo de evento: Exposición de autos",string);
	    	if(TipoEvento == 4) format(string,sizeof(string),"%s\nTipo de evento: Concierto",string);
		    ShowPlayerDialog(playerid,AlquilarSalon7,DIALOG_STYLE_MSGBOX,"Confirmar",string,"Crear","Cancelar");
		}
		case AlquilarSalon7:
		{
	    	if(!response) return LimpiarSalon();
			if(Alquilado == true) return SendClientMessage(playerid,-1,"Acaban de alquilar el salón de eventos.");
			new Precio = 20000 * HorasSalon;
			if(GetPlayerMoney(playerid) < Precio)
			{
				SendClientMessage(playerid,-1,"Necesitas {00D61C}$20.000{FFFFFF} para pagar el contrato del alquiler.");
				LimpiarSalon();
				return 1;
			}
    		AlquiladoTimer = SetTimer("SalonTimer",1000*60*60*HorasSalon,0);
	     	Delete3DTextLabel(TextoSalon);
			format(string,sizeof(string),"Alquilaste el salón por {00CC00}%d hora(s)",HorasSalon);
  			SendClientMessage(playerid,-1,string);
			SendClientMessage(playerid,-1,"Para recibir ayuda sobre el funcionamiento del salón, escribe {DBED15}/ayuda » salon");
			format(string,sizeof(string),"Stream ID: {DBED15}50");
			SendClientMessage(playerid,-1,string);
			SendClientMessage(playerid, -1, "Si se pierde la conexion escribe {DBED15}/sincronizar");
			format(Alquilador,sizeof(Alquilador),"%s", PlayerInfo[playerid][Nickname]);
			format(string,sizeof(string),"{F6F61D}/comprar entrada{FFFFFF}\nCosto:{00D61C} $%d",PrecioSalon);
			TextoSalon2 = Create3DTextLabel(string, COLOR_ROJO, -1253.2917,2116.7095,1246.5457, 5, 1, 0);
			Alquilado = true;
			if(TipoEvento == 2)
			{
    			if(BoxObj == 1) return SendClientMessage(playerid, -1, "Los objetos de box ya fueron cargados.");
				ObjBox[0] = CreateDynamicObject(2773, -1243.44995, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[1] = CreateDynamicObject(2773, -1240.93005, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[2] = CreateDynamicObject(2773, -1238.37000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[3] = CreateDynamicObject(2773, -1235.81006, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[4] = CreateDynamicObject(2773, -1233.25000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[5] = CreateDynamicObject(2773, -1230.63000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[6] = CreateDynamicObject(2773, -1231.15002, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[7] = CreateDynamicObject(2773, -1227.96997, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[8] = CreateDynamicObject(2773, -1228.56995, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[9] = CreateDynamicObject(2773, -1225.34998, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[10] = CreateDynamicObject(2773, -1226.05005, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[11] = CreateDynamicObject(2773, -1222.77002, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[12] = CreateDynamicObject(2773, -1223.46997, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[13] = CreateDynamicObject(2773, -1222.52002, 2086.32007, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[14] = CreateDynamicObject(2773, -1220.20996, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[15] = CreateDynamicObject(2773, -1219.27002, 2089.63989, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[16] = CreateDynamicObject(2773, -1219.27002, 2087.71997, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[17] = CreateDynamicObject(3398, -1214.26001, 2093.91992, 1263.19202,   180.00000, 0.00000, 229.00000);
				ObjBox[18] = CreateDynamicObject(3398, -1214.22998, 2080.51001, 1263.19202,   180.00000, 0.00000, 316.00000);
				ObjBox[19] = CreateDynamicObject(3398, -1199.35999, 2093.89990, 1263.19202,   180.00000, 0.00000, 141.00000);
				ObjBox[20] = CreateDynamicObject(3398, -1199.22998, 2080.56006, 1263.19202,   0.00000, 180.00000, 222.00000);
				ObjBox[21] = CreateDynamicObject(3819, -1210.98999, 2099.10010, 1246.53601,   0.00000, 0.00000, 90.00000);
				ObjBox[22] = CreateDynamicObject(3819, -1210.98999, 2075.88989, 1246.53601,   0.00000, 0.00000, -90.00000);
				ObjBox[23] = CreateDynamicObject(3819, -1202.37000, 2099.10010, 1246.53601,   0.00000, 0.00000, 90.00000);
				ObjBox[24] = CreateDynamicObject(3819, -1202.37000, 2075.88989, 1246.53601,   0.00000, 0.00000, -90.00000);
				ObjBox[25] = CreateDynamicObject(3819, -1195.04004, 2091.72998, 1246.53601,   0.00000, 0.00000, 0.00000);
				ObjBox[26] = CreateDynamicObject(3819, -1195.04004, 2083.11011, 1246.53601,   0.00000, 0.00000, 0.00000);
				ObjBox[27] = CreateDynamicObject(11472, -1215.58997, 2085.83008, 1243.38000,   0.00000, 0.00000, -90.00000);
				ObjBox[28] = CreateDynamicObject(14434, -1212.78003, 2083.34009, 1253.18994,   0.00000, 0.00000, 90.00000);
				ObjBox[29] = CreateDynamicObject(14434, -1200.83997, 2091.01001, 1253.18994,   0.00000, 0.00000, -90.00000);
				ObjBox[30] = CreateDynamicObject(14791, -1206.72998, 2087.78003, 1247.57202,   0.00000, 0.00000, 0.00000);
				ObjBox[31] = CreateDynamicObject(16089, -1206.79004, 2088.67993, 1254.18005,   0.00000, -90.00000, 90.00000);
				ObjBox[32] = CreateDynamicObject(16089, -1206.80005, 2085.70996, 1254.18005,   0.00000, 90.00000, 90.00000);
				BoxObj = 1;
			}
			if(TipoEvento == 3)
			{
    	        if(ExpObj == 1) return SendClientMessage(playerid, -1, "Los objetos de la exposición ya fueron cargados.");
				ObjExp[0] = CreateDynamicObject(13646, -1223.97998, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[1] = CreateDynamicObject(13646, -1214.02002, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[2] = CreateDynamicObject(13646, -1223.97998, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[3] = CreateDynamicObject(13646, -1214.02002, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[4] = CreateDynamicObject(13646, -1204.02002, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[5] = CreateDynamicObject(13646, -1223.97998, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[6] = CreateDynamicObject(13646, -1204.02002, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[7] = CreateDynamicObject(13646, -1214.02002, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[8] = CreateDynamicObject(13646, -1204.02002, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[9] = CreateDynamicObject(13646, -1179.35999, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[10] = CreateDynamicObject(13646, -1179.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[11] = CreateDynamicObject(13646, -1169.35999, 2057.28003, 1245.08984,   0.00000, 0.00000, 0.00000);
				ObjExp[12] = CreateDynamicObject(13646, -1179.35999, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[13] = CreateDynamicObject(13646, -1169.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[14] = CreateDynamicObject(13646, -1159.35999, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[15] = CreateDynamicObject(13646, -1169.38770, 2037.27405, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[16] = CreateDynamicObject(13646, -1159.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[17] = CreateDynamicObject(13646, -1159.35999, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
	    		ExpObj = 1;
			}
			if(TipoEvento == 4)
			{
    			if(ConObj == 1) return SendClientMessage(playerid, -1, "Los objetos del concierto ya fueron cargados.");
				ObjCon[0] = CreateDynamicObject(19609, -1188.19055, 2031.88159, 1247.32886,   0.00000, 0.00000, 180.00000);
				ObjCon[1] = CreateDynamicObject(19317, -1192.71997, 2027.67627, 1248.13135,   0.00000, 0.00000, 180.00000);
				ObjCon[2] = CreateDynamicObject(19319, -1193.42944, 2027.67627, 1248.05945,   0.00000, 0.00000, 180.00000);
				ObjCon[3] = CreateDynamicObject(1806, -1188.17456, 2030.85193, 1247.32776,   0.00000, 0.00000, 0.00000);
  			  	ConObj = 1;
			}
		}
        case DCLUB:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(Bailarina1 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,1);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina1 = 1;
                        MostrarLuegoDe(playerid);
                        QuitarDinero(playerid, cobro);
                        SetPlayerVirtualWorld(playerid,playerid);
                        LlevarClub(playerid,1);
                        SetActorVirtualWorld(Strips[2], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                    case 1:
                    {
                        if(Bailarina2 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,2);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina2 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,2);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[8], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                    case 2:
                    {
                        if(Bailarina3 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,3);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina3 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,3);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[4], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                    case 3:
                    {
                        if(Bailarina4 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,4);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina4 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,4);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[9], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                    case 4:
                    {
                        if(Bailarina5 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,5);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina5 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,5);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[7], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                    case 5:
                    {
                        if(Bailarina6 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,6);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina6 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,6);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[3], 999);
                        Tiempos[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
                    }
                }
            }
        }
        case DSEXOO:
        {
            if(response)
            {
                new stringas[200],string2[200];
                format(stringas, sizeof(stringas), "%s comenzó a practicarle sexo oral a %s.", PlayerInfo[SexoOral[playerid]][Nickname], PlayerInfo[playerid][Nickname]);
                ProxDetector(20.0, playerid, stringas, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                if(PlayerInfo[SexoOral[playerid]][pTrabajo] == T_Prostituta || PlayerInfo[SexoOral[playerid]][pTrabajo2] == T_Prostituta)
                {
                    if(PlayerInfo[SexoOral[playerid]][j_ARMOUR] <= 40) GivePlayerArmour(SexoOral[playerid], 10.0);
                    else if(PlayerInfo[SexoOral[playerid]][j_ARMOUR] >= 40 && PlayerInfo[SexoOral[playerid]][j_ARMOUR] <= 50) SetPlayerArmourEx(SexoOral[playerid], 50);
                }
                DarDinero(SexoOral[playerid],precioofertax[playerid]);
                QuitarDinero(playerid,precioofertax[playerid]);
                format(string2,sizeof(string2),"Pagaste $%d por el servicio.",precioofertax[playerid]);
                SendClientMessage(playerid,-1,string2);
                ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 0, 0, 1, 0, 1);
                Tiempos[playerid][TimerChupar] = SetTimerEx("elSexoOral",1000,false,"d",playerid);
                precioofertax[playerid] = 0;
            }
            else
            {
                MensajeEx(SexoOral[playerid], -1, "{00CCFF}%s{FFFFFF} rechazó tu oferta.", PlayerInfo[playerid][Nickname]);
                precioofertax[playerid] = 0;
                SexoOral[playerid] = INVALID_PLAYER_ID;
            }
        }
		case MMEDICO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						callcmd::servicio(playerid,"medico");
						TextDrawShowForPlayer(playerid, NewPlayer[2]);
						TextDrawShowForPlayer(playerid, NewPlayer[0]);
					}
					case 1: callcmd::aceptar(playerid,"muerte");
					case 2:
					{
						for(new f = 0; f < MAX_FABRICAS; f++)
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							{
								if(Fabricas[f][MedicoContratado] != 0)
								{
									SendClientMessage(playerid,-1,"Fuiste trasladado a la {EB0000}fabrica{FFFFFF} y el {20c126}médico{FFFFFF} te está atendiendo.");
									new x = random(4);
									switch(x)
									{
										case 0: SetPosEx(playerid,-2020.1584,217.8137,1035.8162,357.2271,Fabricas[f][pInt],Fabricas[f][pVW]);
										case 1: SetPosEx(playerid,-2016.0029,217.8143,1035.8162,7.9530,Fabricas[f][pInt],Fabricas[f][pVW]);
										case 2: SetPosEx(playerid,-2012.0444,217.8117,1035.8162,359.4930,Fabricas[f][pInt],Fabricas[f][pVW]);
										case 3: SetPosEx(playerid,-2007.8015,217.8159,1035.8162,1.6863,Fabricas[f][pInt],Fabricas[f][pVW]);
									}
									FabricaMedica[playerid] = 1;
									SetPlayerHealthEx(playerid, 60);
									HCurando[playerid] = SetTimerEx("CurandoHospital",1000,true,"d",playerid);
									ValueTimerBugH[playerid] = 0;
									TextDrawHideForPlayer(playerid, Sangre);
									TextDrawHideForPlayer(playerid, NewPlayer[2]);
									TextDrawHideForPlayer(playerid, NewPlayer[0]);
									PlayerInfo[playerid][Agonizando] = 0;
									Muriendo[playerid] = 0;
									TimerMalherido[playerid] = 0;
									VariableCaido[playerid] = 0;
									Esposando[playerid] = 0;
								}
							}
						}
					}
				}
			}
			else
			{
				TextDrawShowForPlayer(playerid, NewPlayer[2]);
				TextDrawShowForPlayer(playerid, NewPlayer[0]);
			}
		}
		case ACTIVIDAD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
                        for(new f = 0; f < MAX_FABRICAS; f++)
                        {
						    if(Fabricas[f][pEnUso] == 1)
						    {
								if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
								{
								    if(QuimicosActivo[f] > 0) return SendClientMessage(playerid,-1,"Tu banda ya tiene un pedido de químicos en camino.");
							        switch(Fabricas[f][pID])
							        {
										case 1:	SetPlayerCheckpoint(playerid,-27.3778,2337.5212,24.1406,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -27.3778,QuimicosCP[playerid][2] = 2337.5212,QuimicosCP[playerid][3] = 24.1406;
										case 2: SetPlayerCheckpoint(playerid,-1853.9966,123.2759,15.1172,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -1853.9966,QuimicosCP[playerid][2] = 123.2759,QuimicosCP[playerid][3] = 15.1172;
										case 3: SetPlayerCheckpoint(playerid,-1043.5349,1546.3799,33.0007,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -1043.5349,QuimicosCP[playerid][2] = 1546.3799,QuimicosCP[playerid][3] = 33.0007;
										case 4: SetPlayerCheckpoint(playerid,578.8013,1219.5505,11.7113,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = 578.8013,QuimicosCP[playerid][2] = 11.7113,QuimicosCP[playerid][3] = 334.8421;
										case 5: SetPlayerCheckpoint(playerid,2816.95410,-1428.76807,15.78511,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = 2816.95410,QuimicosCP[playerid][2] = -1428.76807,QuimicosCP[playerid][3] = 15.78511;
										case 6:	SetPlayerCheckpoint(playerid,1201.20227, -975.79108, 42.94669,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = 1201.20227,QuimicosCP[playerid][2] = -975.79108,QuimicosCP[playerid][3] = 42.94669;
										case 7: SetPlayerCheckpoint(playerid,-316.9135,1568.7860,75.3594,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -316.9135,QuimicosCP[playerid][2] = 1568.7860,QuimicosCP[playerid][3] = 75.3594;
										case 8: SetPlayerCheckpoint(playerid,-2005.53418, 1377.34277, 6.59055,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -2005.53418,QuimicosCP[playerid][2] = 1377.34277,QuimicosCP[playerid][3] = 6.59055;
										case 9: SetPlayerCheckpoint(playerid,-2180.76733, 1218.98425, 33.38559,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = -2180.76733,QuimicosCP[playerid][2] = 1218.98425,QuimicosCP[playerid][3] = 33.38559;
										case 10: SetPlayerCheckpoint(playerid,2258.50220, 66.98792, 25.94164,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = 2258.50220,QuimicosCP[playerid][2] = 66.98792,QuimicosCP[playerid][3] = 25.94164;
										case 11: SetPlayerCheckpoint(playerid,793.97052, 1686.08948, 4.70481,5.0),QuimicosActivo[f] = 1,SetPVarInt(playerid,"Quimicos",1),QuimicosCP[playerid][1] = 793.97052,QuimicosCP[playerid][2] = 1686.08948,QuimicosCP[playerid][3] = 4.70481;
							        }
							        MandarMensajeFabrica(f,"Ve con el {00CCFF}vehículo de la fabrica{FFFFFF} hasta el {FF0000}punto marcado{FFFFFF} en el mapa.");
					    		}
							}
						}
					}
					case 1:
					{
						for(new f = 0; f<MAX_FABRICAS; f++)
						if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
						{
							if(MetanfetaminaEnVenta[f] != 0)
							{
								switch(MetanfetaminaEnVenta[f])
								{
									case 0: { SetPlayerCheckpoint(playerid,2431.9109,-1672.5043,13.6113,7.0); MetanfetaminaEnSlot[f] = 1; }
									case 1: { SetPlayerCheckpoint(playerid,1520.5901,-1473.3662,9.5000,7.0); MetanfetaminaEnSlot[f] = 2; }
									case 2: { SetPlayerCheckpoint(playerid,1091.5337,-1245.3550,15.8272,7.0); MetanfetaminaEnSlot[f] = 3; }
									case 3: { SetPlayerCheckpoint(playerid,2206.5029,-2296.2642,14.7647,7.0); MetanfetaminaEnSlot[f] = 4; }
									default: { SetPlayerCheckpoint(playerid,1091.5337,-1245.3550,15.8272,7.0); MetanfetaminaEnSlot[f] = 3; }
								}
								SendClientMessage(playerid,-1,"Carga el {00CCFF}vehículo de la fabrica{FFFFFF} con metanfetamina y llévalo al {EB0000}punto marcado{FFFFFF} en el mapa.");
								return 1;
							}
							MetanfetaminaEnVenta[f] = 1;
							ActualizarCajasMeta(Fabricas[f][Auto1F],f);
							SendClientMessage(playerid,-1,"Carga el {00CCFF}vehículo de la fabrica{FFFFFF} con metanfetamina y llévalo al {EB0000}punto marcado{FFFFFF} en el mapa.");
							new randomzone = random(4);
							switch(randomzone)
							{
								case 0:	{ MarcadoCamioneroGPS(playerid,2431.9109,-1672.5043,13.6113,7.0); MetanfetaminaEnSlot[f] = 1; }
								case 1:	{ MarcadoCamioneroGPS(playerid,1520.5901,-1473.3662,9.5000,7.0); MetanfetaminaEnSlot[f] = 2; }
								case 2:	{ MarcadoCamioneroGPS(playerid,1091.533,-1245.3550,15.8272,7.0); MetanfetaminaEnSlot[f] = 3; }
								case 3:	{ MarcadoCamioneroGPS(playerid,2206.5029, -2296.2642,14.7647,7.0); MetanfetaminaEnSlot[f] = 4; }
								default: { MarcadoCamioneroGPS(playerid,1091.5337,-1245.3550,15.8272,7.0); MetanfetaminaEnSlot[f] = 3; }
							}
						}
					}
					case 2:
					{
					    for(new f = 0; f < MAX_FABRICAS; f++)
						{
						    if(Fabricas[f][pEnUso] == 1)
						    {
							    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
									if(Fabricas[f][pSoborno] <= gettime())
									{
									    MandarMensajeFabrica(f,"Agarra un {00CC00}bolso de dinero{FFFFFF} y llévalo a la {3399FF}oficina del comandante{FFFFFF} en el Departamento de policía de Los Santos.");
										foreach(new i : Player)
										{
										    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
										    {
										        if(PlayerInfo[i][pFaccion] == Fabricas[f][pBanda]) SetPlayerCheckpoint(i,1543.1437,-1675.5537,13.5559,5.0);
										    }
										}
	                                }
	                                else SendClientMessage(playerid,-1,"Aún no puedes pagar el soborno, {FF0000}intenta otro día{FFFFFF}.");
							    }
							}
						}
					}
				}
			}
		}
		case FMEDICO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    for(new f = 0; f < MAX_FABRICAS; f++)
						{
						    if(Fabricas[f][pEnUso] == 1)
						    {
						    	if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
							        if(PlayerInfo[playerid][pRango] != 8) return 1;
							        if(Fabricas[f][MedicoContratado] != 0) return SendClientMessage(playerid,-1,"Tu fabrica ya cuenta con atención médica.");
							        Fabricas[f][MedicoContratado] = 276;
							        if(!IsValidDynamicActor(Fabricas[f][ActorMedico])) Fabricas[f][ActorMedico] = CreateDynamicActor(Fabricas[f][MedicoContratado], -2022.5638,215.6430,1035.8162,302.6615,1,100,Fabricas[f][pVW]);
	                                QuitarDineroFabrica(f,2800000);
	                                Fabricas[f][CantidadActores] ++;
	                                SendClientMessage(playerid,-1,"Contrataste un {00CC00}nuevo empleado {FFFFFF}para la fabrica.");
	                                GuardarFabrica(f);
	                                SetDynamicActorHealth(Fabricas[f][ActorMedico], 100.0);
	                                SetDynamicActorInvulnerable(Fabricas[f][ActorMedico], false);
								}
							}
						}
					}
					case 1:
                    {
                        for(new f = 0; f < MAX_FABRICAS; f++)
						{
						    if(Fabricas[f][pEnUso] == 1)
						    {
							    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
							        if(PlayerInfo[playerid][pRango] != 8) return 1;
							    	if(Fabricas[f][MedicoContratado] != 0) return SendClientMessage(playerid,-1,"Tu fabrica ya cuenta con atención médica.");
							        Fabricas[f][MedicoContratado] = 275;
							        if(!IsValidDynamicActor(Fabricas[f][ActorMedico])) Fabricas[f][ActorMedico] = CreateDynamicActor(Fabricas[f][MedicoContratado], -2022.5638,215.6430,1035.8162,302.6615,1,100,Fabricas[f][pVW]);
									QuitarDineroFabrica(f,2000000);
									Fabricas[f][CantidadActores] ++;
									SendClientMessage(playerid,-1,"Contrataste un {00CC00}nuevo empleado {FFFFFF}para la fabrica.");
									GuardarFabrica(f);
									SetDynamicActorHealth(Fabricas[f][ActorMedico], 100.0);
									SetDynamicActorInvulnerable(Fabricas[f][ActorMedico], false);
								}
							}
						}
					}
					case 2:
					{
                        for(new f = 0; f < MAX_FABRICAS; f++)
						{
						    if(Fabricas[f][pEnUso] == 1)
						    {
							    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							    {
							        if(PlayerInfo[playerid][pRango] != 8) return 1;
							        if(Fabricas[f][MedicoContratado] != 0) return SendClientMessage(playerid,-1,"Tu fabrica ya cuenta con atención médica.");
							        Fabricas[f][MedicoContratado] = 274;
							        if(!IsValidDynamicActor(Fabricas[f][ActorMedico])) Fabricas[f][ActorMedico] = CreateDynamicActor(Fabricas[f][MedicoContratado], -2022.5638,215.6430,1035.8162,302.6615,1,100,Fabricas[f][pVW]);
	                                QuitarDineroFabrica(f,4000000);
	                                Fabricas[f][CantidadActores] ++;
	                                SendClientMessage(playerid,-1,"Contrataste un {00CC00}nuevo empleado {FFFFFF}para la fabrica.");
	                                GuardarFabrica(f);
	                                SetDynamicActorHealth(Fabricas[f][ActorMedico], 100.0);
	                                SetDynamicActorInvulnerable(Fabricas[f][ActorMedico], false);
								}
					    	}
					    }
					}
				}
			}
		}
        case REGISTROOFF:
        {
            ExpulsarJugador(playerid, "Registro Inhabilitado.");
        }
        case CVEHICULO:
		{
			if(response) callcmd::comprar(playerid,"vehiculo");
			else {
				RemovePlayerFromVehicle(playerid); SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
			}
		}
		case REPARACION:
		{
			if(response) callcmd::aceptar(playerid,"reparacion");
		}
        case ADMINISTRACION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, C_EMPLEADOS, DIALOG_STYLE_TABLIST,"Elige el tipo de empleado", "Moledor de cristal\nMédico\nSeguridad", "Siguiente", "Salir");
					case 1:
					{
                        new stringas[512];
                        format(stringas,sizeof(stringas),"Modelo\tCantidad\tPrecio{FFFFFF}\nSniper rifle\t10\t{00CC00}$10.000.000\n{FFFFFF}Escopeta recortada\t10\t{00CC00}$4.000.000\n{FFFFFF}Micro UZI\t10\t{00CC00}$2.000.000\n{FFFFFF}Tec-9\t10\t{00CC00}$2.500.000");
                        ShowPlayerDialog(playerid, C_ARMASF, DIALOG_STYLE_TABLIST_HEADERS,"Armas", stringas, "Comprar", "Salir");
					}
					case 2: ShowPlayerDialog(playerid, COMPRACHALE, DIALOG_STYLE_MSGBOX, "{FFFFFF}Chalecos antibalas", "{FFFFFF}¿Desea comprar {00CCFF}10 chalecos antibalas{FFFFFF} por{00CC00} $500.000{FFFFFF}?","Comprar","Salir");
					case 3:
					{
					    new regresar[256];
					    format(regresar,sizeof(regresar),"{FFFFFF}Si regresas {00CCFF}el vehículo{FFFFFF} a la fabrica, {EB0000}se perderá{FFFFFF} lo que tenga cargado.\n\n¿Estás seguro de hacer esto?");
					    ShowPlayerDialog(playerid, REG_AFABRICA, DIALOG_STYLE_MSGBOX, "Regresar vehículo", regresar,"Si","No");
					}
					case 4:
					{
                    	for(new f = 0; f < MAX_FABRICAS; f++)
						{
						    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							{
                        		if(AutoOcupado(Fabricas[f][Auto2F])) return SendClientMessage(playerid,-1,"Este auto está ocupado.");
                        		if(IsValidVehicle(Fabricas[f][Auto2F])) RespawnearVF2(Fabricas[f][Auto2F]);
								if(IsValidVehicle(Fabricas[f][Auto2F])) ObjetoDistraccion(Fabricas[f][Auto2F],f);
        						SendClientMessage(playerid,-1,"Regresaste el vehículo de {00CCFF}distracción{FFFFFF} a la {EB0000}fabrica de metanfetamina{FFFFFF}.");
                          	}
                        }
					}
				}
			}
		}
		case REG_AFABRICA:
		{
		    if(response)
		    {
		    	for(new f = 0; f < MAX_FABRICAS; f++)
				{
				    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
				    {
				        if(AutoOcupado(Fabricas[f][Auto1F])) return SendClientMessage(playerid,-1,"Este auto está ocupado.");
                        {
                         	SetVehicleToRespawn(Fabricas[f][Auto1F]);
							LinkVehicleToInterior(Fabricas[f][Auto1F], Fabricas[f][pInt]);
							SetVehicleVirtualWorld(Fabricas[f][Auto1F], Fabricas[f][pVW]);
							SetVehicleHealth(Fabricas[f][Auto1F], 5000.0);
							CargarVehiculoFabrica(f,1);
							ActualizarCajasMeta(Fabricas[f][Auto1F],f);
							ActualizarBarriles(Fabricas[f][Auto1F],f);
							VehiculoConBarril[Fabricas[f][Auto1F]] = 0;
							VehiculoConCajas[Fabricas[f][Auto1F]] = 0;
        					SendClientMessage(playerid,-1,"Regresaste {00CCFF}el vehículo{FFFFFF} a la {EB0000}fabrica de metanfetamina{FFFFFF}.");
                        }
             		}
				}
        	}
    	}
		case COMPRACHALE:
		{
		    if(response)
		    {
				for(new f = 0; f < MAX_FABRICAS; f++)
				{
				    if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
				    {
				        if(PlayerInfo[playerid][pRango] == 8)
				        {
				            if(Fabricas[f][pCantidadDinero] >= 500000)
				            {
								new cantidadchale, cantidadmaxima = 24, cantidadxchale = 50000;
				                if(Fabricas[f][pChalecos] >= 24) return SendClientMessage(playerid,-1,"La chalequería está llena.");
				                if(Fabricas[f][pChalecos] > 14 && Fabricas[f][pChalecos] < 24)
				                {
				                    cantidadchale = cantidadmaxima - Fabricas[f][pChalecos]; cantidadxchale = cantidadchale;
				                }
				                else { cantidadchale = 10; cantidadxchale = 500000; }
				                SendClientMessage(playerid,-1,"Compraste un paquete de chalecos anti-balas para la fabrica.");
								Fabricas[f][pCantidadDinero] -= cantidadxchale;
								Fabricas[f][pChalecos] += cantidadchale;
								ActualizarCantidadChalecos(f);
								ActualizarDineroPared(f);
								UpdateAllBagsMoney(f);
								ActualizarCantidadTChale(f);
								GuardarFabrica(f);
							}
							else SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {EB0000}fabrica de metanfetamina{FFFFFF}.");
                        }
                    }
                }
		    }
        }
		case DIALOG_SALON:
		{
			if(response)
			{
				new titulo[24],precio;
				switch(listitem)
				{
					case 0: titulo = "un vino",precio = 110;
					case 1: titulo = "una cerveza",precio = 80;
					case 2: titulo = "un vaso de sprunk",precio = 65;
					case 3: titulo = "una botella de aquarius",precio = 170;
				}
				if(PlayerInfo[playerid][pDinero] < precio) return MensajeEx(playerid,-1,"No tienes el dinero suficiente ($%d)",precio);
				QuitarDinero(playerid, precio);
				switch(listitem)
				{
					case 0: DarVino(playerid);
					case 1: DarCerveza(playerid);
					case 2: DarSprunk(playerid);
					case 3: DarAquarius(playerid);
				}
				MensajeEx(playerid, -1, "Compraste %s por {00CC00}$%d{FFFFFF}. Presiona {DBED16}'Y'{FFFFFF} para beber.",titulo,precio);
				AnimacionVenta(playerid);
			}
		}
        case COPOBJECTS_DIALOG:
		{
			if(!response) return 1;
			if(listitem == 0) ShowModelSelectionMenu(playerid, RoadblockList, "Barricadas");
			if(listitem == 1) ShowModelSelectionMenu(playerid, SignList, "Signos");
			if(listitem == 2)
			{
		    	new id = GetFreeObjectID();
		    	if(id == -1) return SendClientMessage(playerid, COLOR_BLANCO, "Se alcanzó el límite de objetos.");
		    	CopObjectData[id][ObjCreated] = true;
		    	GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
		    	CopObjectData[id][Type] = OBJECT_TYPE_POLICELINE;
		    	CopObjectData[id][ObjModel] = 19834;
		    	CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    	CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);
		    	new Float: x, Float: y, Float: z, Float: a;
		    	GetPlayerPos(playerid, x, y, z);
		    	GetPlayerFacingAngle(playerid, a);
		    	x += (2.0 * floatsin(-a, degrees));
				y += (2.0 * floatcos(-a, degrees));
				CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z;
				CopObjectData[id][ObjRX] = 0.0;
				CopObjectData[id][ObjRY] = 0.0;
				CopObjectData[id][ObjRZ] = a;
				CopObjectData[id][ObjID] = CreateDynamicObject(19834, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
				CopObjectData[id][ObjArea] = -1;
				new stringXZ[96];
				format(stringXZ, sizeof(stringXZ), "Línea de policía (ID: %d)\n{FFFFFF}Puesta por %s", id, CopObjectData[id][Owner]);
				CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(stringXZ, 0x3498DBFF, x, y, z + 0.35, 5.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			}
			if(listitem == 3)
			{
		    	new id = GetFreeObjectID();
		    	if(id == -1) return SendClientMessage(playerid, COLOR_BLANCO, "Se alcanzó el límite de objetos.");
		    	CopObjectData[id][ObjCreated] = true;
		    	GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
		    	CopObjectData[id][Type] = OBJECT_TYPE_SPIKE;
		    	CopObjectData[id][ObjModel] = 2899;
		    	CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    	CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);
		    	new Float: x, Float: y, Float: z, Float: a;
		    	GetPlayerPos(playerid, x, y, z);
		    	GetPlayerFacingAngle(playerid, a);
		    	x += (2.0 * floatsin(-a, degrees));
				y += (2.0 * floatcos(-a, degrees));
				CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z - 0.85;
				CopObjectData[id][ObjRX] = 0.0;
				CopObjectData[id][ObjRY] = 0.0;
				CopObjectData[id][ObjRZ] = a + 90.0;
				CopObjectData[id][ObjID] = CreateDynamicObject(2899, x, y, z - 0.85, 0.0, 0.0, a + 90.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
				CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 0.85, 2.5, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
				new stringXZ[96];
				format(stringXZ, sizeof(stringXZ), "Pinchos (ID: %d)\n{FFFFFF}Puestos por %s", id, CopObjectData[id][Owner]);
				CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(stringXZ, 0x3498DBFF, x, y, z - 0.4, 3.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			}
	    	return 1;
		}
        case DIALOG_PIZZA:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: {
                        if(PlayerInfo[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($40)");
                        QuitarDinero(playerid, 40);
                        DarPizza(playerid);
                        AccionesRol(playerid,"compró una porción de pizza.", 20);
                        SendClientMessage(playerid, -1, "Compraste una porción de pizza por {00CC00}$40 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para comer.");
                        AnimacionVenta(playerid);
                    }
                    case 1: {
                        if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                        if(PlayerInfo[playerid][pDinero] < 300) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($300)");
                        DarCajaPizza(playerid);
                        QuitarDinero(playerid, 300);
                        SendClientMessage(playerid, -1, "Compraste una caja de pizza por {00CC00}$300");
                        AnimacionVenta(playerid);
                    }
                    case 2: {
                        if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
                        DarSprunk(playerid);
                        QuitarDinero(playerid, 65);
                        AccionesRol(playerid,"compró un vaso de Sprunk.", 20);
                        SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {00CC00}$65 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                        AnimacionVenta(playerid);
                    }
                    case 3: {
                        if(PlayerInfo[playerid][pDinero] < 170) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($170)");
                        QuitarDinero(playerid, 170);
                        DarAquarius(playerid);
                        AccionesRol(playerid,"compró una botella de aquarius.", 20);
                        SendClientMessage(playerid, -1, "Compraste una botella de aquarius por {00CC00}$170 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                        AnimacionVenta(playerid);
                    }
                }
            }
        }
        case CONTROLES:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
                        {
                            if(Humo1Ojb == 0)
                            {
                                format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} encendio las maquinas de humo delanteras.", PlayerInfo[playerid][Nickname]);
                                MandarMensajeSalon(string, playerid);
                                ObjHumo1[0] = CreateDynamicObject(2415, -1186.80493, 2036.34924, 1245.98035,   0.00000, 0.00000, 0.00000);
                                ObjHumo1[1] = CreateDynamicObject(2415, -1196.69702, 2036.34924, 1245.98035,   0.00000, 0.00000, 0.00000);
                                SendClientMessage(playerid,-1,"Encendiste las maquinas de humo delanteras.");
                                Humo1Ojb = 1;
                            }
                            else
                            {
                                format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} apago las maquinas de humo delanteras.", PlayerInfo[playerid][Nickname]);
                                MandarMensajeSalon(string, playerid);
                                DestroyDynamicObject(ObjHumo1[0]);
                                DestroyDynamicObject(ObjHumo1[1]);
                                SendClientMessage(playerid,-1,"Apagaste las maquinas de humo delanteras.");
                                Humo1Ojb = 0;
                            }
                            return 1;
                        }
                    }
                    case 1:
                    {
                        if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
                        {
                            if(Humo2Ojb == 0)
                            {
                                format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} encendio las maquinas de humo traseras", PlayerInfo[playerid][Nickname]);
                                MandarMensajeSalon(string, playerid);
                                ObjHumo2[0] = CreateDynamicObject(2415, -1185.50305, 2031.20337, 1245.98035,   0.00000, 0.00000, 0.00000);
                                ObjHumo2[1] = CreateDynamicObject(2415, -1198.21899, 2031.20337, 1245.98035,   0.00000, 0.00000, 0.00000);
                                SendClientMessage(playerid,-1,"Encendiste las maquinas de humo traseras.");
                                Humo2Ojb = 1;
                            }
                            else
                            {
                                format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} apago las maquinas de humo traseras.", PlayerInfo[playerid][Nickname]);
                                MandarMensajeSalon(string, playerid);
                                DestroyDynamicObject(ObjHumo2[0]);
                                DestroyDynamicObject(ObjHumo2[1]);
                                SendClientMessage(playerid,-1,"Apagaste las maquinas de humo traseras.");
                                Humo2Ojb = 0;
                            }
                            return 1;
                        }
                    }
                }
            }
        }
        case DAYUDA:
        {
            if(response) DudaUser(playerid,DudaTexto[playerid]);
        }
        case CREPUESTOS:
        {
            if(response)
            {
                
                if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, CREPUESTOS, DIALOG_STYLE_INPUT, "Repuestos", "Ingresa la cantidad de repuestos que deseas comprar\nRecuerda que cada repuesto cuesta $100 y solo puedes llevar 200 encima.", "Comprar", "Cancelar"),SendClientMessage(playerid,-1,"Ingresa la cantidad de repuestos que deseas comprar.");
                if(strval(inputtext) > 0 && strval(inputtext) <= 100)
                {
                    if(PlayerInfo[playerid][pDinero] < strval(inputtext)*100) return SendClientMessage(playerid,-1,"No tienes la cantidad de dinero suficiente para comprar repuestos.");
                    if(PlayerInfo[playerid][Repuestos]+strval(inputtext) <= 100)
                    {
                        if(PlayerInfo[playerid][Repuestos]+strval(inputtext) <= 100) PlayerInfo[playerid][Repuestos] = PlayerInfo[playerid][Repuestos]+strval(inputtext);
                        else PlayerInfo[playerid][Repuestos] = 100;
                        format(string,500,"Compraste {DBED15}%d repuestos{FFFFFF} por {00CC00}$%d",strval(inputtext),strval(inputtext)*100);
                        SendClientMessage(playerid,-1,string);
                        QuitarDinero(playerid,strval(inputtext)*100);
                    }
                }
            }
        }
		case BOTIQUIN:
		{
			if(response)
			{
				PlayerInfo[playerid][pMedicina] = listitem+1;
				AccionesRol(playerid,"está sacando cosas del botiquín.", 20);
				SendClientMessage(playerid,-1,"Agarraste cosas del botiquín, ahora puedes {DBED15}/atender paciente [id]");
			}
		}
        case DHOSPITAL:
        {
            if(response)
            {
                new hospital,Float:sala,salon;
                NoTeleportHack(playerid);
                if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) hospital = 1; // Los Santos
                else if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) hospital = 2; // San Fierro
                else if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759))
                {
                    switch(GetPlayerVirtualWorld(playerid))
                    {
                        case 7: hospital = 4; // LS Groove
                        case 9: hospital = 3;// LV
                    }
                }
                switch(hospital)
                {
                    case 1:
                    {
                        for(new i = 0; i < sizeof(CamillasLS); i++)
                        {
                            if(CamillaLS[i] == 0)
                            {
                                SetPlayerPosEx(playerid, CamillasLS[i][0], CamillasLS[i][1], CamillasLS[i][2]);
                                SetPlayerFacingAngle(playerid, CamillasLS[i][3]);
                                CamillaLS[i] = 1;
                                PlayerInfo[playerid][pCama] = i+1;
                                sala = CamillasLS[i][4];
                                salon = floatround(sala);
                                break;
                            }
                        }
                    }
                    case 2:
                    {
                        for(new i = 0; i < sizeof(CamillasSF); i++)
                        {
                            if(CamillaSF[i] == 0)
                            {
                                SetPlayerPosEx(playerid, CamillasSF[i][0], CamillasSF[i][1], CamillasSF[i][2]);
                                SetPlayerFacingAngle(playerid, CamillasSF[i][3]);
                                CamillaSF[i] = 1;
                                PlayerInfo[playerid][pCama] = i+1;
                                sala = CamillasSF[i][4];
                                salon = floatround(sala);
                                break;
                            }
                        }
                    }
                    case 3:
                    {
                        for(new i = 0; i < sizeof(CamillasLV); i++)
                        {
                            if(CamillaLV[i] == 0)
                            {
                                SetPlayerPosEx(playerid, CamillasLV[i][0], CamillasLV[i][1], CamillasLV[i][2]);
                                SetPlayerFacingAngle(playerid, CamillasLV[i][3]);
                                CamillaLV[i] = 1;
                                PlayerInfo[playerid][pCama] = i+1;
                                sala = CamillasLV[i][4];
                                salon = floatround(sala);
                                break;
                            }
                        }
                    }
                    case 4:
                    {
                        for(new i = 0; i < sizeof(CamillasLV); i++)
                        {
                            if(CamillaGA[i] == 0)
                            {
                                SetPlayerPosEx(playerid, CamillasLV[i][0], CamillasLV[i][1], CamillasLV[i][2]);
                                SetPlayerFacingAngle(playerid, CamillasLV[i][3]);
                                CamillaGA[i] = 1;
                                PlayerInfo[playerid][pCama] = i+1;
                                sala = CamillasLV[i][4];
                                salon = floatround(sala);
                                break;
                            }
                        }
                    }
                }
                PlayerInfo[playerid][enHospital] = hospital;
                SendClientMessage(playerid,-1,"Por favor espera mientras los médicos te atienden.");
                if(PlayerInfo[playerid][pDinero] >= HCalculo[playerid]*10)
                {
                    MensajeEx(playerid, -1, "Pagaste {FF3300}$%d{FFFFFF} por los servicios médicos.",HCalculo[playerid]*10);
                    QuitarDinero(playerid,HCalculo[playerid]*10);
                }
                else if(PlayerInfo[playerid][pBanco] < HCalculo[playerid]*10)
                {
                    MensajeEx(playerid, -1, "Pagaste {FF3300}$%d{FFFFFF} usando tu cuenta bancaria.",HCalculo[playerid]*10);
                    PlayerInfo[playerid][pBanco] -= HCalculo[playerid]*10;
                }
                else SendClientMessage(playerid,-1,"El gobierno de San Andreas te pagó los servicios médicos.");
                ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0,1);
                HCurando[playerid] = SetTimerEx("CurandoHospital",1000,true,"d",playerid);
                ValueTimerBugH[playerid] = 0;
                PlayerInfo[playerid][pAtendido] = 0;
                foreach(new i : Player)
                {
                    if(RopaMedi[playerid] == 1 && (PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            MensajeEx(i, -1, "{FFFFFF}Hay un paciente en la {DBED15}sala %d{FFFFFF} esperando ser atendido.",salon);
                            MensajeEx(i, -1, "(( Usa {DBED15}/revisar paciente %d{FFFFFF} junto al paciente para revisarlo. ))",playerid);
                            SetPlayerMarkerForPlayer(i, playerid, COLOR_GREEN3);
                        }
                    }
                }
            }
        }
        case DEMAIL:
        {
            
            if(!response) ExpulsarJugador(playerid,"Escape en registro.");
            if(strlen(inputtext) < 32)
            {
                if(!IsCorrectMail(inputtext))
                {
                    format(string,sizeof(string),"Ingresa un e-mail válido para recuperar tu contraseña en caso de perderla.\n\nTu e-mail:");
                    ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT,"Ingresa tu dirección de e-mail",string,"Siguiente","Salir");
                    return 0;
                }
                else
                {
                    format(PlayerInfo[playerid][pEmail], 32, "%s", inputtext);
                    new pQuery[200];
                    mysql_format(handle_db, pQuery, sizeof(pQuery), "SELECT Username FROM `usuarios` WHERE `Email` = '%e'", inputtext);
                    mysql_pquery(handle_db, pQuery, "CorreoInvalido", "d", playerid);
                }
            }
            else
            {
                SendClientMessage(playerid,0xff9000ff,"Ingresa una dirección de e-mail válida.");
                format(string,sizeof(string),"Ingresa un e-mail válido para recuperar tu contraseña en caso de perderla.\n\nTu e-mail:");
                ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT,"Ingresa tu dirección de e-mail",string,"Registrar","Salir");
            }
        }
        case LOGIN:
        {
            
            if(!response) ExpulsarJugador(playerid, "Escape en registro");
            if(strlen(inputtext) <= 2)
            {
                PlayerTemp[playerid][@ContraVacia] = 1;
                SendClientMessage(playerid, 0xAFAFAFAA, "Ingresa la contraseña" );
            }
            if(strlen(inputtext) > 18) SendClientMessage(playerid, 0xAFAFAFAA, "Contraseña muy larga.");
            if(response)
            {
                if(IsPlayerConnected(playerid))
                {
                    new hash[65];
                    SHA256_PassHash(inputtext, "SebasHash", hash, 64);
                    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username` = '%e' AND `Password` = '%e'", PlayerInfo[playerid][Nickname], hash);
                    mysql_pquery(handle_db, Query, "OnPlayerSpawnLoaded", "d", playerid);
                    format(PlayerInfo[playerid][ContraTemporal],128,"%s",hash);
                }
            }
        }
        case REGISTRO:
        {
            
            if(!response) ExpulsarJugador(playerid, "Escape en registro");
            else
            {
                if(!strlen(inputtext)) ExpulsarJugador(playerid, "No ingresó datos.");
                if(strlen(inputtext) < 4 || strlen(inputtext) > 18)
                {
                    format(string, sizeof(string), "{FFFFFF}La contraseña que ingresaste es demasiado corta.\n", PlayerInfo[playerid][Nickname]);
                    format(string, sizeof(string), "%s{FFFFFF}La contraseña debe contener de 4 a 18 caracteres", string);
                    ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT,"Contraseña errónea",string,"Registrar","Salir");
                }
                else if(strlen(inputtext) > 3 && strlen(inputtext) < 21)
                {
                    SHA256_PassHash(inputtext, "SebasHash", PlayerInfo[playerid][pPassword], 65);
                    ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT,"Ingresa tu dirección de e-mail","Ingresa un e-mail válido para recuperar tu contraseña en caso de perderla.\n\nTu e-mail:","Siguiente","Salir");
                    KillTimer(LoginTimer[playerid]);
                }
            }
            return 1;
        }
        case PRODUCTOS:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(PlayerInfo[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
                        if(PlayerInfo[playerid][pNumero] > 0) return SendClientMessage(playerid,-1,"Ya tienes un teléfono móvil, escribe {DBED15}/ayuda{FFFFFF} para recibir ayuda.");
                        new randphone, final_value;
                        randphone = random(99999);
                        final_value = randphone + 50000;
                        PlayerInfo[playerid][pNumero] = final_value;
                        QuitarDinero(playerid, 1500);
                        MensajeEx(playerid, -1, "Conseguiste un teléfono móvil por {00CC00}$1500{FFFFFF}, tu número es {DBED15}%d",PlayerInfo[playerid][pNumero]);
                        SendClientMessage(playerid, -1, "Ahora puedes usar {DBED15}/telefono, /agenda, /llamar, /sms.");
                        AddPlayerConectats(playerid);
                        AnimacionVenta(playerid);
                    }
                    case 1:
                    {
                        if(PlayerInfo[playerid][pDinero] < 35) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($35)");
                        if(PlayerInfo[playerid][pAgenda] == 1) return SendClientMessage(playerid,-1,"Ya tienes una guía teléfonica, escribe {DBED15}/numero {FFFFFF}[{DBED15}Nombre o ID{FFFFFF}] para averiguar el número de teléfono de la persona.");
                        QuitarDinero(playerid, 35);
                        PlayerInfo[playerid][pAgenda] = 1;
                        SendClientMessage(playerid, -1, "Compraste una guía teléfonica por {00CC00}$35");
                        AnimacionVenta(playerid);
                    }
                    case 2:
                    {
                        new traba[128*MAX_PAUTOS],counter = 0;
					    for(new i = 0; i < MAX_PAUTOS; i++)
					    {
					        if(VehicleInfo[playerid][i][vModelo] < 400) continue;
					        format(traba, sizeof(traba), "%s Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | Precio: {FF0000}$%s\n",traba,GetVehicleName(autos[i][playerid]),Patente[playerid][i],ConvertirNumero(((VehicleInfo[playerid][i][vPrecio] / 2) / 10) + 2000));
							counter++;
					    }
					    if(counter == 0) return SendClientMessage(playerid,-1,"No tienes vehículos para los que comprar un seguro.");
					    else return ShowPlayerDialog(playerid, TRABAV, DIALOG_STYLE_LIST, "Vehículo al que le deseas instalar la traba de seguridad", traba, "Comprar","Cancelar");
                    }
                    case 3:
                    {
                        new alarms[128*MAX_PAUTOS],counter = 0;
					    for(new i = 0; i < MAX_PAUTOS; i++)
					    {
					        if(VehicleInfo[playerid][i][vModelo] < 400) continue;
					        format(alarms, sizeof(alarms), "%s Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | Precio: {FF0000}$%s\n",alarms,GetVehicleName(autos[i][playerid]),Patente[playerid][i],ConvertirNumero(((VehicleInfo[playerid][i][vPrecio] / 2) / 10) + 5000));
							counter++;
					    }
					    if(counter == 0) return SendClientMessage(playerid,-1,"No tienes vehículos para los que comprar una alarma.");
					    else return ShowPlayerDialog(playerid, ALARMAV, DIALOG_STYLE_LIST, "Vehículo al que le deseas instalar alarma", alarms, "Comprar","Cancelar");
                    }
                    case 4:
                    {
                        if(PlayerInfo[playerid][pRadio] != 0) return SendClientMessage(playerid,-1,"Ya tienes un radio comunicador, escribe {DBED15}!{FFFFFF} delante del mensaje.");
                        if(PlayerInfo[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
                        PlayerInfo[playerid][pRadio] = 1;
                        QuitarDinero(playerid, 2000);
                        SendClientMessage(playerid,-1,"Compaste un radio comunicador por {00CC00}$2000");
                        AnimacionVenta(playerid);
                    }
                    case 5:
                    {
                        if(PlayerInfo[playerid][pGPS] != 0) return SendClientMessage(playerid,-1,"Ya tienes un GPS, escribe {DBED15}/gps{FFFFFF} para ver lo puntos de interés.");
                        if(PlayerInfo[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
                        PlayerInfo[playerid][pGPS] = 1;
                        QuitarDinero(playerid, 1500);
                        SendClientMessage(playerid,-1,"Compraste un GPS por {00CC00}$1500");
                        AnimacionVenta(playerid);
                    }
                    case 6:
                    {
                        if(PlayerInfo[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($470)");
                        if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                        SendClientMessage(playerid,-1,"Compraste 6 cervezas por {00CC00}$470{FFFFFF}, ahora guárdalas en una heladera.");
                        SendClientMessage(playerid,-1,"Tienes que usar {DBED15}/heladera guardar objeto{FFFFFF}, o para tirarlas {DBED15}/tirar objeto");
                        Objeto[playerid] = 1000;
                        SetPlayerAttachedObject(playerid, 4, 2060, 6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
                        QuitarDinero(playerid, 470);
                        AnimacionVenta(playerid);
                    }
                    case 7:
                    {
                        if(PlayerInfo[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($590)");
                        if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                        SendClientMessage(playerid,-1,"Compraste 6 botellas de vino por {00CC00}$590{FFFFFF}, ahora guárdalas en una heladera.");
                        SendClientMessage(playerid,-1,"Tienes que usar {DBED15}/heladera guardar objeto{FFFFFF}, o para tirarlas {DBED15}/tirar objeto");
                        Objeto[playerid] = 1001;
                        SetPlayerAttachedObject(playerid, 4, 3800, 6, 0.262000,0.070999,0.021000,106.599998,-1.999999,171.599975,0.372999,0.239999,0.166000);
                        QuitarDinero(playerid, 590);
                        AnimacionVenta(playerid);
                    }
                    case 8:
                    {
                        if(PlayerInfo[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($200)");
                        if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                        SendClientMessage(playerid,-1,"Compraste 4 vasos de sprunk por {00CC00}$200{FFFFFF}, ahora guárdalas en una heladera.");
                        SendClientMessage(playerid,-1,"Tienes que usar {DBED15}/heladera guardar objeto{FFFFFF}, o para tirarlas {DBED15}/tirar objeto");
                        Objeto[playerid] = 1002;
                        SetPlayerAttachedObject(playerid, 4, 2900, 6, 0.256000,0.074999,0.019000,94.400001,0.000000,1.300018,0.376999,0.207000,0.164999);
                        QuitarDinero(playerid, 200);
                        AnimacionVenta(playerid);
                    }
                    case 9:
                    {
                        if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
                        DarSprunk(playerid);
                        QuitarDinero(playerid, 65);
                        SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {00CC00}$65 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                        AnimacionVenta(playerid);
                    }
                }
            }
            return 1;
        }
        case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowTuning(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
						if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
							return ShowTuning(playerid, dialogid);
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "No hay más espacio para objetos en este vehículo.");
							return ShowTuning(playerid, dialogid);
						}
						EnGaraje[playerid] = true;
						new Float:p[6];
      					GetPlayerCameraPos(playerid, p[0], p[1], p[2]);
						GetPlayerCameraLookAt(playerid, p[3], p[4], p[5]);
						InterpolateCameraPos(playerid, p[0], p[1], p[2], 2558.762451, 2735.906005, 1602.077392, 3000);
      					InterpolateCameraLookAt(playerid, p[3], p[4], p[5], 2562.704589, 2738.654785, 1600.697753, 3000);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
						ObjetoTuning[playerid] = 0;
						UpdateTuningShop(playerid);
						SendClientMessage(playerid, -1, "Pulsa {C4FF66}ESC{FFFFFF} para dejar de comprar objetos.");
						SelectTextDraw(playerid, 0xe8d08fFF);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
						if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
							return ShowTuning(playerid, dialogid);
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{999999}No hay más espacio para objetos en este vehículo.");
							return ShowTuning(playerid, dialogid);
						}
						if(PlayerInfo[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($500)");
						QuitarDinero(playerid, 500);
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_VALID] = true;
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ID] = 0;
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_MODELID] = 19327;
						format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_NAME], 32, "Texto");
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ATTACHED] = true;
						format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_text_TEXT], 32, "Mi texto");
						format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_text_FONT], 24, "Arial");
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_text_FONT_SIZE] = 24;
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_text_BOLD] = false;
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;
						RegisterNewVehicleObject(playerid,TuneandoCoche[playerid], slot);
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], slot, true);
						SendClientMessage(playerid, -1, "{FFFFFF}El objeto de texto ha sido añadido.");
						ObjetoSlot[playerid] = slot;
						ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
						if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
							return ShowTuning(playerid, dialogid);
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{999999}No hay más espacio para objetos en este vehículo.");
							return ShowTuning(playerid, dialogid);
						}
						if(PlayerInfo[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
						C_Type[playerid] = 0;
						ShowTuning(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 4:
					{
						new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
						if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
							return ShowTuning(playerid, dialogid);
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{999999}No hay más espacio para objetos en este vehículo.");
							return ShowTuning(playerid, dialogid);
						}
					 	if(PlayerInfo[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
						C_Type[playerid] = 1;
						ShowTuning(playerid, DIALOG_VOBJECT_COUNTRY);
					}
				}
			}
			else
			{
				EnGaraje[playerid] = false;
				SetVehicleVirtualWorldEx(TuneandoCoche[playerid], 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehiclePos(TuneandoCoche[playerid], 1106.2717,1286.2402,10.5474);
				SetVehicleZAngle(TuneandoCoche[playerid], 269.9739);
				GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(TuneandoCoche[playerid]);
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicle(playerid, TuneandoCoche[playerid], 0);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if(response)
			{
				new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
				if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
					return ShowTuning(playerid, dialogid);
				}
				if(slot == -1)
				{
					SendClientMessage(playerid, -1, "{999999}No hay más espacio para objetos en este vehículo.");
					return ShowTuning(playerid, DIALOG_VOBJECT_MENU);
				}
				if(PlayerInfo[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
				QuitarDinero(playerid, 2000);
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ID] = 0;
				if(C_Type[playerid] == 0)
				{
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_MODELID] = 19307;
				}
				else if(C_Type[playerid] == 1)
				{
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_MODELID] = 2661;
				}
				format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_NAME], 32, "Pais");
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ATTACHED] = true;
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_COLORS][0] = listitem;
				RegisterNewVehicleObject(playerid,TuneandoCoche[playerid], slot);
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], slot, true);
				SendClientMessage(playerid, -1, "{FFFFFF}El objeto ha sido añadido.");
				ObjetoSlot[playerid] = slot;
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_MENU);
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_OBJETOS) return ShowTuning(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][listitem][vobject_VALID])
				{
					SendClientMessage(playerid, -1, "{999999}Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					return ShowTuning(playerid, dialogid);
				}
				ObjetoSlot[playerid] = listitem;
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_MENU);
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto guardado.");
							VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid]);
							ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
							UpdateVehicleObject(playerid,TuneandoCoche[playerid], ObjetoSlot[playerid]);
						}
						else
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto colocado.");
							VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
							ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
							UpdateVehicleObject(playerid,TuneandoCoche[playerid], ObjetoSlot[playerid]);
						}
					}
					case 1: ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{999999}Debes colocar el objeto primero.");
							return ShowTuning(playerid, dialogid);
						}
						EditVehicleObject(playerid, TuneandoCoche[playerid], ObjetoSlot[playerid]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{999999}Debes colocar el objeto primero.");
									return ShowTuning(playerid, dialogid);
								}
								ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if(!VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{999999}Debes colocar el objeto primero.");
									return ShowTuning(playerid, dialogid);
								}
								ShowTuning(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}
			}
			else
			{
				UpdateVehicleObject(playerid,TuneandoCoche[playerid], ObjetoSlot[playerid]);
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El nombre del objeto debe contener de 1 a 32 caracteres.");
					return ShowTuning(playerid, dialogid);
				}
				format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_NAME], 32, "%s", inputtext);
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				ColorSlot[playerid] = listitem;
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][ ColorSlot[playerid] ] = 0;
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][ ColorSlot[playerid] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][ ColorSlot[playerid] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ TuneandoCoche[playerid] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowTuning(playerid, dialogid);
				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor)) return ShowTuning(playerid, dialogid);
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_COLORS][ ColorSlot[playerid] ] = hexcolor;
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
				SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}
				new DB_Query[128];
				mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID` = '%d'",VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_ID]);
				mysql_tquery(handle_db, DB_Query);
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ] = temp_VEHICLE_OBJECTS;
				SendClientMessage(playerid, -1, "{FFFFFF}Objeto eliminado.");
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
				new auto_slot,DB_Query[128];
				for(new i = 0; i < MAX_PAUTOS; i++)
				{
					if(autos[i][playerid] == TuneandoCoche[playerid]) auto_slot = VehicleInfo[playerid][i][v_DBID];
				}
				mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", auto_slot);
				mysql_tquery(handle_db, DB_Query);
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_OBJETOS; i ++)
				{
					if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}
					VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][i] = temp_VEHICLE_OBJECTS;
				}
				SendClientMessage(playerid, -1, "{FFFFFF}Todos los objetos de este vehículo han sido eliminados.");
				ShowTuning(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowTuning(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowTuning(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowTuning(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_BOLD] = false;
							SendClientMessage(playerid, -1, "Negrita deshabilitada.");
						}
						else
						{
							VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_BOLD] = true;
							SendClientMessage(playerid, -1, "Negrita habilitada.");
						}
						UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
						ShowTuning(playerid, dialogid);
					}
					case 4: ShowTuning(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else return ShowTuning(playerid, DIALOG_VOBJECT_OBJECT);
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{999999}Como máximo puedes introducir un texto de 32 caracteres.");
					return ShowTuning(playerid, dialogid);
				}
				if(sscanf(inputtext, "s[32]", inputtext))
				{
					SendClientMessage(playerid, -1, "{999999}Introduce un texto.");
					return ShowTuning(playerid, dialogid);
				}
				format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
				SendClientMessage(playerid, -1, "Texto actualizado.");
			}
			return ShowTuning(playerid, DIALOG_VOBJECT_TEXT_MENU);
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 24)
				{
					SendClientMessage(playerid, -1, "{999999}Como máximo puedes introducir una fuente de 24 caracteres.");
					return ShowTuning(playerid, dialogid);
				}
				if(sscanf(inputtext, "s[24]", inputtext))
				{
					SendClientMessage(playerid, -1, "{999999}Introduce un texto.");
					return ShowTuning(playerid, dialogid);
				}
				format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
				SendClientMessage(playerid, -1, "Fuente actualizada.");
			}
			return ShowTuning(playerid, DIALOG_VOBJECT_TEXT_MENU);
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{999999}Introduce un valor numérico.");
					return ShowTuning(playerid, dialogid);
				}
				if(inputtext[0] <= 0 || inputtext[0] >= 255)
				{
					SendClientMessage(playerid, -1, "{999999}Introduce un valor entre 1 y 255.");
					return ShowTuning(playerid, dialogid);
				}
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
				SendClientMessage(playerid, -1, "Tamaño de letra actualizado.");
			}
			return ShowTuning(playerid, DIALOG_VOBJECT_TEXT_MENU);
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if(response)
			{
				VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][ ObjetoSlot[playerid] ][vobject_text_FONT_COLOR] = RGBAToARGB(RandomColors[listitem]);
				UpdateVehicleAttachedObject(TuneandoCoche[playerid], ObjetoSlot[playerid], true);
				SendClientMessage(playerid, -1, "Color de letra actualizado.");
			}
			return ShowTuning(playerid, DIALOG_VOBJECT_TEXT_MENU);
		}
        case TRABAV:
		{
			if(response)
			{
				new car = ObtenerOrdenAuto(playerid,listitem);
				
   				if(VehicleInfo[playerid][car][vModelo] > 0)
       			{
          			if(VehicleInfo[playerid][car][vTraba] != 1)
             		{
						new calcPrecio = ((VehicleInfo[playerid][car][vPrecio] / 2) / 10) + 2000;
						if(PlayerInfo[playerid][pDinero] >= calcPrecio)
						{
		    				MensajeEx(playerid, COLOR_BLANCO, "Acabas de comprar un sistema de traba para tu {DBED15}%s {FFFFFF}({00CCFF}%s{FFFFFF}). Gasto total: {FF3300}$%s{FFFFFF}", GetVehicleName(autos[car][playerid]), Patente[playerid][car], ConvertirNumero(calcPrecio));
					    	SendClientMessage(playerid, COLOR_BLANCO, "Usa {DBED15}/cerrar{FFFFFF} para cerrarlo o {DBED15}/abrir{FFFFFF} para destrabarlo.");
					    	VehicleInfo[playerid][car][vTraba] = 1;
						    QuitarDinero(playerid, calcPrecio);
							AnimacionVenta(playerid);
						}
						else return SendClientMessage(playerid, COLOR_BLANCO, "No tienes suficiente dinero para comprar ese artículo.");
 					}
      				else return SendClientMessage(playerid, COLOR_BLANCO, "Este vehículo ya tiene un seguro.");
          		}
            	else return SendClientMessage(playerid, COLOR_BLANCO, "No puedes comprar un seguro para un vehículo que no existe.");
			}
			else return 1;
		}
		case ALARMAV:
		{
			if(response)
			{
				new car = ObtenerOrdenAuto(playerid,listitem);
				
   				if(VehicleInfo[playerid][car][vModelo] > 0)
   				{
       				if(VehicleInfo[playerid][car][vAlarm] != 1)
           			{
						new calcPrecio = ((VehicleInfo[playerid][car][vPrecio] / 2) / 10) + 5000;
						if(PlayerInfo[playerid][pDinero] >= calcPrecio)
						{
		    				MensajeEx(playerid, COLOR_BLANCO, "Acabas de comprar una alarma para tu {DBED15}%s {FFFFFF}({00CCFF}%s{FFFFFF}). Gasto total: {FF3300}$%s{FFFFFF}", GetVehicleName(autos[car][playerid]), Patente[playerid][car], ConvertirNumero(calcPrecio));
						    SendClientMessage(playerid, COLOR_BLANCO, "Usa {DBED15}/alarma{FFFFFF} para activar y desactivar la alarma.");
						    VehicleInfo[playerid][car][vAlarm] = 1;
						    QuitarDinero(playerid, calcPrecio);
							AnimacionVenta(playerid);
						}
						else return SendClientMessage(playerid, COLOR_BLANCO, "No tienes suficiente dinero para comprar ese artículo.");
      				}
          			else return SendClientMessage(playerid, COLOR_BLANCO, "Este vehículo ya tiene una alarma.");
           		}
             	else return SendClientMessage(playerid, COLOR_BLANCO, "No puedes comprar una alarma para un vehículo que no existe.");
			}
			else return 1;
		}
        case PRODUCTOS2:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(PlayerInfo[playerid][pDinero] < 80) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($80)");
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                            {
                                if(PropInfo[p][pCerveza] <= 0) return SendClientMessage(playerid,-1,"No queda más cerveza, regresa más tarde.");
                                PropInfo[p][pCerveza]--;
                                PropInfo[p][pGanancias]+=80;
                                GuardarPropiedad(p);
                            }
                        }
                        QuitarDinero(playerid, 80);
                        DarCerveza(playerid);
                        AccionesRol(playerid,"compró una botella de cerveza.", 20);
                        SendClientMessage(playerid, -1, "Compraste una cerveza por {00CC00}$80 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                    }
                    case 1:
                    {
                        if(PlayerInfo[playerid][pDinero] < 100) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($100)");
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                            {
                                if(PropInfo[p][pVino] <= 0) return SendClientMessage(playerid,-1,"No queda más vino, regresa más tarde.");
                                PropInfo[p][pVino]--;
                                PropInfo[p][pGanancias]+=100;
                                GuardarPropiedad(p);
                            }
                        }
                        QuitarDinero(playerid, 100);
                        DarVino(playerid);
                        AccionesRol(playerid,"compró una botella de vino.", 20);
                        SendClientMessage(playerid, -1, "Compraste una botella de vino por {00CC00}$100 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                    }
                    case 2:
                    {
                        if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($60)");
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                            {
                                if(PropInfo[p][pSprunk] <= 0) return SendClientMessage(playerid,-1,"No queda más sprunk, regresa más tarde.");
                                PropInfo[p][pSprunk]--;
                                PropInfo[p][pGanancias]+=60;
                                GuardarPropiedad(p);
                            }
                        }
                        DarSprunk(playerid);
                        QuitarDinero(playerid, 65);
                        AccionesRol(playerid,"compró un vaso de Sprunk.", 20);
                        SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {00CC00}$65 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                    }
                    case 3:
                    {
                        if(PlayerInfo[playerid][pDinero] < 160) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($160)");
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                            {
                                if(PropInfo[p][pAquarius] <= 0) return SendClientMessage(playerid,-1,"No queda más aquarius, regresa más tarde.");
                                PropInfo[p][pAquarius]--;
                                PropInfo[p][pGanancias]+=160;
                                GuardarPropiedad(p);
                            }
                        }
                        QuitarDinero(playerid, 160);
                        DarAquarius(playerid);
                        AccionesRol(playerid,"compró una botella de aquarius.", 20);
                        SendClientMessage(playerid, -1, "Compraste una botella de aquarius por {00CC00}$160 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                    }
                }
            }
            return 1;
        }
		case JUGUETES:
		{
			if(response)
			{
				new dialogo[40],precio,arma;
				switch(listitem)
				{
					case 0: dialogo = "Vibrador blanco",precio = 1000,arma = 11;
					case 1: dialogo = "Vibrador plateado",precio = 1200,arma = 13;
					case 2: dialogo = "Gran vibrador blanco",precio = 16,arma = 12;
					case 3: dialogo = "consolador rosa",precio = 2500,arma = 10;
				}
				if(PlayerInfo[playerid][pDinero] < precio) return MensajeEx(playerid,-1,"No tienes el dinero suficiente ($%d)",precio);
				QuitarDinero(playerid, precio);
				DarArma(playerid,arma);
				MensajeEx(playerid, -1, "Compraste %s por {00CC00}$%d",dialogo,precio);
			}
			return 1;
		}
        case DIALOG_ANUNCIO1:
        {
            if(response)
            {
                new stringanuncio[128],tipoad[16];
                switch(listitem)
                {
                    case 0: tipoad = "de compras";
                    case 1: tipoad = "de ventas";
                    case 2: tipoad = "normal";
                }
                format(stringanuncio, sizeof(stringanuncio), "%s (por celular) dice: Necesito publicar un anuncio %s.",PlayerInfo[playerid][Nickname],tipoad);
                if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, stringanuncio,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
                AnuncioTipo[playerid] = listitem+1;
                SetTimerEx("AnuncioPlayer2",2000,false,"d",playerid);
            }
            else CancelarLlamadaAnuncio(playerid);
        }
        case DIALOG_ANUNCIO2:
        {
            if(response)
            {
                if(strlen(inputtext) > 100 || strlen(inputtext) < 5) return ShowPlayerDialog(playerid, DIALOG_ANUNCIO2, DIALOG_STYLE_INPUT, "Información sobre el servicio de anuncios" , "{FFFFFF}A continuación, usa el siguiente campo para ingresar el contenido de tu anuncio:\n\n{FF0000}El anuncio no puede tener más de 100 carácteres ni menos de 5." , "Siguiente" , "Cancelar" ) ;
                format(AnuncioTexto[playerid],144,"%s",inputtext);
                ShowPlayerDialog (playerid, DIALOG_ANUNCIO3, DIALOG_STYLE_MSGBOX, "{DBED16}¡ATENCIÓN!" , "{FFFFFF}Estás por utilizar el canal de anuncios\n\nEl canal de anuncios es únicamente para publicar anuncios a nivel global del servidor.\nNo mal uses el canal de anuncios, como por ejemplo para insultar a otros jugadores.\nSi lo haces puedes ser sancionado o hasta baneado.\n\n¿Quieres enviar el anuncio?" , "Anunciar" , "Cancelar" ) ;
            }
            else CancelarLlamadaAnuncio(playerid);
        }
        case DIALOG_ANUNCIO3:
        {
            if(response)
            {
                new anuncio[144],pName[32],anuncioenviado[128];
                switch(AnuncioTipo[playerid])
                {
                    case 1: format(anuncio,sizeof(anuncio),"{E275FA}>Compra:{FFFFFF} %s {E275FA}[#%d]",AnuncioTexto[playerid],PlayerInfo[playerid][pNumero]);
                    case 2: format(anuncio,sizeof(anuncio),"{E275FA}>Venta:{FFFFFF} %s {E275FA}[#%d]",AnuncioTexto[playerid],PlayerInfo[playerid][pNumero]);
                    case 3: format(anuncio,sizeof(anuncio),"{E275FA}>Anuncio:{FFFFFF} %s {E275FA}[#%d]",AnuncioTexto[playerid],PlayerInfo[playerid][pNumero]);
                }
                Tiempos[playerid][TiempoAnuncio] = 120;
                MandarMensajeTodos(anuncio);
                AnuncioTipo[playerid] = 0;
                ColgarLaLlamada(playerid);
                GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
                format(anuncioenviado, sizeof(anuncioenviado), "{E275FA}Anuncio enviado por: {FFFFFF}%s (ID: %d | Nivel: %d)", pName, playerid, PlayerInfo[playerid][pNivel]);
                MensajeAdmin(-1, anuncioenviado, 1);
            }
            else CancelarLlamadaAnuncio(playerid);
        }
        case SERVICIOGRUA1:
		{
			if(response)
			{
				if(PlayerInfo[playerid][pDinero] < VehicleInfo[playerid][listitem][vPrecio]/100) return SendClientMessage(playerid, -1, "No tienes el dinero suficiente para solícitar una grua a este vehículo.");
				ShowPlayerDialog(playerid, SERVICIOGRUA2, DIALOG_STYLE_LIST,"¿Dónde quieres que enviemos tu vehículo?","Ultimo lugar estacionado\nEstacionamiento municipal\nA mi posicion","Aceptar","Cancelar");
			}
		}
		case SERVICIOGRUA2:
		{
			if(response == 1)
			{
				new gruast[150*MAX_PAUTOS];
			    for(new i = 0; i < MAX_PAUTOS; i++)
			    {
			        if(VehicleInfo[playerid][i][vModelo] < 400) continue;
			        format(gruast, sizeof(gruast), "%s Vehículo: {F6E200}%s{FFFFFF} | %s | Costo del servicio: {F81414}$%s\n",gruast,GetVehicleName(autos[i][playerid]),ConvertirNumero(VehicleInfo[playerid][i][vPrecio]/100));
			    }
				ShowPlayerDialog(playerid, SERVICIOGRUA3, DIALOG_STYLE_LIST, "Selecciona un vehiculo para remolcar", gruast, "Aceptar","Cancelar");
				tipogrua[playerid] = listitem+1;
			}
		}
		case SERVICIOGRUA3:
		{
			if(response)
			{
				new car = ObtenerOrdenAuto(playerid,listitem);
				if(autos[car][playerid] == 0) return SendClientMessage(playerid,-1,"No puedes remolcar un vehículo que no existe.");
				
				if(AutoOcupado(autos[car][playerid]) != 0) return SendClientMessage(playerid,-1,"No puedes remolcar el vehículo si hay una persona dentro.");
				QuitarDinero(playerid, VehicleInfo[playerid][car][vPrecio]/100);
				switch(tipogrua[playerid])
				{
					case 1: SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el ultimo lugar donde lo estacionaste."),Respawnear(autos[car][playerid]);
					case 2:
					{
						SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el estacionamiento municipal.");
						new lugar = random(4);
						switch(lugar)
						{
							case 0: { VehicleInfo[playerid][car][pOX] = -13.0813; VehicleInfo[playerid][car][pOY] = -374.6711; VehicleInfo[playerid][car][pOZ] = 5.4297; VehicleInfo[playerid][car][pOA] = 358.1299; }
							case 1: { VehicleInfo[playerid][car][pOX] = -29.7148; VehicleInfo[playerid][car][pOY] = -375.2507; VehicleInfo[playerid][car][pOZ] = 5.4297; VehicleInfo[playerid][car][pOA] = 354.9965; }
							case 2: { VehicleInfo[playerid][car][pOX] = -2.0937; VehicleInfo[playerid][car][pOY] = -346.8077; VehicleInfo[playerid][car][pOZ] = 5.4297; VehicleInfo[playerid][car][pOA] = 89.6241; }
							case 3: { VehicleInfo[playerid][car][pOX] = -3.3296; VehicleInfo[playerid][car][pOY] = -332.9302; VehicleInfo[playerid][car][pOZ] = 5.4297; VehicleInfo[playerid][car][pOA] = 91.8175; }
						}
						SetPosVeh(autos[car][playerid],VehicleInfo[playerid][car][pOX],VehicleInfo[playerid][car][pOY],VehicleInfo[playerid][car][pOZ],VehicleInfo[playerid][car][pOA],0,0);
					}
					case 3:
					{
						SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el estacionamiento maritimo");
						new lugar = random(4);
						switch(lugar)
						{
							case 0: { VehicleInfo[playerid][car][pOX] = 2634.2881; VehicleInfo[playerid][car][pOY] = -2486.2009; VehicleInfo[playerid][car][pOZ] = -0.7707; VehicleInfo[playerid][car][pOA] = 2.5868; }
							case 1: { VehicleInfo[playerid][car][pOX] = 2623.3982; VehicleInfo[playerid][car][pOY] = -2488.3628; VehicleInfo[playerid][car][pOZ] = -0.6238; VehicleInfo[playerid][car][pOA] = 2.1582; }
							case 2: { VehicleInfo[playerid][car][pOX] = 2607.7522; VehicleInfo[playerid][car][pOY] = -2487.5833; VehicleInfo[playerid][car][pOZ] = -0.4461; VehicleInfo[playerid][car][pOA] = 0.4526; }
							case 3: { VehicleInfo[playerid][car][pOX] = 2594.8560; VehicleInfo[playerid][car][pOY] = -2484.1121; VehicleInfo[playerid][car][pOZ] = -0.3442; VehicleInfo[playerid][car][pOA] = 357.9986; }
						}
						SetPosVeh(autos[car][playerid],VehicleInfo[playerid][car][pOX],VehicleInfo[playerid][car][pOY],VehicleInfo[playerid][car][pOZ],VehicleInfo[playerid][car][pOA],0,0);
					}
				}
			}
		}
        case COMPRARRADIO:
        {
            if(response)
            {
                if(PlayerInfo[playerid][pVip] != 2) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser VIP2 para crear una estación de radio");
                
                if(PlayerInfo[playerid][pDinero] >= 15000)
                {
                    Emisoras[playerid][TieneEmisora] = 1;
                    Emisoras[playerid][EmisoraID] = -1;
                    Emisoras[playerid][TransEmisora] = 0;
                    Emisoras[playerid][CabinaOcupada] = -1;
                    format(Emisoras[playerid][NombreEmisora], 90, "%s", inputtext);
                    format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
                    QuitarDinero(playerid, 15000);
                    format(string, sizeof(string), "{00CC00}¡Felicidades! {FFFFFF}Has creado una estación de radio llamada {DBED15}%s", inputtext);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else return SendClientMessage(playerid, COLOR_WHITE, "Necesitas {00CC00}$15000{FFFFFF} para crear una estación de radio");
            }
        }
    	case D_REGALOS:
        {
            if(response)
            {
            	PlayerTemp[playerid][pSeleccion_Regalos] = listitem+1;
             	switch(listitem)
                {
                    case 0: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Tranquilizantes", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 1: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Medicamentos", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 2: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Crack", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 3: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Marihuana", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 4: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Caramelos", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 5: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Piezas de armas", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 6: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Patines", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 7: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - $ Dinero", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 8: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Totems", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 9: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Moneda", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 10:
                    {
                        if(PayDayActive == false)
                        {
                            new requerido = 0;
                            TimerForcep = SetTimerEx("PayDay",segundos(1),true,"d",requerido);
                            PayDayActive = true;
                            format(string,sizeof(string),"%s activó la lluvia de pagas diarias.",PlayerInfo[playerid][Nickname]);
                            MensajeAdmin(-1,string,3);
                        }
                        else
                        {
                            KillTimer(TimerForcep);
                            PayDayActive = false;
                            format(string,sizeof(string),"%s desactivó la lluvia de pagas diarias.",PlayerInfo[playerid][Nickname]);
                            MensajeAdmin(-1,string,3);
                        }
                    }
                }
            }
        }
        case D_REGALOS2:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 1;
                        ShowPlayerDialog(playerid, D_REGALOS3, DIALOG_STYLE_INPUT, "{00CC00}"SERVER_COIN":RP | Un solo jugador", "Jugador (ID):", "Siguiente","Cerrar");
                    }
                    case 1:
                    {
                        PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 2;
                        ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, "{00CC00}"SERVER_COIN":RP | Todos los jugadores", "Cantidad:", "Siguiente","Cerrar");
                    }
                }
            }
        }
        case D_REGALOS3:
        {
            if(response)
            {
                if(IsNumeric(inputtext) == 0 || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numérico.");
                new id = strval(inputtext);
                PlayerTemp[playerid][pSeleccion_Regalos_Jugador] = id;
                switch(PlayerTemp[playerid][pSeleccion_Regalos_Staff])
                {
                    case 1:
                    {
                        new mensajeria[128];
                        format(mensajeria,sizeof(mensajeria),"{00CC00}"SERVER_COIN":RP | Solo %s",PlayerInfo[id][Nickname]);
                        ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
                    }
                    case 2:
                    {
                        new mensajeria[128];
                        format(mensajeria,sizeof(mensajeria),"{00CC00}"SERVER_COIN":RP | Todos los jugadores");
                        ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
                    }
                }
            }
        }
		case D_REGALOS4:
	    {
	        if(response)
	        {
	            if(!IsNumeric(inputtext) || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numérico.");
				new value2 = strval(inputtext), value = PlayerTemp[playerid][pSeleccion_Regalos_Jugador];
				switch(PlayerTemp[playerid][pSeleccion_Regalos_Staff])
	            {
					case 1:
					{
						if(!IsPlayerNPC(value))
						{
							new titulo[40];
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 1) PlayerInfo[value][pTranquilizantes] += value2,titulo = "tranquilizantes";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 2) PlayerInfo[value][pMedicamentos] += value2,titulo = "medicamentos";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 3) PlayerInfo[value][pCrack] += value2,titulo = "gramos de crack";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 4) PlayerInfo[value][pMarihuana] += value2,titulo = "gramos de marihuana";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 5) PlayerInfo[value][pCaramelos] += value2,titulo = "caramelos";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 6) PlayerInfo[value][pMateriales] += value2,titulo = "piezas de armas";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) PlayerInfo[value][pPatines] = 1;
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 8) DarDinero(value, value2),titulo = "$ dólares";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 9) PlayerInfo[value][Totems] += value2,titulo = "totems";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 10) PlayerInfo[value][Moneda] += value2,titulo = ""SERVER_COIN"";
							if(PlayerTemp[playerid][pSeleccion_Regalos] > 0)
							{
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) MensajeEx(value,-1,"{FFFFFF}El administrador %s te dió {00FF00}unos patines{FFFFFF}.",PlayerName(playerid));
								else MensajeEx(value,-1,"{FFFFFF}El administrador %s te dió {00FF00}%s %s{FFFFFF}.",PlayerName(playerid), Numeros(value2), titulo);
							}
						}
				 	}
         			case 2:
         			{
						foreach(new i : Player)
						{
						    if(!IsPlayerNPC(i))
							{
								new titulo[40];
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 1) PlayerInfo[i][pTranquilizantes] += value2,titulo = "tranquilizantes";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 2) PlayerInfo[i][pMedicamentos] += value2,titulo = "medicamentos";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 3) PlayerInfo[i][pCrack] += value2,titulo = "gramos de crack";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 4) PlayerInfo[i][pMarihuana] += value2,titulo = "gramos de marihuana";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 5) PlayerInfo[i][pCaramelos] += value2,titulo = "caramelos";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 6) PlayerInfo[i][pMateriales] += value2,titulo = "piezas de armas";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) PlayerInfo[i][pPatines] = 1;
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 8) DarDinero(i, value2),titulo = "$ dólares";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 9) PlayerInfo[i][Totems] += value2,titulo = "totems";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 10) PlayerInfo[i][Moneda] += value2,titulo = ""SERVER_COIN"";
								if(PlayerTemp[playerid][pSeleccion_Regalos] > 0)
								{
									if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) MensajeEx(i,-1,"{FFFFFF}El administrador %s te dió {00FF00}unos patines{FFFFFF}.",PlayerName(playerid));
									else MensajeEx(i,-1,"{FFFFFF}El administrador %s te dió {00FF00}%s %s{FFFFFF}.",PlayerName(playerid), Numeros(value2), titulo);
								}
							}
						}
         			}
     				default: return 1;
	            }
	            PlayerTemp[playerid][pSeleccion_Regalos] = 0;
	            PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 0;
	            PlayerTemp[playerid][pSeleccion_Regalos_Jugador] = INVALID_PLAYER_ID;
	        }
	    }
        case D_REGALOSQ:
        {
            if(response)
            {
                PlayerTemp[playerid][pSeleccion_Regalos] = listitem+1;
                switch(listitem)
                {
                    case 0: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Tranquilizantes", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 1: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Medicamentos", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 2: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Crack", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 3: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Marihuana", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 4: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Caramelos", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 5: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Piezas de armas", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 6: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Patines", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 7: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - $ Dinero", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 8: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Totems", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                    case 9: ShowPlayerDialog(playerid, D_REGALOS2Q, DIALOG_STYLE_LIST, "{00CC00}"SERVER_COIN":RP | Cantidad de usuarios - Moneda", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
                }
            }
        }
        case D_REGALOS2Q:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 1;
                        ShowPlayerDialog(playerid, D_REGALOS3Q, DIALOG_STYLE_INPUT, "{00CC00}"SERVER_COIN":RP | Un solo jugador", "Jugador (ID):", "Siguiente","Cerrar");
                    }
                    case 1:
                    {
                        PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 2;
                        ShowPlayerDialog(playerid, D_REGALOS4Q, DIALOG_STYLE_INPUT, "{00CC00}"SERVER_COIN":RP | Todos los jugadores", "Cantidad:", "Siguiente","Cerrar");
                    }
                }
            }
        }
        case D_REGALOS3Q:
        {
            if(response)
            {
                if(IsNumeric(inputtext) == 0 || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numérico.");
                new id = strval(inputtext);
                PlayerTemp[playerid][pSeleccion_Regalos_Jugador] = id;
                switch(PlayerTemp[playerid][pSeleccion_Regalos_Staff])
                {
                    case 1:
                    {
                        new mensajeria[128];
                        format(mensajeria,sizeof(mensajeria),"{00CC00}"SERVER_COIN":RP | Solo %s",PlayerInfo[id][Nickname]);
                        ShowPlayerDialog(playerid, D_REGALOS4Q, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
                    }
                    case 2:
                    {
                        new mensajeria[128];
                        format(mensajeria,sizeof(mensajeria),"{00CC00}"SERVER_COIN":RP | Todos los jugadores");
                        ShowPlayerDialog(playerid, D_REGALOS4Q, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
                    }
                }
            }
        }
   		case D_REGALOS4Q:
	    {
	        if(response)
	        {
	            if(!IsNumeric(inputtext) || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numérico.");
				new value2 = strval(inputtext), value = PlayerTemp[playerid][pSeleccion_Regalos_Jugador];
				switch(PlayerTemp[playerid][pSeleccion_Regalos_Staff])
	            {
					case 1:
					{
						if(!IsPlayerNPC(value))
						{
							new titulo[40];
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 1) PlayerInfo[value][pTranquilizantes] -= value2,titulo = "tranquilizantes";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 2) PlayerInfo[value][pMedicamentos] -= value2,titulo = "medicamentos";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 3) PlayerInfo[value][pCrack] -= value2,titulo = "gramos de crack";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 4) PlayerInfo[value][pMarihuana] -= value2,titulo = "gramos de marihuana";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 5) PlayerInfo[value][pCaramelos] -= value2,titulo = "caramelos";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 6) PlayerInfo[value][pMateriales] -= value2,titulo = "piezas de armas";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) PlayerInfo[value][pPatines] = 1;
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 8) DarDinero(value, value2),titulo = "$ dólares";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 9) PlayerInfo[value][Totems] -= value2,titulo = "totems";
							if(PlayerTemp[playerid][pSeleccion_Regalos] == 10) PlayerInfo[value][Moneda] -= value2,titulo = ""SERVER_COIN"";
							if(PlayerTemp[playerid][pSeleccion_Regalos] > 0)
							{
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) MensajeEx(value,-1,"{FFFFFF}El administrador %s te quito {00FF00}unos patines{FFFFFF}.",PlayerName(playerid));
								else MensajeEx(value,-1,"{FFFFFF}El administrador %s te quito {00FF00}%s %s{FFFFFF}.",PlayerName(playerid), Numeros(value2), titulo);
							}
						}
				 	}
         			case 2:
         			{
						foreach(new i : Player)
						{
						    if(!IsPlayerNPC(i))
							{
								new titulo[40];
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 1) PlayerInfo[i][pTranquilizantes] -= value2,titulo = "tranquilizantes";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 2) PlayerInfo[i][pMedicamentos] -= value2,titulo = "medicamentos";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 3) PlayerInfo[i][pCrack] -= value2,titulo = "gramos de crack";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 4) PlayerInfo[i][pMarihuana] -= value2,titulo = "gramos de marihuana";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 5) PlayerInfo[i][pCaramelos] -= value2,titulo = "caramelos";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 6) PlayerInfo[i][pMateriales] -= value2,titulo = "piezas de armas";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 7) PlayerInfo[i][pPatines] = 1;
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 8) DarDinero(i, value2),titulo = "$ dólares";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 9) PlayerInfo[i][Totems] -= value2,titulo = "totems";
								if(PlayerTemp[playerid][pSeleccion_Regalos] == 10) PlayerInfo[i][Moneda] -= value2,titulo = ""SERVER_COIN"";
								if(PlayerTemp[playerid][pSeleccion_Regalos] > 0)
								{
									if(PlayerTemp[playerid][pSeleccion_Regalos] == 5) MensajeEx(i,-1,"{FFFFFF}El administrador %s te quito {00FF00}unos patines{FFFFFF}.",PlayerName(playerid));
									else MensajeEx(i,-1,"{FFFFFF}El administrador %s te quito {00FF00}%s %s{FFFFFF}.",PlayerName(playerid), Numeros(value2), titulo);
								}
                            }
                        }
                    }
                    default: return 1;
                }
                PlayerTemp[playerid][pSeleccion_Regalos] = 0;
                PlayerTemp[playerid][pSeleccion_Regalos_Staff] = 0;
                PlayerTemp[playerid][pSeleccion_Regalos_Jugador] = INVALID_PLAYER_ID;
            }
        }
        case GPS:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: ShowPlayerDialog(playerid,GPS1, DIALOG_STYLE_LIST,"GPS: Selecciona un concesionario","Wang Cars LS\nCoches baratos\nGrotti\nCoutt and Schutz\nWang Cars SF","Seleccionar","Cerrar");
                    case 1: ShowPlayerDialog(playerid,GPS2, DIALOG_STYLE_LIST,"GPS: Selecciona un trabajo", "Armero\nCamionero\nMédico\nTaxista\nGuardaespaldas\nMecánico\nBasurero\nLocutor de radio\nTransportista\nMinero\nPescador\nProstitución", "Seleccionar","Cerrar");
                    case 2: ShowPlayerDialog(playerid,GPS3, DIALOG_STYLE_LIST,"GPS: Selecciona una tienda de ropa","Sub Urban\nZIP\nBinco\nVictim\nDidier Sachz\nPro Laps","Seleccionar","Cerrar");
                    case 3: ShowPlayerDialog(playerid,GPS4, DIALOG_STYLE_LIST,"GPS: Selecciona un banco","Banco central de Los Santos\nBanco central de San Fierro\nBanco central de Las Venturas","Seleccionar","Cerrar");
                    case 4: ShowPlayerDialog(playerid,GPS5, DIALOG_STYLE_LIST,"GPS: Selecciona una tienda 24/7","24/7 en Los Santos\n24/7 en San Fierro","Seleccionar","Cerrar");
                    case 5: ShowPlayerDialog(playerid,GPS6, DIALOG_STYLE_LIST,"GPS: Selecciona un edificio","Edificio Municipal de los santos\nEscuela de aviacion\nDepartamento de policía de Los Santos","Seleccionar","Cerrar");
                    case 6: ShowPlayerDialog(playerid,GPS7, DIALOG_STYLE_LIST,"GPS: Selecciona una ferreteria","Las Venturas - The Strip\nLas Venturas - Creek\nLas Venturas - El Quebrado","Seleccionar","Cerrar");
                    case 7: ShowPlayerDialog(playerid,GPS8, DIALOG_STYLE_LIST,"GPS: Selecciona una granja","The Farm\nLeafy Hollow","Seleccionar","Cerrar");
                    case 8: ShowPlayerDialog(playerid,GPS9, DIALOG_STYLE_LIST,"GPS: Selecciona una iglesia","Iglesia LV","Seleccionar","Cerrar");
					case 9: PosicionGPS(playerid, 1376.8839,-1795.0229,13.5514, 5.0); // Tienda "SERVER_COIN"
					case 10: PosicionGPS(playerid, 1134.0157,1226.6501,10.8203, 5.0); // Tuning
                }
            }
        }
        case GPS1: // Concesionario
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,1494.2202,-1743.4330,13.5469,7.0); //Wang Car LS
                    case 1: PosicionGPS(playerid,1657.7146,-1882.3820,13.5520,7.0); //Coches Baratos
                    case 2: PosicionGPS(playerid,557.5392,-1256.9833,17.2422,7.0); //Grotti
                    case 3: PosicionGPS(playerid,2127.8708,-1122.4624,25.3704,7.0); //cout and schutz
                    case 4:PosicionGPS(playerid,-1991.3212,288.4648,34.0322,7.0); //wang cars SF
                }
            }
        }
        case GPS2: // Trabajos
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,2237.5837,-2214.2102,13.5469,5);
                    case 1: PosicionGPS(playerid,-1722.7408,-65.1257,3.5547,5);
                    case 2: PosicionGPS(playerid,1189.0481,-1361.8744,13.5550,5);
                    case 3: PosicionGPS(playerid,1743.3903,-1860.9901,13.5781,5);
                    case 4: PosicionGPS(playerid,2221.8628,-1715.7574,13.3314,5);
                    case 5: PosicionGPS(playerid,114.7220,-151.4292,1.5781,5);
                    case 6: PosicionGPS(playerid,-174.5626,-1623.9821,3.0859,5);
                    case 7: PosicionGPS(playerid,642.6858,-1357.0409,13.5688,5);
                    case 8: PosicionGPS(playerid,1387.1842,1181.7040,10.6848,5);
                    case 9: PosicionGPS(playerid,-381.0360,2206.9233,42.3689,5);
                    case 10: PosicionGPS(playerid,2785.7610,-2572.1555,3.1600,5);
                    case 11: PosicionGPS(playerid,-2181.3860,714.7617,53.8915,5);
                    case 12: PosicionGPS(playerid,2014.8400,1150.4700,10.9203,5);
                }
            }
        }
        case GPS3: //Tiendas de ropa
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,2112.9199,-1217.4652,23.8047,5); // Sub Urban
                    case 1: PosicionGPS(playerid,1451.8942,-1155.9928,23.6642,5); // ZIP
                    case 2: PosicionGPS(playerid,2245.3401,-1661.1309,15.4690,5); // Binco
                    case 3: PosicionGPS(playerid,454.1436,-1501.9719,30.8730,5);  // Victim
                    case 4: PosicionGPS(playerid,448.6999,-1479.9546,30.6317,5);  // Didier Sachz
                    case 5: PosicionGPS(playerid,507.7714,-1357.4158,15.9609,5);  // Pro Laps
                }
            }
        }
        case GPS4: //Bancos
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,1462.1840,-1019.6361,24.6326, 5);
                    case 1: PosicionGPS(playerid,-1580.7654,859.5545,7.4429, 5);
                    case 2: PosicionGPS(playerid,2433.5603,2289.6563,10.8203, 5);
                }
            }
        }
        case GPS5: //24/7's
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,1827.7954,-1842.4980,13.5781,5);
                    case 1: PosicionGPS(playerid,-2443.0625,742.8177,35.0156,5);
                }
            }
        }
        case GPS6: //Edificios
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,1793.8019,-1278.0016,13.4688,5);
                    case 1: PosicionGPS(playerid,1451.4640,-2286.0088,13.5469,5);
                    case 2: PosicionGPS(playerid,1535.3855,-1675.2513,13.3828,5);
                }
            }
        }
        case GPS7: //Ferreterias
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,2110.9561,2165.3223,10.8203,5);
                    case 1: PosicionGPS(playerid,2861.2434,2430.7300,11.0690,5);
                    case 2: PosicionGPS(playerid,-1480.9446,2591.6626,55.8359,5);
                }
            }
        }
        case GPS8: //Granjas
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,-1072.1873,-1202.1198,129.2188,5);
                    case 1: PosicionGPS(playerid,-1103.5070,-1620.7333,76.3672,5);
                }
            }
        }
        case GPS9: //Iglesias
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: PosicionGPS(playerid,2492.1379,925.2357,11.0234,5);
                }
            }
        }
        case CCCOBJETOS:
        {
			if(response)
			{
				new precio, titulo[25], objeto;
				if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
				switch(listitem)
				{
					case 0: titulo = "una guitarra",precio = 4600,objeto = 19317;
					case 1: titulo = "una Tabla de Surf T1",precio = 2400,objeto = 2404;
					case 2: titulo = "un Maletin",precio = 4800,objeto = 1210;
					case 3: titulo = "una Tabla de Surf T2",precio = 2400,objeto = 2405;
					case 4: titulo = "un Bajo",precio = 4200,objeto = 19318;
				}
				if(PlayerInfo[playerid][pDinero] < precio) return MensajeEx(playerid,-1,"No tienes el dinero suficiente ({00F000}$%d{FFFFFF})",precio);
				MensajeEx(playerid, -1, "Compraste %s por {00F000}$%s",titulo,precio);
				if(listitem == 2) SetPlayerAttachedObject(playerid,4,objeto, 6, 0.289999, 0.079999, -0.000000, 0.000000, -100.000000, 1.000000);
				else SetPlayerAttachedObject(playerid,4,objeto,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
				Objeto[playerid] = objeto;
				QuitarDinero(playerid, precio);
			}
			return 1;
		}
		case COMPRAR_PRENDA:
        {
            if(response)
            {
                new slot = GetEmptyPlayerToySlot(playerid);
                if(!PlayerInfo[playerid][pVip] && slot >= 3) return MensajeEx(playerid, -1, "{CCCCCC}¡Los jugadores {b1fc6f}VIP 2{CCCCCC} pueden tener hasta %d prendas.", MAX_PTOYS);
                if(slot == -1) return SendClientMessage(playerid, -1, "{CCCCCC}No tienes más espacio para prendas, elimina alguna si quieres comprar otra.");
                PlayerToys[playerid][slot][pToyValid] = true;
                format(PlayerToys[playerid][slot][pToyName], 24, "%s", GetNameObjeto(PrendaMarcada[playerid]));
                PlayerToys[playerid][slot][pUsando] = false;
                PlayerToys[playerid][slot][pModelID] = PrendaMarcada[playerid];
                PlayerToys[playerid][slot][pBone] = -1;
                PlayerToys[playerid][slot][pOffsetX] = 0.0;
                PlayerToys[playerid][slot][pOffsetY] = 0.0;
                PlayerToys[playerid][slot][pOffsetZ] = 0.0;
                PlayerToys[playerid][slot][pRotX] = 0.0;
                PlayerToys[playerid][slot][pRotY] = 0.0;
                PlayerToys[playerid][slot][pRotZ] = 0.0;
                PlayerToys[playerid][slot][pScaleX] = 1.0;
                PlayerToys[playerid][slot][pScaleY] = 1.0;
                PlayerToys[playerid][slot][pScaleZ] = 1.0;
                PlayerToys[playerid][slot][pColor1] = 0;
                PlayerToys[playerid][slot][pColor2] = 0;
                RegisterNewPlayerToy(playerid, slot);
                PlayerInfo[playerid][Totems] -= 3;
				SendClientMessage(playerid, -1, "{DBED15}!Felicidades!{FFFFFF} compraste una prenda, ahora puedes usar {DBED15}/prendas");
            }
        }
        case REGLAS:
        {
            if(response)
            {
                new string2[1200];
                string2="{DBED15}Usar canales correspondientes\n{FFFFFF}Hay 2 tipos de canales {00CCFF}Dentro del personaje (DP){FFFFFF} y {00CCFF}Fuera del personaje (FP){FFFFFF}, es importante saber diferenciarlos y respetarlos.\n\n- Los {00CCFF}canales DP{FFFFFF} son todos aquellos que usamos dentro del Rol del personaje, el chat normal, el chat\npor radio/telefono, por mensaje de texto y aquellos para indicar acciones o resaltar ({DBED15}/y /g /p /s{FFFFFF}) ({DBED15}!{FFFFFF} en chat bandas)\n\n- {00CCFF}Los canales FP{FFFFFF} son todos aquellos que se utilizan para hablar estando fueral del personaje, estos\nincluyen al chat de ayuda ({DBED15}/n{FFFFFF}), en el canal de reportes ({DBED15}/reportar{FFFFFF}) y el comando más comun para la gente cercana {DBED15}/b{FFFFFF} (!! en el chat de bandas).\n\n- {00CCFF}Información Fuera del Personaje (IFP){FFFFFF}: Esta información es aquella que sabemos, pero que {00CCFF}DP{FFFFFF}, no podemos utilizar, ejemplo:\nTodos vemos el nombre de las personas arrriba de ellos, pero esto no quiere decir que {00CCFF}DP{FFFFFF} lo sepamos,\nsi esta persona nunca nos dijo su nombre, no lo conocemos y por lo tanto, no podemos llamarla por tal nombre.\n";
                ShowPlayerDialog(playerid, REGLAS2, DIALOG_STYLE_MSGBOX, "Reglas del servidor", string2, "Siguiente","");
            }
        }
        case REGLAS2:
        {
            if(response)
            {
                new string2[700];
                string2="{DBED15}Agredir sin razon (ASR)\n{FFFFFF}Esta completamente prohibido el {00CCFF}ASR{FFFFFF} ya sea golpeando con puños,\narmas blancas, disparando o con un vehiculo\n\n{DBED15}Acciones imposibles (AI)\n{FFFFFF}Esta implica realizar acciones que no son realistas, y esto es totalmente prohibido.\nEjemplo: Ir parado arriba de un auto, empujar un camión corriendo, entre otros.\n\n{DBED15}Atropellar con vehiculo (AV)\n{FFFFFF}Esta prohibido chocar con el vehículo intencionalmente para matar o herir a alguien,\nya sea manteniendo el auto arriba de la persona hasta que muera, o pisándolo varias veces hasta matarlo.";
                ShowPlayerDialog(playerid, REGLAS4, DIALOG_STYLE_MSGBOX, " Reglas del juego",string2,"Aceptar","");
            }
        }
        case COMPRARLICENCIA:
        {
            if(response)
            {
                if(PlayerInfo[playerid][Moneda] < 20) return SendClientMessage(playerid,-1,"Necesitas 20 "SERVER_COIN" para comprar la licencia.");
                PlayerInfo[playerid][Moneda] -= 20;
                PlayerInfo[playerid][pLicencia] = 1;
                new dia,mes,ano,Query2[200];
                getdate(dia,mes,ano);
                PlayerInfo[playerid][findialicencia] = dia;
                PlayerInfo[playerid][finmeslicencia] = mes+2;
                PlayerInfo[playerid][finanolicencia] = ano;
                mysql_format(handle_db, Query2, sizeof(Query2), "UPDATE `usuarios` SET `FinDiaL`='%d',`FinMesL`='%d',`FinAnoL`='%d' WHERE `Username`='%s'",dia,mes+2,ano,PlayerName(playerid));
                mysql_tquery(handle_db, Query2);
                SendClientMessage(playerid, -1, "{00CC00}Adquiriste una licencia de piloto válida por 2 meses.");
            }
        }
		case HERRAMIENTAS:
		{
			if(response)
			{
				new precio, objetocomprado, titulo[20];
				if(PlayerInfo[playerid][pMartillo] == listitem+1) return SendClientMessage(playerid,-1,"Ya tienes un martillo.");
				else if(PlayerInfo[playerid][pDestornillador] == listitem+1) return SendClientMessage(playerid,-1,"Ya tienes un destornillador.");
				else if(PlayerInfo[playerid][pBarreta] == listitem+1) return SendClientMessage(playerid,-1,"Ya tienes una barreta.");
				else if(PlayerInfo[playerid][pBalde] == listitem+1) return SendClientMessage(playerid,-1,"Ya tienes un balde.");
				switch(listitem)
				{
					case 0: objetocomprado = 0,precio = 20, titulo = "un martillo";
					case 1: objetocomprado = 1,precio = 25, titulo = "un destornillador";
					case 2: objetocomprado = 2,precio = 60, titulo = "una barreta";
					case 3: objetocomprado = 3,precio = 120, titulo = "un balde";
				}
				if(PlayerInfo[playerid][pDinero] < precio) return MensajeEx(playerid,-1,"No tienes el dinero suficiente ($%d)",precio);
				switch(objetocomprado)
				{
					case 0: PlayerInfo[playerid][pMartillo] = 1;
					case 1: PlayerInfo[playerid][pDestornillador] = 2;
					case 2: PlayerInfo[playerid][pBarreta] = 3;
					case 3: PlayerInfo[playerid][pBalde] = 4;
				}
				MensajeEx(playerid,-1,"Compraste %s.",titulo);
				QuitarDinero(playerid, precio);
				return 1;
			}
		}
        case REPORTSMENU:
		{
			if(response)
			{
				if(CancelReport[playerid] == listitem) return 1;
				new reportid = ListItemReportId[playerid][listitem];
				if(Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese reporte ya fue revisado!");
				if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
				{
					SendClientMessage(playerid, COLOR_GREY, "El que reportó se ha desconectado !");
					Reports[reportid][ReportFrom] = 999;
					Reports[reportid][BeingUsed] = 0;
					return 1;
				}
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pAdmin] > 2)
					{
						format(string, sizeof(string), "{00CC00}%s{FFFFFF} aceptó el reporte de {00CC00}%s{FFFFFF} (ID: %i a ID: %i, #%i).", PlayerName(playerid), PlayerName(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][ReportadoID], reportid);
    	    			SendClientMessage(i,-1,string);
    	    			IDReporte[playerid] = Reports[reportid][ReportadoID];
					}
				}
				format(string, sizeof(string), "{00CC00}El administrador %s está viendo el reporte.", PlayerName(playerid));
				SendClientMessage(Reports[reportid][ReportFrom], -1, string);
				Reports[reportid][CheckingReport] = playerid;
				Reports[reportid][BeingUsed] = 0;
			}
		}
        case ENTREGARSE:
		{
   			if(response)
			{
				new dinero = 0,cargos;
				switch(PlayerInfo[playerid][pCargos])
				{
					case 1: dinero = 500,cargos = 0;
					case 2: dinero = 1000,cargos = 1;
					case 3: dinero = 1500,cargos = 2;
					case 4: dinero = 2000,cargos = 3;
					case 5: dinero = 2500,cargos = 4;
				}
				if(dinero != 0)
				{
					if(PlayerInfo[playerid][pDinero] < dinero) return MensajeEx(playerid,-1,"Necesitas {00CC00}$%d{FFFFFF} para poder pagar la fianza.",dinero);
					QuitarDinero(playerid, dinero);
					PlayerInfo[playerid][pCargos] = cargos;
					SetPlayerWantedLevel(playerid, cargos);
					MensajeEx(playerid, -1, "Pagaste la fianza de {00CC00}$%d{FFFFFF} y se te redujo los cargos.",dinero);
					if(dinero == 500) return 1;
					if(PlayerInfo[playerid][pCargos] > 0)
					{
						if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
						else TipoPrision[playerid] = 1;
					}
				}
				SetTimerEx("Encerrando",500,false,"d",playerid);
			}
		}
        case DOMICILIARIA:
        {
            if(response) EnvioDomiciliaria(playerid);
        }
        case BUSCARCOCHE:
        {
            if(response)
            {
                if(isnull(inputtext)) return 1;
                ShowPlayerDialog(playerid, BUSCARCOCHE2, DIALOG_STYLE_INPUT, "Buscar información", "Patente del vehículo:", "Buscar", "Cancelar");
            }
        }
        case BUSCARCOCHE2:
        {
            if(response)
            {
                new str[50], modelo;
                ObtenerVehiculo(playerid, inputtext);
                modelo = GetVehicleModel(AutoBuscado[playerid]);

                format(str, sizeof(str), "%s (%s) - Dueño: %s", NombreAuto[modelo-400], PatenteBuscada[playerid], PlayerInfo[JugadorBuscado[playerid]][Nickname]);
                ShowPlayerDialog(playerid, BUSCARCOCHE3, DIALOG_STYLE_LIST, "Información del vehículo", str, "Opciones", "Salir");
            }
        }
        case BUSCARCOCHE3:
        {
            if(response)
            {
                ShowPlayerDialog(playerid, BUSCARCOCHE4, DIALOG_STYLE_LIST, "Opciones", "Localizar\nInformar como vehículo robado", "Aceptar", "Cancelar");
            }
        }
        case BUSCARCOCHE4:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new modelo, mensaje[150], zone[MAX_ZONE_NAME];
                        modelo = GetVehicleModel(AutoBuscado[playerid]);
                        GetCar3DZone(AutoBuscado[playerid], zone, sizeof(zone));
                        format(mensaje, sizeof(mensaje), "Detalles [ Vehículo: {e000ff}%s {FFFFFF}| Patente: {00CCFF}%s{FFFFFF} | Localización: {2EA3F5}%s{FFFFFF} ]", NombreAuto[modelo-400], PatenteBuscada[playerid], zone);
                        SendClientMessage(playerid,-1, mensaje);
                        SendClientMessage(playerid,-1,"{e000ff}Se ha marcado en el mapa la ubicación actual del vehículo.");
                        new Float:x,Float:y,Float:z;
                        GetVehiclePos(AutoBuscado[playerid], x,y,z);
                        SetPlayerCheckpoint(playerid,x,y,z,7.0);
                    }
                    case 1:
                    {
                        new modelo, mensaje[150];
                        modelo = GetVehicleModel(AutoBuscado[playerid]);
                        format(mensaje, 150,"{3399FF}[Central de Policía]{FFFFFF} reportando: Se busca %s robado, patente %s.", NombreAuto[modelo-400], PatenteBuscada[playerid]);
                        SendRadioMessagePatrulla(1,-1,mensaje);
                        new Float:x,Float:y,Float:z;
                        GetVehiclePos(AutoBuscado[playerid], x,y,z);
                        SetPlayerCheckpoint(playerid,x,y,z,7.0);
                    }
                }
            }
        }
        case GeoLocalization:
        {
            if(response)
			{
				new car = ObtenerOrdenAuto(playerid,listitem),Float:x,Float:y,Float:z,modelo;
				
				modelo = GetVehicleModel(autos[car][playerid]);
				GetVehiclePos(autos[car][playerid], x,y,z);
				if(GetVehicleInterior(autos[car][playerid]) != 0)
				{
					for(new e = 0; e < MAX_GARAGES; e++)
					{
						if(GetVehicleInterior(autos[car][playerid]) == Estacionamientos[e][eInterior] && GetVehicleVirtualWorld(autos[car][playerid]) == Estacionamientos[e][eMundoVirtual])
						{
							if(GetVehicleInterior(autos[car][playerid]) == 30 && GetVehicleVirtualWorld(autos[car][playerid]) == 4) MensajeEx(playerid,-1,"El vehículo se encuentra en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {00CCFF}Easter Basin Docks{FFFFFF}.",ObtenerNivelEsta(z));
							else SendClientMessage(playerid,-1,"Tu vehículo se encuentra dentro de un estacionamiento.");
							SendClientMessage(playerid,-1,"Se ha marcado en el mapa la ubicación de entrada del mismo.");
							SetPlayerCheckpoint(playerid,Estacionamientos[e][PosX],Estacionamientos[e][PosY],Estacionamientos[e][PosZ],5.0);
							return 1;
						}
						else
						{
							/*for(new c = 0; c < MAX_PCASAS; c++)
							{
								if(GetVehicleInterior(autos[car][playerid]) == 4 && GetVehicleVirtualWorld(autos[car][playerid]) == PlayerInfo[playerid][CasaID][c]+1)
								{
									SendClientMessage(playerid,-1,"Tu vehículo se encuentra dentro de un garaje.");
									SendClientMessage(playerid,-1,"Se ha marcado en el mapa la ubicación de entrada del mismo.");
									SetPlayerCheckpoint(playerid,PropInfo[PlayerInfo[playerid][CasaID][c]][pGX],PropInfo[PlayerInfo[playerid][CasaID][c]][pGY],PropInfo[PlayerInfo[playerid][CasaID][c]][pGZ],5.0);
									return 1;
								}
							}*/
						}
					}
				}
				else
				{
					SetPlayerCheckpoint(playerid,x,y,z, 5.0);
					new zone[MAX_ZONE_NAME];
					GetCar3DZone(autos[car][playerid], zone, sizeof(zone));
					SendClientMessage(playerid,-1,"{DBED15}Se ha marcado en el mapa la ubicación actual del vehículo.");
					MensajeEx(playerid,-1, "Detalles [ Vehículo: {DBED15}%s {FFFFFF}| Patente: {00CCFF}%s{FFFFFF} | Localización: {2EA3F5}%s{FFFFFF} ]", NombreAuto[modelo-400], Patente[playerid][car], zone);
					Localizando[playerid] = 1;
					return 1;
				}
			}
        }
        case LLAMAGRUA:
		{
			if(!response)
			{
				new mensaje[70];
				format(mensaje, sizeof(mensaje), "%s (por celular) dice: No, muchas gracias.", PlayerName(playerid));
				ProxDetector(15.0, playerid, mensaje, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				ColgarLaLlamada(playerid);
				return 0;
			}
			MensajeEx(playerid,-1,"%s (por celular) dice: Sí, por favor.", PlayerName(playerid));
			SetTimerEx("LlamadaGrua2",2000,false,"d",playerid);
		}
		case LLAMAGRUA2:
		{
			if(!response)
			{
				new mensaje[70];
				format(mensaje, sizeof(mensaje), "%s (por celular) dice: Perdón, ya no lo necesito.", PlayerName(playerid));
				ProxDetector(15.0, playerid, mensaje, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				ColgarLaLlamada(playerid);
				return 0;
			}
			switch(listitem)
            {
				case 0: MensajeEx(playerid,-1,"%s (por celular) dice: Al estacionamiento registrado con anterioridad.", PlayerName(playerid));
				case 1: MensajeEx(playerid,-1,"%s (por celular) dice: Al estacionamiento municipal.", PlayerName(playerid));
				case 2: MensajeEx(playerid,-1,"%s (por celular) dice: Al estacionamiento marítimo.", PlayerName(playerid));
			}
			tipogrua[playerid] = listitem+1;
			SetTimerEx("LlamadaGrua3",2000,false,"d",playerid);
		}
		case LLAMAGRUA3:
		{
			if(!response)
			{
			    new mensaje[70];
				format(mensaje, sizeof(mensaje), "%s (por celular) dice: Perdón, no usaré el servicio.", PlayerName(playerid));
			    ProxDetector(15.0, playerid, mensaje, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				ColgarLaLlamada(playerid);
			    return 0;
			}
			else
			{
				new car = ObtenerOrdenAuto(playerid,listitem);
				
				if(VehicleInfo[playerid][car][vModelo] > 0) MensajeEx(playerid,-1,"%s (por celular) dice: %s.",PlayerName(playerid),Patente[playerid][car]),SetTimerEx("LlamadaGrua4",2000,false,"dd",playerid, car);
				else SendClientMessage(playerid, -1, "{00d8ff}[Servicio de grúa]{FFFFFF} Angélica: No tenemos ningún registro de ese vehículo, nos vemos."),ColgarLaLlamada(playerid);
			}
		}
        case LocalizarP:
        {
            if(!response) return 0;
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerInfo[playerid][CasaID] > 0)//si la casa sta en la ranura 1
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID])
                            {
                                SetPlayerCheckpoint(playerid,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],4.0);
                                break;
                            }
                        }
                    }
                    else if(PlayerInfo[playerid][CasaID2] != 0)//lo contrario
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                            {
                                SetPlayerCheckpoint(playerid,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],4.0);
                                break;
                            }
                        }
                    }
                }
                case 1://en caso de que la casa 2 este en la ranura 2
                {
                    if(PlayerInfo[playerid][CasaID2] > 0)
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                            {
                                SetPlayerCheckpoint(playerid,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],4.0);
                                break;
                            }
                        }
                    }
                    else if(PlayerInfo[playerid][CasaID] > 0)//lo contrario
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID])
                            {
                                SetPlayerCheckpoint(playerid,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],4.0);
                                break;
                            }
                        }
                    }
                }
            }
        }
        case DIALOGO_FRECUENCIAS:
		{
			if(response)
			{
				LimpiarFrecuencia(playerid,Frecuencia[playerid]);
				MensajeEx(playerid, -1, "Has seleccionado la frecuencia número %d, para hablar escribir !DP !!FP",listitem+1);
				Frecuencia[playerid] = listitem+1;
				frecuencias[listitem+1] += 1;
				return 1;
			}
		}
        case DIALOGO_LORO:
        {
            if(response)
            {
                switch(listitem)
				{
                    case 0: ShowPlayerDialog(playerid, DIALOGO_LORO2, DIALOG_STYLE_INPUT, "Enseñar frase al loro", "Ingresa una frase.", "Aceptar", "Cancelar");
                    case 1:
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "El loro no hablará hasta que le enseñes otra frase.");
                        PlayerTemp[playerid][LoroHabla] = false;
                        Tiempos[playerid][pTIME_LORO] = gettime();
                    }
                }
            }
            return 1;
        }
        case DIALOGO_LORO2:
        {
            if(response)
            {
                
                format(FraseLoro[playerid], 70, "%s",inputtext);
                SendClientMessage(playerid, COLOR_WHITE, "El loro aprendió a repetir la frase.");
                PlayerTemp[playerid][LoroHabla] = true;
                Tiempos[playerid][pTIME_LORO] = gettime() + 60;
            }
            return 1;
        }
        case VENDERBZ:
        {
            if(response)
            {
                new string5[200];
                format(string5, 256, "Le ofrecistes %d "SERVER_COIN" a {00CCFF}%s{FFFFFF} por {00CC00}$%d",EVOfrecidos[LeOfreci[playerid]],PlayerInfo[LeOfreci[playerid]][Nickname],dineropedido[LeOfreci[playerid]]);
                SendClientMessage(playerid, -1,string5);
                YaOfrecio[playerid] = 1;
                idTimerOfertaPerdida[LeOfreci[playerid]] = SetTimerEx("OfertaPerdida", 60000, false, "d", LeOfreci[playerid]);
                Tiempos[playerid][TiempoVenta] = gettime() + 60;
                format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece %d "SERVER_COIN" por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar "SERVER_COIN"", PlayerInfo[playerid][Nickname],EVOfrecidos[LeOfreci[playerid]],dineropedido[LeOfreci[playerid]]);
                SendClientMessage(LeOfreci[playerid], -1, string);
            }
        }
        case ELEVADORSAPD:
        {
        	if(response)
         	{
				NoTeleportHack(playerid);
				switch(listitem)
				{
					case 0: { switch(GetPlayerVirtualWorld(playerid)) { case 1: SetPosEx(playerid,1524.4830,-1677.9261,6.2188,0,0,0); } }
					case 1: { switch(GetPlayerVirtualWorld(playerid)) { case 1: SetPosEx(playerid,1558.0905,-1675.5868,28.3955,0,0,0); } }
  				}
        	}
        }
        case ELEVADORGARAGE:
        {
            if(response)
            {
                NoTeleportHack(playerid);
                switch(listitem)
                {
                    case 0: SetPosEx(playerid,265.9726,115.5081,1004.6172,0,10,1);
                    case 1: SetPosEx(playerid,1558.0905,-1675.5868,28.3955,0,0,0);
                }
            }
        }
        case ELEVADORTEJADO:
        {
            if(response)
            {
                NoTeleportHack(playerid);
                switch(listitem)
                {
                    case 0: SetPosEx(playerid,265.9726,115.5081,1004.6172,0,10,1);
                    case 1: SetPosEx(playerid,1524.4830,-1677.9261,6.2188,0,0,0);
                }
            }
        }
        case DASCENSOR:
        {
            if(response)
            {
                NoTeleportHack(playerid);
                switch(listitem)
                {
                    case 0: SetPlayerPosEx(playerid, 2116.6707,2416.5557,10.8432); case 1: SetPlayerPosEx(playerid, 2116.6707,2416.5557,14.8432);
                    case 2: SetPlayerPosEx(playerid, 2116.6707,2416.5557,18.8432); case 3: SetPlayerPosEx(playerid, 2116.6707,2416.5557,22.8432);
                    case 4: SetPlayerPosEx(playerid, 2116.6707,2416.5557,27.8432); case 5: SetPlayerPosEx(playerid, 2116.6707,2416.5557,31.8432);
                    case 6: SetPlayerPosEx(playerid, 2116.6707,2416.5557,36.8432); case 7: SetPlayerPosEx(playerid, 2116.6707,2416.5557,40.8432);
                    case 8: SetPlayerPosEx(playerid, 2116.6707,2416.5557,44.8432); case 9: SetPlayerPosEx(playerid, 2116.6707,2416.5557,48.8432);
                }
                SetPlayerFacingAngle(playerid, 93.8111);
                PlayerPlaySoundEx(playerid, 6401, 0.0, 0.0, 0.0);
            }
        }
        case TALLER:
        {
            new autoid = GetPlayerVehicleID(playerid);
			if(response)
			{
				
				for(new a = 0; a < MAX_PAUTOS; a++)
				{
					if(autos[a][playerid] == autoid)
					{
						VehicleInfo[playerid][a][vColor1] = strval(inputtext);
						ChangeVehicleColor(autoid, strval(inputtext),VehicleInfo[playerid][a][vColor2]);
						SendClientMessage(playerid, -1, "Cambiaste el color primario de tu vehículo");
						ShowPlayerDialog(playerid, TALLER2, DIALOG_STYLE_INPUT, "Color secundario","{FFFFFF}Coloca el número del color secundario que deseas utilizar en tu vehiculo","Pintar","Cancelar");
						MostrarVelocimetro(playerid);
						return 1;
					}
				}
				return 1;
			}
        }
        case TALLER2:
        {
            new autoid = GetPlayerVehicleID(playerid);
			if(response)
			{
				
				for(new a = 0; a < MAX_PAUTOS; a++)
				{
					if(autos[a][playerid] == autoid)
					{
						VehicleInfo[playerid][a][vColor2] = strval(inputtext);
						ChangeVehicleColor(autoid, VehicleInfo[playerid][a][vColor1],VehicleInfo[playerid][a][vColor2]);
						mysql_format(handle_db, Query, 250,"UPDATE `p_vehicles` SET `Color1`='%d', `Color2`='%d' WHERE `ID`='%d'",VehicleInfo[playerid][a][vColor1],VehicleInfo[playerid][a][vColor2],VehicleInfo[playerid][a][v_DBID]);
						mysql_tquery(handle_db, Query);
						SendClientMessage(playerid, -1, "Cambiaste el color secundario de tu vehículo");
						PlayerInfo[playerid][Moneda] -= 3;
						MostrarVelocimetro(playerid);
						return 1;
					}
				}
				return 1;
			}
        }
        case DIALOG_ROPA:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(PlayerInfo[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"No eres hombre");
                        ShowModelSelectionMenu(playerid, RopaHombre, "Selecciona tu nueva ropa");
                    }
                    case 1:
                    {
                        if(PlayerInfo[playerid][pSexo] == 1) return SendClientMessage(playerid, -1,"No eres mujer");
                        ShowModelSelectionMenu(playerid, RopaMujer, "Selecciona tu nueva ropa");
                    }
                }
            }
        }
        case D_COLOR1:
        {
            if(!response) ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
            if(response) ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
        }
        case D_COLOR2:
        {
            if(!response) ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
            if(response)
            {
                new Banda = PlayerInfo[playerid][pFaccion],ColorB = RandomColors[listitem],DB_Query[256];
                for(new id; id < MAX_BANDAS; id++)
                {
                    if(BandasInfo[id][BColor] == ColorB) return ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Color en uso, selecciona otro color", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
                }
                BandasInfo[Banda][BColor] = ColorB;
                mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `facciones` SET `Color` = '%d' WHERE `id`='%d'", BandasInfo[Banda][BColor], BandasInfo[Banda][bID]);
                mysql_tquery(handle_db, DB_Query);
                SendClientMessage(playerid,-1,"Color asignado a tu banda correctamente.");
            }
        }
        case BANCO:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        format(string,sizeof(string),"Coloca en números la cantidad que deseas retirar");
                        ShowPlayerDialog(playerid, BANCO1, DIALOG_STYLE_INPUT, "Retiro", string, "Retirar","Cancelar");
                        return 1;
                    }
                    case 1:
                    {
                        format(string,sizeof(string),"Coloca en números la cantidad que deseas depositar");
                        ShowPlayerDialog(playerid, BANCO4, DIALOG_STYLE_INPUT, "Deposito", string, "Depositar","Cancelar");
                        return 1;
                    }
                    case 2:
                    {
                        SendClientMessage(playerid,-1,"====================================================");
                        format(string,sizeof(string),"{FFFFFF}El saldo actual, de tu cuenta bancaria, es de {00CC00}$%s",Numeros(PlayerInfo[playerid][pBanco]));
                        SendClientMessage(playerid,-1,string);
                        SendClientMessage(playerid,-1,"====================================================");
                        return 1;
                    }
                    case 3:
                    {
                        if(Tiempos[playerid][TiempoDarDinero] > gettime())
                        {
                            if(Tiempos[playerid][TiempoDarDinero] - gettime() > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(Tiempos[playerid][TiempoDarDinero] - gettime()) /60, (Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
                            else if(Tiempos[playerid][TiempoDarDinero] - gettime() < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos",(Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
                            return SendClientMessage(playerid, -1,string);
                        }
                        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas nivel 3 para transferir dinero entre cuentas bancarias.");
                        ShowPlayerDialog(playerid, BANCO2, DIALOG_STYLE_INPUT, "Transferencia", "Coloca la ID del jugador al que haras la transferencia", "Transferir","Cancelar");
                        return 1;
                    }
                }
            }
        }
        case BANCO1:
        {
            if(response)
            {
                
                if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Monto inválido");
                if(PlayerInfo[playerid][pBanco] >= strval(inputtext) && IsNumeric(inputtext))
                {
                    DarDinero(playerid, strval(inputtext));
                    PlayerInfo[playerid][pBanco] -= strval(inputtext);
                    SendClientMessage(playerid,-1,"===========================================================");
                    format(string,sizeof(string),"{FFFFFF}Acabas de retirar {00CC00}$%d{FFFFFF}, ahora tu saldo es de {00CC00}$%d", strval(inputtext), PlayerInfo[playerid][pBanco]);
                    SendClientMessage(playerid,-1,string);
                    SendClientMessage(playerid,-1,"===========================================================");
                }
                else if(PlayerInfo[playerid][pBanco] < strval(inputtext))   {
                    SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero tu cuenta bancaria.");
                    SendClientMessage(playerid,-1,"Por favor, consulta tu saldo antes de intentar retirar.");   }
            }
        }
        case BANCO2:
        {
            if(response)
            {
                
                if(!IsPlayerConnected(strval(inputtext))) return SendClientMessage(playerid,-1,"No se ha encontrado esa cuenta bancaria");
                if(IsNumeric(inputtext))
                {
                    format(string,sizeof(string),"El titular de la cuenta a depositar %s, coloca el monto", PlayerInfo[strval(inputtext)][Nickname]);
                    ShowPlayerDialog(playerid, BANCO3, DIALOG_STYLE_INPUT, "Deposito", string, "Depositar", "Cancelar");
                    Deposito[playerid] = strval(inputtext);
                }
            }
        }
        case BANCO3:
        {
            if(response)
            {
                
                if(strval(inputtext) > 0 && strval(inputtext) <= 5000000 && IsNumeric(inputtext))
                {
                    if(PlayerInfo[playerid][pBanco] >= strval(inputtext))
                    {
                        PlayerInfo[playerid][pBanco] -= strval(inputtext);
                        PlayerInfo[Deposito[playerid]][pBanco] += strval(inputtext);
                        SendClientMessage(playerid,-1,"===========================================================");
                        format(string,sizeof(string),"{FFFFFF}Acabas de transferir {00CC00}$%d{FFFFFF} a %s.", strval(inputtext),PlayerInfo[Deposito[playerid]][Nickname]);
                        SendClientMessage(playerid,-1,string);
                        SendClientMessage(playerid,-1,"===========================================================");
                        format(string,sizeof(string),"((SMS de %s [333])): Recibiste una transferencia de $%d realizada por %s.",NombreBanco(playerid), strval(inputtext),PlayerInfo[playerid][Nickname]);
                        SendClientMessage(Deposito[playerid],COLOR_AMARILLO2,string);
                        new string2[200];
                        new year, month,day;
                        new hour,minuite,second;
                        getdate(year, month, day);
                        gettime(hour,minuite,second);
                        format(string2, sizeof(string2), "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minuite,second);
                        mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO `log_transacciones` (`Fecha`, `Enviador`, `Receptor`, `Monto`) VALUES ('%e','%e', '%e', '%e')", string2, PlayerInfo[playerid][Nickname], PlayerInfo[Deposito[playerid]][Nickname], inputtext);
                        mysql_tquery(handle_db, Query);
                        Deposito[playerid] = INVALID_PLAYER_ID;
                    }
                }
                else return SendClientMessage(playerid,-1,"Monto inválido");
            }
        }
        case BANCO4:
        {
            if(response)
            {
                
                if(strval(inputtext) > 0 && strval(inputtext) <= 5000000 && IsNumeric(inputtext))
                {
                    if(PlayerInfo[playerid][pDinero] >= strval(inputtext))
                    {
                        QuitarDinero(playerid, strval(inputtext));
                        PlayerInfo[playerid][pBanco] += strval(inputtext);
                        SendClientMessage(playerid,-1,"===========================================================");
                        format(string, sizeof(string), "{FFFFFF}Acabas de depositar {00CC00}$%d{FFFFFF}, ahora tu saldo es de {00CC00}$%d",strval(inputtext), PlayerInfo[playerid][pBanco]);
                        SendClientMessage(playerid,-1,string);
                        SendClientMessage(playerid,-1,"===========================================================");
                    }
                    else return SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero.");
                }
                else return SendClientMessage(playerid,-1,"Monto inválido");
            }
        }
        case VENDERAUTO:
        {
            if(response)
			{
				new sellcar[128*MAX_PAUTOS];
				for(new i = 0; i < MAX_PAUTOS; i++)
				{
					if(VehicleInfo[playerid][i][vModelo] < 400) continue;
					format(sellcar, sizeof(sellcar), "%s Vehículo: {F6E200}%s{FFFFFF} | %s | Precio: {00CC00}%s %s\n",sellcar,GetVehicleName(autos[i][playerid]),ConvertirNumero(VehicleInfo[playerid][i][vPrecio]/2), MonedaVenta2(VehicleInfo[playerid][i][vMonedaa]));
				}
				ShowPlayerDialog(playerid, VENDERAUTO2, DIALOG_STYLE_LIST, "Vehículo que deseas vender", sellcar, "Vender","Cancelar");
			}
        }
        case VENDERAUTO2:
        {
            if(response)
			{
				new car = ObtenerOrdenAuto(playerid,listitem);
				if(autos[car][playerid] == 0) return SendClientMessage(playerid,-1,"No puedes vender un vehículo que no existe.");
				
				new query[900],modelo = GetVehicleModel(autos[car][playerid]);
				switch(VehicleInfo[playerid][car][vMonedaa])
				{
					case 0: MensajeEx(playerid, -1, "Muchas gracias por vendernos tu {DBED15}%s{FFFFFF} ({009BE4}%s{FFFFFF}). Te pagamos: {00CC00}$%s{FFFFFF}.",NombreAuto[modelo-400], Patente[playerid][car], ConvertirNumero(VehicleInfo[playerid][car][vPrecio]/2)),DarDinero(playerid, VehicleInfo[playerid][car][vPrecio]/2);
					case 1: MensajeEx(playerid, -1, "Muchas gracias por vendernos tu {DBED15}%s{FFFFFF} ({009BE4}%s{FFFFFF}). Te pagamos: {00CC00}%s "SERVER_COIN"{FFFFFF}.",NombreAuto[modelo-400], Patente[playerid][car], ConvertirNumero(VehicleInfo[playerid][car][vPrecio]/2)),PlayerInfo[playerid][Moneda] += VehicleInfo[playerid][car][vPrecio]/2;
				}
				mysql_format(handle_db,query, 900, "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", VehicleInfo[playerid][car][v_DBID]);
				mysql_tquery(handle_db,query);
				mysql_format(handle_db,query, 900, "DELETE FROM `p_vehicles` WHERE `ID` = '%d' AND `UserID` = '%d'",VehicleInfo[playerid][car][v_DBID],PlayerInfo[playerid][pID]);
				mysql_tquery(handle_db,query);
				new temp_VehicleInfo[vInfo];
				VehicleInfo[playerid][car] = temp_VehicleInfo;
				for(new i = 1; i < 11; i++) EspacioBaul[playerid][car][i] = 0;
				for(new c = 0; c < 13; c++) Componentes[playerid][c][car] = 0;
				bloqueado[autos[car][playerid]] = 0;
				alarma[autos[car][playerid]] = 0;
				MotorAuto[autos[car][playerid]] = 0;
				DestroyVehicleEx(autos[car][playerid]);
				autos[car][playerid] = 0;
				return 1;
			}
        }
        case VENDERCASA:
        {
            if(response)
            {
                if(PlayerInfo[playerid][CasaID] <= 0 && PlayerInfo[playerid][CasaID2] <= 0) return SendClientMessage(playerid,-1,"No tienes ninguna propiedad para vender.");
                new string2[1000];
                if(PlayerInfo[playerid][CasaID] > 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID])
                        {
                            if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Propiedad ubicada en %s. (Valor de la propiedad: {00CC00}$%d{FFFFFF})\n",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]);
                            else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Propiedad ubicada en %s. (Valor de la propiedad: {DBED15}%d "SERVER_COIN"{FFFFFF})\n",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]);
                            strcat(string2,string);
                        }
                     }
                }
                if(PlayerInfo[playerid][CasaID2] > 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                        {
                            if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Propiedad ubicada en %s. (Valor de la propiedad: {00CC00}$%d{FFFFFF})",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]);
                            else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Propiedad ubicada en %s. (Valor de la propiedad: {DBED15}%d "SERVER_COIN"{FFFFFF})",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]);
                            strcat(string2,string);
                        }
                     }
                }
                ShowPlayerDialog(playerid,VENDERCASA1,DIALOG_STYLE_LIST,"Selecciona la propiedad que deseas vender",string2,"Vender","Cancelar");
            }
        }
        case VENDERCASA1:
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerInfo[playerid][CasaID] > 0)
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID] && PropInfo[p][pPosX] != 0)
                            {
                                if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {00CC00}$%d",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {DBED15}%d "SERVER_COIN"",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                if(PropInfo[p][pEnVentaPor] == 0) DarDinero(playerid,PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) PlayerInfo[playerid][Moneda] += PropInfo[p][pPrecio]/2;
                                SendClientMessage(playerid,-1,string);
                                PlayerInfo[playerid][CasaID] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID`='0',`Moneda`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][Moneda],PlayerInfo[playerid][Nickname]);
                                mysql_tquery(handle_db,Query,"","");
                                PropInfo[p][pEnVenta] = 1;
                                format(PropInfo[p][pPropietario],40,"Nadie");
                                PropInfo[p][pAbierta] = 1;
                                PropInfo[p][pRoperoAbierto] = 0;
                                PropInfo[p][pIDPropietario] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1' WHERE `ID`='%d'",p);
                                mysql_tquery(handle_db,Query,"","");
                                BorrarLabelCasa(p);
                                GuardarPropiedad(p);
                                CargarPropiedad(p);
                                break;
                            }
                        }
                    }
                    else if(PlayerInfo[playerid][CasaID2] != 0)
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                            {
                                if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {00CC00}$%d",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {DBED15}%d "SERVER_COIN"",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                if(PropInfo[p][pEnVentaPor] == 0) DarDinero(playerid,PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) PlayerInfo[playerid][Moneda] += PropInfo[p][pPrecio]/2;
                                SendClientMessage(playerid,-1,string);
                                PlayerInfo[playerid][CasaID2] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID2`='0',`Moneda`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][Moneda],PlayerInfo[playerid][Nickname]);
                                mysql_tquery(handle_db,Query,"","");
                                PropInfo[p][pEnVenta] = 1;
                                format(PropInfo[p][pPropietario],40,"Nadie");
                                PropInfo[p][pAbierta] = 1;
                                PropInfo[p][pRoperoAbierto] = 0;
                                PropInfo[p][pIDPropietario] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1' WHERE `ID`='%d'",p);
                                mysql_tquery(handle_db,Query,"","");
                                BorrarLabelCasa(p);
                                GuardarPropiedad(p);
                                CargarPropiedad(p);
                                break;
                            }
                        }
                    }
                }
                case 1:
                {
                    if(PlayerInfo[playerid][CasaID2] > 0)
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                            {
                                if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {00CC00}$%d",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {DBED15}%d "SERVER_COIN"",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                if(PropInfo[p][pEnVentaPor] == 0) DarDinero(playerid,PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) PlayerInfo[playerid][Moneda] += PropInfo[p][pPrecio]/2;
                                SendClientMessage(playerid,-1,string);
                                PlayerInfo[playerid][CasaID2] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID2`='0',`Moneda`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][Moneda],PlayerInfo[playerid][Nickname]);
                                mysql_tquery(handle_db,Query,"","");
                                PropInfo[p][pEnVenta] = 1;
                                format(PropInfo[p][pPropietario],40,"Nadie");
                                PropInfo[p][pAbierta] = 1;
                                PropInfo[p][pRoperoAbierto] = 0;
                                PropInfo[p][pIDPropietario] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1' WHERE `ID`='%d'",p);
                                mysql_tquery(handle_db,Query,"","");
                                BorrarLabelCasa(p);
                                GuardarPropiedad(p);
                                CargarPropiedad(p);
                                break;
                            }
                        }
                    }
                    else if(PlayerInfo[playerid][CasaID] > 0)
                    {
                        for(new p; p < MAX_PROPIEDADES; p++)
                        {
                            if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID])
                            {
                                if(PropInfo[p][pEnVentaPor] == 0) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {00CC00}$%d",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) format(string,sizeof(string),"Vendiste tu propiedad ubicada en {00CC00}%s{FFFFFF} por {DBED15}%d "SERVER_COIN"",PropInfo[p][pLocalizacion],PropInfo[p][pPrecio]/2);
                                if(PropInfo[p][pEnVentaPor] == 0) DarDinero(playerid,PropInfo[p][pPrecio]/2);
                                else if(PropInfo[p][pEnVentaPor] == 1) PlayerInfo[playerid][Moneda] += PropInfo[p][pPrecio]/2;
                                SendClientMessage(playerid,-1,string);
                                PlayerInfo[playerid][CasaID] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID`='0',`Moneda`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][Moneda],PlayerInfo[playerid][Nickname]);
                                mysql_tquery(handle_db,Query);
                                PropInfo[p][pEnVenta] = 1;
                                format(PropInfo[p][pPropietario],40,"Nadie");
                                PropInfo[p][pAbierta] = 1;
                                PropInfo[p][pRoperoAbierto] = 0;
                                PropInfo[p][pIDPropietario] = 0;
                                mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1' WHERE `ID`='%d'",p);
                                mysql_tquery(handle_db,Query,"","");
                                BorrarLabelCasa(p);
                                GuardarPropiedad(p);
                                CargarPropiedad(p);
                                break;
                            }
                        }
                    }
                }
            }
        }
        case SEXO:
        {
            if(response)
            {
                new skin = 79,pQuery[256];
				if(listitem == 1) skin = 172;
				mysql_format(handle_db, pQuery, sizeof(pQuery), "SELECT * FROM `usuarios` WHERE `Username` = '%e'", PlayerInfo[playerid][Nickname]);
				mysql_pquery(handle_db, pQuery, "OnPlayerRegister", "ddd", playerid,listitem+1,skin);
            }
            else ExpulsarJugador(playerid,"Escape en registro.");
        }
        case TRABAJO_MEDICO:
		{
			if(response)
			{
				if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) AsignarTrabajo(playerid,T_Medico,0),PlayerInfo[playerid][pDinero] -= 4000;
				else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) AsignarTrabajo(playerid,T_Medico,1),PlayerInfo[playerid][pDinero] -= 4000;
			}
		}
        case TRABAJOS:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: // Ayuda General
                    {
                        new mensaje[250];
                        mensaje="Hay muchos trabajos disponibles para que te ganes la vida.\nElige el que más te guste y comienza a trabajar.\n\nPara tener dos trabajos a la vez, necesitas cuenta VIP2.\n( Mas información en la web: "SERVER_NAME2")";
                        ShowPlayerDialog(playerid, INFOMEDICO, DIALOG_STYLE_MSGBOX, "Ayuda sobre los trabajos", mensaje, "Aceptar","");
                        return 1;
                    }
                    case 1: // Médico
                    {
                        new Byte[2000];
                        strcat(Byte,"{FFFFFF}El {00CC00}trabajo de médico{FFFFFF} se consigue en el {00cbff}Hospital General de Los Santos{FFFFFF}, puedes encontrarlo en tu GPS.");
                        strcat(Byte,"\nPara trabajar de médico necesitas tener como mínimo {EB0000}nivel 2{FFFFFF}.\n\nUna vez tengas el trabajo, necesitas ponerte el uniforme para comenzar a trabajar.");
                        strcat(Byte,"\n\n{FFFFFF}El uniforme te lo puedes poner dentro del hospital o en la parte trasera de una ambulancia.\nusando el comando {DBED16}/medico.");
                        strcat(Byte,"\n\n{00CC00}Médico de calle{FFFFFF}:\n\nCuando alguien solicite asistencia médica se marcará en el mapa un icono de color verde, al que tendrás\nque dirigirte para salvarle la vida.");
                        strcat(Byte,"\n\n{FFFFFF}Al estar junto a un paciente agonizando tendrás que {DBED16}/reanimar {FFFFFF}[{DBED16}ID o Nombre{FFFFFF}] y luego dentro de la\nambulancia deberás {DBED16}/subir paciente{FFFFFF}.");
                        strcat(Byte,"\n\n{FFFFFF}Finalmente tienes que llevarlo al hospital para salvar su vida y cobrar tu paga ({00CC00}$800{FFFFFF}).");
                        strcat(Byte,"\n\n{FFFFFF}En algunos casos podrás reanimar al paciente en el mismo lugar que lo atiendes, todo\ndepende de tu nivel de habilidad como médico.");
                        strcat(Byte,"\n\n{00CC00}Médico de hospital{FFFFFF}:\n\nPuedes trabajar dentro de cualquier hospital, en este caso\ntienes que usar {DBED16}/revisar paciente {FFFFFF}[{DBED16}ID o Nombre{FFFFFF}] cuando se te notifique.");
                        strcat(Byte,"\n\n{FFFFFF}A continuación deberás ir a buscar en el botiquín lo que creas necesario para el tratamiento.\n\nFinalmente tendrás que {DBED16}/atender paciente {FFFFFF}[{DBED16}ID o Nombre{FFFFFF}] para terminar.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Médico", Byte, "Aceptar", "");
                        return 1;
                    }
                    case 2: // Taxista
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Taxista && PlayerInfo[playerid][pTrabajo2] != T_Taxista)
                        {
                            new Byte[500];
                            strcat(Byte,"Puedes conseguir este trabajo dentro de Unity Station.\nEsta profesión no cuenta con niveles. Ganarás según el precio que cobres.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Taxista", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[500];
                        strcat(Byte,"{FFFFFF}Para ponerle un costo de ficha al taxi usa {DBED16}/ficha precio");
                        strcat(Byte,"\n{FFFFFF}Por ejemplo: {DBED16}/ficha 20");
                        strcat(Byte,"\n{FFFFFF}Cuando tu cliente no tenga dinero, se bajará del taxi.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Taxista", Byte, "Aceptar", "");
                    }
                    case 3: // Guardaespaldas
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Guardaespaldas && PlayerInfo[playerid][pTrabajo2] != T_Guardaespaldas)
                        {
                            new Byte[1000];
                            strcat(Byte,"{FFFFFF}Puedes conseguir este trabajo en Ganton GYM. Esta profesión no cuenta con niveles.");
                            strcat(Byte,"\n{FFFFFF}Un guardaespaldas puede darle el 50% de blindaje a su protegido.");
                            strcat(Byte,"\n\n{FFFFFF}Los guardaespaldas están normalmente armados y tienen experiencia en el combate");
                            strcat(Byte,"\n{FFFFFF}cuerpo a cuerpo y desarmado, conducción y primeros auxilios.");
                            strcat(Byte,"\n{FFFFFF}Sin embargo, la habilidad más importante para un guardaespaldas es evaluar una situación de");
                            strcat(Byte,"\n{FFFFFF}peligo para su protegido y tratar de minimizar los daños.");
                            strcat(Byte,"\n\n{FFFFFF}Ganarás según el precio que cobres.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Guardaespaldas", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[500];
                        strcat(Byte,"{FFFFFF}Para cubrir a alguien usa {DBED16}/cubrir [id o nombre] [precio]");
                        strcat(Byte,"\n{FFFFFF}El precio del chaleco tiene que ser entre $400 y $1000.");
                        strcat(Byte,"\n{FFFFFF}No puedes ofrecer un chaleco en combate, si tu protegido lo está tampoco podrá recibirlo.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Guardaespaldas", Byte, "Aceptar", "");
                    }
                    case 4: // Camionero
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Camionero && PlayerInfo[playerid][pTrabajo2] != T_Camionero)
                        {
                            new Byte[1000];
                            strcat(Byte,"{FFFFFF}Este trabajo se obtiene en los muelles de San Fierro");
                            strcat(Byte,"\n{FFFFFF}Comienzas en nivel 1, ganando {66B3FF}$1250 {FFFFFF}por entrega realizada.");
                            strcat(Byte,"\n{FFFFFF}El trabajo es legal, siempre y cuando lleves productos legales.");
                            strcat(Byte,"\n{FFFFFF}A medida que aumentes tu nivel como camionero, el pago será mayor, y los bonus por transportes ilegales serán mejores.");
                            strcat(Byte,"\n{FFFFFF}Por ejemplo: Nivel 1 de camionero = 2 piezas de armas, Nivel 2 = 5 piezas de armas, etc. También aumenta la cantidad de drogas y medicamentos.");
                            strcat(Byte,"\n{FFFFFF}En caso de perder el punto de entrega, usa {DBED16}/cp camionero");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Camionero", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[500];
                        strcat(Byte,"{FFFFFF}Cuando te hayas subido a un camión, puedes cargarlo usando {DBED16}/cargar camion");
                        strcat(Byte,"\n{FFFFFF}Selecciona lo que llevarás y se te marcará en el mapa el punto donde se realizará la entrega, luego trae el camión al muelle.");
                        strcat(Byte,"\n{FFFFFF}Los camiones de color blanco son para las cuentas normales y los de color negro para usuarios con VIP2.");
                        strcat(Byte,"\n{FFFFFF}En caso de perder el punto de entrega, usa {DBED16}/cp camionero");
                        strcat(Byte,"\n\n{DBED16}No intentes usar cheats para realizar la entrega más rápido porque te puede detectar el anticheat.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Camionero", Byte, "Aceptar", "");
                    }
                    case 5: // Policía
                    {
                        if(PlayerInfo[playerid][pDuty] == 0 && PlayerInfo[playerid][pFaccion] != 1)
                        {
                            new Byte[600];
                            strcat(Byte, "{FFFFFF}La {3399FF}policía{FFFFFF} es manejada por usuarios comunes, por lo que para entrar tendrás que cumplir los requisitos que ellos te pidan.\nPuedes revisar nuestro foro {DBED16}http://"SERVER_NAME"/foro{FFFFFF} para enterarte de cuales son.\n\nGeneralmente se requiere tener un nivel no tan bajo y llevar una buena interpretación de tu personaje. Si eres nuevo\ny no sabes bien de qué se trata, deja este trabajo para más adelante.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Policía", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[1000];
                        strcat(Byte,"{FFFFFF}Los jugadores que tengan cargos(estrellas) estarán identificados en el radar de distintos colores");
                        strcat(Byte,"\n{FFFFFF}Desde el amarillo hasta el rojo en el radar.");
                        strcat(Byte,"\n{FFFFFF}Para esposar a un jugador con cargos usa {DBED16}/esposar [id o nombre]");
                        strcat(Byte,"\n{FFFFFF}Cuando ya esté esposado o abatido, necesitas arrestarlo para llevarlo a la comisaría usando {DBED16}/arrestar [id o nombre]");
                        strcat(Byte,"\n{FFFFFF}Para poder entregar al detenido, debes dirigirte a los garajes internos de las comisarías, estando dentro");
                        strcat(Byte,"\n{FFFFFF}puedes optar por quitarle cargos y luego entregarlo usando {DBED16}/entregar [id o nombre]");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Policía", Byte, "Aceptar", "");
                    }
                    case 6: // Armero
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Armero && PlayerInfo[playerid][pTrabajo2] != T_Armero)
                        {
                            new Byte[1000];
                            strcat(Byte,"{FFFFFF}Para obtener este trabajo necesitas como mínimo nivel 3.");
                            strcat(Byte,"\n{FFFFFF}En la fabrica de armas ilegal de Los Santos dan el trabajo.");
                            strcat(Byte,"\n{FFFFFF}En caso de no encontrarla llama a un taxi {DBED16}/servicio taxi");
                            strcat(Byte,"\n{FFFFFF}Con este empleo podrás fabricar una gran variedad de armas.");
                            strcat(Byte,"\n{FFFFFF}Igualmente todas aquellas personas que no son armeros, pueden vender sus armas con {FFFFFF}/vender {FFFFFF}[{DBED16}nombre-del-arma{FFFFFF}][{DBED16}id/nombre{FFFFFF}][{DBED16}precio{FFFFFF}].");
                            strcat(Byte,"\n\n{FFFFFF}Listado de armas:");
                            strcat(Byte,"\n{FFFFFF}Pistola 9mm (9mm)");
                            strcat(Byte,"\n{FFFFFF}Pistola 9mm con slenciador (9mm-silenciada)");
                            strcat(Byte,"\n{FFFFFF}Escopeta normal (escopeta)");
                            strcat(Byte,"\n{FFFFFF}Desert Eagle (desert-eagle)");
                            strcat(Byte,"\n{FFFFFF}MP5 (mp5)");
                            strcat(Byte,"\n{FFFFFF}AK-47 (ak47)");
                            strcat(Byte,"\n{FFFFFF}M4 (m4)");
                            strcat(Byte,"\n{FFFFFF}Rifle (rifle)");
                            strcat(Byte,"\n{FFFFFF}Escopeta de combate (escopeta-de-combate)");
                            strcat(Byte,"\n{FFFFFF}Granada (granada) - {EB0000}desactivada{FFFFFF}.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Fabricante de armas", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[1000];
                        strcat(Byte,"{FFFFFF}Para crear armas usa {DBED16}/crear nombre-del-arma");
                        strcat(Byte,"\n{FFFFFF}Cada arma necesita un nivel de habilidad y una cantidad de piezas para poder crearla.");
                        strcat(Byte,"\n\n{FFFFFF}Listado de armas:");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 1:");
                        strcat(Byte,"\n\n{FFFFFF}Pistola 9mm (9mm) (10 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Pistola 9mm con slenciador (9mm-silenciada) (12 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 2:");
                        strcat(Byte,"\n\n{FFFFFF}Escopeta normal (escopeta) (20 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 3:");
                        strcat(Byte,"\n\n{FFFFFF}Desert Eagle (desert-eagle) (36 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 4:");
                        strcat(Byte,"\n\n{FFFFFF}MP5 (mp5) (58 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 5:");
                        strcat(Byte,"\n\n{FFFFFF}AK-47 (ak47) (82 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}M4 (m4) (96 piezas");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 6:");
                        strcat(Byte,"\n\n{FFFFFF}Rifle (rifle) (52 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 7:");
                        strcat(Byte,"\n\n{FFFFFF}Escopeta de combate (escopeta-de-combate) (136 piezas)");
                        strcat(Byte,"\n\n{FFFFFF}Nivel 8:");
                        strcat(Byte,"\n\n{FFFFFF}Granada (granada) (156 piezas) - {EB0000}desactivada{FFFFFF}.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Fabricante de armas", Byte, "Aceptar", "");
                    }
                    case 7: // Mecánico
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico)
                        {
                            new Byte[256];
                            strcat(Byte,"{FFFFFF}Para obtener el trabajo de mecánico, tienes que ir al taller que se encuentra en Blueberry\n{FFFFFF}Este trabajo cuenta con nivel y habilidad.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Mecánico", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[1000];
                        strcat(Byte,"{FFFFFF}Para ponerte en servicio de mecánico debes acercarte a la caseta y usa {DBED16}/mecanico");
                        strcat(Byte,"\n{FFFFFF}Cada vehículo a reparar necesita distintas cantidades de repuestos.");
                        strcat(Byte,"\n{FFFFFF}Los repuestos se compran cerca del taller y tienen un costo de {66B3FF}$100 {FFFFFF}cada uno.");
                        strcat(Byte,"\n{FFFFFF}Para saber cuantos necesita cada uno usa {DBED16}/revisar");
                        strcat(Byte,"\n{FFFFFF}Siempre y cuando estés cerca de un cliente que llamó al servicio y que tenga el capó abierto.");
                        strcat(Byte,"\n{FFFFFF}Para ofrecer reparación a alguien usa {DBED16}/reparar [precio]");
                        strcat(Byte,"\n{FFFFFF}Los clientes que necesiten mecánicos se marcará en el mapa de color {00CCFF}celeste{FFFFFF}.");
                        strcat(Byte,"\n{FFFFFF}Por cada nivel que aumentes repararás más rápido.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Mecánico", Byte, "Aceptar", "");
                    }
                    case 8: // Cosechador
                    {
                        new dialog[1000];
                        strcat(dialog, "{FFFFFF}El trabajo de granjero no requiere un nivel, pero tampoco se aumenta la habilidad trabajando.");
                        strcat(dialog, "\n{FFFFFF}Este trabajo no ocupa lugar como trabajo primario ni secundario.");
                        strcat(dialog, "\n{FFFFFF}En caso de no encontrarla llama a el {DBED16}/servicio taxi{FFFFFF}.");
                        strcat(dialog, "\n{FFFFFF}Para trabajar de cosechador, necesitas ir a alguna de las granjas de Los Santos.");
                        strcat(dialog, "\n\n{FFFFFF}Las ganancias en dinero es similar a la de camionero.");
                        strcat(dialog, "\n{FFFFFF}A veces también te dan un premio extra de regalo, los cuales pueden ser:");
                        strcat(dialog, "\n\n{DBED16}Granja de Blueberry:{FFFFFF}\n");
                        strcat(dialog, "\n{FFFFFF}Medicamentos (30% probabilidad de conseguirlo)");
                        strcat(dialog, "\n{FFFFFF}Crack (10% probabilidad de conseguirlo)\n");
                        strcat(dialog, "\n{FFFFFF}Ramo de flores (10% probabilidad de conseguirlo)");
                        strcat(dialog, "\n{FFFFFF}Pala (10% probabilidad de conseguirla)");
                        strcat(dialog, "\n\n\n{DBED16}Granja de Flint Range:{FFFFFF}");
                        strcat(dialog, "\n{FFFFFF}Medicamentos (30% probabilidad de conseguirlo)");
                        strcat(dialog, "\n{FFFFFF}Crack (13% probabilidad de conseguirlo)");
                        strcat(dialog, "\n{FFFFFF}Ramo de flores (10% probabilidad de conseguirlo)");
                        strcat(dialog, "\n{FFFFFF}Cuchillo (10% probabilidad de conseguirlo)");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Cosechador", dialog, "Aceptar", "");
                    }
                    case 9: // Basurero
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Basurero && PlayerInfo[playerid][pTrabajo2] != T_Basurero)
                        {
                            new Byte[1000];
                            strcat(Byte,"{FFFFFF}El trabajo de basurero no requiere de un nivel mínimo.");
                            strcat(Byte,"\n{FFFFFF}Este trabajo se consigue en el basural que se encuentra entre Los Santos y San Fierro.");
                            strcat(Byte,"\n{FFFFFF}Para trabajar de basurero se necesitan dos personas, una que maneje el camión y otra que recolecte la basura.");
                            strcat(Byte,"\n{FFFFFF}Los pagos se incrementan a medida que suben de nivel. También el tiempo de recolección disminuye al subir de nivel.");
                            strcat(Byte,"\n{FFFFFF}En las bolsas de basure se puede llegar a encontrar una gran variedad de cosas.");
                            strcat(Byte,"\n{FFFFFF}Para comenzar a trabajar necesitan ponerse la ropa de basurero (cuentas VIP no necesitan).");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Basurero", Byte, "Aceptar", "");
                            return 1;
                        }
                        SendClientMessage(playerid, -1, "En Reparacíon");
                    }
                    case 10: // Transportista
                    {
                        if(PlayerInfo[playerid][pTrabajo] != T_Transportista && PlayerInfo[playerid][pTrabajo2] != T_Transportista)
                        {
                            new Byte[1000];
                            strcat(Byte,"{FFFFFF}El trabajo de transportista requiere nivel 3 de camionero o más.");
                            strcat(Byte,"\n{FFFFFF}Además de trabajar de transportista necesitas un camión DFT-30, no necesariamente tiene que ser tuyo.");
                            strcat(Byte,"\n{FFFFFF}Este trabajo se consigue en Las Venturas y lo puedes encontrar en cualquier mapa o GPS.");
                            strcat(Byte,"\n{FFFFFF}A medida que aumentes de nivel se agregarán nuevos recorridos con nuevas cargas y el pago aumentará $150 cada nivel.");
                            ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Transportista", Byte, "Aceptar", "");
                            return 1;
                        }
                        new Byte[700];
                        strcat(Byte,"{FFFFFF}El trabajo de transportista requiere nivel 3 de camionero o más.");
                        strcat(Byte,"\n{FFFFFF}Además de trabajar de transportista necesitas un camión DFT-30, no necesariamente tiene que ser tuyo.");
                        strcat(Byte,"\n{FFFFFF}Este trabajo se consigue en Las Venturas y lo puedes encontrar en cualquier mapa o GPS.");
                        strcat(Byte,"\n{FFFFFF}A medida que aumentes de nivel se agregarán nuevos recorridos con nuevas cargas y el pago aumentará $150 cada nivel.");
                        ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Transportista", Byte, "Aceptar", "");
                    }
                    case 11:    //Ladrón
                    {
                        new Byte[700];
                        strcat(Byte, "{FFFFFF}El ladrón puede robar bienes de diferentes propiedades distribuidas por todo San Andreas.");
                        strcat(Byte, "\n\n{FFFFFF}Para forzar cerraduras necesitas como mínimo nivel 6 o una cuenta VIP y para robar, nivel 3 o cuenta VIP.");
                        strcat(Byte, "\n{FFFFFF}Para el trabajo de ladrón se usan diferentes herramientas según tu nivel de habilidad.");
                        strcat(Byte, "\n{FFFFFF}A medida que aumentes de nivel, podrás usar otras herramientas para forzar las puertas más rápido.");
                        ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Ladrón", Byte, "Aceptar", "");
                    }
                    case 12:  // Minero
                    {
                        new Byte[700];
                        strcat(Byte, "{FFFFFF}El trabajo de {DBED16}minero{FFFFFF} se consigue en una oficina ubicada en {00CCFF}Bone Country{FFFFFF}, Las Venturas, puedes encontrarla en tu GPS.");
                        strcat(Byte, "\n\n{FFFFFF}Una vez que consigas el trabajo, tendrás que dirigirte a la mina que se encuentra al noroeste de la oficina.");
                        strcat(Byte, "\n{FFFFFF}Antes de entrar a la mina tendrás que ponerte el uniforme, lo puedes encontrar cerca de la entrada de la mina.");
                        strcat(Byte, "\n\n{FFFFFF}Cuando tengas el uniforme, entra a la mina y comienza a picar la {6ebd9e}mina de hierro{FFFFFF}, luego lleva la roca a la procesadora\nque se encuentra fuera de la mina para recibir tu pago.");
                        strcat(Byte, "\n{FFFFFF}A medida que subes de nivel podrás ir picando diferentes rocas.");
                        ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Minero", Byte, "Aceptar","");
                        return 1;
                    }
                    case 13:  // Pescador
                    {
                        new string2[900];
                        string2="{FFFFFF}El trabajo de pescador se consigue en {00CCFF}Ocean Docks{FFFFFF}, puedes encontrarlo fácilmente en el GPS.\nPara trabajar de pescador necesitas tener como minimo nivel 2.\nUna vez que tengas el trabajo, necesitas pedir un permiso de pesca gratuito, utilizando el comando {DBED16}/permiso pesca\n\n{FFFFFF}Este trabajo tiene 3 niveles y en cada nivel se habilitan diferentes zonas de pesca.\n\n{00CC00}Nivel 1{FFFFFF}:\n\nPesca de tortugas, con un pago promedio de {00CC00}$1400\n\nNivel 2{FFFFFF}:\n\nPesca de delfines, con un pago promedio de {00CC00}$2260\n\nNivel 3{FFFFFF}:\n\nPesca de tiburones, con un pago promedio de {00CC00}$3650\n\n{FF3300}*{FFFFFF} Los pagos dependen del tipo de animal pescado y del peso del mismo.\n\nLos barcos pesqueros se consiguen en los mueles, pero también podrás trabajar con tu propio barco.";
                        ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Pescador", string2, "Aceptar","");
                        return 1;
                    }
                    case 14:  // Prostitucion
                    {
                        new Byte[850];
                        strcat(Byte,"{FFFFFF}El trabajo de prostitución se consigue en {00CCFF}Las Venturas{FFFFFF}, puedes encontrarlo fácilmente en el {00CC00}GPS{FFFFFF}.");
                        strcat(Byte,"\n\n{FFFFFF}Una vez que tengas el trabajo, puedes comenzar a cobrar usando {DBED16}/ofrecer sexo {FFFFFF}[{DBED16}ID{FFFFFF}-o-{DBED16}Nombre{FFFFFF}] [{DBED16}Precio{FFFFFF}].");
                        strcat(Byte,"\n{FFFFFF}No necesitas el trabajo para ofrecerlo, pero sí para cobrar por eso.");
                        strcat(Byte,"\n\n{00CC00}Quienes reciban sexo oral de prostitutas profesionales obtendrán{FFFFFF}:");
                        strcat(Byte,"\n\n{FFFFFF}- Blindaje {00CCFF}+20%{FFFFFF} hasta llegar como máximo a {00CCFF}80%{FFFFFF}.");
                        strcat(Byte,"\n\n{00CC00}Quienes reciban sexo oral de personas sin esa ocupación obtendrán{FFFFFF}:");
                        strcat(Byte,"\n\n{FFFFFF}- Blindaje {00CCFF}+10%{FFFFFF} hasta llegar como máximo a {00CCFF}50%{FFFFFF}.");
                        strcat(Byte,"\n\n{FFFFFF}Para ofrecer {EB0000}sexo oral{FFFFFF} tienes que estar dentro de un vehículo.");
                        ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Prostitución", Byte, "Aceptar","");
                        return 1;
                    }
                }
            }
        }
        case CAMIOND:
        {
            if(response)
            {
                Cargando2[playerid] = 0;
                SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
                UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
                CamionID[playerid] = GetPlayerVehicleID(playerid);
                PlayerTemp[playerid][pt_Camionero] = true;
                TimerCargarCamion[playerid] = 15;
                AbrirPuertasCamionero(playerid);
                switch(listitem)
                {
                    case 0:
                    {
                        new punto = random(2);
                        switch (punto)
                        {
                            case 0:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Legal1",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                            case 1:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Legal2",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                        }
                        return 1;
                    }
                    case 1:
                    {
                        new punto = random(3);
                        switch (punto)
                        {
                            case 0:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Legal3",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                            case 1:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Legal4",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                            case 2:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Legal5",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                        }
                        return 1;
                    }
                    case 2:
                    {
                        new punto = random(2);
                        switch (punto)
                        {
                            case 0:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Ilegal1",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                            case 1:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Ilegal2",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                        }
                        return 1;
                    }
                    case 3:
                    {
                        new punto = random(2);
                        switch (punto)
                        {
                            case 0:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Ilegal4",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                            case 1:
                            {
                                AbrirPuertasCamionero(playerid);
                                PlayerTemp[playerid][pt_Camionero] = false;
                                Cargas[playerid] = SetTimerEx("Ilegal5",1000,true,"d",playerid);
                                TimerCargarCamion[playerid] = 5;
                            }
                        }
                        return 1;
                    }
                }
            }
            else
            {
                CargandoC[playerid] = 0;
                DesCargarMapeosEx(playerid);
            }
        }
        case MENU_INVITACIONES:
        {
            if(response)
            {
                if(PlayerTemp[playerid][p_INVITACIONES][listitem] == -1)
             	{
                    ShowPlayerDialog(playerid, DIALOG_PLAYER_INV_DELETE_ALL, DIALOG_STYLE_MSGBOX, "Invitaciones - Eliminar Todo", "¿Estás seguro que quieres borrar todas tus invitaciones pendientes?", "Eliminar", "Atrás");
                    return 1;
       			}
                else
                {
                    PlayerTemp[playerid][BandaOfertada][0] = PlayerTemp[playerid][p_INVITACIONES][listitem];
                    PlayerTemp[playerid][BandaOfertada][1] = PlayerTemp[playerid][p_INVITACIONES_ID][listitem];
                    ShowPlayerDialog(playerid, DIALOG_PLAYER_INV_ACEPT, DIALOG_STYLE_LIST, "Invitaciones - Opciones", "Aceptar invitación\nEliminar invitación", "Selecionar", "Atrás");
                    return 1;
                }
            }
        }
        case DIALOG_PLAYER_INV_DELETE_ALL:
        {
            if(!response) return 1;
            mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s'",PlayerInfo[playerid][Nickname]);
            mysql_query(handle_db, Query, true);
            SendClientMessage(playerid,-1,"Todas tus invitaciónes activas fueron borradas.");
        }
        case DIALOG_PLAYER_INV_ACEPT:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s' AND `ID`='%d'",PlayerInfo[playerid][Nickname],PlayerTemp[playerid][BandaOfertada][1]);
                    mysql_query(handle_db, Query, true);
                    PlayerInfo[playerid][pRango] = 1;
                    PlayerInfo[playerid][pFaccion] = PlayerTemp[playerid][BandaOfertada][0];
                    if(PlayerTemp[playerid][BandaOfertada][0] == 1)
                    {
                        format(string, sizeof string, "{3399FF}[Banda] {FFFFFF}%s se ha unido a la facción con el rango %s.",PlayerInfo[playerid][Nickname],RangoPolicia(playerid));
                        SendRadioPoliceMessage(-1, string);
                    }
                    else if(PlayerTemp[playerid][BandaOfertada][0] >= 2)
                    {
                        SetPlayerGangZones(playerid);
                        format(string, sizeof string, "{%06x}[Banda]{FFFFFF} %s se ha unido a la banda con el rango %s.",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, PlayerInfo[playerid][Nickname], RangoBanda(PlayerInfo[playerid][pFaccion], PlayerInfo[playerid][pRango]));
                        SendRadioMessage(PlayerInfo[playerid][pFaccion], 0xff9c00FF, string);
                    }
                    GuardarCuenta(playerid);
                    return 1;
                }
                case 1:
                {
                    mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s' AND `ID`='%d'",PlayerInfo[playerid][Nickname],PlayerTemp[playerid][BandaOfertada][1]);
                    mysql_query(handle_db, Query, true);
                    MensajeEx(playerid,-1,"Borraste la invitación de la banda: {DBED15}%s.",BandasInfo[PlayerTemp[playerid][BandaOfertada][0]][BNombre]);
                }
            }
            return 1;
        }
        case CONFIG_BANDA:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: ShowDialog(playerid, CHANGE_NAME_CREW);
                    case 1: ShowDialog(playerid, VIEW_RANK_NAME);
                    case 2: ShowDialog(playerid, CHANGE_PROP_RANK);
                    case 3: ShowDialog(playerid, CREW_MODIFY_COLOR);
                    case 4: ShowDialog(playerid, CREW_VIEW_MEMBERS);
                    case 5: ShowDialog(playerid, CREW_DELETE);
                }
            }
        }
        case CHANGE_NAME_CREW:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
            if(strlen(inputtext) < 4 || strlen(inputtext) > 24)
            {
                ShowDialog(playerid, CHANGE_NAME_CREW);
                return SendClientMessage(playerid,-1,"El nombre ingresado tiene que tener entre 4 y 24 caracteres.");
            }
            if(!strlen(inputtext))
            {
                ShowDialog(playerid, CHANGE_NAME_CREW);
                return SendClientMessage(playerid,-1,"El nombre ingresado no es válido.");
            }
            mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `Nombre`='%s'",inputtext);
            mysql_query(handle_db, Query,true);
            if(cache_num_rows()) return SendClientMessage(playerid,-1,"El nombre ingresado para tu banda ya esta en uso.");
            if(PlayerInfo[playerid][pDinero] < 150000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
            QuitarDinero(playerid, 150000);
            mysql_format(handle_db, Query,sizeof(Query), "UPDATE `facciones` SET `Nombre` = '%s' WHERE `id`='%d';", inputtext, BandasInfo[PlayerInfo[playerid][pFaccion]][bID]);
            mysql_query(handle_db, Query, false);
            format(BandasInfo[PlayerInfo[playerid][pFaccion]][BNombre], 32, "%s", inputtext);
            format(string, 128, "El nombre de la banda fue cambiado a {%06x}%s", BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, inputtext);
            SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
            return 1;
        }
        case CREW_MODIFY_COLOR:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
            if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid, -1,"No perteneces a una banda.");
            if(PlayerInfo[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes modificar el color de esta banda.");
            if(PlayerInfo[playerid][pRango] != 8) return SendClientMessage(playerid, -1, "No tienes permiso.");
            if(BandasInfo[ PlayerInfo[playerid][pFaccion] ][B_Atacando]) return SendClientMessage(playerid, -1, "No se puede cambiar el color cuando la banda está en combate.");
            for(new id; id < MAX_BANDAS; id++)
            {
                if(BandasInfo[id][BColor] == RandomColors[listitem])
                {
                    SendClientMessage(playerid, -1, "Color en uso, selecciona otro color.");
                    return ShowDialog(playerid, CREW_MODIFY_COLOR);
                }
            }
            BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] = RandomColors[listitem];
            new r, g, b, a, new_territory_color;
            HexToRGBA(BandasInfo[PlayerInfo[playerid][pFaccion]][BColor], r, g, b, a);
            new_territory_color = RGBAToHex(r, g, b, 135);
            for(new i = 0; i != MAX_TERRITORIOS; i ++)
            {
                if(!TerritorioInfo[i][Territorio_Valido]) continue;
                if(!TerritorioInfo[i][Territorio_Usado]) continue;
                if((TerritorioInfo[i][Territorio_Banda] == BandasInfo[PlayerInfo[playerid][pFaccion]][bID]) || (TerritorioInfo[i][Territorio_BandaID] == BandasInfo[PlayerInfo[playerid][pFaccion]][bID]))
                {
                    TerritorioInfo[i][Territorio_Color] = new_territory_color;
                    UpdateGangZoneColor(i);
                }
            }
            SendClientMessage(playerid,-1,"El color de tu banda fue cambiado correctamente.");
            new DB_Query[256];
            mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `facciones` SET `Color` = '%d' WHERE `id`='%d';", BandasInfo[PlayerInfo[playerid][pFaccion]][BColor], BandasInfo[PlayerInfo[playerid][pFaccion]][bID]);
            mysql_query(handle_db, DB_Query, false);
            mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `territorios` SET `Color`='%d' WHERE `Banda`='%d'", new_territory_color, PlayerInfo[playerid][pFaccion]);
            mysql_query(handle_db, DB_Query, false);
            ShowDialog(playerid, CONFIG_BANDA);
            return 1;
        }
        case CREW_VIEW_MEMBERS:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
        }
        case VIEW_RANK_NAME:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
            PlayerTemp[playerid][jSelectRango] = listitem + 1;
            return ShowPlayerDialog(playerid,CHANGE_RANK_NAME, DIALOG_STYLE_INPUT, "{00CCFF}"SERVER_COIN":RP - Cambiar Nombre Rango", "Introduce el nuevo nombre para el rango", "Continuar", "Salir");
        }
        case CHANGE_RANK_NAME:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
            new BANDA_ID = PlayerInfo[playerid][pFaccion];
            if(BANDA_ID == 1) return SendClientMessage(playerid,-1,"No se puede hacer esto en esta faccion.");
            if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return Error(playerid);
            if(!RangoYaCreado(BANDA_ID, inputtext)) return ShowPlayerDialog(playerid,CHANGE_RANK_NAME, DIALOG_STYLE_INPUT, "{00CCFF}"SERVER_COIN":RP - Cambiar Nombre Rango", "El rango introducido ya se encuentra en uso.\nIntroduce el nuevo nombre para el rango", "Continuar", "Salir");
            mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%d`='%s' WHERE `ID`='%d'",PlayerTemp[playerid][jSelectRango],inputtext,BandasInfo[BANDA_ID][bID]);
            mysql_query(handle_db, Query, true);
            format(string, 128, "El rango {%06x}%s{FFFFFF} fue cambiado a {%06x}%s",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, PlayerTemp[playerid][jSelectRango]),BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8,inputtext);
            SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
            PlayerTemp[playerid][jSelectRango] = 0;
            CargarFacciones();
            return ShowDialog(playerid, VIEW_RANK_NAME);
        }
        case CHANGE_PROP_RANK:
        {
            if(!response) return ShowDialog(playerid, CONFIG_BANDA);
            if(response)
            {
                switch(listitem)
                {
                    case 0: ShowDialog(playerid, CREW_RANK_INV);
                    case 1: ShowDialog(playerid, CREW_RANK_EXP);
                    case 2: ShowDialog(playerid, CREW_RANK_EDI);
                }
            }
            return 1;
        }
        case CREW_RANK_EDI:
        {
            if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
            if(response)
            {
                new BANDA_ID = PlayerInfo[playerid][pFaccion];
                if(BandasInfo[BANDA_ID][RANK_EDIT][listitem] == 1) BandasInfo[BANDA_ID][RANK_EDIT][listitem] = 0;
                else BandasInfo[BANDA_ID][RANK_EDIT][listitem] = 1;
                format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s subir o bajar rangos",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8,RangoBanda(BANDA_ID, listitem + 1), (BandasInfo[BANDA_ID][RANK_EDIT][listitem]) ? ("pueden") : ("no podrán"));
                SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
                mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dEdi`='%d' WHERE `Nombre`='%s'",listitem+1, BandasInfo[BANDA_ID][RANK_EDIT][listitem],BandasInfo[BANDA_ID][BNombre]);
                mysql_query(handle_db, Query, false);
                ShowDialog(playerid, CREW_RANK_EDI);
            }
            return 1;
        }
        case CREW_RANK_EXP:
        {
            if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
            if(response)
            {
                new BANDA_ID = PlayerInfo[playerid][pFaccion];
                if(BandasInfo[BANDA_ID][RANK_EXP][listitem] == 1) BandasInfo[BANDA_ID][RANK_EXP][listitem] = 0;
                else BandasInfo[BANDA_ID][RANK_EXP][listitem] = 1;
                format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s expulsar",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, listitem + 1), (BandasInfo[BANDA_ID][RANK_EXP][listitem]) ? ("pueden") : ("no podrán"));
                SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
                mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dExp`='%d' WHERE `Nombre`='%s'",listitem+1, BandasInfo[BANDA_ID][RANK_EXP][listitem], BandasInfo[BANDA_ID][BNombre]);
                mysql_query(handle_db, Query, false);
                ShowDialog(playerid, CREW_RANK_EXP);
            }
            return 1;
        }
        case CREW_RANK_INV:
        {
            if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
            else if(response)
            {
                new BANDA_ID = PlayerInfo[playerid][pFaccion];
                if(BandasInfo[BANDA_ID][RANK_INV][listitem] == 1) BandasInfo[BANDA_ID][RANK_INV][listitem] = 0;
                else BandasInfo[BANDA_ID][RANK_INV][listitem] = 1;
                format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s invitar",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, listitem + 1),(BandasInfo[BANDA_ID][RANK_INV][listitem]) ? ("pueden") : ("no podrán"));
                SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
                mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dInv`='%d' WHERE `Nombre`='%s'", listitem+1,BandasInfo[BANDA_ID][RANK_INV][listitem], BandasInfo[BANDA_ID][BNombre]);
                mysql_query(handle_db, Query, false);
                ShowDialog(playerid, CREW_RANK_INV);
            }
            return 1;
        }
        case CREAR_BANDA:
        {
            if(response)
            {
  		        
				if(strlen(inputtext) < 4 || strlen(inputtext) > 24) return SendClientMessage(playerid,-1,"El nombre ingresado tiene que tener entre 4 y 24 caracteres.");
				else if(!strlen(inputtext)) return SendClientMessage(playerid,-1,"El nombre ingresado no es válido.");
				mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `Nombre`='%s'",inputtext);
				mysql_query(handle_db, Query,true);
				if(!cache_num_rows())
				{
					if(PlayerInfo[playerid][pDinero] < 500000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
					QuitarDinero(playerid, 500000);
					new day,month,year;
					getdate(year,month,day);
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO facciones (Nombre, Integrantes, Lider, fecha) VALUES ('%s','1', '%s','%d/%d/%d')",inputtext,PlayerInfo[playerid][Nickname],day,month,year);
                    mysql_query(handle_db, Query, true);
					PlayerInfo[playerid][pFaccion] = cache_insert_id();
					MensajeEx(playerid,-1,"Felicidades la banda {DBED15}%s {FFFFFF}se ha creado correctamente, escribe {DBED15}/banda {FFFFFF}para administrarla.", inputtext);
					SendClientMessage(playerid,-1,"Para mayor información escribe el comando {DBED15}/ayuda");
					CargarFacciones();
					DarPropietarioBanda(playerid, inputtext, PlayerInfo[playerid][pFaccion]);
					GuardarCuenta(playerid);
					if(PlayerInfo[playerid][pFaccion] > 1) SetPlayerGangZones(playerid);
					if(PlayerInfo[playerid][pFaccion] > 1 && PlayerInfo[playerid][pRango] == 8)
					{
						if(BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] == 0) ShowPlayerDialog(playerid, D_COLOR1, DIALOG_STYLE_MSGBOX, "Informacion sobre los territorios:", "{FFFFFF}Debido al nuevo sistema de territorios deberás asigarle un color a tu banda\nel color que asignes será el color que tendra los territorios que domines.", "Siguiente", "Salir");
					}
				}
                else SendClientMessage(playerid,-1,"El nombre ingresado para tu banda ya esta en uso.");
            }
            return 1;
        }
		case CREW_DELETE:
		{
		    if(!response) return ShowDialog(playerid, CONFIG_BANDA);
		    if(PlayerInfo[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes eliminar esta facción.");
		    mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `facciones` WHERE `id`='%d'",BandasInfo[PlayerInfo[playerid][pFaccion]][bID]);
			mysql_pquery(handle_db, Query);
			mysql_format(handle_db, Query, sizeof(Query), "UPDATE `territorios` SET `Banda`='0' WHERE `Banda`='%d'",PlayerInfo[playerid][pFaccion]);
			mysql_pquery(handle_db, Query);
			mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Faccion`='0',`Rango`='0' WHERE `Faccion`='%d'",PlayerInfo[playerid][pFaccion]);
            mysql_pquery(handle_db, Query);
            new fabrica_id = TieneFabrica(PlayerInfo[playerid][pFaccion]);
			if(fabrica_id > 0)
			{
				BorrarStatsFabrica(fabrica_id);
				Fabricas[fabrica_id][pEnUso] = 0;
				Fabricas[fabrica_id][pBanda] = 0;
				CargarFabricass(fabrica_id);
				GuardarFabrica(fabrica_id);
			}
			foreach(new i : Player)
            {
				if(PlayerInfo[i][pFaccion] == PlayerInfo[playerid][pFaccion] && i != playerid)
				{
				    PlayerInfo[i][pFaccion] = 0;
				    PlayerInfo[i][pRango] = 0;
				    HidePlayerGangZones(i);
			     	SendClientMessage(i, -1, "La banda que pertenecías fue borrada por el lider.");
				}
			}
			DarRopa(playerid);
			DarArmas(playerid);
			PlayerInfo[playerid][pFaccion] = 0;
			PlayerInfo[playerid][pRango] = 0;
			CargarFacciones();
			SendClientMessage(playerid,-1,"Tu banda fue borrada correctamnete.");
		}
        case DIALOG_ADMINS:
		{
		    if(!response) return 1;
		    if(PlayerTemp[playerid][p_SELECT_ADMIN_ID][listitem] == -1) return ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "{FFFFFF}Indica el 'ID' del jugador que quieres añadir a la administración.", "Siguiente", "Salir");
		    ShowPlayerDialog(playerid, DIALOG_ADMINS_2, DIALOG_STYLE_LIST, "Administradores", "{FFFFFF}- Cambiar rango administrativo\n{FFFFFF}- Expulsar de la administración","Seleccionar", "Salir");
			PlayerTemp[playerid][p_SELECT_ADMIN] = PlayerTemp[playerid][p_SELECT_ADMIN_ID][listitem];
			PlayerTemp[playerid][p_SELECT_ADMIN_ONLINE] = PlayerTemp[playerid][p_SELECT_ADMIN_ID_ONLINE][listitem];
			PlayerTemp[playerid][p_SELECT_ADMIN_LEVEL] = PlayerTemp[playerid][p_SELECT_ADMIN_ID_LEVEL][listitem];
			return 1;
		}
		case DIALOG_ADMINS_2:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
			    case 0://ascender
			    {
			        new dialog[145];
					format(dialog, sizeof dialog, "{FFFFFF}Rango actual: {33CCFF}%s\n{FFFFFF}Indica el nuevo rango (1-6):", ADMIN_RANKS(PlayerTemp[playerid][p_SELECT_ADMIN_LEVEL]));
					ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
			    }
			    case 1://expulsar
			    {
			        if(PlayerTemp[playerid][p_SELECT_ADMIN_ONLINE] == 1)
			        {
			            foreach(new i : Player)
			            {
			                if(JugadorLogeado[i] == 1)
			                {
					            if(PlayerTemp[playerid][p_SELECT_ADMIN] == PlayerInfo[i][pID])
					            {
					                if(i == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
					                mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Admin`='0' WHERE `ID`='%d'",PlayerTemp[playerid][p_SELECT_ADMIN]);
									mysql_pquery(handle_db, Query);
									SendClientMessage(i,-1,"Un dueño de te expulso de la administración");
					                PlayerInfo[i][pAdmin] = 0;
					                SendClientMessage(playerid,-1,"El jugador fue expulsado de la administración");
					                break;
					            }
				            }
			            }
			        }
	            	mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Admin`='0' WHERE `ID`='%d'",PlayerTemp[playerid][p_SELECT_ADMIN]);
					mysql_pquery(handle_db, Query);
					return 1;
			    }
		    }
		    return 1;
		}
		case DIALOG_ADMINS_3:
		{
		    if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "Introduce un valor numérico.");
					new dialog[145];
					format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 6):", ADMIN_RANKS(PlayerTemp[playerid][p_SELECT_ADMIN_LEVEL]));
					ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "Introduce un valor positivo.");
					new dialog[145];
					format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 6):", ADMIN_RANKS(PlayerTemp[playerid][p_SELECT_ADMIN_LEVEL]));
					ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
				if(inputtext[0] >= 1 && inputtext[0] <= 7)
				{
				    if(PlayerTemp[playerid][p_SELECT_ADMIN_ONLINE] == 1)
			        {
					    foreach(new i : Player)
			            {
			                if(JugadorLogeado[i] == 1)
			                {
					            if(PlayerTemp[playerid][p_SELECT_ADMIN] == PlayerInfo[i][pID])
					            {
					                if(i == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
									MensajeEx(i,-1, "Un dueño te asignó el rango administrativo {8F70FE}%s", ADMIN_RANKS(inputtext[0]));
					                PlayerInfo[i][pAdmin] = inputtext[0];
					                GuardarCuenta(i);
					                break;
					            }
				            }
			            }
		            }
	                SendClientMessage(playerid,-1,"Modificaste el rango del usuario correctamente.");
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Admin`='%d' WHERE `ID`='%d'",inputtext[0], PlayerTemp[playerid][p_SELECT_ADMIN]);
					mysql_pquery(handle_db, Query);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, -1, "Indica el nuevo rango (1 - 6).");
					new dialog[145];
					format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 6):", ADMIN_RANKS(PlayerTemp[playerid][p_SELECT_ADMIN_LEVEL]));
					ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
			}
			return 1;
		}
		case DIALOG_ADMINS_ADD:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor numérico.");
					ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "Indica el 'Nombre_Jugador o el ID' del jugador que quieres añadir a la administración.", "Siguiente", "Salir");
					return 1;
				}
				else if(strval(inputtext) < 0)
				{
					SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor positivo.");
					ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "Indica el 'Nombre_Jugador o el ID' del jugador que quieres añadir a la administración.", "Siguiente", "Salir");
					return 1;
				}
				if(!IsPlayerConnected(inputtext[0])) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
				if(IsPlayerNPC(inputtext[0])) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
                if(inputtext[0] == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
			    if(PlayerInfo[inputtext[0]][pAdmin] != 0) return SendClientMessage(playerid,-1,"El jugador seleccionado ya se encuentra fuera del staff.");
				PlayerTemp[playerid][p_ADD_ADMIN_ID] = inputtext[0];
				new dialog[145];
				format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 6):",  PlayerInfo[inputtext[0]][Nickname], inputtext[0]);
				return ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
			}
			return 1;
		}
		case DIALOG_ADMINS_ADD_2:
		{
		    if(response)
			{
			    if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "Introduce un valor numérico.");
					new dialog[145];
					format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 6):",  PlayerInfo[PlayerTemp[playerid][p_ADD_ADMIN_ID]][Nickname], PlayerTemp[playerid][p_ADD_ADMIN_ID]);
					ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "Introduce un valor positivo.");
					new dialog[145];
					format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 6):",  PlayerInfo[PlayerTemp[playerid][p_ADD_ADMIN_ID]][Nickname], PlayerTemp[playerid][p_ADD_ADMIN_ID]);
					ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
				if(inputtext[0] >= 1 && inputtext[0] <= 7)
				{
				    new ID = PlayerTemp[playerid][p_ADD_ADMIN_ID];
				    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
					else
					{
					    MensajeEx(ID,-1,"Un dueño te asignó el rango administrativo {8F70FE}%s", ADMIN_RANKS(inputtext[0]));
						SendClientMessage(playerid,-1,"Modificaste el rango del usuario correctamente.");
		                PlayerInfo[ID][pAdmin] = inputtext[0];
		                GuardarCuenta(ID);
					}
				}
				else
				{
				    SendClientMessage(playerid, -1, "Indica el rango (1 - 6).");
					new dialog[145];
					format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 6):",  PlayerInfo[PlayerTemp[playerid][p_ADD_ADMIN_ID]][Nickname], PlayerTemp[playerid][p_ADD_ADMIN_ID]);
					ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
					return 1;
				}
			}
		    return 1;
		}
        case MENU_TIENDA:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: //ropa
                    {
                        if(PlayerInfo[playerid][pDuty] > 0)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1, "No puedes comprar ropa estando de servicio");
                            return 1;
                        }
                        if(PlayerInfo[playerid][Moneda] < 5)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar ropa {00CC00}5"SERVER_COIN"");
                            return 1;
                        }
                        switch(PlayerInfo[playerid][pSexo])
                        {
                            case 1:
                            {
                                ShowModelSelectionMenu(playerid, RopaHombreBZ, "Ropa "SERVER_COIN"");
                                SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {00CC00}5"SERVER_COIN"");
                            }
                            case 2:
                            {
                                ShowModelSelectionMenu(playerid, RopaMujerBZ, "Ropa "SERVER_COIN"");
                                SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {00CC00}5"SERVER_COIN"");
                            }
                            default: ShowPlayerDialog(playerid, MENU_TIENDA_1, DIALOG_STYLE_LIST,"Sexo Inválido - Vuelve a seleccionarlo.","{FFFFFF}Hombre\n{FFFFFF}Mujer", "Seleccionar", "Salir");
                        }
                    }
                    case 1: //botes
                    {
						if(PlayerInfo[playerid][Moneda] < 30)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar vehiculos {00CC00}30"SERVER_COIN"");
                            return 1;
                        }
                        ShowModelSelectionMenu(playerid, barp, "Botes "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {00CC00}30"SERVER_COIN"");
                    }
                    case 2: //motos
                    {
					    if(PlayerInfo[playerid][Moneda] < 35)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar motos {00CC00}35"SERVER_COIN"");
                            return 1;
                        }
                        ShowModelSelectionMenu(playerid, Motosrp, "Motos "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {00CC00}35"SERVER_COIN"");
                    }
                    case 3:// veh
                    {
						if(PlayerInfo[playerid][Moneda] < 40)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar vehiculos {00CC00}40"SERVER_COIN"");
                            return 1;
                        }
                        ShowModelSelectionMenu(playerid, vehrp, "Vehiculos "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {00CC00}40"SERVER_COIN"");
                    }
                    case 4: //helicopteros
                    {
						if(PlayerInfo[playerid][pLicenciaVuelo] == 0)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"Necesitas una licencia de piloto para poder comprar este tipo de vehículo.");
                            return 1;
                        }
                        if(PlayerInfo[playerid][Moneda] < 80)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar helicopteros {00CC00}80"SERVER_COIN"");
                            return 1;
                        }
                        ShowModelSelectionMenu(playerid, Helrp, "Helicopteros "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {00CC00}80"SERVER_COIN"");
                    }
                    case 5: //crear banda
                    {
                        if(PlayerInfo[playerid][pFaccion] != 0)
                        {
                            callcmd::tienda(playerid);
                            SendClientMessage(playerid,-1,"Ya perteneces a una banda");
                            return 1;
                        }
                        ShowPlayerDialog(playerid,CREAR_BANDA, DIALOG_STYLE_INPUT, "Creación de banda", "{FFFFFF}El coste de crear una banda es de {00E300}500.000${FFFFFF}\nSi estás seguro de crearla, escribe el nombre", "Continuar", "Salir");
                    }
                    case 6: // Comprar VIP
                    {
                    	ShowPlayerDialog(playerid, COMPRAR_VIP, DIALOG_STYLE_LIST, "- VIP","- Comprar VIP1\n- Comprar VIP2", "Aceptar","Cancelar"); //VIP
                    }
                }
            }
        }
        case COMPRARCAMELLO:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: ShowPlayerDialog(playerid, COMPRARCAMELLO2, DIALOG_STYLE_LIST, "Comprar", "Marihuana\nMedicamentos\nTranquilizantes\nCrack", "Aceptar", "Cancelar");
                    case 1: ShowPlayerDialog(playerid, VENDERCAMELLO, DIALOG_STYLE_LIST, "Vender", "Marihuana\nMedicamentos\nTranquilizantes\nCrack", "Aceptar", "Cancelar");
                }
            }
            return 1;
        }
        case VENDERMARIHUANA:
        {
            if(response)
            {
                
                new precio = 400;
                new preciototal = precio * strval(inputtext);
                if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                if(PlayerInfo[playerid][pMarihuana] >= strval(inputtext) && IsNumeric(inputtext))
                {
                    if(DineroCamello >= preciototal)
                    {
                        format(string, sizeof(string), "Vendiste %dg. de marihuana por {00CC00}$%d{FFFFFF}.", strval(inputtext),preciototal);
                        SendClientMessage(playerid, -1, string);
                        DarDinero(playerid, preciototal);
                        DineroCamello -= preciototal;
                        MarihuanaCamello += strval(inputtext);
                        PlayerInfo[playerid][pMarihuana] -= strval(inputtext);
                    }
                    else SetPlayerChatBubble(Camello, "No tengo más dinero.", -1, 30.0, 5000),SendClientMessage(playerid,-1,"El camello no tiene dinero, vuelve más tarde");
                }
                else SendClientMessage(playerid, -1, "No tienes esa cantidad de marihuana.");
            }
            return 1;
        }
        case VENDERCRACK:
        {
            if(response)
            {
                
                new precio = 300;
                new preciototal = precio * strval(inputtext);
                if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                if(PlayerInfo[playerid][pCrack] >= strval(inputtext) && IsNumeric(inputtext))
                {
                    if(DineroCamello >= preciototal)
                    {
                        format(string, sizeof(string), "Vendiste %dg. de crack por {00CC00}$%d{FFFFFF}.", strval(inputtext),preciototal);
                        SendClientMessage(playerid, -1, string);
                        DarDinero(playerid, preciototal);
                        DineroCamello -= preciototal;
                        CrackCamello += strval(inputtext);
                        PlayerInfo[playerid][pCrack] -= strval(inputtext);
                    }
                    else SetPlayerChatBubble(Camello, "No tengo más dinero.", -1, 30.0, 5000),SendClientMessage(playerid,-1,"El camello no tiene dinero, vuelve más tarde");
                }
                else SendClientMessage(playerid, -1, "No tienes esa cantidad de crack.");
            }
            return 1;
        }
        case VENDERMEDICAMENTOS:
        {
            if(response)
            {
                
                new precio = 150;
                new preciototal = precio * strval(inputtext);
                if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                if(PlayerInfo[playerid][pMedicamentos] >= strval(inputtext) && IsNumeric(inputtext))
                {
                    if(DineroCamello >= preciototal)
                    {
                        format(string, sizeof(string), "Vendiste %d medicamentos por {00CC00}$%d{FFFFFF}.", strval(inputtext),preciototal);
                        SendClientMessage(playerid, -1, string);
                        DarDinero(playerid, preciototal);
                        DineroCamello -= preciototal;
                        MedicamentosCamello += strval(inputtext);
                        PlayerInfo[playerid][pMedicamentos] -= strval(inputtext);
                    }
                    else SetPlayerChatBubble(Camello, "No tengo más dinero.", -1, 30.0, 5000),SendClientMessage(playerid,-1,"El camello no tiene dinero, vuelve más tarde");
                }
                else SendClientMessage(playerid, -1, "No tienes esa cantidad de medicamentos.");
            }
            return 1;
        }
        case VENDERTRANQUILIZANTES:
        {
            if(response)
            {
                
                new precio = 150;
                new preciototal = precio * strval(inputtext);
                if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                if(PlayerInfo[playerid][pTranquilizantes] >= strval(inputtext) && IsNumeric(inputtext))
                {
                    if(DineroCamello >= preciototal)
                    {
                        format(string, sizeof(string), "Vendiste %d tranquilizantes por {00CC00}$%d{FFFFFF}.", strval(inputtext),preciototal);
                        SendClientMessage(playerid, -1, string);
                        DarDinero(playerid, preciototal);
                        DineroCamello -= preciototal;
                        TranquilizantesCamello += strval(inputtext);
                        PlayerInfo[playerid][pTranquilizantes] -= strval(inputtext);
                    }
                    else SetPlayerChatBubble(Camello, "No tengo más dinero.", -1, 30.0, 5000),SendClientMessage(playerid,-1,"El camello no tiene dinero, vuelve más tarde");
                }
                else SendClientMessage(playerid, -1, "No tienes esa cantidad de tranquilizantes.");
            }
            return 1;
        }
        case VENDERCAMELLO:
        {
            if(0 > DineroCamello) return SetPlayerChatBubble(Camello, "No tengo más dinero.", -1, 30.0, 5000),SendClientMessage(playerid,-1,"El camello no tiene dinero, vuelve más tarde");
            {
                if(response)
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            format(string,sizeof(string), "{FFFFFF}Tengo {00CC00}$%d{FFFFFF} para comprarte marihuana.\nTe doy {00CC00}$400{FFFFFF} por cada gramo.",DineroCamello);
                            ShowPlayerDialog(playerid, VENDERMARIHUANA, DIALOG_STYLE_INPUT, "¿Cuántos quieres vender?", string, "Aceptar", "Cancelar");
                        }
                        case 1:
                        {
                            format(string,sizeof(string), "{FFFFFF}Tengo {00CC00}$%d{FFFFFF} para comprarte medicamentos.\nTe doy {00CC00}$150{FFFFFF} por cada pastilla.",DineroCamello);
                            ShowPlayerDialog(playerid, VENDERMEDICAMENTOS, DIALOG_STYLE_INPUT, "¿Cuántos quieres vender?", string, "Aceptar", "Cancelar");
                        }
                        case 2:
                        {
                            format(string,sizeof(string), "{FFFFFF}Tengo {00CC00}$%d{FFFFFF} para comprarte tranquilizantes.\nTe doy {00CC00}$100{FFFFFF} por cada pastilla.",DineroCamello);
                            ShowPlayerDialog(playerid, VENDERTRANQUILIZANTES, DIALOG_STYLE_INPUT, "¿Cuántos quieres vender?", string, "Aceptar", "Cancelar");
                        }
                        case 3:
                        {
                            format(string,sizeof(string), "{FFFFFF}Tengo {00CC00}$%d{FFFFFF} para comprarte crack.\nTe doy {00CC00}$300{FFFFFF} por cada gramo.",DineroCamello);
                            ShowPlayerDialog(playerid, VENDERCRACK, DIALOG_STYLE_INPUT, "¿Cuántos quieres vender?", string, "Aceptar", "Cancelar");
                        }
                    }
                }
            }
            return 1;
        }
        case COMPRARCAMELLO2:
        {
            if(response)
            {
                if(DineroCamello > 0)
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            if(0 > MarihuanaCamello) return SetPlayerChatBubble(Camello, "No me queda más marihuana.", -1, 30.0, 5000);
                            {
                                format(string, sizeof(string), "{FFFFFF}Tengo %dg. de marihuana para venderte.\nEl costo es de {00CC00}$450{FFFFFF} por cada gramo.",MarihuanaCamello);
                                ShowPlayerDialog(playerid, COMPRARMARIHUANA, DIALOG_STYLE_INPUT, "¿Cuántos gramos quieres?", string,"Aceptar", "Cancelar");
                            }
                        }
                        case 1:
                        {
                            if(0 > MedicamentosCamello) return SetPlayerChatBubble(Camello, "No me quedan más medicamentos.", -1, 30.0, 5000);
                            {
                                format(string, sizeof(string), "{FFFFFF}Tengo %d medicamentos para venderte.\nEl costo es de {00CC00}$200{FFFFFF} por cada pastilla.",MedicamentosCamello);
                                ShowPlayerDialog(playerid, COMPRARMEDICAMENTOS, DIALOG_STYLE_INPUT, "¿Cuántos medicamentos quieres?", string,"Aceptar", "Cancelar");
                            }
                        }
                        case 2:
                        {
                            if(0 > TranquilizantesCamello) return SetPlayerChatBubble(Camello, "No me quedan más tranquilizantes.", -1, 30.0, 5000);
                            {
                                format(string, sizeof(string), "{FFFFFF}Tengo %d tranquilizantes para venderte.\nEl costo es de {00CC00}$400{FFFFFF} por cada pastilla.",TranquilizantesCamello);
                                ShowPlayerDialog(playerid, COMPRARTRANQUILIZANTES, DIALOG_STYLE_INPUT, "¿Cuántos tranquilizantes quieres?", string,"Aceptar", "Cancelar");
                            }
                        }
                        case 3:
                        {
                            if(0 > CrackCamello) return SetPlayerChatBubble(Camello, "No me queda más crack.", -1, 30.0, 5000);
                            {
                                format(string, sizeof(string), "{FFFFFF}Tengo %dg. de crack para venderte.\nEl costo es de {00CC00}$350{FFFFFF} por cada gramo.",CrackCamello);
                                ShowPlayerDialog(playerid, COMPRARCRACK, DIALOG_STYLE_INPUT, "¿Cuántos gramos quieres?", string, "Aceptar", "Cancelar");
                            }
                        }
                    }
                }
            }
            return 1;
        }
        case COMPRARMARIHUANA:
        {
            if(response)
            {
                
                if(MarihuanaCamello >= strval(inputtext) && IsNumeric(inputtext))
                {
                    new precio = 450;
                    new preciofinal = strval(inputtext) * precio;
                    if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                    if(PlayerInfo[playerid][pDinero] >= preciofinal)
                    {
                        format(string, sizeof(string), "Compraste %d gramos de marihuana por {00CC00}$%d{FFFFFF}.", strval(inputtext), preciofinal);
                        SendClientMessage(playerid, -1, string);
                        QuitarDinero(playerid, preciofinal);
                        PlayerInfo[playerid][pMarihuana] += strval(inputtext);
                        MarihuanaCamello -= strval(inputtext);
                        DineroCamello += preciofinal;
                        SetPlayerChatBubble(Camello, "Gracias, regresa cuando quieras.", -1, 30.0, 5000);
                    }
                    else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
                }
                else SetPlayerChatBubble(Camello, "No tengo esa cantidad de marihuana.", -1, 30.0, 5000);
            }
            return 1;
        }
        case COMPRARCRACK:
        {
            if(response)
            {
                
                if(CrackCamello >= strval(inputtext) && IsNumeric(inputtext))
                {
                    new precio = 350;
                    new preciofinal = strval(inputtext) * precio;
                    if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                    if(PlayerInfo[playerid][pDinero] >= preciofinal)
                    {
                        format(string, sizeof(string), "Compraste %d gramos de crack por {00CC00}$%d{FFFFFF}.", strval(inputtext), preciofinal);
                        SendClientMessage(playerid, -1, string);
                        QuitarDinero(playerid, preciofinal);
                        PlayerInfo[playerid][pCrack] += strval(inputtext);
                        CrackCamello -= strval(inputtext);
                        DineroCamello += preciofinal;
                        SetPlayerChatBubble(Camello, "Gracias, regresa cuando quieras.", -1, 30.0, 5000);
                    }
                    else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
                }
                else SetPlayerChatBubble(Camello, "No tengo esa cantidad de crack.", -1, 30.0, 5000);
            }
            return 1;
        }
        case COMPRARMEDICAMENTOS:
        {
            if(response)
            {
                
                if(MedicamentosCamello >= strval(inputtext) && IsNumeric(inputtext))
                {
                    new precio = 200;
                    new preciofinal = strval(inputtext) * precio;
                    if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                    if(PlayerInfo[playerid][pDinero] >= preciofinal)
                    {
                        format(string, sizeof(string), "Compraste %d medicamentos por {00CC00}$%d{FFFFFF}.",strval(inputtext),preciofinal);
                        SendClientMessage(playerid, -1, string);
                        QuitarDinero(playerid, preciofinal);
                        PlayerInfo[playerid][pMedicamentos] += strval(inputtext);
                        MedicamentosCamello -= strval(inputtext);
                        DineroCamello += preciofinal;
                        SetPlayerChatBubble(Camello, "Gracias, regresa cuando quieras.", -1, 30.0, 5000);
                    }
                    else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
                }
                else SetPlayerChatBubble(Camello, "No tengo esa cantidad de medicamentos.", -1, 30.0, 5000);
            }
            return 1;
        }
        case COMPRARTRANQUILIZANTES:
        {
            if(response)
            {
                
                if(TranquilizantesCamello >= strval(inputtext) && IsNumeric(inputtext))
                {
                    new precio = 200;
                    new preciofinal = strval(inputtext) * precio;
                    if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
                    if(PlayerInfo[playerid][pDinero] >= preciofinal)
                    {
                        format(string, sizeof(string), "Compraste %d tranquilizantes por {00CC00}$%d{FFFFFF}.",strval(inputtext),preciofinal);
                        SendClientMessage(playerid, -1, string);
                        QuitarDinero(playerid, preciofinal);
                        PlayerInfo[playerid][pTranquilizantes] += strval(inputtext);
                        TranquilizantesCamello -= strval(inputtext);
                        DineroCamello += preciofinal;
                        SetPlayerChatBubble(Camello, "Gracias, regresa cuando quieras.", -1, 30.0, 5000);
                    }
                    else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
                }
                else SetPlayerChatBubble(Camello, "No tengo esa cantidad de medicamentos.", -1, 30.0, 5000);
            }
            return 1;
        }
        case C_BOLETO:
        {
            if(response)
            {
                new pryce,message[256],lugar;
                switch(EnEstacion[playerid])
                {
                    case 1: { switch(listitem) { case 0: pryce = 300,lugar = 4; case 1: pryce = 650,lugar = 2; case 2: pryce = 800,lugar = 5; case 3: pryce = 1100,lugar = 2; } }
                    case 2: { switch(listitem) { case 0: pryce = 150,lugar = 3; case 1: pryce = 450,lugar = 4; case 2: pryce = 800,lugar = 1; case 3: pryce = 950,lugar = 5; } }
                    case 3: { switch(listitem) { case 0: pryce = 150,lugar = 5; case 1: pryce = 450,lugar = 2; case 2: pryce = 600,lugar = 3; case 3: pryce = 900,lugar = 4; } }
                    case 4: { switch(listitem) { case 0: pryce = 350,lugar = 1; case 1: pryce = 500,lugar = 5; case 2: pryce = 800,lugar = 2; case 3: pryce = 950,lugar = 3; } }
                    case 5: { switch(listitem) { case 0: pryce = 300,lugar = 2; case 1: pryce = 450,lugar = 3; case 2: pryce = 750,lugar = 4; case 3: pryce = 1100,lugar = 1; } }
                }
                if(PlayerInfo[playerid][pDinero] < pryce) return SendClientMessage(playerid,-1,"No tienes el dinero necesario para comprar el boleto.");
                switch(lugar)
                {
                    case 1: format(message,sizeof(message),"Las Venturas, Yellow Bell Station");
                    case 2: format(message,sizeof(message),"Los Santos, Unity Station");
                    case 3: format(message,sizeof(message),"Los Santos, Market Station");
                    case 4: format(message,sizeof(message),"San Fierro, Cranberry Station");
                    case 5: format(message,sizeof(message),"Las Venturas, Linden Station");
                }
                new pric3[64];
                format(pric3,sizeof(pric3),"~r~-$%d",pryce);
                GameTextForPlayer(playerid, pric3, 5000, 1);
                MensajeEx(playerid, -1, "Compraste un boleto con destino a {00CC00}%s{FFFFFF}.",message);
                QuitarDinero(playerid,pryce);
                Boletos[playerid] = lugar;
            }
        }
        case MENU_TIENDA_1:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        PlayerInfo[playerid][pSexo] = 1;
                        ShowModelSelectionMenu(playerid, RopaHombreBZ, "Ropa "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {00CC00}5"SERVER_COIN"");
                    }
                    case 1:
                    {
                        PlayerInfo[playerid][pSexo] = 2;
                        ShowModelSelectionMenu(playerid, RopaMujerBZ, "Ropa "SERVER_COIN"");
                        SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {00CC00}5"SERVER_COIN"");
                    }
                }
            }
        }
        case DIALOG_PHONE:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: //Agenda
                    {
                        if(TelefonoEstado[playerid] == 1)
                        {
                            AccionesRol(playerid,"encendió su teléfono móvil.", 20);
                            TelefonoEstado[playerid] = 0;
                            ShowDialog(playerid, dialogid);
                            return 1;
                        }
                        ShowDialog(playerid, DIALOG_PHONE_BOOK);
                    }
                    case 1: //Llamar
                    {
                        if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
                        ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
                    }
                    case 2: //Enviar mensaje
                    {
                        if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
                        ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
                    }
                    case 3: //Apagar
                    {
                        if(PlayerInfo[playerid][MobileSub] == 2540 || PlayerInfo[playerid][MobileSub] == 911)  ColgarLaLlamada(playerid);
                        new caller = PlayerInfo[playerid][MobileSub];
                        if(IsPlayerConnected(caller) && caller != -1)
                        {
                            SendClientMessage(caller, -1, "Colgaron la llamada.");
                            SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
                            PlayerInfo[caller][MobileSub] = -1;
                            EnLlamada[caller] = 0;
                            finllamada(caller);
                            ColgarLaLlamada(playerid);
                        }
                        TelefonoEstado[playerid] = 1;
                        AccionesRol(playerid,"apagó su teléfono móvil.", 20);
                    }
                }
            }
            return 1;
        }
        case DIALOG_PHONE_BOOK:
        {
            if(response)
            {
                if(PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
                if(PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
                if(PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);
                PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] = PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem];
                ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
            }
            else ShowDialog(playerid, DIALOG_PHONE);
            return 1;
        }
        case DIALOG_PHONE_BOOK_ADD_NUMBER:
        {
            if(response)
            {
                if(sscanf(inputtext, "d", inputtext[0]))
                {
                    SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor numérico.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                if(inputtext[0] <= 0)
                {
                    SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor positivo.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
                ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK);
            return 1;
        }
        case DIALOG_PHONE_BOOK_ADD_NAME:
        {
            if(response)
            {
                if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
                if(strlen(inputtext) > 24)
                {
                    SendClientMessage(playerid, -1, "Caracteres: 1-24.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                new slot = GetEmptyPlayerPhoneBookSlot(playerid);
                if(slot == -1) return SendClientMessage(playerid, -1, "Memoria de la agenda llena.");
                PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
                format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
                PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
                RegisterNewPlayerPhoneBook(playerid, slot);
                MensajeEx(playerid, -1, "Nuevo contacto añadido: Nombre: {DBED15}%s {FFFFFF}Teléfono: {DBED15}%d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
                ShowDialog(playerid, DIALOG_PHONE_BOOK);
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
            return 1;
        }
        case DIALOG_PHONE_BOOK_OPTIONS:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: //llamar
                    {
                        new numero[70];
                        format(numero, sizeof(numero),"%d",PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
                        callcmd::llamar(playerid, numero);
                    }
                    case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
                    case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
                    case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
                }
                PlayerTemp[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER];
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK);
            return 1;
        }
        case DIALOG_PHONE_BOOK_CHANGE_NAME:
        {
            if(response)
            {
                if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
                if(strlen(inputtext) > 24)
                {
                    SendClientMessage(playerid, -1, "Caracteres: 1-24.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                format(PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);
                new query[520];
                mysql_format(handle_db, query, sizeof(query), "UPDATE `player_book` SET `NAME` = '%s' WHERE `ID` = '%d';",PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
                mysql_query(handle_db, query, true);
                SendClientMessage(playerid, -1, "Contacto modificado.");
                ShowDialog(playerid, DIALOG_PHONE_BOOK);
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
            return 1;
        }
        case DIALOG_PHONE_BOOK_CONFIRM_DELET:
        {
            if(response)
            {
                new query[520];
                mysql_format(handle_db, query, sizeof(query), "DELETE FROM `player_book` WHERE `PHONE_ID` = '%d' AND `ID` = '%d';", PlayerInfo[playerid][pNumero], PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
                mysql_query(handle_db, query, true);
                MensajeEx(playerid, -1, "Contacto {DBED15}\"%s\" {FFFFFF}eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
                PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
                PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
                format(PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
                PLAYER_PHONE_BOOK[playerid][ PlayerTemp[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;
                ShowDialog(playerid, DIALOG_PHONE_BOOK);
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
            return 1;
        }
        case DIALOG_PHONE_BOOK_DELETE_ALL:
        {
            if(response)
            {
                new query[520];
                mysql_format(handle_db, query, sizeof(query), "DELETE FROM `player_book` WHERE `PHONE_ID` = '%d';", PlayerInfo[playerid][pNumero]);
                mysql_query(handle_db, query, true);
                new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
                for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
                SendClientMessage(playerid, -1, "Has eliminado todos sus contactos.");
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK);
            return 1;
        }
        case DIALOG_PHONE_CALL_NUMBER:
        {
            if(response)
            {
                if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /telefono.");
                if(EnLlamada[playerid] == 1) return SendClientMessage(playerid, -1, "Estás en una llamada.");
                if(sscanf(inputtext, "d", inputtext[0]))
                {
                    SendClientMessage(playerid, -1, "Número no válido.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                if(inputtext[0] <= 0)
                {
                    SendClientMessage(playerid, -1, "El número destino no es válido.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                new numero[70];
                format(numero, sizeof(numero),"%d", inputtext[0]);
                callcmd::llamar(playerid, numero);
            }
            else ShowDialog(playerid, DIALOG_PHONE);
            return 1;
        }
        case DIALOG_PHONE_SMS_NUMBER:
        {
            if(response)
            {
                if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /movil.");
                if(EnLlamada[playerid] == 1) return SendClientMessage(playerid, -1, "Estás en una llamada.");
                if(sscanf(inputtext, "d", inputtext[0]))
                {
                    SendClientMessage(playerid, -1, "Número no válido.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                if(inputtext[0] <= 0)
                {
                    SendClientMessage(playerid, -1, "El número destino no es válido.");
                    ShowDialog(playerid, dialogid);
                    return 1;
                }
                new to_playerid = INVALID_PLAYER_ID;
                foreach(new i : Player)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(PlayerInfo[i][pNumero] == inputtext[0])
                        {
                            to_playerid = i;
                            break;
                        }
                    }
                }
                if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El número destino no es válido.");
                PlayerTemp[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
                ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
            }
            else ShowDialog(playerid, DIALOG_PHONE);
            return 1;
        }
        case DIALOG_PHONE_SMS_MESSAGE:
        {
            if(response)
            {
                if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
                if(strlen(inputtext) > 145) return ShowDialog(playerid, dialogid);
                new numero[170];
                format(numero, sizeof(numero),"%d %s", PlayerTemp[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
                callcmd::sms(playerid, numero);
            }
            else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
            return 1;
        }
        case DIALOG_PHONE_BOOK_SEND_MESSAGE:
        {
            if(response)
            {
                if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
                if(strlen(inputtext) > 145) return ShowDialog(playerid, dialogid);
                new numero[170];
                format(numero, sizeof(numero),"%d %s", PlayerTemp[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
                callcmd::sms(playerid, numero);
            }
            else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
            return 1;
        }
        case DIALOG_PLAYER_TOYS:
        {
            if(response)
            {
                if(listitem == MAX_PTOYS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
                if(!PlayerInfo[playerid][pVip] && listitem >= 3)
                {
                    MensajeEx(playerid, -1, "{CCCCCC}¡Los jugadores {b1fc6f}VIP{CCCCCC} pueden tener hasta %d prendas.", MAX_PTOYS);
                    return ShowDialog(playerid, dialogid);
                }
                PlayerTemp[playerid][p_SELECTED_TOY_SLOT] = listitem;
                ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
            }
            return 1;
        }
        case DIALOG_PLAYER_TOY_MENU:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: //colocar / quitar
                    {
                        if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando])
                        {
                            PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando] = false;
                            RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
                        }
                        else // No lo tiene puesto
                        {
                            if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
                            PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando] = true;
                            RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
                            SetPlayerAttachedObject(playerid,PlayerTemp[playerid][p_SELECTED_TOY_SLOT],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pModelID],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pOffsetZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pRotZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleX],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleY],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pScaleZ],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1],PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2]);
                        }
                    }
                    case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
                    case 2: //Configurar
                    {
                        if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
                        ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
                    }
                    case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
                    case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
                    case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
                }
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOYS);
        }
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{CCCCCC}El nombre de la prenda debe contener de 1 a 24 caracteres.");
					return ShowDialog(playerid, dialogid);
				}
				format(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pToyName], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
		}
        case DIALOG_PLAYER_TOY_CONFIRMDELETE:
        {
            if(response)
            {
                MensajeEx(playerid, -1,"{CCCCCC}Has eliminado la prenda %s correctamente.",GetNameObjeto(PlayerToys[playerid][PlayerTemp[playerid][p_SELECTED_TOY_SLOT]][pModelID]));
                mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `prendas` WHERE `ID`='%d'",PlayerToys[playerid][PlayerTemp[playerid][p_SELECTED_TOY_SLOT]][pToyID]);
                mysql_query(handle_db, Query, true);
                new reiniciar_toys[pToysInfo]; PlayerToys[playerid][PlayerTemp[playerid][p_SELECTED_TOY_SLOT]] = reiniciar_toys;
                if(IsPlayerAttachedObjectSlotUsed(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT])) RemovePlayerAttachedObject(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
                PlayerTemp[playerid][p_SELECTED_TOY_SLOT] = -1;
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
        }
        case DIALOG_PLAYER_TOY_SELECT_BONE:
        {
            if(response)
            {
                PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pBone] = listitem + 1;
                EditPlayerToy(playerid);
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
        }
        case DIALOG_PLAYER_TOY_EDIT_BONE:
        {
            if(response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
            else return EditPlayerToy(playerid);
        }
        case DIALOG_PLAYER_TOY_COLOR_1:
        {
            if(response)
            {
                if(listitem == 0) PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1] = 0;
                else PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor1] = RGBAToARGB(RandomColors[listitem]);
                if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) UpdatePlayerToy(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
                SendClientMessage(playerid, -1, "Cambiaste el color de tu {00F531}prenda.");
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
        }
        case DIALOG_PLAYER_TOY_COLOR_2:
        {
            if(response)
            {
                if(listitem == 0) PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2] = 0;
                else PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pColor2] = RGBAToARGB(RandomColors[listitem]);
                if(PlayerToys[playerid][ PlayerTemp[playerid][p_SELECTED_TOY_SLOT] ][pUsando]) UpdatePlayerToy(playerid, PlayerTemp[playerid][p_SELECTED_TOY_SLOT]);
                SendClientMessage(playerid, -1, "Cambiaste el color de tu {00F531}prenda.");
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
        }
        case DIALOG_PLAYER_TOY_DELETE_ALL:
        {
            if(response)
            {
                new DB_Query[90],temp_PLAYER_TOYS[pToysInfo];
                mysql_format(handle_db, DB_Query, sizeof(DB_Query), "DELETE FROM `prendas` WHERE `Propietario` = '%s'", PlayerName(playerid));
                mysql_tquery(handle_db, DB_Query);
                for(new i = 0; i != MAX_PTOYS; i ++)
                {
                    RemovePlayerAttachedObject(playerid, i);
                    PlayerToys[playerid][i] = temp_PLAYER_TOYS;
                }
                SendClientMessage(playerid, -1, "{CCCCCC}Has eliminado todas tus prendas.");
            }
            else return ShowDialog(playerid, DIALOG_PLAYER_TOYS);
        }
        case DIALOG_PEDIDO:
        {
            if(!response) return 1;
            new dialog[] = "- Propiedades\n- Cambio de nombre\n- Desalojo de casa";
            ShowPlayerDialog(playerid, DIALOG_PEDIDO_2, DIALOG_STYLE_TABLIST, "Menu de Pedido", dialog, "Seleccionar","Salir");
            return 1;
        }
        case DIALOG_PEDIDO_2:
        {
            if(!response) return 1;
            switch(listitem)
            {
                case 0: // Casa
                {
                    new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa el interior que quieres para la casa, pero recuerda:\n\n{FFFFFF}\t* El interior que quieres tener debe ser entre 1 y 42\n{FFFFFF}\t* Debes colocar si quieres la propiedad con garage si/no\n{FFFFFF}\t* El interior debe ser acorde al {00FF3F}tamaño de la casa(exterior)\n{FFFFFF}\t* Debes estar en la {00FF3F}entrada de la casa {FFFFFF}para pedir el mapeo\n\n{FF0000}Información importante\n{FFFFFF}Solo debes ingresar lo que se te pide, caso contrario no se tomará en cuenta tu pedido.";
                    ShowPlayerDialog(playerid, DIALOG_PEDIDO_PROPIEDAD, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
                }
                case 1: // Cambio de nombre
                {
                    new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n{FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n{FFFFFF}\t* No debe tener ningún número.\n{FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n{FFFFFF}\t* Ejemplo: Daniel_Casanova";
                    ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
                    return 1;
                }
                case 2: // Desalojo de casa
                {
                    new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa la ubicacion de la casa, pero recuerda:\n\n{FFFFFF}\t* El usuario de la casa debe estar desconectado por mas de 7 días\n{FFFFFF}\t* No debes de pedirla si esta conectado el dueño de la casa.\n{FFFFFF}\t* Recuerda hacer bien el pedido.\n{FFFFFF}\t* Ejemplo: Pedido de desalojo, ubicación - Mullholland Tiempo vacía - 7 días";
                    ShowPlayerDialog(playerid, DIALOG_PEDIDO_DESALOJO, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
                    return 1;
                }
            }
        }
        case DIALOG_PEDIDO_PROPIEDAD:
        {
            if(!response) return 1;
            if(strval(inputtext) >= 1 && (strlen(inputtext) <= 5) && (ColocoSi_No(inputtext)))
            {
                new info1[50],interior[] = "0",value[] = "no";
                format(interior, sizeof(interior),"%s",inputtext);
                format(value, sizeof(value),"%s",inputtext[3]);
                format(info1, sizeof(info1), "Interior: %s - Garaje: %s", interior, value);
                RegistrarPedido(playerid, "Propiedad", info1, 1);
                return 1;
            }
            else SendClientMessage(playerid,-1,"Tu pedido fue cancelado por que no cumple los requisitos, sigue el ejemplo.");
            return 1;
        }
        case DIALOG_PEDIDO_DESALOJO:
        {
            if(!response) return 1;
            if(strval(inputtext) >= 1 && (strlen(inputtext) <= 5) && (ColocoSi_No(inputtext)))
            {
                new info1[50],tiempovacia[] = "42",value[] = "no";
                format(tiempovacia, sizeof(tiempovacia),"%s",inputtext);
                format(value, sizeof(value),"%s",inputtext[3]);
                format(info1, sizeof(info1), "Ubicación: %s - Tiempo vacía: %s", tiempovacia, value);
                RegistrarPedido(playerid, "Desalojo de casa", info1, 1);
                return 1;
            }
            else SendClientMessage(playerid,-1,"Tu pedido fue cancelado por que no cumple los requisitos, sigue el ejemplo.");
            return 1;
        }
        case DIALOG_PEDIDO_NOMBRE:
        {
            if(!response) return 1;
            if(!strlen(inputtext))
            {
                new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n{FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n{FFFFFF}\t* No debe tener ningún número.\n{FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n{FFFFFF}\t* Ejemplo: Daniel_Casanova";
                ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
                return SendClientMessage(playerid, 0xAFAFAFAA, "Ingresa el 'Nombre_Apellido'.");
            }
            if(strlen(inputtext) < 4 || strlen(inputtext) >= 25)
            {
                new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n{FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n{FFFFFF}\t* No debe tener ningún número.\n{FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n{FFFFFF}\t* Ejemplo: Daniel_Casanova";
                return ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
            }
            if(!IsValidName(inputtext))
            {
                new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n{FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n{FFFFFF}\t* No debe tener ningún número.\n{FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n{FFFFFF}\t* Ejemplo: Daniel_Casanova";
                ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
                return SendClientMessage(playerid,-1,"Nombre rechazado, por favor usa el formato {FBFE01}Nombre_Apellido{ffffff}.");
            }
            RegistrarPedido(playerid, "Cambio de Nombre", inputtext);
            return SendClientMessage(playerid,-1,"El pedido de cambio de nombre fue enviado, por favor espera.");
        }
        case MENU_PEDIDOS:
        {
            if(!response) return 1;
            new PEDIDO_ID = PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem];
            if(PEDIDO_INFO[PEDIDO_ID][pi_ID] == 0) return 1;
            new ID;
            SendClientMessage(playerid, -1,"El pedido una vez este revisado se borrará automaticamente en 1 minuto.");
            MensajeEx(playerid, -1,"ID: {DBED15}%d{ffffff} | Nombre: {DBED15}%s{ffffff} | Pedido: {DBED15}%s{ffffff} | Info: {DBED15}%s.",PEDIDO_ID, PEDIDO_INFO[PEDIDO_ID][pt_NAME], PEDIDO_INFO[PEDIDO_ID][pi_TEXT], PEDIDO_INFO[PEDIDO_ID][pt_TIPO]);
            PEDIDO_INFO[PEDIDO_ID][pt_TIME] = gettime() + 60;
            PEDIDO_INFO[PEDIDO_ID][pi_ESTADO] = 0;
            mysql_format(handle_db, Query, sizeof(Query), "UPDATE `pedidos` SET `ESTADO`='%d' WHERE `ID`='%d'", PEDIDO_INFO[PEDIDO_ID][pi_ESTADO],PEDIDO_INFO[PEDIDO_ID][pi_DB]);
            mysql_query(handle_db, Query, false);
            if(!sscanf(PEDIDO_INFO[PEDIDO_ID][pt_NAME], "u", ID))
            {
                if(!IsPlayerConnected(ID)) SendClientMessage(playerid,-1,"El jugador se encuentra desconectado.");
            }
            if(PEDIDO_INFO[PEDIDO_ID][pt_POS][0] != 0) SetPosEx(playerid, PEDIDO_INFO[PEDIDO_ID][pt_POS][0],PEDIDO_INFO[PEDIDO_ID][pt_POS][1],PEDIDO_INFO[PEDIDO_ID][pt_POS][2],0, 0, 0);
            return 1;
        }
		case DIALOG_MENU_DESBAN:
		{
		    if(!response) return 1;
		    mysql_format(handle_db, Query,sizeof(Query),"UPDATE `usuarios` SET `Baneado`='0' WHERE `ID`='%d'", PlayerTemp[playerid][p_SELECT_ADMIN_ID][listitem]);
			mysql_query(handle_db, Query, false);
			SendClientMessage(playerid, -1, "El usuario ha sido desbaneado.");
			ShowDialog(playerid, DIALOG_MENU_DESBAN);
		    return 1;
		}
        case DIALOG_ACENTO:
        {
            if(!response) return 1;
            MensajeEx(playerid, -1, "Ahora tu acento es {DBED15}%s{FFFFFF}, usa {DBED15}/acento{FFFFFF} para cambiarlo.", GetNameAcento(listitem));
            PlayerInfo[playerid][pAcento] = PlayerTemp[playerid][p_PLAYER_LISTITEM][listitem];
            mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Acento`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][pAcento], PlayerInfo[playerid][Nickname]);
            mysql_query(handle_db, Query);
            return 1;
        }
    }
    return 0;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
    if(areaid == AreaCabinas[5])
	{
	    for(new f = 0; f < MAX_FABRICAS; f++)
		{
	    	if(GetPlayerVirtualWorld(playerid) == Fabricas[f][pVW] && GetPlayerInterior(playerid) == Fabricas[f][pInt])
	    	{
				if(HornoEncendido1[f] == 1 || HornoEncendido2[f] == 1 || HornoEncendido3[f] == 1)
				{
				    if(TienePrendaFabrica(playerid)) return 1;
			        TextDrawShowForPlayer(playerid, Sangre);
					SendClientMessage(playerid,-1,"Entraste en un area de {00CC00}gases tóxicos{FFFFFF}, perderás{EB0000} salud{FFFFFF} por no usar una {317fca}máscara anti-gas{FFFFFF}.");
					DANOF[playerid] = SetTimerEx("DanoFabrica",1000,true,"d",playerid);
				}
			}
 		}
	}
    new emisora;
    if(areaid == AreaCabinas[1]) emisora = 1;
	if(areaid == AreaCabinas[2]) emisora = 2;
	if(areaid == AreaCabinas[3]) emisora = 3;
	if(areaid == AreaCabinas[4]) emisora = 4;
    if(emisora > 0)
    {
        if(CabinasOcupadasEmisoras[emisora][0] != 0)
        {
            new id = CabinasOcupadasEmisoras[emisora][1];
            if(Emisoras[id][CabinaOcupada] == emisora)
            {
                if(Emisoras[id][TransEmisora] == 1)
                {
                    new stringa[128];
                    CabinasOcupadasEmisoras[emisora][2]++;
                    MensajeEx(playerid, -1, "Emisora: %d {DBED15}- %s", emisora, Emisoras[id][NombreEmisora]);
                    format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
                    PlayAudioStreamForPlayerEx(playerid, stringa);
                    return 1;
                }
            }
        }
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < MAX_COP_OBJECTS; i++)
		{
		    if(!CopObjectData[i][ObjCreated]) continue;
		    if(areaid == CopObjectData[i][ObjArea])
		    {
				switch(CopObjectData[i][Type])
				{
				    case OBJECT_TYPE_SPIKE:
				    {
						new panelsx, doorsx, lightsx, tiresx;
			        	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panelsx, doorsx, lightsx, tiresx);
			        	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panelsx, doorsx, lightsx, encode_tires(1, 1, 1, 1));
			        	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					}
				}
				break;
		    }
		}
	}
    foreach(new id : Player)
    {
        if(IsPlayerConnected(id))
        {
            for(new i = 0; i != MAX_TERRITORIOS; i ++)
            {
                if(!TerritorioInfo[i][Territorio_Valido]) continue;
                if(IsPlayerInDynamicArea(id, TerritorioInfo[i][Territorio_Area]))
                {
                    new info[2],message[145];
                    Streamer_GetArrayData(STREAMER_TYPE_AREA, TerritorioInfo[i][Territorio_Area], E_STREAMER_EXTRA_ID, info);
                    switch(info[0])
                    {
                        case AREA_TYPE_GANGZONE:
                        {
                            new index = info[1];
                            if(TerritorioInfo[index][Territorio_Valido])
                            {
                                if(PlayerInfo[id][pt_LAST_TERRITORY] == index) continue;
                                PlayerInfo[id][pt_LAST_TERRITORY] = index;
                                if(PlayerInfo[id][pFaccion] > 1 && PlayerInfo[id][pTerritorioAviso] == 1)
                                {
                                    if(TerritorioInfo[index][Territorio_BandaID2] > 1) format(message, sizeof message, "Territorio de ~b~%s",BandasInfo[TerritorioInfo[index][Territorio_BandaID]][BNombre]);
									else if(TerritorioInfo[index][Territorio_BandaID2] == 0) format(message, sizeof message, "Territorio libre");
									PlayerTextDrawSetString(playerid, MensajeTD[playerid], message),PlayerTextDrawShow(playerid, MensajeTD[playerid]);
                                    if(TerritorioInfo[index][Territorio_EnGuerra])
                                    {
                                        new r, g, b, a;
                                        MensajeEx(id, -1, "Este territorio está siendo atacado por la banda {%06x}%s.", BandasInfo[TerritorioInfo[index][Territorio_AtacanteID]][BColor] >>> 8, BandasInfo[TerritorioInfo[index][Territorio_AtacanteID]][BNombre]);
                                        HexToRGBA(BandasInfo[PlayerInfo[id][pFaccion]][BColor], r, g, b, a);
                                        TextDrawShowForPlayer(id, Territorio_TD[0]),TextDrawShowForPlayer(id, Territorio_TD[1]);
                                        if(GetPlayerState(id) != PLAYER_STATE_DRIVER) EsconderVelocimetro(id);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
	return 1;
}
public OnGameModeExit()
{
    for(new f = 0; f < MAX_FABRICAS; f++) { if(Fabricas[f][pEnUso] == 1) GuardarFabrica(f); }
    mysql_close(handle_db);
    return 1;
}
public OnGameModeInit()
{
    for(new t=0; t < MAX_NPC_ROBOS; t++)
    {
        RoboTiendas[t][TiendaLadron] = INVALID_PLAYER_ID;
        RoboTiendas[t][TiendaRobada] = 0;
    }
    for(new i; i < MAX_MARIHUANA; i++)
    {
        Marihuana[i][Status] = 0;
        Marihuana[i][Created] = 0;
        format(Marihuana[i][Owner], 24, "Nadie");
    }
    new horas,minutos,segundos, day, month,year;
    getdate(year, month, day);
    mysql_log(ERROR);
    EnableVehicleFriendlyFire();
    PaydayDado = 0;
    ExpObj = 0;
    BoxObj = 0;
    ConObj = 0;
    Humo1Ojb = 0;
    Humo2Ojb = 0;
    ShowPlayerMarkers(1);
    gettime(horas,minutos,segundos);
    CrackCamello = 15000;
    MarihuanaCamello = 15000;
    MedicamentosCamello = 15000;
    TranquilizantesCamello = 20000;
    DineroCamello = 1000000;
    /*******************************OBJETOS*******************************/
    CabinasOcupadasEmisoras[1][0] = 0;
    CabinasOcupadasEmisoras[1][1] = -1;
    CabinasOcupadasEmisoras[2][0] = 0;
    CabinasOcupadasEmisoras[2][1] = -1;
    CabinasOcupadasEmisoras[3][0] = 0;
    CabinasOcupadasEmisoras[3][1] = -1;
    CabinasOcupadasEmisoras[4][0] = 0;
    CabinasOcupadasEmisoras[4][1] = -1;
    AreaCabinas[1] = CreateDynamicRectangle(348.7999,189.7051, 334.6652,175.9970);
    AreaCabinas[2] = CreateDynamicRectangle(348.8812,163.4289, 334.2779,154.2770);
    AreaCabinas[3] = CreateDynamicRectangle(348.8767,153.6340, 341.2415,143.9793);
    AreaCabinas[4] = CreateDynamicRectangle(360.3442,152.6125, 366.6700,162.1205);
   	AreaCabinas[5] = CreateDynamicRectangle(-1988.2349,197.7967,-2003.4601,190.8682); //CABINA METANFETAMINA
    CabinasTextos[1] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N1]", COLOR_ROJO, 349.4757, 179.4740, 1041.7256, 6);
    CabinasTextos[2] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N2]", COLOR_ROJO, 349.5319, 161.5695, 1041.6917, 6);
    CabinasTextos[3] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N3]", COLOR_ROJO, 349.5096, 150.0904, 1041.7167, 6);
    CabinasTextos[4] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N4]", COLOR_ROJO, 361.9887, 152.0883, 1041.7084, 6);
    // Entrada
    CreateDynamicObject(19273, 386.730011, 174.699997, 1040.550049, 0.000000, 0.000000, 177.910004);
    CreateDynamicObject(19273, 386.700012, 174.199997, 1040.550049, 0.000000, 0.000000, 358.700012);
    Botones[2] = CreateButton(386.7000, 174.4800, 1040.5500);
    // Sala 1
    CreateDynamicObject(19273, 349.359985, 178.309998, 1040.449951, 0.000000, 0.000000, 89.040001);
    CreateDynamicObject(19273, 348.660004, 178.289993, 1040.449951, 0.000000, 0.000000, 268.260010);
    Botones[4] = CreateButton(349.0600, 178.2900, 1040.4500);
    // Sala 2
    CreateDynamicObject(19273, 349.369995, 160.309998, 1040.449951, 0.000000, 0.000000, 89.040001);
    CreateDynamicObject(19273, 348.790009, 160.309998, 1040.449951, 0.000000, 0.000000, 268.260010);
    Botones[6] = CreateButton(349.0272, 160.3499, 1040.4500);
    // Sala 3
    CreateDynamicObject(19273, 349.380005, 148.850006, 1040.449951, 0.000000, 0.000000, 90.190002);
    CreateDynamicObject(19273, 348.779999, 148.839996, 1040.449951, 0.000000, 0.000000, 269.869995);
    Botones[8] = CreateButton(349.0400, 148.8500, 1040.4500);
    // Sala 4
    CreateDynamicObject(19273, 363.119995, 152.690002, 1040.449951, 0.000000, 0.000000, 179.509995);
    CreateDynamicObject(19273, 363.160004, 152.210007, 1040.449951, 0.000000, 0.000000, 0.000000);
    Botones[10] = CreateButton(363.1623, 152.4068, 1040.4500, 179.5100);
    // Sala de entrada
    PuertasDeBotones[0] = CreateDynamicObject(1500, 390.000000, 174.539993, 1039.109985, 0.000000, 0.000000, 180.139999);
    // Sala 1-2-3-4
    PuertasDeBotones[1] = CreateDynamicObject(1500, 349.260010, 178.690002, 1039.109985, 0.000000, 0.000000, 90.699997);
    PuertasDeBotones[2] = CreateDynamicObject(1500, 349.260010, 160.729996, 1039.109985, 0.000000, 0.000000, 90.699997);
    PuertasDeBotones[3] = CreateDynamicObject(1500, 349.179993, 149.229996, 1039.109985, 0.000000, 0.000000, 90.699997);
    PuertasDeBotones[4] = CreateDynamicObject(1500, 361.209991, 152.330002, 1039.109985, 0.000000, 0.000000, 0.330000);
    //LVPD+BARRERAS+PUERTAS
    Puerta[0] = CreateObject(1493,-1256.8500, 2096.6799, 1245.5300,0.0000, 0.0000, 0.0000);
    Puerta[1] = CreateObject(1493,-1244.6700, 2115.6001, 1245.5200,0.0000, 0.0000, 90.0000);
    Puerta[2] = CreateObject(1493,-1244.7400, 2085.0000, 1245.5300,0.0000, 0.0000, 90.0000);
    Puerta[3] = CreateObject(1493,-1244.4800, 2087.7700, 1245.5300,0.0000, 0.0000, 0.0000);
    Puerta[4] = CreateObject(1493,-1232.5699, 2027.9100, 1245.5300,0.0000, 0.0000, 90.0000);
	barrera = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90);
	porton = CreateDynamicObject(11327, 1589.267700, -1638.286499, 14.816412, 0, 0, -89.800231);
    reja1 = CreateDynamicObject(971, 288.95001, 1415.96997, 12.90000,   0.00000, 0.00000, 90.00000);
    reja2 = CreateDynamicObject(971, 288.95001, 1407.13000, 12.90000,   0.00000, 0.00000, -90.00000);
    reja3 = CreateDynamicObject(971, 263.14999, 1416.05005, 13.05000,   0.00000, 0.00000, 90.00000);
    reja4 = CreateDynamicObject(971, 263.14999, 1407.20996, 13.05000,   0.00000, 0.00000, -90.00000);
    reja5 = CreateDynamicObject(971, 232.39000, 1420.75000, 13.17000,   0.00000, 0.00000, 0.00000);
    reja6 = CreateDynamicObject(971, 223.59000, 1420.75000, 13.17000,   0.00000, 0.00000, 180.00000);
    CreateButton(1582.40552, -1637.85229, 13.70560, 182);
    CreateButton(1582.40283, -1638.34985, 13.70560, 0.0);
    CreateButton(216.32980, 116.65350, 999.39240, 180);
    CreateButton(216.28259, 116.40660, 999.39240, 0.0);
    puerta_1 = CreateDynamicObject(1495, 1582.63, -1638.02, 12.41,   0.00, 0.00, 0.00);
    puerta_2 = CreateDynamicObject(1495, 216.32820, 116.53640, 998.04547,   0.00, 0.00, 0.00);
    puerta_3 = CreateDynamicObject(1495, 219.33839, 116.53640, 998.04547,   0.00, 0.00, 180.00);
    PuertasLVPD[1] = CreateDynamicObject(19302, 208.9700, 178.2600, 1003.2800, 0.0000, 0.0000, 90.0000);
    PuertasLVPD[2] = CreateDynamicObject(19303, 209.0100, 159.1100, 1003.2800, 0.0000, 0.0000, 90.0000);
    BotonesFC[1] = CreateButton(223.1140, 1429.5740, 1091.4900);
	BotonesFC[2] = CreateButton(211.4600, 1442.8979, 1091.4900);
	BotonesFC[3] = CreateButton(206.8940, 1442.9100, 1085.2300);
	BotonesFC[4] = CreateButton(201.4500, 1447.4900, 1085.2100);
	BotonesFC[5] = CreateButton(170.3860, 1450.8101, 1085.2100);
	PuertasFC[1] = CreateDynamicObject(19303, 222.24001, 1429.53003, 1091.44995, 0.00000, 0.00000, 0.00000);
	PuertasFC[2] = CreateDynamicObject(19302, 210.33000, 1442.91003, 1091.43994, 0.00000, 0.00000, 0.00000);
	PuertasFC[3] = CreateDynamicObject(19303, 206.67999, 1441.97998, 1085.08997, 0.00000, 0.00000, 90.00000);
	PuertasFC[4] = CreateDynamicObject(1495,  201.39000, 1447.70996, 1083.83997, 0.00000, 0.00000, 90.00000);
	PuertasFC[5] = CreateDynamicObject(19303, 170.35001, 1448.48999, 1085.08997, 0.00000, 0.00000, 90.00000);
    BotonesACA[1] = CreateButton(639.9840, -187.0800, 1277.1400);
    BotonesACA[2] = CreateButton(643.1800, -210.3840, 1277.1400);
    BotonesACA[3] = CreateButton(645.2700, -217.0220, 1277.1400);
    BotonesACA[4] = CreateButton(642.7260, -224.4200, 1277.1400, 90);
    BotonesACA[5] = CreateButton(642.6900, -237.2600, 1277.1400, 90);
    BotonesACA[6] = CreateButton(645.1000, -239.8460, 1277.1400, 180);
    PuertasACA[1] = CreateDynamicObject(1495, 638.090027, -187.119995, 1275.800049, 0.000000, 0.000000, 0.000000);      // 636.8300, -187.1200, 1275.8000
    PuertasACA[2] = CreateDynamicObject(1495, 645.059998, -210.229996, 1275.800049, 0.000000, 0.000000, 180.000000);    // 646.3500, -210.2300, 1275.8000
    PuertasACA[3] = CreateDynamicObject(1495, 645.114014, -217.080002, 1275.760010, 0.000000, 0.000000, 180.000000);    // 646.3920, -217.0800, 1275.7600
    PuertasACA[4] = CreateDynamicObject(1495, 642.770020, -226.110001, 1275.760010, 0.000000, 0.000000, 90.000000);     // 642.7700, -227.3580, 1275.7600
    PuertasACA[5] = CreateDynamicObject(1495, 642.750000, -237.466003, 1275.760010, 0.000000, 0.000000, -90.000000);    // 642.7500, -236.2000, 1275.7600
    PuertasACA[6] = CreateDynamicObject(1495, 645.270020, -239.779999, 1275.760010, 0.000000, 0.000000, 0.000000);      // 643.9860, -239.7800, 1275.7600
	controls[8] = CreateDynamicObject(968,833.4200, -2963.8000, 11.7460 , 0.0000, -90.0000, 0.0000 );
	controls[9] = CreateDynamicObject(968,833.4100, -2954.5200, 12.1000 , 0.0000, 90.0000, 0.0000 );
    controls[10] = CreateDynamicObject(969, -87.67600, -1127.18213, 0.28050,   0.00000, 0.00000, 69.50000);
    NPC_Tren[0] = AddStaticVehicle(538,1700.7551,-1953.6531,15.8746,200.0,1,1);
    NPC_Tren[1] = AddStaticVehicle(538,-1943.1060,162.8389,27.0006,356.9632,1,1);
    NPC_Tren[2] = AddStaticVehicle(538,1468.3735,2632.2500,12.1256,271.2534,1,1);
    NPC_Tren[3] = AddStaticVehicle(538,2864.7500,1253.2552,12.1256,181.0126,1,1);
    NPC_Tren[4] = AddStaticVehicle(431,1546.1302,-1679.9119,5.9938,179.5670,0,0);
    NPC_Tren[5] = AddStaticVehicle(431,-1581.9175,718.6185,-5.1453,0.0000,0,0);
    // Tren 1
    GetVehicleParamsEx(NPC_Tren[0], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPC_Tren[0], engine, lights, alarm, 1, bonnet, boot, objective);
    // Tren 2
    GetVehicleParamsEx(NPC_Tren[1], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPC_Tren[1], engine, lights, alarm, 1, bonnet, boot, objective);
    // Tren 3
    GetVehicleParamsEx(NPC_Tren[2], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPC_Tren[2], engine, lights, alarm, 1, bonnet, boot, objective);
    // Tren 4
    GetVehicleParamsEx(NPC_Tren[3], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPC_Tren[3], engine, lights, alarm, 1, bonnet, boot, objective);
    // Colectivo FC
    SetVehicleNumberPlate(NPC_Tren[4], "SAPD");
    bloqueado[NPC_Tren[4]] = 1;
    GetVehicleParamsEx(NPC_Tren[4], engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPC_Tren[4], engine, lights, alarm, 1, bonnet, boot, objective);

    CargarCasa1();
    CargarCasa2();
    CargarCasa3();
    CargarCasa4();
    CargarCasa5();
    CargarCasa6();
    CargarCasa7();
    CargarCasa8();
    CargarCasa9();
    CargarCasa10();
    CargarCasa11();
    CargarCasa12();

    PuertasRobo[0] = CreateDynamicObject(1506, -2277.5667, -9.4666, 37.2482, 0.0000, 0.0000, 269.1064);
    PuertasRobo[1] = CreateDynamicObject(1506, 931.28186, 1974.06372, 10.61430,   0.00000, 0.00000, 0.00000);
    PuertasRobo[2] = CreateDynamicObject(1506, -2395.22778, -15.07700, 34.90210,   0.00000, 0.00000, 90.00000);
    PuertasRobo[3] = CreateDynamicObject(1498, 2373.00244, -1138.55103, 29.03120,   0.00000, 0.00000, -0.95999);
    PuertasRobo[4] = CreateDynamicObject(1504, -2728.5708, -50.4009, 6.0173,   0.00000, 0.00000, 269.9400);
    PuertasRobo[5] = CreateDynamicObject(1506, -2728.5442, -155.0267, 6.2020,   0.00000, 0.00000, 269.7597);
    PuertasRobo[6] = CreateDynamicObject(1498, 1762.12488, -2100.72290, 12.96590,   0.00000, 0.00000, 0.00000);
    PuertasRobo[7] = CreateDynamicObject(1498, 2485.149902, -1997.630005, 13.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
    PuertasRobo[8] = CreateDynamicObject(1506, 1844.1000, 770.1200, 10.4400,   0.0000, 0.0000, 90.0000);
    PuertasRobo[9] = CreateDynamicObject(1506, -1449.19824, 2647.20459, 55.48900,   0.00000, 0.00000, 90.00000);
    PuertasRobo[10] = CreateDynamicObject(1506, 1343.9200, 2610.7400, 10.4000,   0.0000, 0.0000, 0.0000);
    PuertasRobo[11] = CreateDynamicObject(1506, 1666.2400, 2610.7400, 10.4000,   0.0000, 0.0000, 0.0000);
    
    //Tuning
	CreateDynamicMapIcon(1134.6223, 1226.0657, 10.8203, 27, -1, 0, 0);
	CreateDynamic3DTextLabel(""ENTRADAPORY"",COLOR_ROJO,1134.6223,1226.0657,10.8203,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    
    //Fabrica TextLabels//
	for(new i = 0; i < sizeof(GuardarCajas);i++) CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para sacar o guardar cajas.",COLOR_ROJO,GuardarCajas[i][0],GuardarCajas[i][1],GuardarCajas[i][2],2,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORH" en el vehículo.",COLOR_ROJO,-1976.4287,212.0480,1035.8162+0.25,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //Salida Fabrica Garaje
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para ver la lista de actividades.",COLOR_ROJO,-2018.3846,248.9650,1035.8389+0.6,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //Actividades
    CreateDynamic3DTextLabel("{779ab5}Keypad\n{FFFFFF}Pulsa {DBED16}'Y'{FFFFFF} para usar.", -1, -2022.8929, 253.0043, 1036.1030, 2); //Keypad Fabrica
	CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para\nAdministrar la fabrica.",COLOR_ROJO,-2020.4500,251.5991,1035.9010+0.2,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //Administrar Fabrica
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'H'{FFFFFF} para dejar un {00CC00}bolso con dinero{FFFFFF}.",COLOR_ROJO,235.7830,109.9401,1010.2188+0.2,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //Bolsos Dinero
    /************************LABEL's*********************************/
    CreateDynamic3DTextLabel("{FFFFFF}Puede {DBED16}/inscribirse{FFFFFF} para participar en la carrera.\nCosto:{00CC00} $2.000",COLOR_WHITE,-1447.7421,-313.3544,1052.0969,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1,-1,25.0);
    TextoCarrera = Create3DTextLabel("{FF3300}Boleteria cerrada\n{DBED16}Horarios de los eventos:{FFFFFF} 5hs,11hs,17hs,23hs",COLOR_WHITE,1101.2697,1613.1414,12.5469+0.5,5.0,0,1);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'Y'{FFFFFF} para comprar prendas de vestir.",COLOR_WHITE,-1062.5808,-2556.3596,2876.4106,15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,-1071.2659,-2568.4832,2876.4106,15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel(""ENTRADAPORF".",COLOR_WHITE,1376.3005,-1795.0507,13.5473,15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    TextoSalon = Create3DTextLabel("{FFFFFF}Puedes {F6F61D}/alquilar salon{FFFFFF} de eventos.\nCosto por hora: {00D61C}$20.000", COLOR_ROJO, -1250.3397,2093.7437,1246.6360, 7, 1, 0);
    for(new i = 0; i < sizeof(OperacionesPositions);i++) CreateDynamic3DTextLabel("{00CC00}Operaciones bancarias\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para interactuar.",COLOR_ROJO,OperacionesPositions[i][0],OperacionesPositions[i][1],OperacionesPositions[i][2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""ENTRADAPORF".",COLOR_ROJO,-2029.7225,-119.6245,1035.1719+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,3,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-28.0060,-89.9514,1003.5469,7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{DBED15}/vender objeto",COLOR_ROJO, 216.8291,-232.7234,1.7786,7,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Compra y venta de objetos\n{DBED15}/comprar objetos{FFFFFF} - {DBED15}/vender objetos",COLOR_ROJO,196.3872,-231.1294,1.7786,5.0);
    EscaparLabel[0] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2277.9897,-10.2257,38.2993,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[1] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2396.0605,-14.3567,36.0650,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[2] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,2373.7302,-1136.8610,30.0583,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[3] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-1449.7598,2647.9287,56.5345,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[4] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,932.2437,1975.8787,11.6227,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[5] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2729.9800,-50.8513,7.0453,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,-2729.9695,-155.6657,7.2174,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[7] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,2485.0527,-1995.0458,14.0434,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    EscaparLabel[8] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1762.7701,-2098.9631,13.9989,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C7
    EscaparLabel[9] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1841.8738,770.7863,11.5959,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C9
    EscaparLabel[10] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1344.4647,2612.5925,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C11
    EscaparLabel[11] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/escapar{FFFFFF} para salir de la casa.",COLOR_ROJO,1666.9180,2612.6965,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C12
    for(new i = 0; i < sizeof(ForzarCerradurasPositions);i++) ForzarTD[i] = CreateDynamic3DTextLabel("{FFFFFF}Para entrar a esta casa necesitas {DBED15}/forzar cerradura",COLOR_ROJO, ForzarCerradurasPositions[i][0],ForzarCerradurasPositions[i][1],ForzarCerradurasPositions[i][2], 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    for(new i = 0; i < sizeof(RadiosPos);i++) CreateDynamic3DTextLabel("{FFFFFF}Radio\n {DBED15}/emisoras {FFFFFF}- {DBED15}/apagar radio",COLOR_ROJO,RadiosPos[i][0],RadiosPos[i][1],RadiosPos[i][2],8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    for(new i = 0; i < sizeof(RobarObjetoPositions);i++) CreateDynamic3DTextLabel("{FFFFFF}Objetos de valor\n{FFFFFF}Pulsa {DBED15}'H' {FFFFFF}para agarrar uno",COLOR_ROJO, RobarObjetoPositions[i][0],RobarObjetoPositions[i][1],RobarObjetoPositions[i][2], 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    for(new sc = 0; sc < sizeof(ServicioMedicoPos);sc++) CreateDynamicPickup(1314, 1, ServicioMedicoPos[sc][0],ServicioMedicoPos[sc][1],ServicioMedicoPos[sc][2],-1,-1,-1,100.0),CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/socio{FFFFFF} para hacerte socio de este hospital.\n{DBED15}/socio ayuda{FFFFFF} para recibir ayuda.\n{DBED15}/servicio medico{FFFFFF} para ser atendido.",COLOR_ROJO,ServicioMedicoPos[sc][0],ServicioMedicoPos[sc][1],ServicioMedicoPos[sc][2],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    for(new i = 0; i < sizeof(CosecharPositions);i++) CreateDynamic3DTextLabel("{FFFFFF}Trabajo de cosechador\nUsa {DBED15}/cosechar{FFFFFF} para trabajar ahora mismo.",COLOR_ROJO,CosecharPositions[i][0],CosecharPositions[i][1],CosecharPositions[i][2]+0.7,10,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0,0,-1,100.0),CreateDynamicPickup(1239, 23, CosecharPositions[i][0],CosecharPositions[i][1],CosecharPositions[i][2], 0, 0, -1, 100.0);
    for(new i = 0; i < sizeof(VerMapasPositions);i++) CreateDynamic3DTextLabel("{3399FF}Puntos de interés{FFFFFF}\nPulsa {DBED15}'Y'{FFFFFF} para ver el mapa.",COLOR_ROJO,VerMapasPositions[i][0],VerMapasPositions[i][1],VerMapasPositions[i][2]+0.7,10,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0,0,-1,100.0),CreateDynamicObject(1444, VerMapasPositions[i][0],VerMapasPositions[i][1],VerMapasPositions[i][2], VerMapasPositions[i][3], VerMapasPositions[i][4], VerMapasPositions[i][5],-1,-1,-1,500.0);
    for(new i = 0; i < sizeof(LlenarBaldePos); i++) CreateDynamic3DTextLabel("{5DADFF}Agua\n{FFFFFF}Aquí puedes {DBED15}/llenar balde",COLOR_ROJO,LlenarBaldePos[i][0],LlenarBaldePos[i][1],LlenarBaldePos[i][2], 5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    for(new i = 0; i < sizeof(GasolineraPositions);i++) CreateDynamic3DTextLabel("{FFFFFF}Para llenar el tanque escribe {DBED15}/llenar tanque\n{FFFFFF}Para cargar una cantidad diferente, usa {DBED15}/combustible [litros]\n{FFFFFF}Para comprar un bidón de 5 litros usa {DBED15}/comprar bidon",COLOR_ROJO,GasolineraPositions[i][0],GasolineraPositions[i][1],GasolineraPositions[i][2],20,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    /************************LABEL's*********************************/
    CreateDynamic3DTextLabel("{FFFFFF}Para tunear tu vehículo, usa el comando\n{DBED15}/tuning{FFFFFF}.",COLOR_WHITE,93.4527,-188.6557,2.4948,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    Create3DTextLabel("{DBED15}Tienda de Bebidas\n {FFFFFF}Para comprar en la tienda escribe{DBED15} /comprar bebidas",COLOR_ROJO,499.9684,-20.6495,1000.6797,23,0,1);
    Create3DTextLabel("{FFFFFF}Para comprar materiales\nEscribe {DBED15}/comprar materiales{FFFFFF}\nCantidad {DBED15}50 materiales{FFFFFF} | Costo: {00EB18}$1250",COLOR_ROJO,2823.3486,-1420.3571,16.2562,23,0,1);
    Create3DTextLabel("{FFFFFF}Para comprar materiales\nEscribe {DBED15}/comprar materiales{FFFFFF}\nCantidad {DBED15}50 materiales{FFFFFF} | Costo: {00EB18}$1250",COLOR_ROJO,1422.6765,-1319.3438,13.5547,23,0,1);
    Create3DTextLabel("{FFFFFF}Para comprar materiales\nEscribe {DBED15}/comprar materiales{FFFFFF}\nCantidad {DBED15}250 materiales{FFFFFF} | Costo: {00EB18}$6250",COLOR_ROJO,-1735.7610,1244.9299,7.5469,23,0,1);
    CreateDynamic3DTextLabel("{DBED15}Semillas de marihuana{FFFFFF}\nPaquete de 50 semillas\nCosto: {DBED15}$1500{FFFFFF}\n{DBED15}/comprar semillas{FFFFFF}.",COLOR_ROJO,-1072.1710,-1202.1224,129.2188,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED15}Semillas de marihuana{FFFFFF}\nPaquete de 50 semillas\nCosto: {DBED15}$1500{FFFFFF}\n{DBED15}/comprar semillas{FFFFFF}.",COLOR_ROJO,-1103.5033,-1620.6311,76.3672,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'H'{FFFFFF} para ver la lista de actividades.",COLOR_ROJO,-2018.3846,248.9650,1035.8389+0.6,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //Actividades
    CreateDynamic3DTextLabel("{779ab5}Keypad\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para usar.", COLOR_ROJO, -2022.8929, 253.0043, 1036.1030, 1);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED16}'Y' {FFFFFF}para para adquirir una licencia de piloto.",COLOR_WHITE,1163.9730,-2.7876,1020.6459,5.0,    INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para reparar tu vehículo\nPulsa {DBED16}'Y'\n{FFFFFF}Costo: {00CC00}$500{FFFFFF}.",COLOR_ROJO,1168.0515,1299.7306,10.9568,15.0,	INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    //Faros
    CreateDynamic3DTextLabel("{FFFFFF}Usa {DBED15}/bajar{FFFFFF} para bajar y salir del faro.",COLOR_ROJO,909.7603,-3016.5725,49.9987,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Usa {DBED15}/bajar{FFFFFF} para bajar y salir del faro.",COLOR_ROJO,154.4787,-1953.9596,47.8722,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Usa {DBED15}/subir{FFFFFF} para subir al faro.",COLOR_ROJO,905.4720,-3021.9995,7.5059,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Usa {DBED15}/subir{FFFFFF} para subir al faro.",COLOR_ROJO,154.1846,-1946.6228,5.3903,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    // Trabajos
    Create3DTextLabel("{FFFFFF}Para ser de Médico, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,1178.1359,-1361.3021,14.2302,23,0,1);
    Create3DTextLabel("{FFFFFF}Para ser de Fabricante de armas, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,2122.9236,-2275.1238,20.6719,23,0,1);
    Create3DTextLabel("{FFFFFF}Para ser de Camionero, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,-1715.0378,-63.1466,3.6340,23,0,1);
    Create3DTextLabel("{FFFFFF}Para ser de Guardaespaldas, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,2226.3508,-1719.0221,13.5261,23,0,1);
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Prostituta, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,958.2482,-54.3517,1001.1172,5.0); // TRABAJO PROSTITUCION
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Taxista, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,-2024.7489,-113.9102,1038.8187,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 5,5,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Basurero, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,-177.6093,-1549.4420,6.3284,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Mecánico, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,114.7220,-151.4292,1.5781,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Pescador, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,2790.0251,-2574.5549,3.3469,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Transportista, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,2583.8274,1644.3837,1087.5602,23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,1,-1,100.0); //Trabajo Transportista
    CreateDynamic3DTextLabel("{FFFFFF}Para ser de Minero, pulsa la tecla {3399FF}'Y'{FFFFFF}\nPara recibir ayuda sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.",COLOR_ROJO,-382.5980,2199.3918,25.4105,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Los policías pueden agarrar sus armas\nUsa {DBED16}/armas{FFFFFF} para agarrar armas.",0xFFFFFF00,249.3380,73.3156,1003.1578,8.0);
    CreateDynamic3DTextLabel("{FFFFFF}Los policías pueden ponerse su uniforme policía\nPulsa {DBED16}'Y'{FFFFFF} para cojer uno.",0xFFFFFF00,254.4149,73.7001,1003.6406,8.0);
    CreateDynamic3DTextLabel("{FFFFFF}Los policías pueden tomar un chaleco aca\nUsa {DBED16}/chaleco{FFFFFF} para agarrar uno.",COLOR_WHITE,248.7588,74.3215,1002.6406,8.0);
    //Otros Labels
    CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED15}/reparar embarcacion{FFFFFF} para reparar tu embarcación.",COLOR_ROJO,2745.3225,-2596.3396,-0.1532,23,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{00BCFE}Permiso de pesca{FFFFFF}\n Escribe {DBED15}/permiso pesca{FFFFFF} para conseguir tu permiso",COLOR_ROJO,2785.9165,-2575.4348,3.1600,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Ropa de {DBED16}/mecanico{FFFFFF}.",COLOR_WHITE,84.3491,-149.0520,2.6000,15,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CCFF}Venta de repuestos{FFFFFF}\n Precio: {00CC00}$100{FFFFFF} c/u.\n{FFFFFF}Para comprar repuestos pulsa{DBED16} 'Y'{FFFFFF}.",COLOR_WHITE,93.3250,-161.6600,2.5938,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Ropa de {DBED15}/basurero",COLOR_ROJO,-170.3641,-1555.9705,6.5706,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED15}Escuela de paracaidismo\n{FFFFFF}Puedes {DBED15}/inscribirse {FFFFFF}para participar en el siguiente salto\nCosto: {00cc00}$5000", -1, 415.0879,2535.5859,19.1484, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Presiona {DBED16}'Y'{FFFFFF} para ver el catalogo de la tienda.", COLOR_ROJO,-1053.5027,-2568.4131,2876.4106,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Presiona {DBED16}'Y'{FFFFFF} para ver los catalogos de ropa.", COLOR_ROJO,-1050.7212,-2557.5125,2876.4106,15.0,  INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{DBED15}Hola\n{FFFFFF}Bienvenido aquí puedes gastar los {0A8329}"SERVER_COIN"\n\n{FFFFFF}Para comprar una propiedad debes {FF0000}solicitar un mapeo\n{FFFFFF}Para hacerlo escribe {DBED15}/crear pedido\n{FFFFFF}tendrás que ser paciente", COLOR_ROJO,1736.3103,-1204.4061,60.013,10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Hierro\n{FFFFFF}Nivel de minero necesario: {00CC00}1{FFFFFF}\nEscribe {DBED15}/picar{FFFFFF}.",COLOR_ROJO,-740.4136,2392.6699,4.1117,23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,-1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{00CC00}Cobre\n{FFFFFF}Nivel de minero necesario: {00CC00}2{FFFFFF}\nEscribe {DBED15}/picar{FFFFFF}.",COLOR_ROJO,-745.1193,2408.8325,1.3375,23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,-1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{00CC00}Titanio\n{FFFFFF}Nivel de minero necesario: {00CC00}3{FFFFFF}\nEscribe {DBED15}/picar{FFFFFF}.",COLOR_ROJO,-729.0903,2410.1563,7.2710,23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,-1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{00CC00}Mercurio\n{FFFFFF}Nivel de minero necesario: {00CC00}4{FFFFFF}\nEscribe {DBED15}/picar{FFFFFF}.",COLOR_ROJO,-728.3772,2422.0627,7.1895,23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,-1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{37db45}Estudio de radio y Televisión\n\n"ENTRADAPORF".", COLOR_ROJO, 649.0013,-1360.7864,13.5868, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    CreateDynamic3DTextLabel("{37db45}Salón de eventos{FFFFFF}\n\n"ENTRADAPORF".", COLOR_ROJO, 1423.4301,-1180.1801,25.9922, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    CreateDynamic3DTextLabel("{37db3f}Iglesia{FFFFFF}\n\n"ENTRADAPORF".", -1, 2492.1536,924.8977,11.0234, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0); // IGLESIA LV
    CreateDynamic3DTextLabel("{37db45}Club Alhambra\n\n"ENTRADAPORF".", COLOR_ROJO, 1836.9700,-1682.4700,13.4258, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    CreateDynamic3DTextLabel("{37db45}Burdel\n\n"ENTRADAPORF".", COLOR_ROJO, 2014.8400,1150.4700,10.9203+1.0, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
    //Salidas
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-27.3408,-31.7468,1003.6600+1.0,7.0, -1, -1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-27.3931,-58.2556,1003.6500+1.0,7.0, -1, -1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2532.6731,1598.2499,1087.7430+1.0,7.0, -1, -1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-2737.1101,625.3660,1385.6547+1.00,7.0, -1, -1); //HPSF
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1251.8484,-812.2070,1164.2759+1.00,7.0, -1, -1); //HPLV // GANTON
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2332.5701,-1254.7500,1026.29,7.0, -1, -1); //albergue
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,493.3470,-24.8391,1000.7800,7.0, -1, -1); //Alhambra
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1204.8600,-13.8459,1001.0200,7.0, -1, -1); //Club Striptis
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,246.38,107.31,1003.22+1.00,7.0, 1, 1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2304.6858,-16.1730,26.7422+1.00,7.0, 1, 1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-2240.7715,137.1613,1035.4141+1.00,7.0, 1, 6);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-30.9883,-92.0101,1003.5469+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,493.4037,-24.8556,1000.6797+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,246.7735,62.6075,1003.6406+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,207.7022,-111.1636,1005.1328+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,772.2999,-5.2435,1000.7286+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,834.5561,7.3938,1004.1870+1.00,7.0,0,1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-229.1293,1401.1205,27.7656+1.00,7.0, 0, 1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,223.0810,1287.0770,1082.1406+1.00,7.0, -1, 1);
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1403.8179,601.0150,1001.0300+0.3,4.0, -1, -1); //Int 43
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,246.4200,107.3000,1003.2200+1.00,7.0, -1, 1);//SFPD
    Create3DTextLabel(""SALIDAPORF".",COLOR_ROJO,282.4075,1869.4720,8.7578+1.00,7.0,0,0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,965.5889,-53.1844,1001.1246+0.8,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //PROSTIBULO
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2332.5701,-1254.7500,1026.2899+0.8,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); //ALBERGUE
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,251.0166,76.3774,1003.6406,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1166.5009,2126.8232,1246.5457+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1738.0498,-1187.7406,60.0131+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,168.1524,1436.1014,1084.8462+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1783.8291,-1301.7024,13.5026+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,203.4271,1417.9021,1091.2000+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1074.4355,339.9846,1180.5259+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,387.4330,194.3359,1040.1078+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,207.6859,-110.8290,1005.1328+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,161.4287,-96.9712,1001.8047+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1092.6782,-152.2306,1001.1160+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,207.0226,-140.2560,1003.5078+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,204.2934,-168.8588,1000.5234+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,227.5291,-8.1299,1002.2109+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,502.0160,-67.6595,998.7578+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-2029.7441,-118.6951,1038.8187+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2594.2100,1649.7188,1087.5581+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1204.5865,-13.8364,1000.9219+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,372.3595,-133.5242,1001.4922+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1387.9806,-324.9726,1052.0834+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1156.9583,-1312.1549,-10.7849+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1544.0551,-446.6218,6.0068+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0,0,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1232.5634,54.9100,14.1276+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0,0,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1719.9429,1619.2629,10.0866+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0,0,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,390.4993,173.9211,1008.3828+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 3,3,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-376.4527,2196.6853,25.4105+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,269.1789,293.6963,999.8400+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORY".",COLOR_ROJO,-718.7835,2462.5969,9.9039+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1275.5626,2108.7246,1246.5457+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-31.0100,-92.0103,1003.5469+1.00,7.0,   INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,254.1746,-41.6122,1002.0308+1.00,7.0,   INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-25.9019,-188.0416,1007.7300+1.00,7.0,  INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,663.4366,-202.8868,1276.7941+1.00,7.0,  INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,1167.2426,-14.5519,1020.6459+1.00,7.0,  INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-100.3841,-25.0388,1000.7188+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,238.5774,138.7619,1003.0234+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,2304.6863,-16.1371,26.7422+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_ROJO,-1840.0175,2670.5095,3.5884+1.00,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    //edificio
    CreateDynamic3DTextLabel("{DBED16}Edificio Municipal\n{FFFFFF}Para pedir servicio de grua pulsa {DBED16}'H'{FFFFFF}",COLOR_ROJO,1821.7529,-1280.6038,109.3594, 7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED16}Edificio Municipal\n{FFFFFF}Para vender tu propiedad pulsa {DBED16}'H'{FFFFFF}",COLOR_ROJO,1809.5894,-1299.8063,65.8125, 7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED16}Edificio Municipal\n{FFFFFF}Para vender tu vehículo pulsa {DBED16}'H'{FFFFFF}",COLOR_ROJO,1802.7854,-1303.8938,93.0391, 7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    //ESTACIONAMIENTOS//
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,1560.4916,-1693.5004,5.8906,4.0); // Entregar LS
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,1568.6255,-1693.5498,5.8906,4.0); // Entregar LS
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,-1590.2043,707.8610,-5.2422,4.0); // Entregar SF
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,-1589.9172,716.4757,-5.2422,4.0); // Entregar SF
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,2291.9436,2451.4192,10.8203,4.0); // Entregar LV
    CreateDynamic3DTextLabel("{FFFFFF}Para meter a prisión alguien\nUsa {DBED15}/entregar",COLOR_ROJO,2291.8071,2468.6799,10.8203,4.0); // Entregar LV
    CreateDynamic3DTextLabel("{00CCFF}Elevador\n{FFFFFF}Pulsa {DBED16}'Y' {FFFFFF}para usar el elevador.",COLOR_ROJO,265.9726,115.5081,1004.6172, 7);
    CreateDynamic3DTextLabel("{00CCFF}Elevador\n{FFFFFF}Pulsa {DBED16}'Y' {FFFFFF}para usar el elevador.",COLOR_ROJO,1524.4830,-1677.9261,6.2188, 7);
    CreateDynamic3DTextLabel("{00CCFF}Elevador\n{FFFFFF}Pulsa {DBED16}'Y' {FFFFFF}para usar el elevador.",COLOR_ROJO,1558.0905,-1675.5868,28.3955, 7);
    CreateDynamic3DTextLabel("{DBED15}/control",COLOR_ROJO,-1192.7047,2064.7141,1254.8612,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-1262.6428,2119.9490,1246.5457,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-30.5101,-28.9864,1003.5573,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-23.2806,-55.6424,1003.5469,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,969.3793,-44.8069,1001.1172,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,499.9690,-20.6826,1000.6797,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,1214.8466,-13.3504,1000.9219,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-784.2098,500.1945,1371.7422,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CC00}Mostrador{FFFFFF}\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,-1396.3044,-320.4939,1052.0834,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,831.5464,-1361.7238,-0.5015,23); CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,1757.1368,-1943.4417,13.5703,23);
    CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,1746.9652,-1943.4482,13.5703,23); CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,-1974.0217,116.7847,27.6875,23);
    CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,1437.3113,2655.2742,11.3926,23); CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,1437.4141,2620.1450,11.3926,23);
    CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,2856.5955,1314.5538,11.3906,23); CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,2856.5969,1266.9460,11.3906,23);
    CreateDynamic3DTextLabel("{FFFFFF}Venta de Boletos{DBED15}\n/comprar boleto",COLOR_ROJO,826.7249,-1353.6726,13.5369,23); CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,-1959.7164,141.9694,27.6875,7);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,-1962.3730,130.1360,27.6875,7); CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,1729.7041,-1943.3695,13.5705,7);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,822.8813,-1353.8101,-0.5078,7); CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,1439.4858,2644.6511,11.3926,7);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver la ubicación de los trenes.",COLOR_ROJO,2856.4263,1296.8097,11.3906,7);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para solicitar el paso.",COLOR_ROJO,832.2947,-2958.3792,12.1438,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para solicitar el paso.",COLOR_ROJO,834.7955,-2959.8113,12.1212,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CCFF}Piso: 9\n{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,1783.6853,-1300.7665,65.8125,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CCFF}Piso: 14\n{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,1783.8641,-1300.7637,93.0391,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{00CCFF}Piso: 17\n{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,1783.6937,-1300.7670,109.3594,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CreateDynamic3DTextLabel(""ENTRADAPORF".",COLOR_ROJO,186.8628,1428.6979,10.5912+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{37db45}Venta de Herramientas{FFFFFF}\nPulsa {DBED15}'Y'{FFFFFF} para comprar herramientas",COLOR_ROJO,-1072.1169,354.2132,1180.5259,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Los mineros aquí pueden {DBED16}/dejar roca",COLOR_ROJO, -548.2949,2336.7649,83.4777, 23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Los mineros aquí pueden\nponerse su {DBED15}/uniforme minero{FFFFFF}.",COLOR_ROJO, 269.1445,295.4604,999.8400, 23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Ropa de médico: {DBED15}/uniforme medico",COLOR_ROJO,1159.4829,-1356.8820,-10.7922,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Ropa de médico: {DBED15}/uniforme medico",COLOR_ROJO,1234.4447,-830.0233,1164.2759,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Ropa de médico: {DBED15}/uniforme medico",COLOR_ROJO,-2729.9434,614.0607,1385.6534,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el botiquín.",COLOR_ROJO,1169.7440,-1353.4617,-10.7922,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el botiquín.",COLOR_ROJO,-2720.8923,647.0943,1385.6534,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 9,6,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el botiquín.",COLOR_ROJO,1235.0582,-821.8716,1164.2759,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 9,6,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Vaso de Sprunk\nPrecio:{00CC00}$65\n{DBED15}/comprar sprunk",COLOR_ROJO,-19.4919,-180.4340,1007.7656, 5.0);
    CreateDynamic3DTextLabel("{FFFFFF}Vaso de Sprunk\nPrecio:{00CC00}$65\n{DBED15}/comprar sprunk",COLOR_ROJO,-21.0096,-74.3110,1003.5542, 5.0);
    CreateDynamic3DTextLabel("{FFFFFF}Vaso de Sprunk\nPrecio:{00CC00}$65\n{DBED15}/comprar sprunk",COLOR_ROJO,1163.6838,1269.1755,10.8203, 5.0);
  	CreateDynamic3DTextLabel("{FFFFFF}Vaso de Sprunk\nPrecio:{00CC00}$65\n{DBED15}/comprar sprunk",COLOR_ROJO,-1066.6627,-2581.2568,2876.4009, 5.0);
    CreateDynamic3DTextLabel("{DBED15}Estantería\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para verla.",COLOR_ROJO,255.7412,-40.2322,1002.0234,7.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel(""ENTRADAPORF" a la propiedad.", COLOR_ROJO,300.3342,311.4263,999.1484+0.6,15.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Cerveza {00CC00}$40 {DBED15}/comprar cerveza\n{FFFFFF}Vino {00CC00}$60 {DBED15}/comprar vino\n{FFFFFF}Sprunk {00CC00}$70 {DBED15}/comprar sprunk",COLOR_ROJO,-225.1540,1404.1327,27.7734,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Cerveza {00CC00}$40 {DBED15}/comprar cerveza\n{FFFFFF}Vino {00CC00}$60 {DBED15}/comprar vino\n{FFFFFF}Sprunk {00CC00}$70 {DBED15}/comprar sprunk",COLOR_ROJO,498.6868,-76.0385,998.7578,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}¿Cometió algún crimen?\nAquí puede {DBED15}/entregarse",COLOR_ROJO,240.4520,112.8195,1003.2188,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}¿Cometió algún crimen?\nAquí puede {DBED15}/entregarse",COLOR_ROJO,235.2946,166.3358,1003.0300,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED15}Tienda de juguetes{FFFFFF}\nEcribe /comprar juguetes{FFFFFF} para ver el listado de juguetes",COLOR_ROJO,-103.9013,-22.6749,1000.7188,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED15}Tienda de juguetes{FFFFFF}\nEcribe /comprar juguetes{FFFFFF} para ver el listado de juguetes",COLOR_ROJO,1214.0737,-13.3524,1000.9219,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Caja de aquarius con 12 unidades\nPrecio: {00CC00}$1560\n{DBED15}/comprar caja",COLOR_ROJO,93.7855,-305.2337,1.5781,23,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Caja de vino con 12 unidades\nPrecio: {00CC00}$600\n{DBED15}/comprar caja",COLOR_ROJO,93.7853,-309.5841,1.5781,23,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Caja de cerveza con 12 unidades\nPrecio: {00CC00}$480\n{DBED15}/comprar caja",COLOR_ROJO,93.7853,-313.7030,1.5781,23,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Caja de sprunk con 12 unidades\nPrecio: {00CC00}$480\n{DBED15}/comprar caja",COLOR_ROJO,86.0509,-315.2853,1.8494,23,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para ver el listado de productos.",COLOR_ROJO,373.7276,-118.8039,1001.4922,7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
    CreateDynamic3DTextLabel("{37db45}Salón de Eventos{FFFFFF}\nEntrada para vehículos\n\n"ENTRADAPORF".",COLOR_ROJO,1410.7946,-1228.7570,13.5469+1.0,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{37db3f}Albergue para indigentes\n{FFFFFF}Propietario: {00D0FF}Gobierno\n\n"ENTRADAPORF".",COLOR_ROJO,-49.9430,-269.3648,6.6332,8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{37db3f}Club de striptease\n\n"ENTRADAPORF".",COLOR_ROJO,2014.8101,1107.0100,10.9203,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Vestuario y depósito de armas\n"ENTRADAPORF".",COLOR_WHITE,276.2080,122.0958,1004.6172, 7,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Vestuario y depósito de armas\n"ENTRADAPORF".",COLOR_WHITE,207.9470,142.3866,1003.0234, 7,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 7,3,-1, 100.0);
    CreateDynamic3DTextLabel("\n{FFFFFF}Pulsa {DBED15}'Y'{FFFFFF} para arrojar\n{00CC00}$500{FFFFFF} a la bailarina",COLOR_ROJO,1212.3831,-5.3079,1000.9219,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}\n\n\n\n¿Necesitas ayuda?\n{DBED15}/ayuda » club",COLOR_ROJO,1206.2085,-0.9576,1000.9519+1.40,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Sala privada\n"ENTRADAPORF"",COLOR_ROJO,1204.8096,12.6643,1000.9219+0.75,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Para crear tu emisora de radio usa {DBED15}/crear radio{FFFFFF}\nCosto: {00cc00}$15000", COLOR_ROJO,391.1343,183.0587,1040.1156, 9.0);
    //ASCENSOR
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,10.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,14.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,19.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,23.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,27.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,31.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,36.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,40.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,44.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa '{DBED15}Y{FFFFFF}' para usar el elevador.",COLOR_ROJO,2117.8604,2415.0771,48.8428,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 1",COLOR_ROJO,1160.1355,-1323.6254,-8.2668,4.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 2",COLOR_ROJO,1160.0181,-1333.1748,-8.2668,4.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 3",COLOR_ROJO,1153.3662,-1332.9631,-8.2668,4.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 4",COLOR_ROJO,1160.4609,-1342.7770,-8.2668,4.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 5",COLOR_ROJO,1153.8414,-1342.8153,-8.2668,4.0);
    CreateDynamic3DTextLabel("{DBED15}SALA 6",COLOR_ROJO,1153.6920,-1351.9772,-8.2668,4.0);
    CreateDynamic3DTextLabel(""SALIDAPORH" en el vehículo.", COLOR_ROJO, -2139.2771,-247.7624,544.7359, 7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, 0, -1, -1, 20.0);
    CreateDynamic3DTextLabel("{FFFFFF}Puede {DBED15}/inscribirse{FFFFFF} para participar en la carrera.\nCosto:{00CC00} $2.000",COLOR_ROJO,-1447.7421,-313.3544,1052.0969,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1,-1,25.0);
    /***************************MAPICONS*********************************/
    CreateDynamicMapIcon(2014.8101,1107.0100,10.9203, 21, -1, -1, -1, -1, 600.0);       //Striptease
    CreateDynamicMapIcon(-1808.7142,945.9161,24.8906, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(-1720.9456,1359.7822,7.1853, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2083.3376,2224.7012,11.0234, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2756.7642,2477.3533,11.0625, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2638.7839,1849.7867,11.0234, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2331.8098,75.0506,26.6210, 29, 0, 0, 0, -1, 600.0);            //Pizzeria
    CreateDynamicMapIcon(1367.5475,248.2522,19.5669, 29, 0, 0, 0, -1, 600.0);           //Pizzeria
    CreateDynamicMapIcon(203.3945,-201.9418,1.5781, 29, 0, 0, 0, -1, 600.0);            //Pizzeria
    CreateDynamicMapIcon(2105.4844,-1806.4695,13.5547, 29, 0, 0, 0, -1, 600.0);         //Pizzeria
    CreateDynamicMapIcon(2351.8242,2533.6289,10.8203, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2330.6023,2533.6121,10.8203, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(2309.5044,2533.6143,10.8203, 29, 0, 0, 0, -1, 600.0);          //Pizzeria
    CreateDynamicMapIcon(-1735.7610,1244.9299,7.5469, 18, 0, 0, 0, -1, 600.0);          //Materiales I (SF)
    CreateDynamicMapIcon(1422.6765,-1319.3438,13.5547, 18, 0, 0, 0, -1, 600.0);         //Materiales II (LS)
    CreateDynamicMapIcon(2823.3486,-1420.3571,16.2562, 18, 0, 0, 0, -1, 600.0);         //Materiales III (LS)
    CreateDynamicMapIcon(1173.7434,-1323.3525,15.1953, 22, 0, 0, 0, -1, 600.0);         //Hospital LS
    CreateDynamicMapIcon(2027.2164,-1420.3737,16.9922, 22, 0, 0, 0, -1, 600.0);         //Hospital Groove
    CreateDynamicMapIcon(-2665.0000,640.1640,14.5531, 22, 0, 0, 0, -1, 600.0);          //Hospital SF
    CreateDynamicMapIcon(1607.4094,1815.2427,10.8203, 22, 0, 0, 0, -1, 600.0);          //Hospital LV
    CreateDynamicMapIcon(1564.6022,-1675.2286,61.8959, 30, 0, 0, 0, -1, 600.0);         //LSPD
    CreateDynamicMapIcon(-1605.5137,710.2757,13.8672, 30, 0, 0, 0, -1, 600.0);          //SFPD
    CreateDynamicMapIcon(2290.1978,2431.4529,10.8203, 30, 0, 0, 0, -1, 600.0);          //LVPD
    CreateDynamicMapIcon(2244.4436,-1665.2526,15.4766, 45, 0, 0, 0, -1, 600.0);         //Binco
    CreateDynamicMapIcon(1456.4785,-1137.6067,23.9485, 45, 0, 0, 0, -1, 600.0);         //ZIP
    CreateDynamicMapIcon(499.5177,-1360.6284,16.3690, 45, 0, 0, 0, -1, 600.0);          //Pro Laps
    CreateDynamicMapIcon(454.2013,-1477.9746,30.8137, 45, 0, 0, 0, -1, 600.0);          //DS
    CreateDynamicMapIcon(2111.9539,-1213.1942,23.9654, 45, 0, 0, 0, -1, 600.0);         //Sub Urban
    CreateDynamicMapIcon(461.7039,-1500.7959,31.0453, 45, 0, 0, 0, -1, 600.0);          //Victim
    CreateDynamicMapIcon(-1581.2299,867.9284,7.6953, 52, 0, 0, 0, -1, 600.0);           //Banco SF
    CreateDynamicMapIcon(1498.4614,-1580.7184,13.5498, 52, 0, 0, 0, -1, 600.0);         //Banco LSPD
    CreateDynamicMapIcon(2449.4690,2290.2200,10.8203, 52, 0, 0, 0, -1, 600.0);          //Banco LV
    CreateDynamicMapIcon(1457.1293,-1009.9208,26.8438, 52, 0, 0, 0, -1, 600.0);         //Banco LS grande
    CreateDynamicMapIcon(1377.0605,1152.7566,10.8203, 60, 0, 0, 0, -1, 600.0);          //Trabajo Transportista
    CreateDynamicMapIcon(2226.3508,-1719.0221,13.5261, 60, 0, 0, 0, -1, 600.0);         //Trabajo Guardaespalda
    CreateDynamicMapIcon(1742.9551,-1864.2202,13.5741, 60, 0, 0, 0, -1, 600.0);         //Trabajo Taxi
    CreateDynamicMapIcon(114.7220,-151.4292,1.5781, 60, 0, 0, 0, -1, 600.0);            //Trabajo Mecanico
    CreateDynamicMapIcon(1178.1359,-1361.3021,14.2302, 60, 0, 0, 0, -1, 600.0);         //Trabajo Medico
    CreateDynamicMapIcon(-177.6093,-1549.4420,6.3284, 60, 0, 0, 0, -1, 600.0);          //Trabajo Basurero
    CreateDynamicMapIcon(2122.9236,-2275.1238,20.6719, 60, 0, 0, 0, -1, 600.0);         //Trabajo Armero
    CreateDynamicMapIcon(-65.0107,-340.5569,5.7070, 60, 0, 0, 0, -1, 600.0);            //Trabajo Camionero
    CreateDynamicMapIcon(-386.7375,-1470.0562,25.7266, 60, 0, 0, 0, -1, 600.0);         //Trabajo Cosechador FR
    CreateDynamicMapIcon(-38.5154,56.1632,3.1172, 60, 0, 0, 0, -1, 600.0);              //Trabajo Cosechador BB
    CreateDynamicMapIcon(2014.8400,1150.4700,10.9203, 60, 0, 0, 0, -1, 600.0);          //Trabajo Prostitución LV
    CreateDynamicMapIcon(2362.7698,2306.3025,8.1406, 58, 0, 0, 0, -1, 600.0);           //Academia
    CreateDynamicMapIcon(1656.1246,-1883.6947,13.1237, 55, 0, 0, 0, -1, 500.0);         //Conce Barato
    CreateDynamicMapIcon(2127.5342,-1123.4701,24.9874, 55, 0, 0, 0, -1, 500.0);         //Conce Coutt And Schutz
    CreateDynamicMapIcon(557.6544,-1260.8588,16.8133, 55, 0, 0, 0, -1, 500.0);          //Conce GROTTI
    CreateDynamicMapIcon(-1989.7445,288.3349,33.9223, 55, 0, 0, 0, -1, 500.0);          //Conce Wang Cars
    CreateDynamicMapIcon(1464.9510,-1780.9888,13.9439, 55, 0, 0, 0, -1, 500.0);         //Conce Wang Cars Los Santos
   	CreateDynamicMapIcon(1451.6383,-2287.0015,13.5469, 5, 0, 0, 0, -1, 600.0);			//Escuela de Aviación
   	CreateDynamicMapIcon(1377.7140,-1795.9343,13.5572, 43, 0, 0, 0, -1, 600.0);			// MapIcon Tienda DP
    /**********************************PICKUPS********************************/
    CreateDynamicPickup(1239, 1, -2024.7489,-113.9102,1038.8187,5,5,-1,100.0);      //Trabajo Taxista
    CreateDynamicPickup(1239, 1, -177.6093,-1549.4420,6.3284,0,0,-1,100.0);         //Trabajo Basurero
    CreateDynamicPickup(1247, 1, 1560.4916,-1693.5004,5.8906,-1,-1,-1,100.0);       //Entregar LS
    CreateDynamicPickup(1247, 1, 1568.6255,-1693.5498,5.8906,-1,-1,-1,100.0);       //Entregar LS
    CreateDynamicPickup(1247, 1, -1589.9172,716.4757,-5.2422,-1,-1,-1,100.0);       //Entregar SF
    CreateDynamicPickup(1247, 1, -1590.2043,707.8610,-5.2422,-1,-1,-1,100.0);       //Entregar SF
    CreateDynamicPickup(1247, 1, 2291.9436,2451.4192,10.8203,-1,-1,-1,100.0);       //Entregar LV
    CreateDynamicPickup(1247, 1, 2291.8071,2468.6799,10.8203,-1,-1,-1,100.0);       //Entregar LV
    CreateDynamicPickup(1247, 1, 235.2946,166.3358,1003.0300,-1,-1,-1,100.0);       //Entregarse Interior
    CreateDynamicPickup(1247, 1, 240.4520,112.8195,1003.2188,-1,-1,-1,100.0);       //Entregarse Interior
    CreateDynamicPickup(1275, 1, -170.3641,-1555.9705,6.5706,0,0,-1,100.0);         //Ropa Basurero
    CreateDynamicPickup(1275, 1,84.3491,-149.0520,2.6000,0,0,-1,100.0);             //Ropa Mecanico
    CreateDynamicPickup(1318, 1, 2014.8400,1150.4700,10.9203,0,0,-1,100.0);         //Trabajo Prostitución LV
    CreateDynamicPickup(1318, 1, -49.9430,-269.3648,6.6332,0,0,-1,100.0);           //ALBERGUE
    CreateDynamicPickup(1318, 1, 1836.9700,-1682.4700,13.4258,0,0,-1,100.0);        //Club Alhambra
    CreateDynamicPickup(1318, 1, 2014.8101,1107.0100,10.9203,0,0,-1,100.0);         //Club Stripsea
    CreatePickup(1318,0,276.1852,122.1334,1004.6172,1);                             //Vestuario LSPD
    CreatePickup(1239,0,90.9418,-164.8835,2.5938,0);                                //Taller de Pintura
    CreateDynamicPickup(1239, 1,1821.7529,-1280.6038,109.3594,0,0,-1,100.0);        //Servicio Grua
    CreateDynamicPickup(1239, 1,1802.7854,-1303.8938,93.0391,0,0,-1,100.0);         //Vender Vehiculo
    CreateDynamicPickup(1239, 1,1809.5894,-1299.8063,65.8125,0,0,-1,100.0);         //Vender Propiedad
    CreateDynamicPickup(1318, 1, 649.0013,-1360.7864,13.5868,0,0,-1,100.0);          //Emisoras
    CreateDynamicPickup(1318, 1, 2492.1536,924.8977,11.0234,0,0,-1,100.0);     		//Iglesia LV
    CreatePickup(1239,0,1178.1359,-1361.3021,14.2302,0);                            //Trabajo Médico
    CreatePickup(1239,0,2122.9236,-2275.1238,20.6719,0);                            //Trabajo Armero
    CreatePickup(1239,0,2226.3508,-1719.0221,13.5261,0);                            //Trabajo Guardaespalda
    CreatePickup(1239,0,-65.0107,-340.5569,5.7070,0);                               //Trabajo Camionero
    CreatePickup(1239,0,2583.8274,1644.3837,1087.5602,5);                           //Trabajo Transportista
    CreatePickup(1279,0,2823.3486,-1420.3571,16.2562,0);                            //Materiales 1 LS
    CreatePickup(1279,0,1422.6765,-1319.3438,13.5547,0);                            //Materiales 2 LS
    CreatePickup(1279,0,-1735.7610,1244.9299,7.5469,0);                             //Materiales 3 SF
	CreateDynamicPickup(1275,1,-1050.7212,-2557.5125,2876.4106, -1,-1,-1, 100.0); 	// ROPA TIENDA DP
	CreateDynamicPickup(1239,1,-1053.5027,-2568.4131,2876.4106, -1,-1,-1, 100.0);	// TIENDA DP MENU
	CreateDynamicPickup(1276,1,-1062.5808,-2556.3596,2876.4106, -1,-1,-1, 100.0);	// COMPRAR PRENDA TIENDA DP
    CreateDynamicPickup(1242, 23, -1371.6478,1484.8774,11.0391, 1, 0);
    CreateDynamicPickup(1242, 23, -1371.6689,1488.6627,11.0391, 1, 0);
    CreateDynamicPickup(1242, 23, -1371.6919,1492.3409,11.0391, 1, 0);
    CreateDynamicPickup(1242, 23, -1463.2036,1488.8374,8.2501, 1, 0);
    CreateDynamicPickup(1242, 23, -1463.1571,1485.1980,8.2578, 1, 0);
    CreateDynamicPickup(1242, 23, -1463.1652,1481.2231,8.2578, 1, 0);
    /********************************Actores*****************************************************/
    CreateDynamicActor(96,663.7415,-236.8033,1276.7600,43.9748, 1,100.0,9);
    CreateDynamicActor(266,664.5109,-219.4480,1276.7600,129.0393, 1,100.0,9);
    CreateDynamicActor(265,643.4172,-236.0282,1276.7600,357.3718, 1,100.0,9);
    CreateDynamicActor(280,647.9240,-190.3933,1276.7993,135.8160, 1,100.0,9);
    CreateDynamicActor(59,628.5812,-211.7128,1276.7863,267.7645, 1,100.0,9);
    CreateDynamicActor(40,627.1611,-208.5336,1276.7897,89.9853, 1,100.0,9);
    CreateDynamicActor(307,628.4916,-192.4982,1276.7865,221.3817, 1,100.0,9);
    //Barreras del tren
    BarreraTren[0] = CreateObject(968,2280.1448, -1155.7435, 26.5826,0.0000, -29.0000, -94.0000);
    BarreraTren[1] = CreateObject(968, 2292.89233, -1144.04053, 26.5826,   0.00000, -29.00000, 90.00000);
    BarreraTren[2] = CreateObject(968, 2204.32129, -1652.34021, 15.5075,   0.00000, 25.00000, 75.00000);
    BarreraTren[3] = CreateObject(968,2220.4956, -1642.2866, 15.5075,0.0000, 25.0000, -105.0000);
    BarreraTren[4] = CreateObject(968, 2194.21289, -1725.40625, 13.3035,   0.00000, -25.00000, 90.00000);
    BarreraTren[5] = CreateObject(968, 2207.41235, -1739.35522, 13.3035,   0.00000, 25.00000, 90.00000);
    BarreraTren[6] = CreateObject(968, 2267.56689, -1489.89795, 22.7738,   0.00000, 28.00000, 75.36785);
    BarreraTren[7] = CreateObject(968, 2282.61084, -1478.29395, 22.7738,   0.00000, 28.00000, 256.91840);
    BarreraTren[8] = CreateObject(968, -1938.84546, -58.41910, 25.62800,   0.00000, -28.69220, 92.00000);
    BarreraTren[9] = CreateObject(968, -1960.57544, -70.76190, 25.77820,   0.00000, -28.00000, -92.00000);
    BarreraTren[10] = CreateObject(968, -1946.05603, -234.05450, 25.66820,   0.00000, 28.00000, 90.60900);
    BarreraTren[11] = CreateObject(968, -1960.84656, -246.08670, 25.83600,   0.00000, -28.00000, 85.00000);
    BarreraTren[12] = CreateObject(968, -1988.13452, -587.05579, 25.92080,   0.00000, 28.00000, 88.00000);
    BarreraTren[13] = CreateObject(968, -1976.24756, -573.14539, 25.94860,   0.00000, -28.00000, 90.00000);
    BarreraTren[14] = CreateObject(968, 2757.77783, 907.54089, 11.11410,   0.00000, 28.00000, 90.00000);
    BarreraTren[15] = CreateObject(968, 2773.50049, 920.89032, 10.98780,   0.00000, -28.00000, 90.00000);
    BarreraTren[16] = CreateObject(968, 2380.52832, 2699.47437, 11.17500,   0.00000, 28.00000, 0.00000);
    BarreraTren[17] = CreateObject(968, 2394.18726, 2684.83057, 11.14120,   0.00000, -28.00000, 0.00000);
    BarreraTren[18] = CreateObject(968, 2093.01245, 2690.96704, 11.21150,   0.00000, -28.00000, 0.00000);
    BarreraTren[19] = CreateObject(968, 2081.60083, 2697.34692, 11.21150,   0.00000, 29.50000, 0.00000);
    BarreraTren[20] = CreateObject(968, 1901.88989, 2697.34424, 11.19190,   0.00000, 28.00000, 0.00000);
    BarreraTren[21] = CreateObject(968, 1913.32861, 2690.97827, 11.06280,   0.00000, -28.00000, 0.00000);
    BarreraTren[22] = CreateObject(968, 1593.03247, 2628.83691, 11.20350,   0.00000, -28.00000, 0.00000);
    BarreraTren[23] = CreateObject(968, 1581.61389, 2639.52002, 11.26740,   0.00000, 28.00000, 0.00000);
    BarreraTren[24] = CreateObject(968, 1241.58447, 2639.52222, 11.34460,   0.00000, 28.00000, 0.00000);
    BarreraTren[25] = CreateObject(968, 1252.98523, 2628.83496, 11.34460,   0.00000, -28.00000, 0.00000);
    BarreraTren[26] = CreateObject(968, 746.04712, 1922.20959, 5.75130,   0.00000, 28.00000, 270.00000);
    BarreraTren[27] = CreateObject(968, 733.56360, 1908.15247, 5.62180,   0.00000, -28.00000, 270.00000);
    BarreraTren[28] = CreateObject(968, 733.80109, 1844.15637, 5.71150,   0.00000, -28.00000, 270.00000);
    BarreraTren[29] = CreateObject(968, 746.41858, 1854.80066, 5.70080,   0.00000, 28.00000, 270.00000);
    BarreraTren[30] = CreateObject(968, 1967.45911, -1961.88232, 14.07840,   0.00000, -28.00000, 0.00000);
    BarreraTren[31] = CreateObject(968, 1955.82043, -1950.12793, 14.07840,   0.00000, 28.00000, 0.00000);
    BarreraTren[32] = CreateObject(968, 2194.45605, -1901.16833, 13.87780,   0.00000, 28.00000, 90.00000);
    BarreraTren[33] = CreateObject(968, 2206.67432, -1887.77466, 13.87780,   0.00000, 28.00000, 270.00000);
    BarreraTren[34] = CreateObject(968, 2292.21802, -1378.91211, 24.45740,   0.00000, -28.00000, 90.00000);
    BarreraTren[35] = CreateObject(968, 2280.96069, -1390.03418, 24.4574,   0.00000, -28.00000, -90.00000);
    //ACTORES ISLA
    new IslaActor1 = CreateDynamicActor(154,870.3842,-2998.8372,3.8814,358.4109, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor1, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
    new IslaActor2 = CreateDynamicActor(136,827.7870,-3022.0591,5.7904,274.2031, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor2, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 1, 0);
    new IslaActor3 = CreateDynamicActor(92, 804.8068,-3033.8596,6.0631,87.2346, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor3, "SKATE","skate_idle", 4.1, 1, 0, 0, 1, 0);
    new IslaActor4 = CreateDynamicActor(45, 713.2985,-3003.8955,3.9369,139.8708, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor4, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
    new IslaActor5 = CreateDynamicActor(18, 789.5573,-3000.6533,4.0739,143.6871, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor5, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
    new IslaActor6 = CreateDynamicActor(138, 895.3869,-3004.3044,4.6576,62.4296, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor6, "SUNBATHE","ParkSit_W_idleA", 4.1, 1, 0, 0, 1, 0);
    new IslaActor7 = CreateDynamicActor(138, 788.1647,-3002.9846,4.3914,358.9342, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0); ApplyDynamicActorAnimation(IslaActor7, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
    new IslaActor8 = CreateDynamicActor(140, 890.8132,-3001.8557,4.3214,233.9699, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor8, "SUNBATHE", "Lay_Bac_in", 4.1, 1, 0, 0, 1, 0);
    new IslaActor9 = CreateDynamicActor(97,781.3519,-3001.0222,4.3688,347.9118, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0); ApplyDynamicActorAnimation(IslaActor9, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
    //IGLESIA LV
	new Alfombra[5];
	Alfombra[0] = CreateObject(2631,-2201.1201200,-84.5800000,1015.5200200,0.0000000,0.0000000,0.0000000); Alfombra[1] = CreateObject(2631,-2197.2199700,-84.5800000,1015.5200200,0.0000000,0.0000000,0.0000000); //
	Alfombra[2] = CreateObject(2631,-2205.0166000,-84.5802000,1015.5200200,0.0000000,0.0000000,0.0000000); Alfombra[3] = CreateObject(2631,-2208.9121100,-84.5801000,1015.5200200,0.0000000,0.0000000,0.0000000); //
    for(new o = 0, oj = sizeof(Alfombra); o < oj; o++) SetObjectMaterial(Alfombra[o], 0, 18646, "matcolours", "red-2");
    //FABRICA METANFETAMINA - TUBOS DE HUMO
	tuberis1 = CreateObject(3498, -1999.198608, 194.136597, 1044.254150, 0.000000, 0.000000, 0.000000); SetObjectMaterial(tuberis1, 1, 11090, "cf_metals_sfse", "gen_chrome", 0);
	tuberis2 = CreateObject(3498, -1995.674561, 194.136597, 1044.254150, 0.000000, 0.000000, 0.000000); SetObjectMaterial(tuberis2, 1, 11090, "cf_metals_sfse", "gen_chrome", 0);
	tuberis3 = CreateObject(3498, -1992.278564, 194.136597, 1044.254150, 0.000000, 0.000000, 0.000000); SetObjectMaterial(tuberis3, 1, 11090, "cf_metals_sfse", "gen_chrome", 0);
	paredx = CreateObject(19378, -2017.89246, 239.64149, 1035.45874,   0.00000, 0.00000, 0.00000); SetObjectMaterial(paredx,  0, 19437, "all_walls", "mp_carter_bwall",-1);
	ofi1 = CreateObject(19376, -2017.92236, 249.42850, 1035.43884,   0.00000, 0.00000, 0.00000); SetObjectMaterial(ofi1, 0, 19437, "all_walls", "mp_motel_carpet1",-1);
	ofi2 = CreateObject(19376, -2017.92236, 259.06250, 1035.43884,   0.00000, 0.00000, 0.00000); SetObjectMaterial(ofi2, 0, 19437, "all_walls", "mp_motel_carpet1",-1);
	ofi3 = CreateObject(19376, -2022.61121, 255.01019, 1035.43884,   0.00000, 0.00000, 90.00000); SetObjectMaterial(ofi3, 0, 19437, "all_walls", "mp_motel_carpet1",-1);
	ofi4 = CreateObject(19376, -2026.90845, 250.15170, 1035.43884,   0.00000, 0.00000, 0.00000); SetObjectMaterial(ofi4, 0, 19437, "all_walls", "mp_motel_carpet1",-1);
	luz1 = CreateObject(945, -2008.72021, 227.01640, 1044.36536,   0.00000, 0.00000, 0.00000); SetObjectMaterial(luz1, 0, 19382, "all_walls", "mirror01");
	luz2 = CreateObject(945, -2012.54199, 226.99699, 1044.36536,   0.00000, 0.00000, 0.00000); SetObjectMaterial(luz2, 0, 19382, "all_walls", "mirror01");
	luz3 = CreateObject(945, -2016.40686, 226.98024, 1044.36536,   0.00000, 0.00000, 0.00000); SetObjectMaterial(luz3, 0, 19382, "all_walls", "mirror01");
	luz4 = CreateObject(945, -2004.86218, 227.01640, 1044.36536,   0.00000, 0.00000, 0.00000); SetObjectMaterial(luz4, 0, 19382, "all_walls", "mirror01");
	luz5 = CreateObject(945, -2001.04065, 227.01640, 1044.36536,   0.00000, 0.00000, 0.00000); SetObjectMaterial(luz5, 0, 19382, "all_walls", "mirror01");
	//ACTORES ESCUELA DE STRIP
    CreateDynamicActor(249,956.9611,-54.3932,1001.1172,268.8569, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
    new EscuelaStrip3 = CreateDynamicActor(257,956.8380,-52.8452,1002.0612,269.7083, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0); ApplyDynamicActorAnimation(EscuelaStrip3, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 0);
    new Actorsxx = CreateDynamicActor(123, -2172.753173, 679.367126, 55.162170, 108.508644, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0); ApplyDynamicActorAnimation(Actorsxx, "COP_AMBIENT", "Coplook_loop", 4.1 , 0 , 0 , 0 , 1 , 0 ) ;
    CreateDynamicActor(125, -2181.774658, 710.965881, 53.890625, 178.695983, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
    CreateDynamicActor(112, -2187.197998, 716.059631, 53.899868, 224.153121, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
    CreateDynamicActor(111, -2181.458740, 715.438049, 53.891841, 150.687530, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	new CPILOTO = CreateDynamicActor(57, 1164.0037,-1.3924,1020.6459,198.3095, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	SetActorVirtualWorld(CPILOTO, 1); ApplyDynamicActorAnimation(CPILOTO, "ped", "SEAT_down", 4.1 , 0 , 0 , 0 , 1 , 0);
    //STRIPTEASE
    Strips[1] = CreateActor(87, 1213.2875,-3.9009,1001.3281,261.5670); ApplyActorAnimation(Strips[1], "STRIP","STR_Loop_A",4.1,7,5,1,1,0);
    Strips[2] = CreateActor(178, 1219.3636,-6.2801,1001.3281,266.2902);
    Strips[3] = CreateActor(244, 1202.9968,-8.4485,1002.0255,266.6595);
    Strips[4] = CreateActor(245, 1202.8573,8.9183,1000.9219,133.9969);
    Strips[5] = CreateActor(124, 1206.0651,-13.5290,1000.9219,0.0000); ApplyActorAnimation(Strips[5],"COP_AMBIENT", "Coplook_loop",4.1,7,5,1,1,0);
    Strips[7] = CreateActor(152, 1208.3020,-6.1708,1001.3281,176.0823+45);
    Strips[8] = CreateActor(87, 1213.2875,-3.9009,1001.3281,261.5670);
    Strips[9] = CreateActor(246, 1221.3643,8.4586,1001.3356,261.5670);
    Strips[10] = CreateActor(90,1206.2085,-0.9576,1000.9219,174.0048); ApplyActorAnimation(Strips[10], "STRIP","PUN_LOOP", 4.1,7,5,1,1,0);
    Strips[11] = CreateActor(171, 501.7544,-20.4735,1000.6797,85.9272); SetActorVirtualWorld(Strips[11], 3);
    Stripx[2] = CreateActor(178,1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[2], 9999);
    Stripx[3] = CreateActor(244, 1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[3], 9999);
    Stripx[4] = CreateActor(245, 1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[4], 9999);
    Stripx[7] = CreateActor(152, 1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[7], 9999);
    Stripx[8] = CreateActor(87, 1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[8], 9999);
    Stripx[9] = CreateActor(246, 1203.4559,16.1060,1000.9219,325.5020); SetActorVirtualWorld(Stripx[9], 9999);
    for(new b = 0, bj = sizeof(Strips); b < bj; b++)
    {
        if(IsValidActor(Strips[b])) SetActorVirtualWorld(Strips[b], 5);
    }
    // Actores
    actors[1] = CreateActor(280, 246.404174,120.395568,1003.266967,178.847152);
    actors[2] = CreateActor(307, 238.564437,112.894973,1003.218750,268.148071);
    actors[3] = CreateActor(300, 253.797485,117.371421,1003.218750,93.306335);
    actors[4] = CreateActor(71, 219.338485,116.030166,999.015625,180.895050);
    actors[5] = CreateActor(64, 1208.2064,-6.2447,1001.3281,180.9896);
    actors[6] = CreateActor(85, 1221.3612,8.5217,1001.3356,131.3608);
    actors[7] = CreateActor(152, 1215.6638,-6.3362,1001.3281,95.1821);
    actors[8] = CreateActor(178, 1219.7606,-6.4455,1001.3281,178.2887);
    actors[9] = CreateActor(25, -1253.4526,2118.3821,1246.5457,175.7945);
    actors[10] = CreateActor(163, -1245.2422,2116.1465,1246.5457,29.4371);
    actors[11] = CreateActor(223, -1248.9423,2095.2004,1246.6360,72.3647);
    actors[12] = CreateActor(29, 2113.6404,-1872.2035,13.5469,57.5343);
    actors[13] = CreateActor(163, -1245.2422,2116.1465,1246.5457,29.4371);
    actors[14] = CreateActor(223, -1248.9423,2095.2004,1246.6360,72.3647);
    //Guardia3 LVPD - Guardia4 camionero
    Guardia3 = CreateActor(282, 2238.222412, 2449.497802, 11.037217, 89.597267); SetActorVirtualWorld(Guardia3, 0);
    Guardia4 = CreateActor(71, -1674.989624, 5.721164, 3.554687, 226.057571); SetActorVirtualWorld(Guardia4, 0);
    Guardia6 = CreateActor(267, -1701.200439, 688.873352, 24.890625, 84.270515); SetActorVirtualWorld(Guardia6, 0);
    Guardia7 = CreateActor(301, -1572.609497, 657.566528, 7.187500, 274.657836); SetActorVirtualWorld(Guardia7, 0);
    Guardia8 = CreateActor(281, 233.047821, 166.339050, 1003.023437, 268.459442); SetActorVirtualWorld(Guardia8, 7);
    Entrenador = CreateActor(49, 761.044006, -31.975740, 1000.585937, 268.381744); SetActorVirtualWorld(Entrenador, 0);
    Entrenador2 = CreateActor(81, 763.955139, -75.041831, 1000.656250, 357.676940); SetActorVirtualWorld(Entrenador2, 0);
    //actores by procton
    CreateActor(57, 1810.978393, -1300.798950, 65.812500, 51.239631);
    CreateActor(3, 1804.497436, -1303.756591, 93.039062, 87.539863);
    CreateActor(141, 1803.932373, -1287.233032, 13.642095, 114.823440);
    CreateActor(80, 767.066894, 14.329621, 1000.700012, 181.610961);
    CreateActor(71, 2704.813964, -2514.520263, 13.649707, 89.008201);
    CreateActor(131, -32.635578, 53.932895, 3.117187, 341.870483);
    CreateActor(128, 216.828369, -233.098983, 1.778618, 358.369598);
    CreateActor(261, 194.831649, -231.076309, 1.778618, 273.142181);
    // ACTORES TIENDA DP BY Zenon
	CreateActor(169, -1058.8312,-2581.3210,2876.4106,0.8913); // ACTOR TIENDA DP BAR
	CreateActor(172, -1050.6222,-2568.2671,2876.4106,91.8974); // ACTOR TIENDA DP CAJA
    CreateActor(68, -2216.6455,-84.6362,1017.1100,270.0034); // PAPA DE LA IGLESIA
    //actores fabrica
    CreateActor(30, 35.614139, -292.886352, 2.114686, 283.343627);
    CreateActor(47, 59.118892, -294.536254, 1.578125, 2.304267);
    CreateActor(183, 83.618896, -315.884796, 1.578125, 359.315856);
    CreateActor(202, 93.779579, -311.980926, 1.578125, 89.556777);
    Guardia12 = CreateActor(71, -76.284889, -382.248352, 5.366365, 92.477394); SetActorVirtualWorld(Guardia12, 0);
    Hombreemisora = CreateActor(3, 393.601165, 183.666946, 1040.115600, 358.571380); SetActorVirtualWorld(Hombreemisora, 5);
    IslaSeguridad = CreateActor(71, 833.686462, -2958.572998, 12.137064, 55.661621); SetActorVirtualWorld(IslaSeguridad, 0);
    IslaSeguridad2 = CreateActor(71, 833.256469, -2959.604736, 12.121186, 218.549713); SetActorVirtualWorld(IslaSeguridad2, 0);
    Minero = CreateActor(153, -384.346038, 2199.279052, 25.410528, 269.214111); SetActorVirtualWorld(Minero, 1);
    Minero1 = CreateActor(27, -381.239776, 2193.452880, 25.410528, 354.273162); ApplyActorAnimation(Minero1, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0); SetActorVirtualWorld(Minero1, 1);
    Guardia8 = CreateActor(306, 219.108505, 1416.221191, 1091.199951, 76.925292); SetActorVirtualWorld(Guardia8, 15);
    Avionista = CreateActor(61, 415.143218, 2537.129150, 19.148437, 151.044891); SetActorVirtualWorld(Avionista, 0);
    CreateActor(163, 1222.399536, 4.901185, 1000.921875, 99.739120);  //Seguridad
    CreateActor(163, 1200.141601, 12.485798, 1000.921875, 268.917297);  //Seguridad
    Chicataxista = CreateActor(150, -2023.212890, -113.827125, 1038.818725, 114.691848);
    ApplyActorAnimation(Chicataxista, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
    SetActorVirtualWorld(Chicataxista, 5);

    SetActorVirtualWorld(actors[1], 1);
    SetActorVirtualWorld(actors[2], 1);
    SetActorVirtualWorld(actors[3], 1);
    SetActorVirtualWorld(actors[4], 1);
    SetActorVirtualWorld(actors[5], 0);
    SetActorVirtualWorld(actors[12], 1);
    SetActorVirtualWorld(actors[13], 1);
    
    SetActorVirtualWorld(actors[6], 12); ApplyActorAnimation(actors[6], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
    SetActorVirtualWorld(actors[7], 12); ApplyActorAnimation(actors[7], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
    SetActorVirtualWorld(actors[8], 12); ApplyActorAnimation(actors[8], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
    SetActorVirtualWorld(actors[9], 12); ApplyActorAnimation(actors[9], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
    SetActorVirtualWorld(actors[14], 1); ApplyActorAnimation(actors[14], "ped", "SEAT_down", 4.1,0,0,0,1,0);
    /**************************GANGZONES**********************************/
    mares = GangZoneCreate(912.910888, -2426.340087 ,865.637451, -2475.890136);
    ModoCombate = GangZoneCreate(-2989.536, -3328.195, 2989.536, 2989.536);
    muelles[1] = GangZoneCreate(2722.127685, -2629.471923 ,2762.454345, -2565.765380);
    muelles[2] = GangZoneCreate(2762.527832, -2565.853027 ,2797.997558, -2579.947021);
    muelles[3] = GangZoneCreate(2798.801757, -2577.302246 ,2832.094482, -2573.255859);
    muelles[4] = GangZoneCreate(2832.615722, -2573.807617 ,2828.321777, -2627.952392);
    isla[1] = GangZoneCreate(922.038452, -3452.668701 ,700.301208, -3783.534179);
    isla[2] = GangZoneCreate(717.393859, -3767.105468 ,906.093017, -3469.562988);
    isla[3] = GangZoneCreate(701.250549, -3369.013916 ,937.183837, -2993.267578);
    isla[4] = GangZoneCreate(921.261047, -3008.844726 ,717.734008, -3351.821044);
    isla[5] = GangZoneCreate(656.801879, -3007.734619 ,544.053894, -3355.595947);
    isla[6] = GangZoneCreate(562.668457, -3337.038330 ,640.362731, -3024.862304);
    pistas[1] = GangZoneCreate(843.070678, -1793.588989 ,826.174377, -2283.069091);
    pistas[2] = GangZoneCreate(843.070678, -2283.069091 ,826.174377, -2841.717285);
    pistas[3] = GangZoneCreate(843.070678, -2841.717285 ,826.174377, -3034.797600);
    pistas[4] = GangZoneCreate(616.404907, -3048.325927 ,586.677856, -3313.127685);
    pistas[5] = GangZoneCreate(614.571105, -3188.577880 ,755.057922, -3173.222167);
    pistas[6] = GangZoneCreate(775.670166, -3594.243652 ,755.216369, -3609.036865);
    pistas[7] = GangZoneCreate(756.460815, -3326.789062 ,741.555236, -3743.376220);
    pistas[8] = GangZoneCreate(741.840209, -3328.061279 ,895.941589, -3033.796142);
    suelo[1] = GangZoneCreate(856.066711, -3511.261718 ,775.566467, -3711.788085);
    suelo[2] = GangZoneCreate(882.908630, -3046.814453 ,755.163879, -3174.530029);
    suelo[3] = GangZoneCreate(882.821411, -3186.812744 ,755.291809, -3314.463378);
    nuevoszonesmap[1] = GangZoneCreate(937.9760,-3049.9661 ,923.1607,-3145.1191);
    nuevoszonesmap[2] = GangZoneCreate(1006.4476,-3089.2095 ,931.1815,-3121.8298);
    nuevoszonesmap[3] = GangZoneCreate(937.5342,-3197.9429 ,923.5303,-3292.5376);
    nuevoszonesmap[4] = GangZoneCreate(1006.5470,-3236.9585,929.6905,-3269.4004);
    nuevoszonesmap[5] = GangZoneCreate(843.4049,-3355.4021,831.0949,-3402.6936);
    nuevoszonesmap[6] = GangZoneCreate(920.1868,-3488.4932,909.5975,-3583.3630);
    nuevoszonesmap[7] = GangZoneCreate(989.2953,-3527.5352,919.3427,-3560.0564);
    nuevoszonesmap[8] = GangZoneCreate(920.0563,-3641.2229,910.7339,-3736.0823);
    nuevoszonesmap[9] = GangZoneCreate(988.9786,-3680.2793,917.2717,-3712.8728);
    nuevoszonesmap[10] = GangZoneCreate(888.6401,-3770.6287,794.2590,-3789.8245);
    nuevoszonesmap[11] = GangZoneCreate(850.4891,-3785.5850,818.0027,-3854.3125);
    
    // Tiempos
    SetTimer("CargarTodo",2000,false);
    SetTimer("CargarBots",2000,false);
   	SetTimer("TimerFC",5000,false);
    
    handle_db = mysql_connect_file("conexion.ini");
    if(handle_db == MYSQL_INVALID_HANDLE || mysql_errno(handle_db) != 0)
    {
        npctoggle = 1;
        print("|------------------------------------------|");
        print("| Conexión fallida con la base de datos  |");
        print("| El servidor se cerrará en 5 segundos...  |");
        print("|------------------------------------------|");
        SetTimer("CerrarServidor",5000,false);
    }
    else
    {
		print("---------------------------------------------------------");
        print("           "SERVER_NAME" - Versión v"SERVER_VERSION" ");
        print("                   Zenon's Gamemode Cargado");
        print("---------------------------------------------------------");
	}
	LimpiarSalon();
    AddPlayerClass(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	mysql_set_charset("latin1",handle_db);
	
    SendRconCommand("hostname "SERVER_NAME" | Venta de autos entre usuarios");
    SetGameModeText(""SERVER_COIN2":RP v"SERVER_VERSION"");
    SendRconCommand("mapname San Andreas");
    SendRconCommand("weburl "WEB_URL"");
    SendRconCommand("language Español - Spanish");
    SendRconCommand("rcon_password "RCON_PSSWRD"");

    SetNameTagDrawDistance(35.0);
    ShowNameTags(1);
    DisableInteriorEnterExits();
    ManualVehicleEngineAndLights();
    EnableStuntBonusForAll(0);
    UsePlayerPedAnims();
    AntiDeAMX();

    // Model's Selection Cargado
    RopaHombre = LoadModelSelectionMenu("RopaHombre.txt");
    RopaMujer = LoadModelSelectionMenu("RopaMujer.txt");
    RopaHombreBZ = LoadModelSelectionMenu("RopaHombreBZ.txt");
    RopaMujerBZ = LoadModelSelectionMenu("RopaMujerBZ.txt");
    Helrp = LoadModelSelectionMenu("helirc.txt");
    barp = LoadModelSelectionMenu("botesar.txt");
    Motosrp = LoadModelSelectionMenu("motosar.txt");
    vehrp = LoadModelSelectionMenu("vehrc.txt");
    objetos = LoadModelSelectionMenu("prendas.txt");
    policiahombre = LoadModelSelectionMenu("policia.txt");
    policiamujer = LoadModelSelectionMenu("policia2.txt");
   	RoadblockList = LoadModelSelectionMenu("roadblocks.txt");
	SignList = LoadModelSelectionMenu("signs.txt");

    new Dialog_Lines_String[256];
    format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
    for(new i = 0; i != sizeof(RandomColors); i++)
    {
        format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}Color #%d\n", RandomColors[i] >>> 8, i + 1);
        strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
    }
    Sangre = TextDrawCreate(430.000000, 100.000000, "particle:bloodpool_64");
    TextDrawLetterSize(Sangre, 0.480000, 1.120000);
    TextDrawTextSize(Sangre, 160.000000, 200.000000);
    TextDrawAlignment(Sangre, 0);
    TextDrawColor(Sangre, 0xE1E1E1FF);
    TextDrawUseBox(Sangre, 0);
    TextDrawBoxColor(Sangre, 0x80808080);
    TextDrawSetShadow(Sangre, 2);
    TextDrawSetOutline(Sangre, 0);
    TextDrawBackgroundColor(Sangre, 0x000000FF);
    TextDrawFont(Sangre, 4);
    TextDrawSetProportional(Sangre, 1);
    TextDrawSetSelectable(Sangre, 0);

    Sangre2 = TextDrawCreate(430.000000, 100.000000, "particle:bloodpool_64");
    TextDrawLetterSize(Sangre2, 0.480000, 1.120000);
    TextDrawTextSize(Sangre2, 160.000000, 200.000000);
    TextDrawAlignment(Sangre2, 0);
    TextDrawColor(Sangre2, 0x02FB00FF);
    TextDrawUseBox(Sangre2, 0);
    TextDrawBoxColor(Sangre2, 0x80808080);
    TextDrawSetShadow(Sangre2, 2);
    TextDrawSetOutline(Sangre2, 0);
    TextDrawBackgroundColor(Sangre2, 0x000000FF);
    TextDrawFont(Sangre2, 4);
    TextDrawSetProportional(Sangre2, 1);
    TextDrawSetSelectable(Sangre2, 0);

    Completonegro = TextDrawCreate(642.000000, 0.000000, "_");
    TextDrawLetterSize(Completonegro, 0.800000, 49.499992);
    TextDrawTextSize(Completonegro, -3.000000, 4.000000);
    TextDrawAlignment(Completonegro, 0);
    TextDrawColor(Completonegro, 0xFFFFFFFF);
    TextDrawUseBox(Completonegro, 1);
    TextDrawBoxColor(Completonegro, 0x000000FF);
    TextDrawSetShadow(Completonegro, 1);
    TextDrawSetOutline(Completonegro, 0);
    TextDrawBackgroundColor(Completonegro, 0x000000FF);
    TextDrawFont(Completonegro, 1);
    TextDrawSetProportional(Completonegro, 1);
    TextDrawSetSelectable(Completonegro, 0);

    LuegoDe = TextDrawCreate(214.000000, 211.000000, "Luego de algunos minutos...");
    TextDrawLetterSize(LuegoDe, 0.500000, 1.000000);
    TextDrawTextSize(LuegoDe, 1280.000000, 1280.000000);
    TextDrawAlignment(LuegoDe, 0);
    TextDrawColor(LuegoDe, 0xFFFFFFFF);
    TextDrawUseBox(LuegoDe, 0);
    TextDrawBoxColor(LuegoDe, 0x80808080);
    TextDrawSetShadow(LuegoDe, 1);
    TextDrawSetOutline(LuegoDe, 0);
    TextDrawBackgroundColor(LuegoDe, 0x000000FF);
    TextDrawFont(LuegoDe, 3);
    TextDrawSetProportional(LuegoDe, 1);
    TextDrawSetSelectable(LuegoDe, 0);
    
    Textdraws[textdraw_SHOP_TUNING][0] = TextDrawCreate(320.000000, 330.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 6.966667);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][0], 95);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);

	Textdraws[textdraw_SHOP_TUNING][1] = TextDrawCreate(320.000000, 330.000000, ""SERVER_COIN2"_Tuning_Club");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][1], 0.354000, 1.533629);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][1], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][1], -8388353);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);

	Textdraws[textdraw_SHOP_TUNING][2] = TextDrawCreate(320.000000, 376.000000, "COMPRAR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][2], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][2], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][2], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][2], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][2], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][2], true);

	Textdraws[textdraw_SHOP_TUNING][3] = TextDrawCreate(370.000000, 376.000000, "SIGUIENTE");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][3], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][3], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][3], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][3], true);

	Textdraws[textdraw_SHOP_TUNING][4] = TextDrawCreate(270.000000, 376.000000, "ANTERIOR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][4], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][4], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][4], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][4], true);

    PuticlubMedia = TextDrawCreate(305.000000, 411.000000, "Media");
    TextDrawLetterSize(PuticlubMedia, 0.250000, 0.899999);
    TextDrawTextSize(PuticlubMedia, 1280.000000, 1280.000000);
    TextDrawAlignment(PuticlubMedia, 0);
    TextDrawColor(PuticlubMedia, 0xFFFFFFFF);
    TextDrawUseBox(PuticlubMedia, 0);
    TextDrawBoxColor(PuticlubMedia, 0x80808080);
    TextDrawSetShadow(PuticlubMedia, 1);
    TextDrawSetOutline(PuticlubMedia, 0);
    TextDrawBackgroundColor(PuticlubMedia, 0x000000FF);
    TextDrawFont(PuticlubMedia, 2);
    TextDrawSetProportional(PuticlubMedia, 1);
    TextDrawSetSelectable(PuticlubMedia, 0);

    PuticlubAlta = TextDrawCreate(375.000000, 411.000000, "Alta");
    TextDrawLetterSize(PuticlubAlta, 0.250000, 0.899999);
    TextDrawTextSize(PuticlubAlta, 1280.000000, 1280.000000);
    TextDrawAlignment(PuticlubAlta, 0);
    TextDrawColor(PuticlubAlta, 0xFFFFFFFF);
    TextDrawUseBox(PuticlubAlta, 0);
    TextDrawBoxColor(PuticlubAlta, 0x80808080);
    TextDrawSetShadow(PuticlubAlta, 1);
    TextDrawSetOutline(PuticlubAlta, 0);
    TextDrawBackgroundColor(PuticlubAlta, 0x000000FF);
    TextDrawFont(PuticlubAlta, 2);
    TextDrawSetProportional(PuticlubAlta, 1);
    TextDrawSetSelectable(PuticlubAlta, 0);

    Cuadroputi = TextDrawCreate(222.000000, 386.000000, "_");
    TextDrawLetterSize(Cuadroputi, 0.340000, -0.200000);
    TextDrawTextSize(Cuadroputi, 419.000000, 2.000000);
    TextDrawAlignment(Cuadroputi, 0);
    TextDrawColor(Cuadroputi, 0xFFFFFFFF);
    TextDrawUseBox(Cuadroputi, 1);
    TextDrawBoxColor(Cuadroputi, 0xFF00FFFF);
    TextDrawSetShadow(Cuadroputi, 1);
    TextDrawSetOutline(Cuadroputi, 0);
    TextDrawBackgroundColor(Cuadroputi, 0x000000FF);
    TextDrawFont(Cuadroputi, 1);
    TextDrawSetProportional(Cuadroputi, 1);
    TextDrawSetSelectable(Cuadroputi, 0);

    Cuadroputi1 = TextDrawCreate(222.000000, 387.000000, "_");
    TextDrawLetterSize(Cuadroputi1, 0.340000, 2.599999);
    TextDrawTextSize(Cuadroputi1, 419.000000, 2.000000);
    TextDrawAlignment(Cuadroputi1, 0);
    TextDrawColor(Cuadroputi1, 0xFFFFFFFF);
    TextDrawUseBox(Cuadroputi1, 1);
    TextDrawBoxColor(Cuadroputi1, 0x000000FF);
    TextDrawSetShadow(Cuadroputi1, 1);
    TextDrawSetOutline(Cuadroputi1, 0);
    TextDrawBackgroundColor(Cuadroputi1, 0x000000FF);
    TextDrawFont(Cuadroputi1, 1);
    TextDrawSetProportional(Cuadroputi1, 1);
    TextDrawSetSelectable(Cuadroputi1, 0);

    FlechasArribaPuti = TextDrawCreate(317.299988, 401.000000, "~u~");
    TextDrawLetterSize(FlechasArribaPuti, 0.689999, 1.000000);
    TextDrawTextSize(FlechasArribaPuti, 1280.000000, 1280.000000);
    TextDrawAlignment(FlechasArribaPuti, 0);
    TextDrawColor(FlechasArribaPuti, 0xFFFF00FF);
    TextDrawUseBox(FlechasArribaPuti, 0);
    TextDrawBoxColor(FlechasArribaPuti, 0x80808080);
    TextDrawSetShadow(FlechasArribaPuti, 1);
    TextDrawSetOutline(FlechasArribaPuti, 0);
    TextDrawBackgroundColor(FlechasArribaPuti, 0x000000FF);
    TextDrawFont(FlechasArribaPuti, 1);
    TextDrawSetProportional(FlechasArribaPuti, 1);
    TextDrawSetSelectable(FlechasArribaPuti, 0);

    FlechasArribaPuti2 = TextDrawCreate(384.899994, 401.000000, "~u~");
    TextDrawLetterSize(FlechasArribaPuti2, 0.689999, 1.000000);
    TextDrawTextSize(FlechasArribaPuti2, 1280.000000, 1280.000000);
    TextDrawAlignment(FlechasArribaPuti2, 0);
    TextDrawColor(FlechasArribaPuti2, 0xFFFF00FF);
    TextDrawUseBox(FlechasArribaPuti2, 0);
    TextDrawBoxColor(FlechasArribaPuti2, 0x80808080);
    TextDrawSetShadow(FlechasArribaPuti2, 1);
    TextDrawSetOutline(FlechasArribaPuti2, 0);
    TextDrawBackgroundColor(FlechasArribaPuti2, 0x000000FF);
    TextDrawFont(FlechasArribaPuti2, 1);
    TextDrawSetProportional(FlechasArribaPuti2, 1);
    TextDrawSetSelectable(FlechasArribaPuti2, 0);
    return 1;
}

public TimerPlantas()
{
    new string[256], query[254];
    for(new e; e < MAX_MARIHUANA; e++)
    {
        if(Marihuana[e][Created] > 0)
        {
            Marihuana[e][Time] --;
            if(TimerMaria > 300) GuardarPlanta(e),TimerMaria = 0;
            TimerMaria ++;
            switch(Marihuana[e][Status])
            {
                case 1:
                {
                    if(Marihuana[e][Time] < 1)
                    {
                        Marihuana[e][Status] = 0;
                        Marihuana[e][Created] = 0;
                        if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
                        if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
                        mysql_format(handle_db, query, sizeof(query), "DELETE FROM marihuana WHERE ID = '%d'", Marihuana[e][mID]);
                        mysql_tquery(handle_db, query);
                        format(Marihuana[e][Owner], 24, "Nadie");
                        return true;
                    }
                    format(string, sizeof(string), "{91ed00}Semillas de Marihuana{FFFFFF}\nSembradas por {4C94F6}%s{FFFFFF}\nSe seca en %dm %ds\n{DBED15}/regar{FFFFFF}", Marihuana[e][Owner], Marihuana[e][Time]/60,Marihuana[e][Time]%(60));
                    if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_ROJO, string);
                }
                case 2:
                {
                    new hora = Marihuana[e][Time]/3600;
                    new minuto = Marihuana[e][Time]/60%(60);
                    if(hora > 0 && minuto == 0)
                    {
                        if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
                        switch(hora)
                        {
                            case 2: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.52, 0.000000, 0.000000, -0.000000);
                            case 3: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.26, 0.000000, 0.000000, -0.000000);
                            case 4: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.78, 0.000000, 0.000000, -0.000000);
                            case 5: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-2.4, 0.000000, 0.000000, -0.000000);
                            default: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1, 0.000000, 0.000000, -0.000000);
                        }
                    }
                    if(Marihuana[e][Time] <= 0)
                    {
                        Marihuana[e][Status] = 3;
                        Marihuana[e][Time] = 86400;
                        if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
                        if(!IsValidDynamicObject(Marihuana[e][Object])) Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1, 0.000000, 0.000000, -0.000000);
                        format(string, sizeof(string), "{00cc00}Planta de Marihuana{FFFFFF}\nSembrada por {00ccff}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{DBED15}/cosechar planta{FFFFFF}", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60%(60),Marihuana[e][Time]%(60));
                    }
                    else format(string, sizeof(string), "{00cc00}Planta de Marihuana{FFFFFF}\nSembrada por {00ccff}%s{FFFFFF}\nMadura en %dh %dm %ds", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60%(60),Marihuana[e][Time]%(60));
                    if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_ROJO, string);
                }
                case 3:
                {
                    if(Marihuana[e][Time] <= 0)
                    {
                        Marihuana[e][Created] = 0;
                        if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
                        if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
                        mysql_format(handle_db, query, sizeof(query), "DELETE FROM marihuana WHERE ID = '%d'", Marihuana[e][mID]);
                        mysql_tquery(handle_db, query);
                        format(Marihuana[e][Owner], 24, "Nadie");
                    }
                    else
                    {
                        format(string, sizeof(string), "{00cc00}Planta de Marihuana{FFFFFF}\nSembrada por {00ccff}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{DBED15}/cosechar planta{FFFFFF}", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60,Marihuana[e][Time]%(60));
                        if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_ROJO, string);
                    }
                }
            }
        }
    }
    return 1;
}
public CargarTodo()
{
    CargarUsers();
    CargarActores();
    CargarPuertas();
    CargarVehiculos();
    CargarFacciones();
    CargarTerritorios();
    CargarCasas();
    CargarEstacionamientos();
    CargarMapeos();
	CargarFabricas();
    mysql_query(handle_db, "UPDATE `usuarios` SET `Online` = '0'", false);

    PlayerBackGround[ _string ] = TextDrawCreate(297.000000, 158.000000, "NAME:STRING");    // Titulo (SELECTOR)
    TextDrawLetterSize(PlayerBackGround[ _string ], 0.320000, 1.000000);
    TextDrawTextSize(PlayerBackGround[ _string ], 27.000000, 178.000000);
    TextDrawAlignment(PlayerBackGround[ _string ], 2);
    TextDrawColor(PlayerBackGround[ _string ], 0xFFFFFFFF);
    TextDrawUseBox(PlayerBackGround[ _string ], 1);
    TextDrawBoxColor(PlayerBackGround[ _string ], 0x000000FF);
    TextDrawSetShadow(PlayerBackGround[ _string ], 1);
    TextDrawSetOutline(PlayerBackGround[ _string ], 0);
    TextDrawBackgroundColor(PlayerBackGround[ _string ], 0x000000FF);
    TextDrawFont(PlayerBackGround[ _string ], 1);
    TextDrawSetProportional(PlayerBackGround[ _string ], 1);
    TextDrawSetSelectable(PlayerBackGround[ _string ], 0);

    PlayerBackGround[ _button_close ] = TextDrawCreate(379.000000, 158.000000, Button_Close); // Boton para cerrar (SELECTOR)
    TextDrawLetterSize(PlayerBackGround[ _button_close ], 0.290000, 1.000000);
    TextDrawTextSize(PlayerBackGround[ _button_close ], 9.000000, 9.000000);
    TextDrawAlignment(PlayerBackGround[ _button_close ], 2);
    TextDrawColor(PlayerBackGround[ _button_close ], 0xFF0000FF);
    TextDrawUseBox(PlayerBackGround[ _button_close ], 1);
    TextDrawBoxColor(PlayerBackGround[ _button_close ], 0x000000FF);
    TextDrawSetShadow(PlayerBackGround[ _button_close ], 1);
    TextDrawSetOutline(PlayerBackGround[ _button_close ], 0);
    TextDrawBackgroundColor(PlayerBackGround[ _button_close ], 0x0B0B0B99);
    TextDrawFont(PlayerBackGround[ _button_close ], 1);
    TextDrawSetProportional(PlayerBackGround[ _button_close ], 0);
    TextDrawSetSelectable(PlayerBackGround[ _button_close ], 1);

    PlayerBackGround[ _background ][ 0 ] = TextDrawCreate(297.000000, 170.000000, "_");
    TextDrawLetterSize(PlayerBackGround[ _background ][ 0 ], 0.320000, 21.100000);
    TextDrawTextSize(PlayerBackGround[ _background ][ 0 ], 27.000000, 178.000000);
    TextDrawAlignment(PlayerBackGround[ _background ][ 0 ], 2);
    TextDrawColor(PlayerBackGround[ _background ][ 0 ], 0xFFFFFFFF);
    TextDrawUseBox(PlayerBackGround[ _background ][ 0 ], 1);
    TextDrawBoxColor(PlayerBackGround[ _background ][ 0 ], 0x000000FF);
    TextDrawSetShadow(PlayerBackGround[ _background ][ 0 ], 1);
    TextDrawSetOutline(PlayerBackGround[ _background ][ 0 ], 0);
    TextDrawBackgroundColor(PlayerBackGround[ _background ][ 0 ], 0x000000FF);
    TextDrawFont(PlayerBackGround[ _background ][ 0 ], 1);
    TextDrawSetProportional(PlayerBackGround[ _background ][ 0 ], 1);
    TextDrawSetSelectable(PlayerBackGround[ _background ][ 0 ], 0);

    PlayerBackGround[ _background ][ 1 ] = TextDrawCreate(297.000000, 170.000000, "_");
    TextDrawLetterSize(PlayerBackGround[ _background ][ 1 ], 0.320000, 10.500000);
    TextDrawTextSize(PlayerBackGround[ _background ][ 1 ], 27.000000, 178.000000);
    TextDrawAlignment(PlayerBackGround[ _background ][ 1 ], 2);
    TextDrawColor(PlayerBackGround[ _background ][ 1 ], 0xFFFFFFFF);
    TextDrawUseBox(PlayerBackGround[ _background ][ 1 ], 1);
    TextDrawBoxColor(PlayerBackGround[ _background ][ 1 ], 0x000000FF);
    TextDrawSetShadow(PlayerBackGround[ _background ][ 1 ], 1);
    TextDrawSetOutline(PlayerBackGround[ _background ][ 1 ], 0);
    TextDrawBackgroundColor(PlayerBackGround[ _background ][ 1 ], 0x000000FF);
    TextDrawFont(PlayerBackGround[ _background ][ 1 ], 1);
    TextDrawSetProportional(PlayerBackGround[ _background ][ 1 ], 1);
    TextDrawSetSelectable(PlayerBackGround[ _background ][ 1 ], 0);
    
    Textdraws[textdraw_HUD][0] = TextDrawCreate(0.000000, 444.000000, "_"); //base barra reputacion
    TextDrawBoxColor(Textdraws[textdraw_HUD][0], 0x000000FF);
    TextDrawLetterSize(Textdraws[textdraw_HUD][0], 1.000000, 0.250000);
    TextDrawTextSize(Textdraws[textdraw_HUD][0], 640.000000, 0.000000);
    TextDrawUseBox(Textdraws[textdraw_HUD][0], 1);

    Textdraws[textdraw_HUD][1] = TextDrawCreate(2.150000, 446.149994, "_"); //fondo barra reputacion
    TextDrawBoxColor(Textdraws[textdraw_HUD][1], 0x66666666);
    TextDrawLetterSize(Textdraws[textdraw_HUD][1], 1.000000, -0.200000);
    TextDrawTextSize(Textdraws[textdraw_HUD][1], 637.849976, 0.000000);
    TextDrawUseBox(Textdraws[textdraw_HUD][1], 1);

    CN = TextDrawCreate(0.000000, 0.000000, "---");
    TextDrawBoxColor(CN, 0x000000FF);
    TextDrawColor(CN, 0x000000FF);
    TextDrawFont(CN, 3);
    TextDrawLetterSize(CN, 1.000000, 12.199999);
    TextDrawSetOutline(CN, 1);
    TextDrawSetShadow(CN, 1);
    TextDrawTextSize(CN, 640.000000, -69.000000);
    TextDrawUseBox(CN, 1);

    CN2 = TextDrawCreate(0.000000, 337.000000, "---");
    TextDrawBoxColor(CN2, 0x000000FF);
    TextDrawColor(CN2, 0x000000FF);
    TextDrawFont(CN2, 3);
    TextDrawLetterSize(CN2, 0.899999, 15.000000);
    TextDrawSetOutline(CN2, 1);
    TextDrawSetShadow(CN2, 1);
    TextDrawTextSize(CN2, 640.000000, -60.000000);
    TextDrawUseBox(CN2, 1);

    CN3 = TextDrawCreate(190.000000, 350.000000, "DISCORD: "WEB_URL"");
    TextDrawColor(CN3, 0x6699FFFF);
    TextDrawLetterSize(CN3, 0.480000, 1.120000);

    CN4 = TextDrawCreate(120.000000, 50.000000, "BabyZone Roleplay");
    TextDrawFont(CN4, 3);
    TextDrawLetterSize(CN4, 1.200000, 2.100000);

    CN5 = TextDrawCreate(437.000000, 430.000000, "www.BabyZoneRP.net - Servidor RP 1");
    TextDrawColor(CN5, 0xFFFFFFFF);
    TextDrawLetterSize(CN5, 0.289999, 1.200000);
    TextDrawSetOutline(CN5, 0);
    TextDrawSetShadow(CN5, 1);

    Territorio_TD[0] = TextDrawCreate(320.000000, 355.000000, "-");
    TextDrawLetterSize(Territorio_TD[0], 12.321674, 9.937778);
    TextDrawAlignment(Territorio_TD[0], 2);
    TextDrawColor(Territorio_TD[0], 167);
    TextDrawSetShadow(Territorio_TD[0], 0);
    TextDrawSetOutline(Territorio_TD[0], 0);
    TextDrawBackgroundColor(Territorio_TD[0], 255);
    TextDrawFont(Territorio_TD[0], 1);
    TextDrawSetProportional(Territorio_TD[0], 1);
    TextDrawSetShadow(Territorio_TD[0], 0);

    Territorio_TD[1] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
    TextDrawLetterSize(Territorio_TD[1], 0.286000, 1.276444);
    TextDrawAlignment(Territorio_TD[1], 2);
    TextDrawColor(Territorio_TD[1], -76);
    TextDrawSetShadow(Territorio_TD[1], 0);
    TextDrawSetOutline(Territorio_TD[1], 0);
    TextDrawBackgroundColor(Territorio_TD[1], 255);
    TextDrawFont(Territorio_TD[1], 1);
    TextDrawSetProportional(Territorio_TD[1], 1);
    TextDrawSetShadow(Territorio_TD[1], 0);

    SeleccionaPuerta = TextDrawCreate(297.000000, 158.000000, "Selecciona la puerta");
    TextDrawLetterSize(SeleccionaPuerta, 0.320000, 1.000000);
    TextDrawTextSize(SeleccionaPuerta, 27.000000, 178.000000);
    TextDrawAlignment(SeleccionaPuerta, 2);
    TextDrawColor(SeleccionaPuerta, 0xFFFFFFFF);
    TextDrawUseBox(SeleccionaPuerta, 1);
    TextDrawBoxColor(SeleccionaPuerta, 0x000000FF);
    TextDrawSetShadow(SeleccionaPuerta, 1);
    TextDrawSetOutline(SeleccionaPuerta, 0);
    TextDrawBackgroundColor(SeleccionaPuerta, 0x000000FF);
    TextDrawFont(SeleccionaPuerta, 1);
    TextDrawSetProportional(SeleccionaPuerta, 1);
    TextDrawSetSelectable(SeleccionaPuerta, 0);

    BoxRobar = TextDrawCreate(297.000000, 170.000000, "_");
    TextDrawLetterSize(BoxRobar, 0.320000, 21.100000);
    TextDrawTextSize(BoxRobar, 27.000000, 178.000000);
    TextDrawAlignment(BoxRobar, 2);
    TextDrawColor(BoxRobar, 0xFFFFFFFF);
    TextDrawUseBox(BoxRobar, 1);
    TextDrawBoxColor(BoxRobar, 0x000000FF);
    TextDrawSetShadow(BoxRobar, 1);
    TextDrawSetOutline(BoxRobar, 0);
    TextDrawBackgroundColor(BoxRobar, 0x000000FF);
    TextDrawFont(BoxRobar, 1);
    TextDrawSetProportional(BoxRobar, 1);
    TextDrawSetSelectable(BoxRobar, 0);

    EquisCerrar = TextDrawCreate(379.000000, 158.000000, "X");
    TextDrawLetterSize(EquisCerrar, 0.290000, 1.000000);
    TextDrawTextSize(EquisCerrar, 9.000000, 9.000000);
    TextDrawAlignment(EquisCerrar, 2);
    TextDrawColor(EquisCerrar, 0xFF0000FF);
    TextDrawUseBox(EquisCerrar, 1);
    TextDrawBoxColor(EquisCerrar, 0x000000FF);
    TextDrawSetShadow(EquisCerrar, 1);
    TextDrawSetOutline(EquisCerrar, 0);
    TextDrawBackgroundColor(EquisCerrar, 0x0B0B0B99);
    TextDrawFont(EquisCerrar, 1);
    TextDrawSetProportional(EquisCerrar, 0);
    TextDrawSetSelectable(EquisCerrar, 1);

    //TREN VER MAPA
    MapaLateral[0] = TextDrawCreate(630.000000, 14.000000, "_");
    TextDrawLetterSize(MapaLateral[0], 0.539999, 31.200006);
    TextDrawTextSize(MapaLateral[0], 354.000000, 0.000000);
    TextDrawAlignment(MapaLateral[0], 0);
    TextDrawColor(MapaLateral[0], 0xFFFFFFFF);
    TextDrawUseBox(MapaLateral[0], 1);
    TextDrawBoxColor(MapaLateral[0], 0x000000FF);
    TextDrawSetShadow(MapaLateral[0], 1);
    TextDrawSetOutline(MapaLateral[0], 0);
    TextDrawBackgroundColor(MapaLateral[0], 0x000000FF);
    TextDrawFont(MapaLateral[0], 1);
    TextDrawSetProportional(MapaLateral[0], 1);
    TextDrawSetSelectable(MapaLateral[0], 0);

    MapaLateral[1] = TextDrawCreate(364.000000, 30.000000, "samaps:map");
    TextDrawLetterSize(MapaLateral[1], 0.500000, 1.000000);
    TextDrawTextSize(MapaLateral[1], 256.000000, 256.000000);
    TextDrawAlignment(MapaLateral[1], 0);
    TextDrawColor(MapaLateral[1], 0xE1E1E1FF);
    TextDrawUseBox(MapaLateral[1], 1);
    TextDrawBoxColor(MapaLateral[1], 0x000000FF);
    TextDrawSetShadow(MapaLateral[1], 1);
    TextDrawSetOutline(MapaLateral[1], 0);
    TextDrawBackgroundColor(MapaLateral[1], 0x000000FF);
    TextDrawFont(MapaLateral[1], 4);
    TextDrawSetProportional(MapaLateral[1], 1);
    TextDrawSetSelectable(MapaLateral[1], 0);

    MapaLateral[2] = TextDrawCreate(359.000000, 13.000000, "GPS");
    TextDrawLetterSize(MapaLateral[2], 0.400000, 1.600000);
    TextDrawTextSize(MapaLateral[2], 1280.000000, 1280.000000);
    TextDrawAlignment(MapaLateral[2], 0);
    TextDrawColor(MapaLateral[2], 0xFFFFFFFF);
    TextDrawUseBox(MapaLateral[2], 0);
    TextDrawBoxColor(MapaLateral[2], 0x80808080);
    TextDrawSetShadow(MapaLateral[2], 1);
    TextDrawSetOutline(MapaLateral[2], 0);
    TextDrawBackgroundColor(MapaLateral[2], 0x000000FF);
    TextDrawFont(MapaLateral[2], 2);
    TextDrawSetProportional(MapaLateral[2], 1);
    TextDrawSetSelectable(MapaLateral[2], 0);

    MapaLateral[3] = TextDrawCreate(570.000000, 19.500000, "~w~Usa ~b~~y~/ocultar gps~w~ para cerrar");
    TextDrawLetterSize(MapaLateral[3], 0.150000, 0.450000);
    TextDrawTextSize(MapaLateral[3], 1280.000000, 1280.000000);
    TextDrawAlignment(MapaLateral[3], 2);
    TextDrawColor(MapaLateral[3], 0xFFFFFFBF);
    TextDrawUseBox(MapaLateral[3], 0);
    TextDrawBoxColor(MapaLateral[3], 0x80808080);
    TextDrawSetShadow(MapaLateral[3], 1);
    TextDrawSetOutline(MapaLateral[3], 0);
    TextDrawBackgroundColor(MapaLateral[3], 0x000000FF);
    TextDrawFont(MapaLateral[3], 2);
    TextDrawSetProportional(MapaLateral[3], 1);
    TextDrawSetSelectable(MapaLateral[3], 0);

    NewPlayer[0] = TextDrawCreate(130.000000, 394.000000, "l");
    TextDrawLetterSize(NewPlayer[0], 44.499886, 2.799998);
    TextDrawTextSize(NewPlayer[0], 1280.000000, 1280.000000);
    TextDrawAlignment(NewPlayer[0], 0);
    TextDrawColor(NewPlayer[0], 0x00000020);
    TextDrawUseBox(NewPlayer[0], 0);
    TextDrawBoxColor(NewPlayer[0], 0x80808080);
    TextDrawSetShadow(NewPlayer[0], 0);
    TextDrawSetOutline(NewPlayer[0], 0);
    TextDrawBackgroundColor(NewPlayer[0], 0x000000FF);
    TextDrawFont(NewPlayer[0], 1);
    TextDrawSetProportional(NewPlayer[0], 1);
    TextDrawSetSelectable(NewPlayer[0], 0);

    NewPlayer[2] = TextDrawCreate(191.156677, 400.750000, "       Pulsa ~y~'H'~w~ para abrir el menª de opciones.");
    TextDrawLetterSize(NewPlayer[2], 0.320219, 1.320001);
    TextDrawAlignment(NewPlayer[2], 1);
    TextDrawColor(NewPlayer[2], -1);
    TextDrawSetShadow(NewPlayer[2], 1);
    TextDrawSetOutline(NewPlayer[2], 0);
    TextDrawBackgroundColor(NewPlayer[2], 255);
    TextDrawFont(NewPlayer[2], 1);
    TextDrawSetProportional(NewPlayer[2], 1);
    
    TAXIMET3 = TextDrawCreate(549.150024, 423.149994, "_");
    TextDrawLetterSize(TAXIMET3, 1.000000, -0.200000);
    TextDrawTextSize(TAXIMET3, 547.000000, 0.000000);
    TextDrawAlignment(TAXIMET3, 0);
    TextDrawColor(TAXIMET3, 0xE1E1E1FF);
    TextDrawUseBox(TAXIMET3, 0);
    TextDrawBoxColor(TAXIMET3, 0xFF9900FF);
    TextDrawSetShadow(TAXIMET3, 2);
    TextDrawSetOutline(TAXIMET3, 0);
    TextDrawBackgroundColor(TAXIMET3, 0x000000FF);
    TextDrawFont(TAXIMET3, 1);
    TextDrawSetProportional(TAXIMET3, 1);
    TextDrawSetSelectable(TAXIMET3, 0);

    TAXIMET4 = TextDrawCreate(549.150024, 376.149994, "_");
    TextDrawLetterSize(TAXIMET4, 1.000000, -0.200000);
    TextDrawTextSize(TAXIMET4, 613.349976, 0.000000);
    TextDrawAlignment(TAXIMET4, 0);
    TextDrawColor(TAXIMET4, 0xE1E1E1FF);
    TextDrawUseBox(TAXIMET4, 1);
    TextDrawBoxColor(TAXIMET4, 0x00B7C2FF);
    TextDrawSetShadow(TAXIMET4, 2);
    TextDrawSetOutline(TAXIMET4, 0);
    TextDrawBackgroundColor(TAXIMET4, 0x000000FF);
    TextDrawFont(TAXIMET4, 1);
    TextDrawSetProportional(TAXIMET4, 1);
    TextDrawSetSelectable(TAXIMET4, 0);

    TAXIMET = TextDrawCreate(499.000000, 387.000000, "Taximetro");
    TextDrawLetterSize(TAXIMET, 0.340000, 1.000000);
    TextDrawTextSize(TAXIMET, 50.000000, 74.000000);
    TextDrawAlignment(TAXIMET, 2);
    TextDrawColor(TAXIMET, 0xFFFFFFFF);
    TextDrawUseBox(TAXIMET, 1);
    TextDrawBoxColor(TAXIMET, 0x00000099);
    TextDrawSetShadow(TAXIMET, 1);
    TextDrawSetOutline(TAXIMET, 0);
    TextDrawBackgroundColor(TAXIMET, 0x00000033);
    TextDrawFont(TAXIMET, 1);
    TextDrawSetProportional(TAXIMET, 1);
    TextDrawSetSelectable(TAXIMET, 0);

    AlertaRefuerzos[0] = TextDrawCreate(264.000000, 351.000000, "_");
    TextDrawBackgroundColor(AlertaRefuerzos[0], 255);
    TextDrawFont(AlertaRefuerzos[0], 1);
    TextDrawLetterSize(AlertaRefuerzos[0], 0.420000, 1.200000);
    TextDrawColor(AlertaRefuerzos[0], -1);
    TextDrawSetOutline(AlertaRefuerzos[0], 0);
    TextDrawSetProportional(AlertaRefuerzos[0], 1);
    TextDrawSetShadow(AlertaRefuerzos[0], 1);
    TextDrawUseBox(AlertaRefuerzos[0], 1);
    TextDrawBoxColor(AlertaRefuerzos[0], 255);
    TextDrawTextSize(AlertaRefuerzos[0], 364.000000, 12.000000);
    TextDrawSetSelectable(AlertaRefuerzos[0], 0);

    AlertaRefuerzos[1] = TextDrawCreate(274.000000, 351.000000, "Enviando alertas");
    TextDrawBackgroundColor(AlertaRefuerzos[1], 255);
    TextDrawFont(AlertaRefuerzos[1], 1);
    TextDrawLetterSize(AlertaRefuerzos[1], 0.340000, 1.000000);
    TextDrawColor(AlertaRefuerzos[1], -1);
    TextDrawSetOutline(AlertaRefuerzos[1], 0);
    TextDrawSetProportional(AlertaRefuerzos[1], 1);
    TextDrawSetShadow(AlertaRefuerzos[1], 1);
    TextDrawSetSelectable(AlertaRefuerzos[1], 0);

    AlertaRefuerzos[2] = TextDrawCreate(261.000000, 345.000000, "~r~~h~.");
    TextDrawBackgroundColor(AlertaRefuerzos[2], 255);
    TextDrawFont(AlertaRefuerzos[2], 1);
    TextDrawLetterSize(AlertaRefuerzos[2], 0.460000, 1.700000);
    TextDrawColor(AlertaRefuerzos[2], -1);
    TextDrawSetOutline(AlertaRefuerzos[2], 0);
    TextDrawSetProportional(AlertaRefuerzos[2], 1);
    TextDrawSetShadow(AlertaRefuerzos[2], 1);
    TextDrawSetSelectable(AlertaRefuerzos[2], 0);

    AlertaRefuerzos[3] = TextDrawCreate(264.000000, 351.000000, "~r~~h~)");
    TextDrawBackgroundColor(AlertaRefuerzos[3], 255);
    TextDrawFont(AlertaRefuerzos[3], 1);
    TextDrawLetterSize(AlertaRefuerzos[3], 0.380000, 1.000000);
    TextDrawColor(AlertaRefuerzos[3], -1);
    TextDrawSetOutline(AlertaRefuerzos[3], 0);
    TextDrawSetProportional(AlertaRefuerzos[3], 1);
    TextDrawSetShadow(AlertaRefuerzos[3], 1);
    TextDrawSetSelectable(AlertaRefuerzos[3], 0);

    AlertaRefuerzos[4] = TextDrawCreate(267.000000, 349.000000, "~r~~h~)");
    TextDrawBackgroundColor(AlertaRefuerzos[4], 255);
    TextDrawFont(AlertaRefuerzos[4], 1);
    TextDrawLetterSize(AlertaRefuerzos[4], 0.410000, 1.400000);
    TextDrawColor(AlertaRefuerzos[4], -1);
    TextDrawSetOutline(AlertaRefuerzos[4], 0);
    TextDrawSetProportional(AlertaRefuerzos[4], 1);
    TextDrawSetShadow(AlertaRefuerzos[4], 1);
    TextDrawSetSelectable(AlertaRefuerzos[4], 0);

    TEXTDRAWBOX1 = TextDrawCreate(585.000000, 364.000000, "_");
    TextDrawFont(TEXTDRAWBOX1, 1);
    TextDrawLetterSize(TEXTDRAWBOX1, 0.229166, 6.500000);
    TextDrawTextSize(TEXTDRAWBOX1, 298.500000, 68.000000);
    TextDrawSetOutline(TEXTDRAWBOX1, 1);
    TextDrawSetShadow(TEXTDRAWBOX1, 0);
    TextDrawAlignment(TEXTDRAWBOX1, 2);
    TextDrawColor(TEXTDRAWBOX1, -1);
    TextDrawBackgroundColor(TEXTDRAWBOX1, 255);
    TextDrawBoxColor(TEXTDRAWBOX1, 255);
    TextDrawUseBox(TEXTDRAWBOX1, 1);
    TextDrawSetProportional(TEXTDRAWBOX1, 1);
    TextDrawSetSelectable(TEXTDRAWBOX1, 0);

    TEXTDRAWBOX2 = TextDrawCreate(603.000000, 373.000000, "KM/H");
    TextDrawFont(TEXTDRAWBOX2, 2);
    TextDrawLetterSize(TEXTDRAWBOX2, 0.141662, 1.099997);
    TextDrawTextSize(TEXTDRAWBOX2, 400.000000, 17.000000);
    TextDrawSetOutline(TEXTDRAWBOX2, 1);
    TextDrawSetShadow(TEXTDRAWBOX2, 0);
    TextDrawAlignment(TEXTDRAWBOX2, 1);
    TextDrawColor(TEXTDRAWBOX2, -1);
    TextDrawBackgroundColor(TEXTDRAWBOX2, 255);
    TextDrawBoxColor(TEXTDRAWBOX2, 50);
    TextDrawUseBox(TEXTDRAWBOX2, 0);
    TextDrawSetProportional(TEXTDRAWBOX2, 1);
    TextDrawSetSelectable(TEXTDRAWBOX2, 0);
    
    TEXTDRAWBOX3 = TextDrawCreate(615.000000, 398.000000, "_");
    TextDrawFont(TEXTDRAWBOX3, 1);
    TextDrawLetterSize(TEXTDRAWBOX3, 0.587499, 0.749993);
    TextDrawTextSize(TEXTDRAWBOX3, 293.500000, -8.000000);
    TextDrawSetOutline(TEXTDRAWBOX3, 1);
    TextDrawSetShadow(TEXTDRAWBOX3, 0);
    TextDrawAlignment(TEXTDRAWBOX3, 2);
    TextDrawColor(TEXTDRAWBOX3, -1);
    TextDrawBackgroundColor(TEXTDRAWBOX3, 255);
    TextDrawBoxColor(TEXTDRAWBOX3, -20);
    TextDrawUseBox(TEXTDRAWBOX3, 1);
    TextDrawSetProportional(TEXTDRAWBOX3, 1);
    TextDrawSetSelectable(TEXTDRAWBOX3, 0);

    TEXTDRAWBOX4 = TextDrawCreate(615.000000, 393.000000, "/");
    TextDrawFont(TEXTDRAWBOX4, 2);
    TextDrawLetterSize(TEXTDRAWBOX4, 0.266664, 1.200001);
    TextDrawTextSize(TEXTDRAWBOX4, 400.000000, -224.500000);
    TextDrawSetOutline(TEXTDRAWBOX4, 0);
    TextDrawSetShadow(TEXTDRAWBOX4, 0);
    TextDrawAlignment(TEXTDRAWBOX4, 3);
    TextDrawColor(TEXTDRAWBOX4, -1);
    TextDrawBackgroundColor(TEXTDRAWBOX4, 255);
    TextDrawBoxColor(TEXTDRAWBOX4, 50);
    TextDrawUseBox(TEXTDRAWBOX4, 0);
    TextDrawSetProportional(TEXTDRAWBOX4, 1);
    TextDrawSetSelectable(TEXTDRAWBOX4, 0);

    TEXTDRAWBOX5 = TextDrawCreate(615.000000, 399.000000, "_");
    TextDrawFont(TEXTDRAWBOX5, 1);
    TextDrawLetterSize(TEXTDRAWBOX5, 0.570832, 0.099994);
    TextDrawTextSize(TEXTDRAWBOX5, 292.000000, -7.000000);
    TextDrawSetOutline(TEXTDRAWBOX5, 1);
    TextDrawSetShadow(TEXTDRAWBOX5, 0);
    TextDrawAlignment(TEXTDRAWBOX5, 2);
    TextDrawColor(TEXTDRAWBOX5, -1);
    TextDrawBackgroundColor(TEXTDRAWBOX5, 255);
    TextDrawBoxColor(TEXTDRAWBOX5, 255);
    TextDrawUseBox(TEXTDRAWBOX5, 1);
    TextDrawSetProportional(TEXTDRAWBOX5, 1);
    TextDrawSetSelectable(TEXTDRAWBOX5, 0);

    BoxCarrera[0] = TextDrawCreate(141.619323, 339.833312, "usebox");
    TextDrawLetterSize(BoxCarrera[0], 0.000000, 9.600000);
    TextDrawTextSize(BoxCarrera[0], 29.859443, 0.000000);
    TextDrawAlignment(BoxCarrera[0], 1);
    TextDrawColor(BoxCarrera[0], 0);
    TextDrawUseBox(BoxCarrera[0], true);
    TextDrawBoxColor(BoxCarrera[0], -1);
    TextDrawSetShadow(BoxCarrera[0], 0);
    TextDrawSetOutline(BoxCarrera[0], 0);
    TextDrawFont(BoxCarrera[0], 0);

    BoxCarrera[1] = TextDrawCreate(138.808197, 342.750000, "usebox");
    TextDrawLetterSize(BoxCarrera[1], 0.000000, 8.922963);
    TextDrawTextSize(BoxCarrera[1], 32.202049, 0.000000);
    TextDrawAlignment(BoxCarrera[1], 1);
    TextDrawColor(BoxCarrera[1], 0);
    TextDrawUseBox(BoxCarrera[1], true);
    TextDrawBoxColor(BoxCarrera[1], 255);
    TextDrawSetShadow(BoxCarrera[1], 0);
    TextDrawSetOutline(BoxCarrera[1], 0);
    TextDrawFont(BoxCarrera[1], 0);

    BoxCarrera[2] = TextDrawCreate(37.013206, 352.916656, ".");
    TextDrawLetterSize(BoxCarrera[2], 9.332222, 0.935000);
    TextDrawAlignment(BoxCarrera[2], 1);
    TextDrawColor(BoxCarrera[2], -1);
    TextDrawSetShadow(BoxCarrera[2], 0);
    TextDrawSetOutline(BoxCarrera[2], 1);
    TextDrawBackgroundColor(BoxCarrera[2], 51);
    TextDrawFont(BoxCarrera[2], 1);
    TextDrawSetProportional(BoxCarrera[2], 1);

    BoxCarrera[3] = TextDrawCreate(33.265060, 394.916687, ".");
    TextDrawLetterSize(BoxCarrera[3], 9.762326, 0.981666);
    TextDrawAlignment(BoxCarrera[3], 1);
    TextDrawColor(BoxCarrera[3], -1);
    TextDrawSetShadow(BoxCarrera[3], 0);
    TextDrawSetOutline(BoxCarrera[3], 1);
    TextDrawBackgroundColor(BoxCarrera[3], 51);
    TextDrawFont(BoxCarrera[3], 1);
    TextDrawSetProportional(BoxCarrera[3], 1);
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == pickupCarreras){
        if(EnCarreras[playerid] > 0) {
            SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
        }
    }
    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpecJugador[i] == playerid)
        {
            SetPlayerInterior(i, newinteriorid);
            SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
        }
    }
    return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	//ROBAR CASAS
	if(playertextid == RoboCasas[playerid][0]) { if(ForzarCerraduraID[playerid] == 1) ForzarCerraduraPosiciones(playerid); else HideSelector(playerid); }
	if(playertextid == RoboCasas[playerid][1]) { if(ForzarCerraduraID[playerid] == 2) ForzarCerraduraPosiciones(playerid); else HideSelector(playerid); }
	if(playertextid == RoboCasas[playerid][2]) { if(ForzarCerraduraID[playerid] == 3) ForzarCerraduraPosiciones(playerid); else HideSelector(playerid); }
	if(playertextid == RoboCasas[playerid][3]) { if(ForzarCerraduraID[playerid] == 4) ForzarCerraduraPosiciones(playerid); else HideSelector(playerid); }
    return 0;
}
public OnPlayerClickTextDraw(playerid,Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(EnGaraje[playerid])
		{
			CancelPlayerTuningShop(playerid);
			ShowTuning(playerid, DIALOG_VOBJECT_MENU);
		}
		return 1;
	}
	if(EnGaraje[playerid])
	{
		if(clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(TuneandoCoche[playerid]);
			if(PlayerInfo[playerid][pVip] == 0 && slot >= 5)
			{
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				return SendClientMessage(playerid, -1, "{FFFFFF}¡Los jugadores VIP pueden tener hasta 10 objetos en vehículos!");
			}
			if(slot == -1)
			{
				SendClientMessage(playerid, -1, "{999999}No hay más espacio para objetos en este vehículo.");
				return ShowTuning(playerid, DIALOG_VOBJECT_MENU);
			}
			if(PlayerInfo[playerid][pDinero] < Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_PRICE]) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
			QuitarDinero(playerid, Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_PRICE]);
			VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_VALID] = true;
			VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
			VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ID] = 0;
			VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_MODELID];
			format(VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ ObjetoTuning[playerid] ][tuning_object_NAME]);
			VEHICLE_OBJECTS[ TuneandoCoche[playerid] ][slot][vobject_ATTACHED] = true;
			UpdateVehicleAttachedObject(TuneandoCoche[playerid], slot);
			RegisterNewVehicleObject(playerid,TuneandoCoche[playerid], slot);
			CancelPlayerTuningShop(playerid);
			SendClientMessage(playerid, -1, "{f4d442}Ajusta el objeto y haz clic en el icono de guardar, si pulsas {aed164}'ESCAPE' {f4d442}no se guardará la configuración.");
			SendClientMessage(playerid, -1, "{f4d442}Mantén presionado {aed164}'W'{f4d442} para mover la cámara.");
			EditVehicleObject(playerid, TuneandoCoche[playerid], slot);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if(ObjetoTuning[playerid] == (sizeof(Tuning_Shop_Objects) - 1)) ObjetoTuning[playerid] = 0;
			else ObjetoTuning[playerid] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if(ObjetoTuning[playerid] == 0) ObjetoTuning[playerid] = sizeof(Tuning_Shop_Objects) - 1;
			else ObjetoTuning[playerid] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		if(clickedid == PlayerBackGround[ _button_close ] || clickedid == EquisCerrar)
		{
			HideSelector(playerid);
			CancelSelectTextDraw(playerid);
		}
		CancelSelectTextDraw(playerid);
		return 1;
	}
	else
	{
		if(_Select_Status[playerid] > 0)
		{
			CancelSelectTextDraw(playerid);
			HideSelector(playerid);
		}
	}
	return 0;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
    #if DEBUG_GM == 1
    printf("(OnPlayerStateChange) PlayerID: %d | NewState: %d | OldState: %d", playerid, newstate, oldstate);
    #endif
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        if(GetPlayerWeapon(playerid) != 30 && GetPlayerWeapon(playerid) != 31 && GetPlayerWeapon(playerid) != 29 && GetPlayerWeapon(playerid) != 22) SetPlayerArmedWeapon(playerid, 0);
        if(PlayerInfo[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0) RemovePlayerFromVehicle(playerid);
        if(Objeto[playerid] > 1100 || TieneBarril[playerid] != 0)
        {
            SendClientMessage(playerid,-1,"No puedes subir a un vehiculo con un objeto, usa {DBED16}/tirar objeto.");
            RemovePlayerFromVehicle(playerid);
        }
        if(GetPlayerWeapon(playerid) == 0 || GetPlayerWeapon(playerid) == 29 || GetPlayerWeapon(playerid) == 25 || GetPlayerWeapon(playerid) == 31 || GetPlayerWeapon(playerid) == 30) return 1;
        else
        {
            if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] == 25 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(29)] == 29 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(30)] == 30 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(31)] == 31) DarArmas(playerid);
            else
            {
                Manejando[playerid] = 1;
                SetPlayerArmedWeapon(playerid, 0);
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        SetPlayerArmedWeapon(playerid, 0);
        if(PlayerInfo[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0) RemovePlayerFromVehicle(playerid);
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        if(Specteado[playerid] == 1)
        {
            foreach(new i : Player)
            {
                if(SpecJugador[i] == playerid) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
            }
        }
    }
    if(newstate == PLAYER_STATE_ONFOOT)
    {
        if(Specteado[playerid] == 1)
        {
            foreach(new i : Player)
            {
                if(SpecJugador[i] == playerid) PlayerSpectatePlayer(i, playerid);
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        new vehicleid = GetPlayerVehicleID(playerid),color_1, color_2;
        if(CAMION(vehicleid))
        {
            GetVehicleColor(vehicleid, color_1, color_2);
            if(PlayerInfo[playerid][pTrabajo] != T_Camionero && PlayerInfo[playerid][pTrabajo2] != T_Camionero)
            {
                SendClientMessage(playerid,-1,"Necesitas el empleo de camionero para usar este vehículo.");
                SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos");
                RemovePlayerFromVehicle(playerid);
                new Float:sx, Float:sy, Float:sz;
                NoTeleportHack(playerid);
                GetPlayerPos(playerid, sx, sy, sz);
                SetPlayerPos(playerid, sx, sy, sz);
                EnAuto[playerid] = INVALID_PLAYER_ID;
            }
            else
            {
                if(PlayerInfo[playerid][pVip] == 0)
                {
                    if(color_1 == 0 && color_2 == 0)
                    {
                        SendClientMessage(playerid,-1,"Este camión es solamente para jugadores con cuenta {008FFF}VIP2");
                        RemovePlayerFromVehicle(playerid);
                        EnAuto[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
                new string[256];
                switch(CamionCargado[vehicleid])
                {
                    case 0: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Ninguno {FFFFFF}| Chofer: {DBED15}Ninguno", vehicleid);
                    case 1: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Productos 24/7{FFFFFF} {FFFFFF}| Chofer: {00FF00}%s", vehicleid,PlayerInfo[Chofer[vehicleid]][Nickname]);
                    case 2: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Ropa{FFFFFF} | Chofer: {DBED15}%s", vehicleid,PlayerInfo[Chofer[vehicleid]][Nickname]);
                    case 3: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Drogas{FFFFFF} | Chofer: {DBED15}%s", vehicleid,PlayerInfo[Chofer[vehicleid]][Nickname]);
                    case 4: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Armas{FFFFFF} | Chofer: {DBED15}%s", vehicleid,PlayerInfo[Chofer[vehicleid]][Nickname]);
                    default: format(string, sizeof(string), "Camión de carga número: {DBED15}%d{FFFFFF} | Contenido: {DBED15}Ninguno {FFFFFF}| Chofer: {DBED15}Ninguno", vehicleid);
                }
                SendClientMessage(playerid, -1,string);
                if(CamionCargado[vehicleid] == 0) SendClientMessage(playerid, -1, "Escribe {DBED15}/cargar camion{FFFFFF} para cargar el camión y {DBED15}/arrancar o pulsa la tecla '2'{FFFFFF} para encender el motor.");
            }
        }
    }
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
        EnAuto[playerid] = INVALID_VEHICLE_ID;
        if(EnCarreras[playerid] > 0 && EmpezoCarrera == 1)
        {
            NoTeleportHack(playerid);
            DisablePlayerRaceCheckpoint(playerid);
            SetPlayerPos(playerid,-1405.2959,-309.6738,1052.0900);
            SetPlayerFacingAngle(playerid,190.0000);
            TextDrawHideForPlayer(playerid, BoxCarrera[0]);
            TextDrawHideForPlayer(playerid, BoxCarrera[1]);
            TextDrawHideForPlayer(playerid, BoxCarrera[2]);
            TextDrawHideForPlayer(playerid, BoxCarrera[3]);
            PlayerTextDrawHide(playerid, CarreraPosicion[playerid]);
            PlayerTextDrawHide(playerid, CarreraT[playerid][0]);
            PlayerTextDrawHide(playerid, CarreraT[playerid][1]);
            PlayerTextDrawHide(playerid, CarreraT[playerid][2]);
            SacarCarrera(playerid, 2);
            if(ParticipantesCarrera <= 0)
            {
                ResetearCarrera();
                HabilitarCarreras = 0;
                Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{FF3300}Boleteria cerrada\n{DBED16}Horarios de los eventos: {FFFFFF}5hs,11hs,17hs,23hs");
            }
            SendClientMessage(playerid,-1,"Has sido descalificado por salir del vehículo.");
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
 	{
 	    new vehicleid = GetPlayerVehicleID(playerid);
 	    for(new f = 0; f < MAX_FABRICAS; f++)
		{
	        if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && vehicleid == Fabricas[f][Auto1F] || PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && vehicleid == Fabricas[f][Auto2F])
            {
				SendClientMessage(playerid,-1,"Vehículo especial.");
	    	}
		}
    }
    fVehSpeed[playerid] = 0.0;
    if(oldstate == PLAYER_STATE_PASSENGER)
    {
        Tiempos[playerid][TiempoAntiTP] = gettime() + 3;
        Tiempos[playerid][TIMER_SURFING] = gettime() + 2;
        if(Manejando[playerid] == 1) DarArmas(playerid),Manejando[playerid] = 0;
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_ENTER_VEHICLE_DRIVER)
    {
        Tiempos[playerid][TiempoAntiTP] = gettime() + 3;
		Tiempos[playerid][TIMER_SURFING] = gettime() + 2;
		new autoid = GetPlayerVehicleID(playerid),pvehicle = 0, entraenvehiculo = 0;
		EnAuto[playerid] = autoid;
		if(PlayerInfo[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0) RemovePlayerFromVehicle(playerid),EnAuto[playerid] = INVALID_PLAYER_ID;
		SetPlayerArmedWeapon(playerid, 0);
		for(new i = 0; i < MAX_PAUTOS; i++)
		{
			if(VehicleInfo[playerid][i][vModelo] < 400) continue;
			if(autos[i][playerid] == autoid && entraenvehiculo == 0) SendClientMessage(playerid, -1, "Este vehículo te pertenece."),pvehicle++;
		}
		if(pvehicle == 0)
		{
			if(alarma[autoid] == 1 && alarmaon[autoid] == 0)
			{
				GetVehicleParamsEx(autoid,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(autoid,engine,lights,true,doors,bonnet,boot,objective);
				SetTimerEx("DesactivarAlarma", minutos(1), false, "d", autoid);
				TimerLuces[autoid] = SetTimerEx("TimerLucesIntermitentes", 500, false, "d", autoid);
				alarmaon[autoid] = 1;
			}
		}
		if(MotorAuto[autoid] == 0 && entraenvehiculo == 0)
		{
			if(!CAMION(autoid) && !BICI(autoid) && VehiculosInfo[autoid][vcomprable] != 1) SendClientMessage(playerid,-1,"Para encender el motor del vehículo, utiliza {DBED15}/arrancar{FFFFFF} o pulsa la tecla {DBED15}'2'.");
			if(GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID] == -1 || VehiculosInfo[autoid][vcomprable] != 1) SendClientMessage(playerid,-1,"Para escuchar alguna emisora de radio de San Andreas, usa {DBED15}/emisoras");
		}
        if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
        {
            if(GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID] != 0)
            {
                new emisoraid;
                emisoraid = GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID];
                foreach(new id : Player)
                {
                    if(Emisoras[id][CabinaOcupada] == emisoraid)
                    {
                        if(Emisoras[id][TransEmisora] == 1)
                        {
                            new stringa[128];
                            MensajeEx(playerid, COLOR_WHITE, "{FFFFFF}Escuchando radio {DBED15}%s{FFFFFF}, para cambiar de emisora usa {DBED16}/emisoras", Emisoras[id][NombreEmisora]);
                            format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
                            ReproducirEmisora(playerid, emisoraid, stringa);
                        }
                    }
                }
            }
        }
        if(VehiculosInfo[autoid][vcomprable] == 1)
        {
            new string[256],vehicleid = GetPlayerVehicleID(playerid),baul[2],gaso[4],modelo = GetVehicleModel(autoid),vehiclefuel = CombustibleCoche(modelo),velocidadmaxv = VelocidadMaxAuto(modelo);
            format(gaso,sizeof(gaso),"%d", vehiclefuel);
            if(BAUL8(GetPlayerVehicleID(playerid))) format(baul,sizeof(baul),"8");
            else if(BAUL6(GetPlayerVehicleID(playerid))) format(baul,sizeof(baul),"6");
            else if(MOTO(GetPlayerVehicleID(playerid))) format(baul,sizeof(baul),"0");
            else format(baul,sizeof(baul),"4");
            if(VehiculosInfo[autoid][vmoneda] == 0) format(string,sizeof(string),"{FFFFFF}Nombre: {dbed15}%s\n{FFFFFF}Espacios del baúl: {00CC00}%s\n{FFFFFF}Velocidad máxima: {ff0000}%d km/h\n{FFFFFF}Cantidad de combustible: {00ccff}%s Litros\n{FFFFFF}Costo del seguro: {ff0000}$%d\n{FFFFFF}Precio: {00CC00}$%d",NombreAuto[GetVehicleModel(vehicleid)-400],baul,velocidadmaxv,gaso,VehiculosInfo[autoid][vprecio]/100,VehiculosInfo[autoid][vprecio]);
            else format(string,sizeof(string),"{FFFFFF}Nombre: {dbed15}%s\n{FFFFFF}Espacios del baúl: {00CC00}%s\n{FFFFFF}Velocidad máxima: {ff0000}%d km/h\n{FFFFFF}Cantidad de combustible: {00ccff}%s Litros\n{FFFFFF}Costo del seguro: {ff0000}$%d\n{FFFFFF}Precio: {00CC00}%d "SERVER_COIN"",NombreAuto[GetVehicleModel(vehicleid)-400],baul,velocidadmaxv,gaso,VehiculosInfo[autoid][vprecio]/100,VehiculosInfo[autoid][vprecio]);
            ShowPlayerDialog(playerid, CVEHICULO, DIALOG_STYLE_MSGBOX, "Detalles del vehículo", string, "Comprar", "Salir");
		}
		new veh = GetPlayerVehicleID(playerid);
		if(JugadorLogeado[playerid] == 1)
		{
			if(BajandoV[playerid] == 1)
			{
				new string[128];
				if(PlayerInfo[playerid][pAdmin] > 2) return 1;
				if(EnCarreras[playerid] > 0) return 1;
				if(MOTO(veh) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;
				format(string, 128,"El jugador {FF3300}%s(ID: %d){FFFFFF} fue expulsado por el anticheat razón: {FF3300}Cheat de vehículos (2).",PlayerName(playerid),playerid);
				SendClientMessageToAll(-1,string);
				SetTimerEx("KickXD",500,0,"d",playerid);
			}
		}
        new Float: fCurrentSpeed;
        fCurrentSpeed = player_get_speed(playerid);
        fVehSpeed[playerid] = fCurrentSpeed;
        iVehicle[playerid] = GetPlayerVehicleID(playerid);
        if(TAXI(autoid))
        {
            EnTaxi[playerid] = 1;
            TextDrawShowForPlayer(playerid,TAXIMET); PlayerTextDrawShow(playerid,TAXIMET2[playerid]);
            TextDrawShowForPlayer(playerid,TAXIMET3); TextDrawShowForPlayer(playerid,TAXIMET4);
        }
        if(BICI(iVehicle[playerid]))
        {
            Manejando[playerid] = 1;
            KillTimer(Bajando[playerid]);
            return 1;
        }
        if(PlayerInfo[playerid][pVelocimetro] == 1) MostrarVelocimetro(playerid);
        else EsconderVelocimetro(playerid);
    }
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        EnAuto[playerid] = INVALID_VEHICLE_ID;
        if(Ficha[playerid] != 0)
        {
            TextDrawHideForPlayer(playerid,TAXIMET); PlayerTextDrawHide(playerid,TAXIMET2[playerid]);
            TextDrawHideForPlayer(playerid,TAXIMET3); TextDrawHideForPlayer(playerid,TAXIMET4);
        }
        EsconderVelocimetro(playerid);
        Bajando[playerid] = SetTimerEx("Maneja",5000,false,"d",playerid);
    }
    return 1;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(JugadorLogeado[playerid] == 0) return 0;
    SetPVarInt(playerid, "antiflood", GetTickCount());
    if(flags)
    {
        if(flags > PlayerInfo[playerid][pAdmin])
        {
       		if(isnull(params)) MensajeEx(playerid, -1,"({FF3300}/%s{FFFFFF}) Comando desconocido, usa {DBED15}/ayuda{FFFFFF} para recibir ayuda.", cmd, params);
			else MensajeEx(playerid, -1,"({FF3300}/%s %s{FFFFFF}) Comando desconocido, usa {DBED15}/ayuda{FFFFFF} para recibir ayuda.", cmd, params);
            return 0;
        }
    }
    DetectarSPAM(playerid, params);
    printf("[CMD] [%s][DB: %d]: /%s %s", PlayerInfo[playerid][Nickname], PlayerInfo[playerid][pID], cmd, params);
    return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
    if(JugadorLogeado[playerid] == 0) return 0;
	if(result == 0 || result == -1)
	if(isnull(params)) MensajeEx(playerid, -1,"({FF3300}/%s{FFFFFF}) Comando desconocido, usa {DBED15}/ayuda{FFFFFF} para recibir ayuda.", cmd, params);
	else MensajeEx(playerid, -1,"({FF3300}/%s %s{FFFFFF}) Comando desconocido, usa {DBED15}/ayuda{FFFFFF} para recibir ayuda.", cmd, params);
	SetPVarInt(playerid, "antiflood", GetTickCount());
	return 1;
}
getPlayerCrewColor(playerid)
{
    return !PlayerInfo[playerid][pFaccion] ? -1 : BandasInfo[ PlayerInfo[playerid][pFaccion] ][BColor];
}
public PayDay(value)
{
	new horas,minutos,segundos;
	gettime(horas,minutos,segundos);
    foreach(new i : Player) {
		if(JugadorLogeado[i] == 1) {
			if(!IsPlayerNPC(i)) {
				new gastosest,ganaciasresta,paga = PlayerInfo[i][pNivel]*100+50, suma,intereses,sumat,estacionamiento,gananciasest,seguros,total;
				PlayerInfo[i][horasjugadas]++;
				if(PlayerInfo[i][TiempoPD] < value) return SendClientMessage(i,COLOR_GREY,"No jugaste el tiempo suficiente para recibir puntos de experiencia.");
                for(new a = 0; a < MAX_PAUTOS; a++)
				{
					if(VehicleInfo[i][a][vModelo] < 400) continue;
					seguros += VehicleInfo[i][a][vPrecio]/100;
				}
				switch(PlayerInfo[i][pVip])	{
					case 1: total = 1500;
					case 2: total = 3000;
					default: total = 1000;
				}
				intereses = PlayerInfo[i][pBanco]/1000;
				if(intereses >= total) intereses = total;
				for(new p=1; p < MAX_PROPIEDADES; p++){
                    if(PropInfo[p][pID] == PlayerInfo[i][CasaID] && PropInfo[p][pTipo] == 3) ganaciasresta += PropInfo[p][pGanancias],PropInfo[p][pGanancias] = 0;
                    if(PropInfo[p][pID] == PlayerInfo[i][CasaID2] && PropInfo[p][pTipo] == 3) ganaciasresta += PropInfo[p][pGanancias], PropInfo[p][pGanancias] = 0;
                }
				for(new e = 0; e < MAX_GARAGES; e++){
					if(Estacionamientos[e][Dueno] == PlayerInfo[i][pID]){
						for(new v, h = GetVehiclePoolSize(); v <= h; v++){
							if(GetVehicleVirtualWorld(v) == Estacionamientos[e][eMundoVirtual] &&  GetVehicleInterior(v) == Estacionamientos[e][eInterior]) gananciasest += 150;
						}
					}
				}
				for(new a = 0; a < MAX_PAUTOS; a++) {
					if(GetVehicleInterior(autos[a][i]) == 30) gastosest += 150;
				}
				PlayerInfo[i][pBanco] -= gastosest;
				PlayerInfo[i][pBanco] += gananciasest;
				suma = paga+gananciasest-estacionamiento-seguros,sumat = suma+intereses;
				SendClientMessage(i, COLOR_WHITE, "{F0F0F0}/_____________ RESUMEN DE TU CUENTA _____________/");
				if(gananciasest > 0) MensajeEx(i,COLOR_WHITE," Ganancias de estacionamiento: {00CC00}$%d{FFFFFF}.", gananciasest);
				if(gastosest > 0) MensajeEx(i, COLOR_WHITE, " Estacionamiento de vehículos: {FF3300}-$%d{FFFFFF}.",Numeros(gastosest));
				if(ganaciasresta > 0) MensajeEx(i,COLOR_WHITE, " Ganancias por restaurante: {00CC00}$%s", Numeros(ganaciasresta));
				if(seguros > 0) MensajeEx(i, COLOR_WHITE, " Seguro de vehículos: {FF3300}-$%d{FFFFFF}.",seguros);
				if(PlayerInfo[i][pDuty] == 1) MensajeEx(i,COLOR_WHITE, " Pago por servir a la ley: {00CC00}$10.000"),sumat=sumat+10000;
				if(suma >= 0) {
					MensajeEx(i,COLOR_WHITE, " Pago diario: {00CC00}$%s {FFFFFF}| Gastos: {FF3300}$%s {FFFFFF} | Total: {00CC00}$%s", ConvertirNumero(paga),ConvertirNumero(seguros),ConvertirNumero(suma));
					MensajeEx(i,COLOR_WHITE, " Saldo Bancario: {00CC00}$%s{FFFFFF} | Ganancias (intereses): {00CC00}$%s",ConvertirNumero(PlayerInfo[i][pBanco]+suma), ConvertirNumero(intereses));
				} else if(suma < 0) {
					MensajeEx(i,COLOR_WHITE, " Pago diario: {00CC00}$%s {FFFFFF}| Gastos: {FF3300}$%s {FFFFFF} | Total: {FF3300}$%s", ConvertirNumero(paga),ConvertirNumero(seguros),ConvertirNumero(suma));
					MensajeEx(i,COLOR_WHITE, " Saldo Bancario: {00CC00}$%s{FFFFFF} | Ganancias (intereses): {00CC00}$%s",ConvertirNumero(PlayerInfo[i][pBanco]-suma), ConvertirNumero(intereses));
				}
				if(Emisoras[i][TransEmisora] == 1){
					new emisoraid = Emisoras[i][CabinaOcupada],oyentes = CabinasOcupadasEmisoras[emisoraid][2], pagalocutor = 3000+(oyentes*500);
					sumat += pagalocutor;
					MensajeEx(i,COLOR_WHITE," Ganancias por la emisora de radio: {00CC00}$%s{FFFFFF}.", ConvertirNumero(pagalocutor));
				}
				if(PlayerInfo[i][pFaccion] > 1)
				{
					new territorios = GetTerritorios(PlayerInfo[i][pFaccion]), pagaterritorios = 0;
					if(territorios > 0) {
						pagaterritorios = 8000+(territorios*1000);
						MensajeEx(i,COLOR_WHITE," Ganancias por territorios conquistados: {00CC00}$%s",ConvertirNumero(pagaterritorios));
						sumat += pagaterritorios;
					}
				}
				SendClientMessage(i, COLOR_WHITE, "{F0F0F0}/________________ FIN DEL RESUMEN ________________/");
				PlayerInfo[i][pBanco] += sumat;
				PlayerInfo[i][TiempoPD] = 0;
				if(PlayerInfo[i][pExperiencia] < PlayerInfo[i][ExperienciaTotal])
				{
					PlayerInfo[i][pExperiencia]++;
					SetPlayerProgressBarValue(i,Progressbar[i][Experiencia],PlayerInfo[i][pExperiencia]);
					UpdatePlayerProgressBar(i,Progressbar[i][Experiencia]);
				}
			}
		}
	}
	return true;
}
funcion DudaUser(playerid, params[])
{
    if(sscanf(params, "s[300]", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/n [Pregunta]{FFFFFF} para preguntar/responder a otros jugadores");
    {
        DetectarSPAM(playerid,params);
        new string[300];
        if(PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, -1, "No puedes utilizar el canal de dudas en una sanción");
        if(Tiempos[playerid][TiempoDuda] > 0)
        {
            format(string,sizeof(string),"Debes esperar %d segundos para volver a utilizar el canal de dudas.",Tiempos[playerid][TiempoDuda]);
            SendClientMessage(playerid, 0xff9a00FF,string);
            return 1;
        }
        format(string, sizeof(string), "({009966}Canal /n{009999}) [VIP %d] [Nivel %d] %s (%d): %s", PlayerInfo[playerid][pVip],PlayerInfo[playerid][pNivel], PlayerInfo[playerid][Nickname], playerid, params);
        RecienDuda[playerid] = 1;
        foreach(new i : Player)
        {
            if(CanalDudas[i] == 1 && JugadorLogeado[i]) SendClientMessage(i,0x009999FF,string);
        }
       	new Query[560];
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `canal_dudas` (Nombre, Mensaje, IDJugador) VALUES ('%s','%s','%d')",PlayerName(playerid),params,playerid);
		mysql_tquery(handle_db, Query);
        DudaOff[playerid] = 1;
        Tiempos[playerid][TiempoDuda] = 120;
    }
    return 1;
}
funcion DesactivarAlarma(vehicleid)
{
    if(alarma[vehicleid] == 1)
    {
        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(vehicleid, engine, false, false, doors, bonnet, boot, objective);
        Luces[vehicleid] = 0;
        KillTimer(TimerLuces[vehicleid]);
        KillTimer(TimerLuces2[vehicleid]);
        alarma[vehicleid] = 0;
    }
}
funcion ColgarLaLlamada(playerid)
{
    SendClientMessage(playerid,-1,"Cortaste la comunicación.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    RemovePlayerAttachedObject(playerid, 4);
    PlayerInfo[playerid][MobileSub] = -1;
    EnLlamada[playerid] = 0;
    finllamada(playerid);
    return 1;
}
funcion TimerLucesIntermitentes(vehicleid)
{
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, true, alarm, doors, bonnet, boot, objective);
    TimerLuces2[vehicleid] = SetTimerEx("TimerLucesIntermitentes2", 500, false, "d", vehicleid);
}
funcion TimerLucesIntermitentes2(vehicleid)
{
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, false, alarm, doors, bonnet, boot, objective);
    TimerLuces[vehicleid] = SetTimerEx("TimerLucesIntermitentes", 500, false, "d", vehicleid);
}
funcion Cerrar_Rejas1()
{
    MoveDynamicObject(reja1,  288.9500, 1415.9700, 12.9000, 2);
    MoveDynamicObject(reja2,  288.9500, 1407.1300, 12.9000, 2);
    return 1;
}
funcion Cerrar_Rejas2()
{
    MoveDynamicObject(reja3,  263.1500, 1416.0500, 13.0500, 2);
    MoveDynamicObject(reja4,  263.1500, 1407.2100, 13.0500, 2);
    return 1;
}
funcion Cerrar_Rejas3()
{
    MoveDynamicObject(reja5,  232.3900, 1420.7500, 13.1700, 2);
    MoveDynamicObject(reja6,  223.5900, 1420.7500, 13.1700, 2);
    return 1;
}
funcion Cerrar_Porton()
{
    MoveDynamicObject(porton, 1589.267700, -1638.286499, 14.816412, 2);
    return 1;
}
funcion Cerrar_Barrera()
{
    MoveDynamicObject(barrera, 1544.6943359375, -1630.73046875, 13.27956199646-0.0001, 0.0001, 0, 90, 90);
    return 1;
}
funcion Cerrar_RejaFC1()
{
	MoveDynamicObject(PuertasFC[1],222.24001, 1429.53003, 1091.44995,3);
	return 1;
}
funcion Cerrar_RejaFC2()
{
	MoveDynamicObject(PuertasFC[2],210.33000, 1442.91003, 1091.43994,3);
	return 1;
}
funcion Cerrar_RejaFC3()
{
	MoveDynamicObject(PuertasFC[3],206.67999, 1441.97998, 1085.08997,3);
	return 1;
}
funcion Cerrar_RejaFC4()
{
	MoveDynamicObject(PuertasFC[4],201.39000, 1447.70996, 1083.83997,3);
	return 1;
}
funcion Cerrar_RejaFC5()
{
	MoveDynamicObject(PuertasFC[5],170.35001, 1448.48999, 1085.08997,3);
	return 1;
}
funcion Cerrar_Puerta2()
{
    MoveDynamicObject(puerta_2,216.32820, 116.53640, 998.04547,1.5);
    MoveDynamicObject(puerta_3,219.33839, 116.53640, 998.04547,1.5);
    return 1;
}
funcion Cerrar_Puerta1()
{
    MoveDynamicObject(puerta_1,1582.63, -1638.02, 12.41,1.5);
    return 1;
}
funcion Cerrar_RejaLVPD2()
{
    MoveDynamicObject(PuertasLVPD[2],209.0100, 159.1100, 1003.2800,1.5);
    return 1;
}
ContarMiembrosEnTerritorio(banda_id, terri_id)
{
    new count;
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pFaccion] > 1)
            {
                if(PlayerInfo[i][pFaccion] == banda_id && PlayerInfo[i][Agonizando] == 0)
                {
                    if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area])) count ++;
                }
            }
        }
    }
    return count;
}
ComenzarAtaqueTerritorio(banda_id, terri_id, time)
{
    BandasInfo[banda_id][B_Atacando] = true;
    BandasInfo[banda_id][UltimoAtaque] = gettime() + (60*3);
    TerritorioInfo[terri_id][Territorio_EnGuerra] = true;
    TerritorioInfo[terri_id][Territorio_AtacanteID] = banda_id;
    TerritorioInfo[terri_id][Territorio_Tiempo] = time;
    TerritorioInfo[terri_id][Territorio_UltimoA] = gettime();
    UpdateGangZoneColor(terri_id);
    new message[145];
    format(message, sizeof message, "Conquista:_%s", TimeConvert(TerritorioInfo[terri_id][Territorio_Tiempo]));
    TextDrawSetString(Territorio_TD[1], message);
    KillTimer(TerritorioInfo[terri_id][Territorio_TimerEx]);
    TerritorioInfo[terri_id][Territorio_TimerEx] = SetTimerEx("UpdateTerritorio", 1000, false, "i", terri_id);
    new message_police[145];
    format(message_police, sizeof message_police, "{4286f4}[Central policía] {FFFFFF}%s comenzó a atacar un territorio en %s.", BandasInfo[banda_id][BNombre], TerritorioInfo[terri_id][Territorio_Lugar]);
    SendRadioPoliceMessage(-1, message);
    if(TerritorioInfo[terri_id][Territorio_Usado])
    {
        BandasInfo[ TerritorioInfo[terri_id][Territorio_BandaID2] ][B_Atacando] = true;
        format(message, sizeof message, "{%06x}[Radio]{FFFFFF} %s comenzó a atacar el territorio de la banda %s en %s.", BandasInfo[banda_id][BColor] >>> 8, BandasInfo[banda_id][BNombre], BandasInfo[ TerritorioInfo[terri_id][Territorio_BandaID2]][BNombre], TerritorioInfo[terri_id][Territorio_Lugar]);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(PlayerInfo[i][pFaccion] == banda_id || (TerritorioInfo[terri_id][Territorio_Usado]) && (PlayerInfo[i][pFaccion] == TerritorioInfo[terri_id][Territorio_BandaID2]))
                {
                    SendClientMessage(i, -1, message);
                    if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area]))
                    {
                        new r, g, b, a;
                        HexToRGBA(BandasInfo[PlayerInfo[i][pFaccion]][BColor], r, g, b, a);
                        TextDrawShowForPlayer(i, Territorio_TD[1]);
                        TextDrawShowForPlayer(i, Territorio_TD[0]);
                        if(GetPlayerState(i) != PLAYER_STATE_DRIVER) EsconderVelocimetro(i);
                    }
                }
            }
        }
    }
    else
    {
        format(message, sizeof message, "{%06x}[Radio]{FFFFFF} %s comenzó a atacar un territorio en %s.", BandasInfo[banda_id][BColor] >>> 8, BandasInfo[banda_id][BNombre], TerritorioInfo[terri_id][Territorio_Lugar]);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(PlayerInfo[i][pFaccion] == banda_id)
                {
                    SendClientMessage(i, -1, message);
                    if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area]))
                    {
                        new r, g, b, a;
                        HexToRGBA(BandasInfo[PlayerInfo[i][pFaccion]][BColor], r, g, b, a);
                        TextDrawShowForPlayer(i, Territorio_TD[1]);
                        TextDrawShowForPlayer(i, Territorio_TD[0]);
                        if(GetPlayerState(i) != PLAYER_STATE_DRIVER) EsconderVelocimetro(i);
                    }
                }
            }
        }
    }
    return 1;
}
public UpdateTerritorio(terri_id)
{
    if(!TerritorioInfo[terri_id][Territorio_Valido]) return 1;
    if(!TerritorioInfo[terri_id][Territorio_EnGuerra]) return 1;
    if(TerritorioInfo[terri_id][Territorio_Tiempo] <= 0)
    {
        BandasInfo[TerritorioInfo[terri_id][Territorio_BandaID2]][B_Atacando] = false;
        TerritorioInfo[terri_id][Territorio_BandaID] = TerritorioInfo[terri_id][Territorio_AtacanteID];
        TerritorioInfo[terri_id][Territorio_BandaID2] = TerritorioInfo[terri_id][Territorio_AtacanteID];
        new r, g, b, a;
        HexToRGBA(BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][BColor], r, g, b, a);
        TerritorioInfo[terri_id][Territorio_Color] = RGBAToHex(r, g, b, 135);
        new message[145],Query[200];
        format(message, sizeof message, "{%06x}[Radio]{FFFFFF} %s {FFFFFF}ha conquistado un nuevo territorio.", BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][BColor] >>> 8, BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][BNombre]);
        mysql_format(handle_db, Query, 200, "UPDATE `territorios` SET `Banda`='%d',`Color`='%d' WHERE `ID`='%d'",TerritorioInfo[terri_id][Territorio_AtacanteID],TerritorioInfo[terri_id][Territorio_Color],TerritorioInfo[terri_id][Territorio_ID]);
        mysql_tquery(handle_db, Query);
        BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][UltimoAtaque] = gettime() + (60*3);
        BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][B_Atacando] = false;
        TerritorioInfo[terri_id][Territorio_EnGuerra] = false;
        TerritorioInfo[terri_id][Territorio_AtacanteID] = 0;
        TerritorioInfo[terri_id][Territorio_Tiempo] = 0;
        TerritorioInfo[terri_id][Territorio_UltimoA] = gettime();
        KillTimer(TerritorioInfo[terri_id][Territorio_TimerEx]);
        UpdateGangZoneColor(terri_id);
        TerritorioInfo[terri_id][Territorio_Usado] = true;
        foreach(new i : Player)
        {
            if(JugadorLogeado[i] == 1)
            {
                if(PlayerInfo[i][pFaccion] > 1)
                {
                    SendClientMessage(i, -1, message);
                    if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area]))
                    {
                        if(PlayerInfo[i][pFaccion] == TerritorioInfo[terri_id][Territorio_BandaID])
                        {
                            new piezasg,medisg,crackg;
                            piezasg = randomize(30,200), medisg = randomize(30,200), crackg = randomize(30,200);
                            PlayerInfo[i][piezas] += piezasg, PlayerInfo[i][pMedicamentos] += medisg, PlayerInfo[i][pCrack] += crackg;
                            MensajeEx(i, -1, "Has ganado %d piezas, %d medicamentos y %dg de crack por participar en la conquista.", piezasg,medisg,crackg);
                        }
                        ColorJugadorDefault(i);
                        TextDrawHideForPlayer(i, Territorio_TD[1]);
                        TextDrawHideForPlayer(i, Territorio_TD[0]);
                    }
                }
            }
        }
        return 1;
    }
    TerritorioInfo[terri_id][Territorio_Tiempo] --;
    new message[145];
    format(message, sizeof message, "Conquista:_%s", TimeConvert(TerritorioInfo[terri_id][Territorio_Tiempo]));
    TextDrawSetString(Territorio_TD[1], message);
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area]))
            {
                if(GetPlayerState(i) != PLAYER_STATE_DRIVER) EsconderVelocimetro(i);
            }
        }
    }
    new attackers_in_area = ContarMiembrosEnTerritorio(TerritorioInfo[terri_id][Territorio_AtacanteID], terri_id);
    if(attackers_in_area <= 0)
    {
        format(message, sizeof message, "{%06x}[Radio]{FFFFFF} %s no ha podido conquistar el territorio que estaba atacando.", BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][BColor] >>> 8, BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][BNombre]);
        BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][UltimoAtaque] = gettime() + (60*3);
        BandasInfo[TerritorioInfo[terri_id][Territorio_AtacanteID]][B_Atacando] = false;
        BandasInfo[TerritorioInfo[terri_id][Territorio_BandaID2]][B_Atacando] = false;
        TerritorioInfo[terri_id][Territorio_EnGuerra] = false;
        TerritorioInfo[terri_id][Territorio_AtacanteID] = 0;
        TerritorioInfo[terri_id][Territorio_Tiempo] = 0;
        TerritorioInfo[terri_id][Territorio_UltimoA] = gettime();
        KillTimer(TerritorioInfo[terri_id][Territorio_TimerEx]);
        UpdateGangZoneColor(terri_id);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(PlayerInfo[i][pFaccion] > 2)
                {
                    SendClientMessage(i, -1, message);
                    if(IsPlayerInDynamicArea(i, TerritorioInfo[terri_id][Territorio_Area]))
                    {
                        ColorJugadorDefault(i);
                        TextDrawHideForPlayer(i, Territorio_TD[1]);
                        TextDrawHideForPlayer(i, Territorio_TD[0]);
                    }
                }
            }
        }
        return 1;
    }
    KillTimer(TerritorioInfo[terri_id][Territorio_TimerEx]);
    TerritorioInfo[terri_id][Territorio_TimerEx] = SetTimerEx("UpdateTerritorio", 1000, false, "i", terri_id);
    return 1;
}
stock randomize( min, max )
{
    max++;
    new a = random( max - min ) + min;
    return a;
}

stock AccionesRol2(playerid, params[], rango)
{
	new string[200];
	format(string, sizeof(string), "* %s %s", PlayerName(playerid), params);
	ProxDetector(rango, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a)
{
    return (r<<24 | g<<16 | b<<8 | a);
}
stock RGBAToARGB(col)
{
    return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}
stock ARGBToRGBA(col)
{
    return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}
HidePlayerGangZones(playerid)
{
    for(new i = 0; i != MAX_TERRITORIOS; i ++)
    {
        if(!TerritorioInfo[i][Territorio_Valido]) continue;
        GangZoneHideForPlayer(playerid, TerritorioInfo[i][Territorio_GZ]);
    }
    return 1;
}
SetPlayerGangZones(playerid)
{
    for(new i = 0; i != MAX_TERRITORIOS; i ++)
    {
        if(!TerritorioInfo[i][Territorio_Valido]) continue;
        if(TerritorioInfo[i][Territorio_EnGuerra])
        {
            new flash_color, r, g, b, a;
            HexToRGBA(BandasInfo[TerritorioInfo[i][Territorio_AtacanteID]][BColor], r, g, b, a);
            flash_color = RGBAToHex(r, g, b, 135);
            GangZoneFlashForPlayer(playerid, TerritorioInfo[i][Territorio_GZ], flash_color);
        }
        else GangZoneShowForPlayer(playerid, TerritorioInfo[i][Territorio_GZ], TerritorioInfo[i][Territorio_Color]);
    }
    return 1;
}
UpdateGangZoneColor(index)
{
    if(TerritorioInfo[index][Territorio_EnGuerra])
    {
        new flash_color, r, g, b, a;
        HexToRGBA(BandasInfo[TerritorioInfo[index][Territorio_AtacanteID]][BColor], r, g, b, a);
        flash_color = RGBAToHex(r, g, b, 135);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(PlayerInfo[i][pFaccion] > 1) GangZoneFlashForPlayer(i, TerritorioInfo[index][Territorio_GZ], flash_color);
            }
        }
    }
    else
    {
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(PlayerInfo[i][pFaccion] > 1) GangZoneShowForPlayer(i, TerritorioInfo[index][Territorio_GZ], TerritorioInfo[index][Territorio_Color]);
            }
        }
    }
    return 1;
}
timer KickFix[350](playerid) return Kick(playerid);

resetearcoches()
{
	for(new i = 0; i <= GetVehiclePoolSize(); i++)
	{
		new bool:respawn = true;
		foreach(new u : Player)
		{
			for(new a = 0; a < MAX_PAUTOS; a++)
			{
				if(i == autos[a][u] || IsPlayerInVehicle(u,i)) { respawn = false; break; }
			}
		}
		if(respawn) SetVehicleToRespawn(i);
	}
	return 1;
}

resetearcochesall()
{
    for(new v = 0; v <= GetVehiclePoolSize(); v++)
    {
        new bool:respawn = true;
        foreach(new i : Player)
        {
            if(IsPlayerInVehicle(i, v))
            {
                respawn = false;
                break;
            }
        }
        if(respawn) SetVehicleToRespawn(v);
    }
    return 1;
}

ActualizarRadar()
{
    foreach(new playerid : Player)
    {
        if(PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pCargos] >= 1)
        {
            PlayerInfo[playerid][pCargos] = 0;
            SetPlayerWantedLevel(playerid, 0);
        }
        if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pDuty] == 1)
        {
            foreach(new i : Player)
            {
                if(PlayerInfo[i][pDuty] == 0)
                {
                    switch(PlayerInfo[i][pCargos])
                    {
                        case 0: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO0);
                        case 1: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO1);
                        case 2: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO2);
                        case 3: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO3);
                        case 4: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO4);
                        case 5: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO5);
                        case 6: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
                        default: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
                    }
                }
                else if((Esposando[i] == 2 || PlayerInfo[i][pCargos] > 0) && EnPatrulla[i] == 1) SetPlayerMarkerForPlayer(playerid, i, COLORCARGO7);
            }
        }
        // Trabajo Medico
        if(LlamadaMedicos[playerid] == 1)
        {
            foreach(new x : Player)
            {
                if(Reanimado[x] == 0 && RopaMedi[x] == 1 && (PlayerInfo[x][pTrabajo] == T_Medico || PlayerInfo[x][pTrabajo2] == T_Medico))
                {
                    GetPlayerPos(x, DeathXH[x],DeathYH[x],DeathZH[x]);
                    SetPlayerMarkerForPlayer(x, playerid, COLORABATIDO);
                }
            }
        }
        // Trabajo Taxi
        if(LlamadaTaxi[playerid] == 1)
        {
            foreach(new x : Player)
            {
                if((PlayerInfo[x][pTrabajo] == T_Taxista || PlayerInfo[x][pTrabajo2] == T_Taxista) && EnTaxi[x] == 1) SetPlayerMarkerForPlayer(x, playerid, COLOR_AMARILLO);
            }
        }
        // Trabajo Mecanico
        if(LlamadaMeca[playerid] == 1)
        {
            foreach(new x : Player)
            {
                if((RopaMeca[x] == 1) && (PlayerInfo[x][pTrabajo] == T_Mecanico || RopaMeca[x] == 1 && PlayerInfo[x][pTrabajo2] == T_Mecanico)) SetPlayerMarkerForPlayer(x, playerid, COLOR_AZUL);
            }
        }
    }
    return 1;
}

ptask AutoCheats2[7000](playerid)
{
	if(JugadorLogeado[playerid] == 1)
	{
		contadoravion += 7;
		if(contadoravion == 301)
		{
			if(IsValidObject(avion[0])) DestroyObject(avion[0]);
			if(IsValidObject(avion[1])) DestroyObject(avion[1]);
			avion[0] = CreateObject(14553, 133.52789, 2329.73804, 1954.93250,   0.00000, 0.00000, 0.00000);
			avion[1] = CreateObject(14548, 133.52789, 2329.73804, 1954.93250,   0.00000, 0.00000, 0.00000);
			foreach(new i : Player)
			{
				if(ViajeAvion[i] == 1 && IsPlayerInRangeOfPoint(i, 20.0, 414.7434, 2533.9641, 19.1484))
				{
					NoTeleportHack(i);
					SendClientMessage(i, -1, "Por favor evita saltar y correr dentro del avión.");
					DarArma(i, 46);
					ViajeAvion[i] = 0;
					new vR = random(sizeof(Saltos));
					SetPlayerPosEx(i, Saltos[vR][0], Saltos[vR][1], Saltos[vR][2]);
					MostrarLuegoDe(i);
				}
			}
			contadoravion = 0;
			SetTimer("MoverAvion", 3000, false);
		}
	}
	for(new v, j = GetVehiclePoolSize(); v <= j; v++)
	{
		if(VehiculosInfo[v][vcomprable] == 1 && GetDistanceVehAC(v) > 5) Respawnear(v);
	}
	return 1;
}

GetDistanceVehAC(veh)
{
	new Float:x, Float:y, Float:z, Float:distance;
	GetVehiclePos(veh, x, y, z);
	distance = floatsqroot((x-VehiculosInfo[veh][vx])*(x-VehiculosInfo[veh][vx])+(y-VehiculosInfo[veh][vy])*(y-VehiculosInfo[veh][vy])+(z-VehiculosInfo[veh][vz])*(z-VehiculosInfo[veh][vz]));
	return floatround(distance);
}

encode_tires(tire1, tire2, tire3, tire4)
{
    return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

public TiempoArresto(playerid)
{
    new string[258];
    if(Esposando[playerid] == 0) return 1;
    if(GetPlayerInterior(playerid) > 0) SetTimerEx("Encerrando2",500,false,"d",playerid);
    GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
    VariableCaido[playerid] = 1;
    Esposando[playerid] = 2;
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CUFFED);
    TogglePlayerControllable(playerid,0);
    SetPVarInt(playerid, "IsFrozen", 0);
    format(string, sizeof(string), "{3399FF}[Radio de policía]{FFFFFF} %s reportando: {00CCFF}%s{FFFFFF}[%d] fue capturado, ahora lo llevo a la comisaría.",PlayerInfo[Oficial[playerid]][Nickname], PlayerInfo[playerid][Nickname], playerid);
    SendRadioPoliceMessage(-1, string, playerid);
    Oficial[playerid] = INVALID_PLAYER_ID;
    foreach(new i : Player) if(PlayerInfo[i][pDuty] == 1) SetPlayerMarkerForPlayer(i, playerid, COLORCARGO6);
    return 1;
}
BICI(carid)
{
    if(GetVehicleModel(carid) == 481 ||GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510) return 1;
    return 0;
}
MOTO(carid)
{
    new MotoVeh[] = { 448, 461, 462, 463, 468, 471, 521, 522, 581, 586 };
    for(new i = 0; i < sizeof(MotoVeh); i++)
    {
        if(GetVehicleModel(carid) == MotoVeh[i]) return 1;
    }
    return 0;
}
SAPD(carid)
{
    new SAPDVeh[] = { 427, 430, 490, 523, 528, 596, 597, 598, 599, 601 };
    for(new i = 0; i < sizeof(SAPDVeh); i++)
    {
        if(GetVehicleModel(carid) == SAPDVeh[i]) return 1;
    }
    return 0;
}
HELISAPD(carid)
{
    if(GetVehicleModel(carid) == 497) return 1;
    return 0;
}
AMBU(carid)
{
    if(GetVehicleModel(carid) == 416) return 1;
    return 0;
}
CAMION(carid)
{
    if(GetVehicleModel(carid) == 609 ||GetVehicleModel(carid) == 456) return 1;
    return 0;
}
EsUnTren(carid)
{
    if(GetVehicleModel(carid) == 570 || GetVehicleModel(carid) == 538) return 1;
    return 0;
}
BOTE(carid)
{
    if(GetVehicleModel(carid) == 453) return 1;
    return 0;
}
AVION(carid)
{
    new AirVeh[] = { 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469 };
    for(new i = 0; i < sizeof(AirVeh); i++)
    {
        if(GetVehicleModel(carid) == AirVeh[i]) return 1;
    }
    return 0;
}
BAUL6(carid)
{
    new v = GetVehicleModel(carid);
    if(v == 400||v == 404||v == 418||v == 422||v == 470||v == 478||v == 489||v == 495||v == 505||v == 543||v == 554||v == 579||v == 605) return 1;
    return 0;
}
BAUL8(carid)
{
    new v = GetVehicleModel(carid);
    if(v == 403||v == 413||v == 414||v == 431||v == 437||v == 440||v == 443||v == 459||v == 482||v == 499||v == 514||v == 515||v == 578) return 1;
    return 0;
}
DFT(carid)
{
    if(GetVehicleModel(carid) == 578) return 1;
    return 0;
}
COSECHA(carid)
{
    if(GetVehicleModel(carid) == 532) return 1;
    return 0;
}
BASU(carid)
{
    if(GetVehicleModel(carid) == 408) return 1;
    return 0;
}
TAXI(carid)
{
    if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438) return 1;
    return 0;
}
public DesCargarMapeosEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetPVarInt(playerid, "IsFrozen", 1);
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][pNivel] <= 2) DisableRemoteVehicleCollisions(playerid,1);
    new Float:VHealth;
    GetVehicleHealth(vehicleid,VHealth);
    if(VHealth > 365) vehaveriado[vehicleid] = 0;
    if(VHealth <= 365) vehaveriado[vehicleid] = 1;
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			for(new a = 0; a < MAX_PAUTOS; a++) if(vehicleid == autos[a][i]) return Auto(i,a,3);
		}
	}
	if(SAPD(vehicleid)) bloqueado[vehicleid] = 0;
	new esfabrica = 0;
	for(new f = 0; f < MAX_FABRICAS; f++)
	{
		if(Fabricas[f][pEnUso] > 0 && f > 0)
		{
			if(vehicleid == Fabricas[f][Auto1F]) SetVehicleHealth(vehicleid, 5000.0);
			if(vehicleid == Fabricas[f][Auto2F]) SetVehicleHealth(vehicleid, 5000.0),ObjetoDistraccion(vehicleid,f);
			esfabrica = 1;
		}
	}
	if(esfabrica == 0) SetVehicleHealth(vehicleid, 1000.0);
	new vehiclefuel = CombustibleCoche(GetVehicleModel(vehicleid));
	VehicleFuel[vehicleid] = vehiclefuel;
    MotorAuto[vehicleid] = 0;
    Balde[vehicleid] = 0;
    Luces[vehicleid] = 0;
	return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    #if DEBUG_GM == 1
	printf("(OnVehiclePaintjob) PlayerID: %d | VehicleID: %d | PaintJobID: %d", playerid, vehicleid, paintjobid);
	#endif
	new Query[200], slot = GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
	if(slot != -1)
	{
		if(IsPlayerInVehicle(playerid, autos[slot][playerid]))
		{
			VehicleInfo[playerid][slot][vPJ] = paintjobid;
			mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `PaintJob`='%d' WHERE `ID`='%d'",paintjobid,VehicleInfo[playerid][slot][v_DBID]);
			mysql_tquery(handle_db, Query);
		}
	}
    return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    #if DEBUG_GM == 1
	printf("(OnVehicleRespray) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
	#endif
	new Query[250], slot = GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
	if(slot != -1)
	{
		if(IsPlayerInVehicle(playerid, autos[slot][playerid]))
		{
			VehicleInfo[playerid][slot][vColor1] = color1;
			VehicleInfo[playerid][slot][vColor2] = color2;
			mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE `ID`='%d'",color1,color2,VehicleInfo[playerid][slot][v_DBID]);
			mysql_tquery(handle_db, Query);
		}
	}
    return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    #if DEBUG_GM == 1
	printf("(OnEnterExitModShop) PlayerID: %d | EnterExit: %d", playerid, enterexit);
	#endif
	if(!enterexit)
	{
		new autoid = GetPlayerVehicleID(playerid);
		new slot = GetPlayerVehicle(playerid, autoid);
		if(slot != -1)
		{
			if(IsPlayerInVehicle(playerid, autos[slot][playerid]))
			{
				new Query[900];
				for(new i = 0; i < 13; i++)
				{
					if(ComponenteValido((GetVehicleModel(autoid)), GetVehicleComponentInSlot(autos[slot][playerid],i))) Componentes[playerid][i][slot] = GetVehicleComponentInSlot(autos[slot][playerid], i);
					else Componentes[playerid][i][slot] = 0;
				}
				mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `1Componentes0`='%d',`1Componentes1`='%d',`1Componentes2`='%d',`1Componentes3`='%d',`1Componentes4`='%d',`1Componentes5`='%d',`1Componentes6`='%d',`1Componentes7`='%d',`1Componentes8`='%d',`1Componentes9`='%d',`1Componentes10`='%d',`1Componentes11`='%d',`1Componentes12`='%d',`1Componentes13`='%d' WHERE `ID`='%d'", Componentes[playerid][0][slot], Componentes[playerid][1][slot], Componentes[playerid][2][slot], Componentes[playerid][3][slot], Componentes[playerid][4][slot], Componentes[playerid][5][slot], Componentes[playerid][6][slot], Componentes[playerid][7][slot], Componentes[playerid][8][slot], Componentes[playerid][9][slot], Componentes[playerid][10][slot], Componentes[playerid][11][slot], Componentes[playerid][12][slot], Componentes[playerid][13][slot], VehicleInfo[playerid][slot][v_DBID]);
				mysql_tquery(handle_db, Query);
			}
		}
	}
    return 1;
}
public CargarTerritorios()
{
	new Query[680],total;
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `territorios` WHERE `Z_Activa` = '1' LIMIT %d",MAX_TERRITORIOS);
   	mysql_query(handle_db, Query,true);

	for( new i = 0; i < cache_num_rows(); i++)
	{
		new gang_color, content[39], territoriosn;
		TerritorioInfo[i][Territorio_Valido] = true;
		cache_get_value_name(i, "ID", content);		TerritorioInfo[i][Territorio_ID] = strval(content);
		cache_get_value_name(i, "Banda", content);	TerritorioInfo[i][Territorio_Banda] = strval(content);
		cache_get_value_name(i, "Nombre",TerritorioInfo[i][Territorio_Lugar]);
		cache_get_value_name(i, "Min_X", content);	TerritorioInfo[i][Territorio_MinX] = floatstr(content);
		cache_get_value_name(i, "Min_Y", content);	TerritorioInfo[i][Territorio_MinY] = floatstr(content);
		cache_get_value_name(i, "Min_Z", content);	TerritorioInfo[i][Territorio_MinZ] = floatstr(content);
		cache_get_value_name(i, "Max_X", content);	TerritorioInfo[i][Territorio_MaxX] = floatstr(content);
		cache_get_value_name(i, "Max_Y", content);	TerritorioInfo[i][Territorio_MaxY] = floatstr(content);
		cache_get_value_name(i, "Max_Z", content);	TerritorioInfo[i][Territorio_MaxZ] = floatstr(content);
		cache_get_value_name(i, "Banda", content);	TerritorioInfo[i][Territorio_BandaID] = strval(content);
		cache_get_value_name(i, "Color", content);	gang_color = strval(content);
		TerritorioInfo[i][Territorio_BandaID2] = TerritorioInfo[i][Territorio_BandaID];
		if(TerritorioInfo[i][Territorio_Banda] == 0) TerritorioInfo[i][Territorio_Usado] = false;
		if(TerritorioInfo[i][Territorio_Banda] != 0) TerritorioInfo[i][Territorio_Usado] = true;
		TerritorioInfo[i][Territorio_EnGuerra] = false;
		TerritorioInfo[i][Territorio_AtacanteID] = 0;
		if(gang_color == 0) TerritorioInfo[i][Territorio_Color] = 0x252b2e55;
		else
		{
			new r, g, b, a;
			HexToRGBA(gang_color, r, g, b, a);
			TerritorioInfo[i][Territorio_Color] = RGBAToHex(r, g, b, 135);
		}
		TerritorioInfo[i][Territorio_GZ] = GangZoneCreate(TerritorioInfo[i][Territorio_MinX],TerritorioInfo[i][Territorio_MinY],TerritorioInfo[i][Territorio_MaxX],TerritorioInfo[i][Territorio_MaxY]);
		TerritorioInfo[i][Territorio_Area] = CreateDynamicCube(TerritorioInfo[i][Territorio_MinX],TerritorioInfo[i][Territorio_MinY],TerritorioInfo[i][Territorio_MinZ],TerritorioInfo[i][Territorio_MaxX],TerritorioInfo[i][Territorio_MaxY],TerritorioInfo[i][Territorio_MaxZ],0, 0);
		new info[2];
		info[0] = AREA_TYPE_GANGZONE;
		info[1] = i;
		Streamer_SetArrayData(STREAMER_TYPE_AREA, TerritorioInfo[i][Territorio_Area], E_STREAMER_EXTRA_ID, info);
		territoriosn++; total++;
	}
	printf("[TERRITORIOS]: %d",total);
	return 1;
}
CargarVehiculos()
{
    new Query[680];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `vehicles`");
    mysql_query(handle_db, Query, true);

    for(new i = 0; i < cache_num_rows(); i++)
    {
        new Float:POS[4],COLOR[2],MODELVEH, stringinfovehiculo[70],vehicleid,ID_DB = 0;
        cache_get_value_name_int(i, "id",ID_DB);
        if(ID_DB == 0) continue;
        cache_get_value_name_int(i, "modelo", MODELVEH);
        cache_get_value_name_float(i, "x", POS[0]);
        cache_get_value_name_float(i, "y", POS[1]);
        cache_get_value_name_float(i, "z", POS[2]);
        cache_get_value_name_float(i, "a", POS[3]);
        cache_get_value_name_int(i, "color1", COLOR[0]);
        cache_get_value_name_int(i, "color2", COLOR[1]);
        vehicleid = CreateVehicle(MODELVEH, POS[0],POS[1],POS[2],POS[3], COLOR[0],COLOR[1], 300);
        VehiculosInfo[vehicleid][vmodelo] = MODELVEH;
        VehiculosInfo[vehicleid][vx] = POS[0];
        VehiculosInfo[vehicleid][vy] = POS[1];
        VehiculosInfo[vehicleid][vz] = POS[2];
        VehiculosInfo[vehicleid][va] = POS[3];
        VehiculosInfo[vehicleid][vcolor2] = COLOR[1];
        VehiculosInfo[vehicleid][vcolor1] = COLOR[0];
        VehiculosInfo[vehicleid][vID] = ID_DB;
        cache_get_value_name(i, "propietario",VehiculosInfo[vehicleid][vpropietario]);
        cache_get_value_name_int(i, "precio", VehiculosInfo[vehicleid][vprecio]);
        cache_get_value_name_int(i, "moneda", VehiculosInfo[vehicleid][vmoneda]);
        cache_get_value_name_int(i, "comprable", VehiculosInfo[vehicleid][vcomprable]);
        cache_get_value_name_int(i, "faccion", VehiculosInfo[vehicleid][vfaccion]);
        cache_get_value_name_int(i, "trabajo", VehiculosInfo[vehicleid][vtrabajo]);
        VehicleFuel[vehicleid] = CombustibleCoche(VehiculosInfo[vehicleid][vmodelo]);
        if(VehiculosInfo[vehicleid][vcomprable] == 1)
        {
            switch(VehiculosInfo[vehicleid][vmoneda])
            {
                case 0: format(stringinfovehiculo, sizeof(stringinfovehiculo), "{DBED16}%s\nPrecio: $%d", NombreAuto[VehiculosInfo[vehicleid][vmodelo]-400],VehiculosInfo[vehicleid][vprecio]);
                case 1: format(stringinfovehiculo, sizeof(stringinfovehiculo), "{DBED16}%s\nPrecio: {DBED16}%d "SERVER_COIN"", NombreAuto[VehiculosInfo[vehicleid][vmodelo]-400],VehiculosInfo[vehicleid][vprecio]);
            }
            CreateDynamic3DTextLabel(stringinfovehiculo,COLOR_WHITE,0.0,0.0,1.0,10.0,INVALID_PLAYER_ID,vehicleid, 1, 0,0,-1, 100.0);
        }
        AUTOS ++;
    }
    printf("[AUTOS DB]: %d",AUTOS);
    return 1;
}

CargarUsers()
{
    new Query[128];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios`;");
    mysql_query(handle_db, Query, true);
    new GET_USERS = cache_num_rows();
    printf("[CUENTAS]: %d", GET_USERS);
    return 1;
}

public CargarFacciones()
{
    new Query[200], count;
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `facciones`");
   	mysql_query(handle_db, Query,true);

	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p;
		cache_get_value_name(i, "id", content); p = strval(content); BandasInfo[p][bID] = strval(content);
		if(p != 0)
		{
			cache_get_value_name(i, "Nombre", BandasInfo[p][BNombre]);
			cache_get_value_name(i, "Lider", BandasInfo[p][BLider]);
			cache_get_value_name(i, "Rango1", BandasInfo[p][bRango1]);
			cache_get_value_name(i, "Rango2", BandasInfo[p][bRango2]);
			cache_get_value_name(i, "Rango3", BandasInfo[p][bRango3]);
			cache_get_value_name(i, "Rango4", BandasInfo[p][bRango4]);
			cache_get_value_name(i, "Rango5", BandasInfo[p][bRango5]);
			cache_get_value_name(i, "Rango6", BandasInfo[p][bRango6]);
			cache_get_value_name(i, "Rango7", BandasInfo[p][bRango7]);
			cache_get_value_name(i, "Rango8", BandasInfo[p][bRango8]);
			cache_get_value_name_int(i, "EnUso",BandasInfo[p][EnUso]);
			cache_get_value_name_int(i, "Color",BandasInfo[p][BColor]);
			cache_get_value_name_int(i, "Rango1Exp", BandasInfo[p][RANK_EXP][0]);
			cache_get_value_name_int(i, "Rango2Exp", BandasInfo[p][RANK_EXP][1]);
			cache_get_value_name_int(i, "Rango3Exp", BandasInfo[p][RANK_EXP][2]);
        	cache_get_value_name_int(i, "Rango4Exp", BandasInfo[p][RANK_EXP][3]);
        	cache_get_value_name_int(i, "Rango5Exp", BandasInfo[p][RANK_EXP][4]);
        	cache_get_value_name_int(i, "Rango6Exp", BandasInfo[p][RANK_EXP][5]);
        	cache_get_value_name_int(i, "Rango7Exp", BandasInfo[p][RANK_EXP][6]);
        	cache_get_value_name_int(i, "Rango1Edi", BandasInfo[p][RANK_EDIT][0]);
        	cache_get_value_name_int(i, "Rango2Edi", BandasInfo[p][RANK_EDIT][1]);
        	cache_get_value_name_int(i, "Rango3Edi", BandasInfo[p][RANK_EDIT][2]);
        	cache_get_value_name_int(i, "Rango4Edi", BandasInfo[p][RANK_EDIT][3]);
        	cache_get_value_name_int(i, "Rango5Edi", BandasInfo[p][RANK_EDIT][4]);
        	cache_get_value_name_int(i, "Rango6Edi", BandasInfo[p][RANK_EDIT][5]);
        	cache_get_value_name_int(i, "Rango7Edi", BandasInfo[p][RANK_EDIT][6]);
        	cache_get_value_name_int(i, "Rango1Inv", BandasInfo[p][RANK_INV][0]);
        	cache_get_value_name_int(i, "Rango2Inv", BandasInfo[p][RANK_INV][1]);
        	cache_get_value_name_int(i, "Rango3Inv", BandasInfo[p][RANK_INV][2]);
        	cache_get_value_name_int(i, "Rango4Inv", BandasInfo[p][RANK_INV][3]);
        	cache_get_value_name_int(i, "Rango5Inv", BandasInfo[p][RANK_INV][4]);
        	cache_get_value_name_int(i, "Rango6Inv", BandasInfo[p][RANK_INV][5]);
        	cache_get_value_name_int(i, "Rango7Inv", BandasInfo[p][RANK_INV][6]);
        	count ++;
		}
	}
	printf("[FACCIONES]: %d",count);
	return true;
}
public CargarMapeos()
{
	//PUERTAS FC
	RejasFC[0] = CreateDynamicObject(19303, 198.87000, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[1] = CreateDynamicObject(19303, 198.87000, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[2] = CreateDynamicObject(19303, 194.99001, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[3] = CreateDynamicObject(19303, 194.99001, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[4] = CreateDynamicObject(19303, 191.13000, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[5] = CreateDynamicObject(19303, 191.13000, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[6] = CreateDynamicObject(19303, 187.35001, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[7] = CreateDynamicObject(19303, 187.35001, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[8] = CreateDynamicObject(19303, 183.50999, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[9] = CreateDynamicObject(19303, 183.50999, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[10] = CreateDynamicObject(19303, 180.86000, 1441.35999, 1081.79004,   0.00000, 0.00000, 12.98000);
	RejasFC[11] = CreateDynamicObject(19303, 179.57001, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[12] = CreateDynamicObject(19303, 179.57001, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[13] = CreateDynamicObject(19303, 179.13000, 1441.45996, 1081.81995,   0.00000, 0.00000, 12.84000);
	RejasFC[14] = CreateDynamicObject(19303, 175.71001, 1442.04004, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[15] = CreateDynamicObject(19303, 175.71001, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[16] = CreateDynamicObject(19303, 198.66000, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[17] = CreateDynamicObject(19303, 198.66000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[18] = CreateDynamicObject(19303, 171.83000, 1442.04004, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[19] = CreateDynamicObject(19303, 194.84000, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[20] = CreateDynamicObject(19303, 194.84000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[21] = CreateDynamicObject(19303, 191.16000, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[22] = CreateDynamicObject(19303, 191.16000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[23] = CreateDynamicObject(19303, 187.24001, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[24] = CreateDynamicObject(19303, 187.12000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[25] = CreateDynamicObject(19303, 183.24001, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[26] = CreateDynamicObject(19303, 179.39999, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[27] = CreateDynamicObject(19303, 175.70000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[28] = CreateDynamicObject(19303, 171.58000, 1457.37000, 1085.06995,   0.00000, 0.00000, 0.00000);
	RejasFC[29] = CreateDynamicObject(19303, 175.56000, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[30] = CreateDynamicObject(19303, 179.56000, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	RejasFC[31] = CreateDynamicObject(19303, 183.39999, 1457.37000, 1089.34998,   0.00000, 0.00000, 0.00000);
	//Salon de Eventos
	new objectos[5];
	objectos[0] = CreateObject(18765, -1194.37000, 2030.91003, 1244.81995,   0.00000, 0.00000, 359.89999);
	objectos[1] = CreateObject(18765, -1192.71997, 2032.48999, 1244.83997,   0.00000, 0.00000, 359.89999);
	objectos[2] = CreateObject(18765, -1190.88000, 2032.51001, 1244.85999,   0.00000, 0.00000, 359.89999);
	objectos[3] = CreateObject(18765, -1189.50000, 2030.90002, 1244.80005,   0.00000, 0.00000, 359.89999);
	for(new a = 0; a<4; a++) SetObjectMaterial(objectos[a], 0, 9362, "sfn_byofficeint", "CJ_Black_metal", 0xFFFFFFFF);
	return 1;
}
public TextoCombate(playerid)
{
    if(EnCombate[playerid] == 1)
    {
        if(Tiempos[playerid][TiempoCombate] > 0)
        {
            if(CColocado[playerid] == 0)
            {
                GangZoneShowForPlayer(playerid, ModoCombate, -1879048029);
                GangZoneFlashForPlayer(playerid, ModoCombate, -1879048029);
                Tiempos[playerid][TiempoCombate]--;
                CColocado[playerid] = 1;
            }
            else
            {
                GangZoneHideForPlayer(playerid, ModoCombate);
                GangZoneStopFlashForPlayer(playerid, ModoCombate);
                Tiempos[playerid][TiempoCombate]--;
                CColocado[playerid] = 0;
            }
        }
        else if(Tiempos[playerid][TiempoCombate] <= 0)
        {
            GangZoneHideForPlayer(playerid, ModoCombate);
            GangZoneStopFlashForPlayer(playerid, ModoCombate);
            Tiempos[playerid][TiempoCombate] = 0;
            CColocado[playerid] = 0;
            EnCombate[playerid] = 0;
            KillTimer(TimerCombate[playerid]);
        }
    }
    else if(EnCombate[playerid] == 0)
    {
        GangZoneHideForPlayer(playerid, ModoCombate);
        GangZoneStopFlashForPlayer(playerid, ModoCombate);
        Tiempos[playerid][TiempoCombate] = 0;
        CColocado[playerid] = 0;
        EnCombate[playerid] = 0;
        KillTimer(TimerCombate[playerid]);
    }
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(!IsPlayerConnected(issuerid)) return 1;
    if(weaponid >= 49 && weaponid <= 54) Tiempos[playerid][TIMER_SURFING] = gettime() + 3;
    new LugarCargo[100],expulsar = 0;
    LugarCargo = "Feli";
    if(IsPlayerInRangeOfPoint(issuerid,180.0,1759.6833,-1892.0160,13.5556) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en Unity Station";
    else if(IsPlayerInRangeOfPoint(issuerid,130.0,1173.2209,-1332.7537,13.9884) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en Hospital Central";
    else if(IsPlayerInRangeOfPoint(issuerid,70.0,2030.1166,-1413.7969,16.9989) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital Country General";
    else if((IsPlayerInRangeOfPoint(issuerid,70.0,-1745.5931,-131.6944,3.7314) || IsPlayerInRangeOfPoint(Agresor[playerid],450.0,-1652.7432,23.0748,4.4347)) && GetPlayerInterior(issuerid) == 0) LugarCargo ="en los Muelles de San Fierro";
    else if(IsPlayerInRangeOfPoint(issuerid,100.0,-384.4948,-1474.2228,25.7266) && GetPlayerInterior(issuerid) == 0) LugarCargo ="en las Granjas de Flint Range";
    else if(IsPlayerInRangeOfPoint(issuerid,100.0,-148.6831,-1577.2129,9.3045) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el basural";
    else if(IsPlayerInRangeOfPoint(issuerid,200.0,-2647.9409,605.9929,15.2346) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital de San Fierro";
    else if(IsPlayerInRangeOfPoint(issuerid,200.0,1611.4006,1781.1265,37.8510) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital de Las Venturas";
    else if(IsPlayerInRangeOfPoint(issuerid,200.0,869.8167,873.0883,12.9141) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en la Cantera de Hunter Quarry";
    else if(IsPlayerInRangeOfPoint(issuerid,250,1156.8682,-1334.6033,-10.7922) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 6) LugarCargo = "en Hospital Central",expulsar = 1;
    else if(IsPlayerInRangeOfPoint(issuerid,250,1239.3762,-822.5826,1164.2759) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 9) LugarCargo = "en el Hospital Country General",expulsar = 2;
    else if(IsPlayerInRangeOfPoint(issuerid,250,-2714.3257,628.0117,1385.6547) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 7) LugarCargo = "en el Hospital de San Fierro",expulsar = 3;
    else if(IsPlayerInRangeOfPoint(issuerid,250,1239.3762,-822.5826,1164.2759) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 8) LugarCargo = "en el Hospital de Las Venturas",expulsar = 4;
    else if(IsPlayerInRangeOfPoint(issuerid,250,369.4387,169.1839,1040.1156) && GetPlayerInterior(issuerid) == 5 && GetPlayerVirtualWorld(issuerid) == 5) LugarCargo = "en el Estudio de Radio y Televisión",expulsar = 5;
    else if(IsPlayerInRangeOfPoint(issuerid,200,1551.7198,-1675.6492,15.9741) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría";
    else if(IsPlayerInRangeOfPoint(issuerid,50,830.2910,3.9240,1004.1797) && GetPlayerInterior(issuerid) == 3) LugarCargo = "en el Banco Plaza";
    else if(IsPlayerInRangeOfPoint(issuerid,80,1092.2074,-141.3113,1001.1160) && GetPlayerInterior(issuerid) == 3) LugarCargo = "en Banco Central de Los Santos";
    else if(IsPlayerInRangeOfPoint(issuerid,25,2311.8379,-8.2884,26.7422) && GetPlayerInterior(issuerid) == 0 && GetPlayerVirtualWorld(issuerid) != 0) LugarCargo = "en Banco de San Fierro";
    else if(IsPlayerInRangeOfPoint(issuerid,200,-1622.6633,702.1961,11.2764) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría de San Fierro";
    else if(IsPlayerInRangeOfPoint(issuerid,200,2282.8855,2454.9976,9.8203) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría de Las Venturas";
    else if(IsPlayerInRangeOfPoint(issuerid,30,374.6797,-124.4743,1001.4995) && GetPlayerInterior(issuerid) == 5) LugarCargo = "en The Well Stacked Pizza";
    else if(IsPlayerInRangeOfPoint(issuerid,30,-29.1592,-83.4654,1003.5542) && GetPlayerInterior(issuerid) == 18) LugarCargo = "en 24/7";
    else if(IsPlayerInRangeOfPoint(issuerid,50,-1412.7083,-310.4966,1058.1694) && GetPlayerInterior(issuerid) == 7 && GetPlayerVirtualWorld(issuerid) == 7) LugarCargo = "en el Estadio de Las Venturas",expulsar = 6;
    else if(IsPlayerInRangeOfPoint(issuerid,100,1094.0922,1597.0083,12.5469) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Estadio de Las Venturas";
	else if(IsPlayerInRangeOfPoint(issuerid,100,278.6463,1411.3732,10.4271) && GetPlayerInterior(issuerid) == 0 && Jail[issuerid] == 0) LugarCargo = "en el penal de Fort Carson";
	else if(IsPlayerInRangeOfPoint(issuerid,150,727.1412,-3320.2461,5.8700) && GetPlayerInterior(issuerid) == 0 && Jail[issuerid] == 0) LugarCargo = "en la Isla Santa Carolina";
	else if(IsPlayerInRangeOfPoint(issuerid,150,-575.5505,2340.8291,82.6304) && GetPlayerInterior(issuerid) == 0 && Jail[issuerid] == 0) LugarCargo = "en Mina Castillo del Diablo";
    if(strcmp(LugarCargo,"Feli"))
    {
        if(PlayerInfo[issuerid][pFaccion] != 1 && !IsPlayerInAnyVehicle(issuerid) && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER && PlayerInfo[issuerid][pCargos] < 1)
        {
            new string[200],string2[150];
            PlayerInfo[issuerid][pCargos] = 1;
            ActualizarRadar();
            SetPlayerWantedLevel(issuerid, PlayerInfo[issuerid][pCargos]);
            CagoSeguro[issuerid] = 1;
            format(string2,150,"Zona segura (%d)", playerid);
            PlayerInfo[issuerid][QuienC] = string2;
            if((Tiempos[issuerid][Advertido] - gettime()) <= 0)
            {
                format(string, 200,"{3399FF}[Central de policía]{FFFFFF} reportando: (({00CCFF}%s{FFFFFF})) [%d] disturbios %s.",PlayerInfo[issuerid][Nickname],issuerid,LugarCargo);
                SendRadioPoliceMessage(-1,string);
                ReportCrimen(issuerid,1);
                SendClientMessage(issuerid,-1,"Fuiste descubierto por un guardia de seguridad, escapa de la zona.");
                SendClientMessage(issuerid,-1,"Si te escondes bien durante 5 minutos, la policía perderá tu rastro.");
                Tiempos[issuerid][Advertido] = gettime() + 30;
                SetTimerEx("Quitar1Cargo", 300000, 0, "d", issuerid);
                ReportCrimen(issuerid,4);
            }
            switch(expulsar)
            {
                case 1: SetPosEx(issuerid,1172.0782,-1323.3225,15.4029,90.7454,0,0,0);
                case 2: SetPosEx(issuerid,2034.0798,-1401.6808,17.2939,90.7454,0,0,0);
                case 3: SetPosEx(issuerid,-2665.0000,640.1640,14.4531,90.7454,0,0,0);
                case 4: SetPosEx(issuerid,1607.4094,1815.2427,10.8203,90.7454,0,0,0);
                case 5: SetPosEx(issuerid,1094.0922,1597.0083,12.5469,0,0,0,0);
                case 6:
				{
                    SetPosEx(issuerid,1094.0922,1597.0083,12.5469,0,0,0,0);
                    if(EnCarreras[issuerid] > 0) SacarCarrera(issuerid, 1);
                }
            }
            return 1;
        }
    }
    if(!IsPlayerNPC(issuerid))
    {
        if(playerid != INVALID_PLAYER_ID)
        {
            if(issuerid != INVALID_PLAYER_ID)
            {
                if(IsPlayerConnected(playerid))
                {
                    if(JugadorLogeado[playerid] == 1)
                    {
                        if(JugadorLogeado[issuerid] == 1)
                        {
                            if(PlayerInfo[playerid][pNivel] == 1) GivePlayerHealth(playerid, amount);
                            ColocarCombate(playerid);
                            Agresor[playerid] = issuerid;
                            Tiempos[playerid][TiempoAgresor] = 15;
                            ColocarCombate(issuerid);
                            if(!IsPlayerInAnyVehicle(issuerid) && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER)
                            {
                                if(Jail[issuerid] == 1)
                                {
                                    if(Tiempos[playerid][GolpesAdv] - gettime() <= 0)
                                    {
                                        SendClientMessage(issuerid,-1,"Se te aumento la condenado por generar disturbios en la prisión.");
                                        SendClientMessage(issuerid,-1,"Si continuas así tu condenada seguirá aumentando.");
                                        PlayerInfo[issuerid][pTiempoCarcel] += 300;
                                        Tiempos[playerid][GolpesAdv] = gettime() + 30;
                                        return 1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(IsPlayerNPC(damagedid))
    {
        new string[256];
        if(PlayerInfo[playerid][pCargos] >= 1) return 1;
        if(!strcmp(PlayerInfo[damagedid][Nickname], ".Marcelo", true))
        {
            if(PlayerInfo[playerid][pDuty] == 1) return 1;
            PlayerInfo[playerid][pCargos] = 1;
            SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
            SetTimerEx("Quitar1Cargo", 300000, 0, "d", playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Fuiste descubierto por un guardia de seguridad, escapa de la zona.");
            SendClientMessage(playerid,COLOR_WHITE,"Si te escondes bien durante 5 minutos, la policía perderá tu rastro.");
            format(string, sizeof(string), "{3399FF}[Central de policía] {FFFFFF}reportando: (({00D2CF}%s{FFFFFF})) [%d] disturbios en el Departamento de Policías de Los Santos.", PlayerInfo[playerid][Nickname],playerid);
            SendRadioMessage(1,COLOR_WHITE, string,INVALID_PLAYER_ID);
            quienfue = "Marcelo";
        }
        if(!strcmp(PlayerInfo[damagedid][Nickname], ".Alejandro", true))
        {
            if(PlayerInfo[playerid][pDuty] == 1) return 1;
            PlayerInfo[playerid][pCargos] = 1;
            SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
            SetTimerEx("Quitar1Cargo", 300000, 0, "d", playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Fuiste descubierto por un guardia de seguridad, escapa de la zona.");
            SendClientMessage(playerid,COLOR_WHITE,"Si te escondes bien durante 5 minutos, la policía perderá tu rastro.");
            format(string, sizeof(string), "{3399FF}[Central de policía] {FFFFFF}reportando: (({00D2CF}%s{FFFFFF})) [%d] disturbios en All Saints General Hospital.", PlayerInfo[playerid][Nickname],playerid);
            SendRadioMessage(1,COLOR_WHITE, string,INVALID_PLAYER_ID);
            quienfue = "Alejandro";
        }
        if(!strcmp(PlayerInfo[damagedid][Nickname], ".Hugo", true))
        {
            if(PlayerInfo[playerid][pDuty] == 1) return 1;
            PlayerInfo[playerid][pCargos] = 1;
            SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
            SetTimerEx("Quitar1Cargo", 300000, 0, "d", playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Fuiste descubierto por un guardia de seguridad, escapa de la zona.");
            SendClientMessage(playerid,COLOR_WHITE,"Si te escondes bien durante 5 minutos, la policía perderá tu rastro.");
            format(string, sizeof(string), "{3399FF}[Central de policía] {FFFFFF}reportando: (({00D2CF}%s{FFFFFF})) [%d] disturbios en Easter Basin.", PlayerInfo[playerid][Nickname],playerid);
            SendRadioMessage(1,COLOR_WHITE, string,INVALID_PLAYER_ID);
            quienfue = "Hugo";
        }
        return 1;
    }
    return 1;
}
public elSexoOral(playerid)
{
    ProgresoSexoOral[playerid] ++;
    switch(ProgresoSexoOral[playerid])
    {
        case 1: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_START_W", 4.1, 0, 0, 0, 1, 0, 1);
        case 3: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.1, 1, 0, 0, 1, 0, 1);
        case 15: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_END_W", 4.1, 0, 0, 0, 1, 0, 1);
        case 16:
        {
            ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 0, 0, 1, 0, 1);
            SexoOral[playerid] = INVALID_PLAYER_ID;
            KillTimer(Tiempos[playerid][TimerChupar]);
            ProgresoSexoOral[playerid] = 0;
            return 1;
        }
    }
    Tiempos[playerid][TimerChupar] = SetTimerEx("elSexoOral",1000,false,"d",playerid);
    return true;
}
funcion Equilibrio(i)
{
    if(Tiempos[i][ErrorMensaje] - gettime() <= 0)
    {
        NoTeleportHack(i);
        AccionesRol(i,"pierde el equilibrio y se cae.", 20);
        SetPlayerPos(i,CaidaTaxi[0][i],CaidaTaxi[1][i],CaidaTaxi[2][i]);
        ApplyAnimation(i,"PED","getup_front",2,0,1,1,0,0);
        Tiempos[i][ErrorMensaje] = gettime() + 10;
    }
}
funcion TCHAT(playerid)
{
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
    SendClientMessage(playerid, 0x000000FF, "");
}
funcion QuitarCargo(playerid)
{
    PlayerInfo[playerid][pCargos] = 0;
    ActualizarRadar();
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
    return 1;
}
timer EnviarEventoDM[1500](playerid)
{
    SendClientMessage(playerid,-1,"Puedes salir cuando quieras con {00A8FF}/salirevento");
    SetPosEx(playerid, 1412.639892, -1.787510, 1000.924377, 90, 1, 0);
    return 1;
}
funcion MusicaEventos()
{
    for(new playerid = 0, pj = GetMaxPlayers(); playerid < pj; playerid++) if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pSonidos] == 1)
        {
            if(IsPlayerInRangeOfPoint(playerid,150.0,1479.0646,-1678.0393,14.0469))
            {
                if(EventoActivo == true || HallX == true)
                {
                    if(!GetPVarInt(playerid,"escuchafc"))
                    {
                        SetPVarInt(playerid,"escuchafc",1);
                        new Float:Pos[3];
                        GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
                        PlayAudioStreamForPlayer(playerid,"http://"WEB_SONIDOS"/evento.mp3",Pos[0],Pos[1],Pos[2],50.0,1);
                    }
                }
                else { if(GetPVarInt(playerid,"escuchafc") == 1) { DeletePVar(playerid,"escuchafc"); StopAudioStreamForPlayer(playerid); } }
            }
            else { if(GetPVarInt(playerid,"escuchafc") == 1) { DeletePVar(playerid,"escuchafc"); StopAudioStreamForPlayer(playerid); } }
        }
    }
    return 1;
}
task FuelSeconds[120000]()
{
	for(new i=0;i<MAX_VEHICLES;i++)
	{
		if(MotorAuto[i] == 1)
		{
			if(VehicleFuel[i] >= 1)
			{
				if(!BICI(i))
				{
					VehicleFuel[i]--;
					new vehiclefuel = CombustibleCoche(GetVehicleModel(i)), string[128];
					foreach(new u : Player)
					{
						if(GetPlayerState(u) == PLAYER_STATE_DRIVER)
						{
							if(IsPlayerInVehicle(u, i) && PlayerInfo[u][pVelocimetro] == 1)
							{
								format(string, 128, "%d/%d", VehicleFuel[i], vehiclefuel);
								PlayerTextDrawSetString(u,ContadorVelocimetro[u][1], string);
								SetPlayerProgressBarValue(u,Progressbar[u][Combustible],VehicleFuel[i]);
								UpdatePlayerProgressBar(u,Progressbar[u][Combustible]);
							}
						}
					}
				}
				else if(VehicleFuel[i] < 1)
				{
					GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(i, 0, lights, alarm, doors, bonnet, boot, objective);
					MotorAuto[i] = 0;
				}
			}
		}
	}
	return 1;
}
ptask LlamadaTransportista[300000](playerid)
{
    if(JugadorLogeado[playerid] == 1)
    {
        if(PlayerInfo[playerid][pTrabajo] == T_Transportista || PlayerInfo[playerid][pTrabajo2] == T_Transportista)
        {
            if(TelefonoEstado[playerid] == 0 && Mobile2[playerid] == 0 && tviaje[playerid] == 0 && EnLlamada[playerid] == 0 && PlayerInfo[playerid][pNumero] != 0)
            {
                new string[250];
                format(string, sizeof(string), "El teléfono de %s está sonando.", PlayerInfo[playerid][Nickname]);
                ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                SendClientMessage(playerid, -1, "Te están llamando por teléfono desde el número: {DBED15}4825{FFFFFF}, escribe {DBED15}/atender{FFFFFF} o {DBED15}/colgar");
                PlayerInfo[playerid][MobileSub] = 2540;
                Mobile2[playerid] = 2540;
                SetTimerEx("ColgarLlamada",30000,false,"d",playerid);
                llamada(playerid);
            }
        }
    }
    return 1;
}
ptask AntiClones[5000](i)
{
    if(!IsPlayerPaused(i) && JugadorLogeado[i] == 1)
    {
	    if(PlayerInfo[i][pTiempoCarcel] > 0 && EstaDomiciliaria[i] == 0)
	    {
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 1) SetPlayerPosEx(i,227.3367,109.3470,999.0156),SetPlayerVirtualWorld(i,1),SetPlayerInterior(i,10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 2) SetPlayerPosEx(i,223.0108,109.8135,999.0156),SetPlayerVirtualWorld(i,1),SetPlayerInterior(i,10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 3) SetPlayerPosEx(i,219.0009,110.3388,999.0156),SetPlayerVirtualWorld(i,1),SetPlayerInterior(i,10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 4) SetPlayerPosEx(i,215.2188,109.1792,999.0156),SetPlayerVirtualWorld(i,1),SetPlayerInterior(i,10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 5) SetPlayerPosEx(i,227.3367,109.3470,999.0156),SetPlayerVirtualWorld(i, 5),SetPlayerInterior(i, 10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 6) SetPlayerPosEx(i,223.0108,109.8135,999.0156),SetPlayerVirtualWorld(i, 5),SetPlayerInterior(i, 10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 7) SetPlayerPosEx(i,219.0009,110.3388,999.0156),SetPlayerVirtualWorld(i, 5),SetPlayerInterior(i, 10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 8) SetPlayerPosEx(i,215.2188,109.1792,999.0156),SetPlayerVirtualWorld(i, 5),SetPlayerInterior(i, 10);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 9) SetPlayerPosEx(i,227.3367,109.3470,999.0156),SetPlayerInterior(i, 3);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 10) SetPlayerPosEx(i,223.0108,109.8135,999.0156),SetPlayerInterior(i, 3);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 11) SetPlayerPosEx(i,219.0009,110.3388,999.0156),SetPlayerInterior(i, 3);
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 12) SetPlayerPosEx(i,215.2188,109.1792,999.0156),SetPlayerInterior(i, 3);
		}
		if(EsUnTren(GetPlayerVehicleID(i)) && Boletos[i] > 0)
		{
			switch(Boletos[i])
			{
				case 1: if(EnEstacion[i]) RemovePlayerFromVehicle(i),SetPosEx(i,1433.8665,2625.2673,11.3926,182.2727,0,0),Boletos[i] = 0;//Yellow Bell Station
				case 2: if(EnEstacion[i]) RemovePlayerFromVehicle(i),SetPosEx(i,1738.3921,-1949.4956,14.1172,0.7063,0,0),Boletos[i] = 0; //Unity Station
				case 3: if(EnEstacion[i]) RemovePlayerFromVehicle(i),SetPosEx(i,817.6003,-1360.5968,-0.5078,310.9091,0,0),Boletos[i] = 0; //Market Station
				case 4: if(EnEstacion[i]) RemovePlayerFromVehicle(i),SetPosEx(i,-1952.1262,138.8080,26.2813,90.6335,0,0),Boletos[i] = 0; //Cranberry Station
				case 5: if(EnEstacion[i]) RemovePlayerFromVehicle(i),SetPosEx(i,2860.4497,1290.8992,11.3906,88.4635,0,0),Boletos[i] = 0; //Linden Station
			}
		}
		if(PlayerInfo[i][Agonizando] == 1)
		{
			if(!IsPlayerPaused(i) && Muriendo[i] == 1) GivePlayerHealth(i, -1.0);
		}
		if(TimerMalherido[i] > 0) TimerMalherido[i]--,GameTextForPlayer(i,"~w~~<~ ~r~MALHERIDO ~w~~>~~n~~w~esperando servicio medico",3000,3);
		else if(TimerCombustible[i] > 0) TimerCombustible[i]--,GameTextForPlayer(i,"~n~~n~~g~~<~ ~w~CARGANDO COMBUSTIBLE ~g~~>~",3000,3);
		else if(TimerCargarCamion[i] > 0) TimerCombustible[i]--,GameTextForPlayer(i,"~w~~<~ ~g~CARGANDO CAMION ~w~~>~",3000,3);
		else if(TimerDescargarCamion[i] > 0) TimerCombustible[i]--,GameTextForPlayer(i,"~r~~<~ ~w~DESCARGANDO CAMION ~r~~>~",3000,3);
		else if(TimerRecoleccion[i] > 0) TimerRecoleccion[i]--,GameTextForPlayer(i, "~w~RECOLECTANDO BASURA", 3000, 3);
		else if(TimerReparar[i] > 0) TimerRecoleccion[i]--,GameTextForPlayer(i, "~w~REPARANDO VEHICULO...", 1000, 5);
		else if(TimerRevisar[i] > 0) TimerRevisar[i]--,GameTextForPlayer(i,"~n~~n~~w~REVISANDO MALETERO", 3000, 3);
		else if(TiempoForzarCerradura[i] > 0) TimerRevisar[i]--,GameTextForPlayer(i,"~n~~r~~w~FORZANDO CERRADURA", 3000, 3);
	}
	new bool: occupied[MAX_VEHICLES];
    for(new v = 1; v < MAX_VEHICLES; v++)
    {
        if(!IsValidVehicle(v)) continue;
        if(v > AUTOS)
        {
            foreach(new e : Player)
            {
                if(JugadorLogeado[e] == 1)
                {
                    if(v == GetPlayerVehicleID(e)) occupied[v] = true;
                    for(new a = 0; a < MAX_PAUTOS; a++) if(v == autos[a][e]) occupied[v] = true;
                }
            }
            for(new f = 0; f < MAX_FABRICAS; f++) if(Fabricas[f][Auto1F] == v || Fabricas[f][Auto2F] == v) occupied[v] = true;
            for(new a; a < sizeof(VehiculoCarrera); a++) if(VehiculoCarrera[a] == v) occupied[v] = true;
            if(!occupied[v]) MotorAuto[v] = 0,DestroyVehicle(v);
        }
    }
	return 1;
}

ptask AutoCheatsyCodigos[3000](playerid)
{
    for(new f = 0; f < MAX_FABRICAS; f++)
	{
		if(Fabricas[f][pEnUso] > 0)
		{
			if(Fabricas[f][pBanda] > 0)
			{
				if(Fabricas[f][CantidadActores] > 0)
				{
					if(Fabricas[f][CantidadActores] <= Fabricas[f][ActoresMuertos])
					{
						if(Fabricas[f][TiempoVaciarFabrica] <= gettime())
						{
							Fabricas[f][pBanda] = 0;
							Fabricas[f][pSoborno] = gettime();
							BorrarStatsFabrica(f);
							CargarFabricass(f);
							printf("La fabrica %d fue desocupada por la policía",f);
						}
					}
				}
			}
		}
	}
    if(JugadorLogeado[playerid] == 1)
    {
        if(PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pCargos] >= 1)
        {
            PlayerInfo[playerid][pCargos] = 0;
            SetPlayerWantedLevel(playerid, 0);
        }
        if(VariableCaido[playerid] != 1)
        {
            foreach(new i : Player)
            {
                if(PlayerInfo[i][pDuty] == 1)
                {
                    switch(PlayerInfo[playerid][pCargos])
                    {
                        case 0: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO0); case 1: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO1);
                        case 2: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO2); case 3: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO3);
                        case 4: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO4); case 5: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO5);
                        case 6: SetPlayerMarkerForPlayer(i, playerid, COLORCARGO6);
                    }
                }
            }
            if(PlayerInfo[playerid][pCargos] > 0 && Esposando[playerid] == 2 || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && Esposando[playerid] == 2 || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && EnPatrulla[playerid] == 1)
            {
                foreach(new i : Player)
                {
                    if(PlayerInfo[i][pDuty] == 1) SetPlayerMarkerForPlayer(i, playerid, COLORCARGO7);
                }
            }
        }
        else if(PlayerInfo[playerid][pCargos] > 0 && VariableCaido[playerid] == 1)
        {
            foreach(new i : Player)
            {
                if(PlayerInfo[i][pDuty] == 1) SetPlayerMarkerForPlayer(i, playerid, COLORCARGO7);
            }
        }
        // Trabajo Polícia
        if(PlayerInfo[playerid][pDuty] == 1)
        {
            SetPlayerColor(playerid,COLOR_POLICIA);
        }
        // Admin en Servicio
        if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pDuty] == 0)
        {
            SetPlayerColor(playerid, 0xAA333300);
        }
        if(!IsPlayerNPC(playerid))
        {
            new autoid = GetPlayerVehicleID(playerid);
            if(IsPlayerInAnyVehicle(playerid))
            {
                if(autoid != EnAuto[playerid] && PlayerInfo[playerid][pAdmin] < 3)
                {
                    if(AvisosAuto[playerid] < 5) AvisosAuto[playerid]++;
                    else if(AvisosAuto[playerid] >= 5) DarArmas(playerid);
                }
            }
            new vehicleid = GetPlayerVehicleID(playerid), veces;
            new modelo = GetVehicleModel(vehicleid);
            new velocidadmax = VelocidadMaxAuto(modelo);
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(GetVehicleSpeed(vehicleid) > velocidadmax+velocidadmax)
                {
                    if(GetVehicleSpeed(vehicleid) >= velocidadmax+velocidadmax+velocidadmax) veces = 3;
                    else if(GetVehicleSpeed(vehicleid) > velocidadmax+velocidadmax && GetVehicleSpeed(vehicleid) < velocidadmax+velocidadmax) veces = 2;
                    if(veces < 2) return 1;
                    new string[128];
                    format(string,sizeof(string),"El jugador %s(ID:%d) superó %d veces la velocidad (%d/%d) modelo de vehículo: %d",PlayerInfo[playerid][Nickname],playerid,veces,GetVehicleSpeed(vehicleid),velocidadmax,vehicleid);
                    MensajeAdmin(0xFFFFFFFF, string, 3);
                }
            }
        }
    }
    return 1;
}
ptask Anticheats[500](playerid)
{
    if(JugadorLogeado[playerid] == 1)
    {
        accionesProstitutas();
        // Animacion Herido
        if(PlayerInfo[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0)
        {
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            SetPlayerArmedWeapon(playerid, 0);
        }
        // Slot 9   -   (Granada | Dildo Morado, Dildo Blanco, Vibrado, Vibrador plateado, Flores)
        if(PlayerInfo[playerid][j_ARMAS] == 16)
        {
            if(GetPlayerWeapon(playerid) != 16 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] == 16) { SetPlayerAttachedObject(playerid,9,342,8, 0.018998,-0.017999,0.138999,167.299987,-81.500083,-76.099929, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 16 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] == 16) { RemovePlayerAttachedObject(playerid,9); }
        } else {
            if(GetPlayerWeapon(playerid) != 10 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(10)] == 10) { SetPlayerAttachedObject(playerid,9,321,8, -0.064001,-0.009999,0.065000,-100.199996,144.700042,156.200149, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 10 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(10)] == 10) { RemovePlayerAttachedObject(playerid,9); }
            if(GetPlayerWeapon(playerid) != 11 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(11)] == 11) { SetPlayerAttachedObject(playerid,9,322,8, -0.064001,-0.009999,0.065000,-100.199996,144.700042,156.200149, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 11 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(11)] == 11) { RemovePlayerAttachedObject(playerid,9); }
            if(GetPlayerWeapon(playerid) != 12 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(12)] == 12) { SetPlayerAttachedObject(playerid,9,323,8, -0.064001,-0.009999,0.065000,-100.199996,144.700042,156.200149, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 12 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(12)] == 12) { RemovePlayerAttachedObject(playerid,9); }
            if(GetPlayerWeapon(playerid) != 13 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(13)] == 13) { SetPlayerAttachedObject(playerid,9,324,8, -0.064001,-0.009999,0.065000,-100.199996,144.700042,156.200149, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 13 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(13)] == 13) { RemovePlayerAttachedObject(playerid,9); }
            if(GetPlayerWeapon(playerid) != 14 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(14)] == 14) { SetPlayerAttachedObject(playerid,9,325,8, -0.064001,-0.009999,0.065000,-100.199996,144.700042,156.200149, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 14 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(14)] == 14) { RemovePlayerAttachedObject(playerid,9); }
        }
        // Slot 8   -   (Lanzallamas, Minigun, RPG, Bazuca | AK-47 - M4)
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(36)] == 36 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(35)] == 35 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(38)] == 38)
        {
            if(GetPlayerWeapon(playerid) != 35 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(35)] == 35) {SetPlayerAttachedObject(playerid,8,359,1,  0.165996, -0.121996, -0.053998, 172.799972, 156.600006, 3.699996, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 35 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(35)] == 35) { RemovePlayerAttachedObject(playerid,8); }
            if(GetPlayerWeapon(playerid) != 36 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(36)] == 36) {SetPlayerAttachedObject(playerid,8,360,1,  0.165996, -0.121996, -0.053998, 172.799972, 156.600006, 3.699996, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 36 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(36)] == 36) { RemovePlayerAttachedObject(playerid,8); }
            if(GetPlayerWeapon(playerid) != 37 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(37)] == 37) {SetPlayerAttachedObject(playerid,8,361,1,  0.086000, -0.094000, -0.166000, 165.5999908, 145.899963, 15.999979, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 37 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(37)] == 37) { RemovePlayerAttachedObject(playerid,8); }
            if(GetPlayerWeapon(playerid) != 38 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(38)] == 38) {SetPlayerAttachedObject(playerid,8,362,1,  0.086000, -0.094000, -0.166000, 165.5999908, 145.899963, 15.999979, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 38 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(38)] == 38) { RemovePlayerAttachedObject(playerid,8); }
        } else {
            if(GetPlayerWeapon(playerid) != 30 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(30)] == 30) {SetPlayerAttachedObject(playerid,8,355,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 30 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(30)] == 30) { RemovePlayerAttachedObject(playerid,8); }
            if(GetPlayerWeapon(playerid) != 31 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(31)] == 31) {SetPlayerAttachedObject(playerid,8,356,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000); }
            if(GetPlayerWeapon(playerid) == 31 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(31)] == 31) { RemovePlayerAttachedObject(playerid,8); }
        }
        // Slot 7   -   (Escopeta - Escopetas recotardas, Escopeta de combate | Rifle, Sniper)
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] == 25 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(26)] == 26 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(27)] == 27)
        {
            if(GetPlayerWeapon(playerid) != 25 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] == 25) {SetPlayerAttachedObject(playerid,7,349,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 25 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] == 25) { RemovePlayerAttachedObject(playerid,7); }
            if(GetPlayerWeapon(playerid) != 26 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(26)] == 26) {SetPlayerAttachedObject(playerid, 7, 350, 8, -0.073000, -0.040999, 0.111999, -82.999992, 0.000000, 0.000000, 0.899999, 0.936000, 0.909000);}
            if(GetPlayerWeapon(playerid) == 26 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(26)] == 26) { RemovePlayerAttachedObject(playerid,7); }
            if(GetPlayerWeapon(playerid) != 27 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(27)] == 27) {SetPlayerAttachedObject(playerid,7,351,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 27 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(27)] == 27) { RemovePlayerAttachedObject(playerid,7); }
        } else {
            if(GetPlayerWeapon(playerid) != 33 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(33)] == 33) {SetPlayerAttachedObject(playerid,7,357,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 33 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(33)] == 33) { RemovePlayerAttachedObject(playerid,7); }
            if(GetPlayerWeapon(playerid) != 34 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(34)] == 34) {SetPlayerAttachedObject(playerid,7,358,1,  0.190999, -0.080999, -0.155999, -160.200073, 154.300079, 0.000000, 1.000000, 1.000000, 1.000000);}
            if(GetPlayerWeapon(playerid) == 34 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(34)] == 34) { RemovePlayerAttachedObject(playerid,7); }
        }
        // Slot 6   -   (Palo de policia, Cuchillo, Palo de Golf, Bate, Pala, Palo de billar, Katana, Motosierra)
        if(GetPlayerWeapon(playerid) != 3 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(3)] == 3) {SetPlayerAttachedObject(playerid,6,334,7,  -0.032002,0.009000,-0.096000,-69.900108,145.399993,166.899917, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 3 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(3)] == 3) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 4 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(4)] == 4) {SetPlayerAttachedObject(playerid,6,335,7,  -0.032002,0.009000,-0.096000,-69.900108,145.399993,166.899917, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 4 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(4)] == 4) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 2 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(2)] == 2) {SetPlayerAttachedObject(playerid,6,333,1,  0.067997,-0.188999,0.063998,-4.000112,139.299972,115.199958, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 2 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(2)] == 2) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 5 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(5)] == 5) {SetPlayerAttachedObject(playerid,6,336,1,  0.067997,-0.188999,0.063998,-4.000112,139.299972,115.199958, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 5 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(5)] == 5) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 6 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(6)] == 6) {SetPlayerAttachedObject(playerid,6,337,1,  0.067997,-0.188999,0.063998,-4.000112,139.299972,115.199958, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 6 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(6)] == 6) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 7 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(7)] == 7) {SetPlayerAttachedObject(playerid,6,338,1,  0.067997,-0.188999,0.063998,-4.000112,139.299972,115.199958, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 7 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(7)] == 7) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 8 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(9)] == 8) {SetPlayerAttachedObject(playerid,6,339,1,  0.067997,-0.188999,0.063998,-4.000112,139.299972,115.199958, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 8 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(9)] == 8) { RemovePlayerAttachedObject(playerid,6); }
        if(GetPlayerWeapon(playerid) != 9 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(9)] == 9) { SetPlayerAttachedObject(playerid, 6, 341, 1, 0.177999, -0.149999, -0.170000, -177.400070, 162.099975, 0.000000, 1.000000, 1.000000, 1.000000);}
        if(GetPlayerWeapon(playerid) == 9 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(9)] == 9) { RemovePlayerAttachedObject(playerid,6); }
        // Slot 5   -   (MP5, Uzi, Tec-9)
        if(GetPlayerWeapon(playerid) != 29 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(29)] == 29) { SetPlayerAttachedObject(playerid,5,353,7, 0.018998,-0.060998,-0.067000,-74.499992,11.800035,9.500157, 1.000000, 1.000000, 1.000000); }
        if(GetPlayerWeapon(playerid) == 29 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(29)] == 29) { RemovePlayerAttachedObject(playerid,5); }
        if(GetPlayerWeapon(playerid) != 28 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(28)] == 28) { SetPlayerAttachedObject(playerid,5,352,7, 0.018998,-0.060998,-0.067000,-74.499992,11.800035,9.500157, 1.000000, 1.000000, 1.000000); }
        if(GetPlayerWeapon(playerid) == 28 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(28)] == 28) { RemovePlayerAttachedObject(playerid,5); }
        if(GetPlayerWeapon(playerid) != 32 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(32)] == 32) { SetPlayerAttachedObject(playerid,5,372,7, 0.018998,-0.060998,-0.067000,-74.499992,11.800035,9.500157, 1.000000, 1.000000, 1.000000); }
        if(GetPlayerWeapon(playerid) == 32 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(32)] == 32) { RemovePlayerAttachedObject(playerid,5); }
        // Quitar objeto
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(29)] != 29 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(28)] != 28 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(32)] != 32) { RemovePlayerAttachedObject(playerid,5); }
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(9)] != 9 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(3)] != 3 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(4)] != 4 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(2)] != 2 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(5)] != 5 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(6)] != 6 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(7)] != 7 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(8)] != 8) { RemovePlayerAttachedObject(playerid,6); }
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] == 16) { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] != 16) { RemovePlayerAttachedObject(playerid,9); } }
        else { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(10)] != 10 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(11)] != 11 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(12)] != 12 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] != 13 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(16)] != 14) { RemovePlayerAttachedObject(playerid,9); } }
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(35)] == 35 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(36)] == 36 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(37)] == 37 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(38)] == 38) { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(35)] != 35 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(36)] != 36 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(37)] != 37 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(38)] != 38) { RemovePlayerAttachedObject(playerid,8); } }
        else { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(30)] != 30 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(31)] != 31) { RemovePlayerAttachedObject(playerid,8); } }
        if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] == 25 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(26)] == 26 || PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(27)] == 27) { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(25)] != 25 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(27)] != 27 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(26)] != 26) { RemovePlayerAttachedObject(playerid,7); } }
        else { if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(33)] != 33 && PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(34)] != 34) { RemovePlayerAttachedObject(playerid,7); } }
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(PlayerInfo[playerid][pVelocimetro] == 1)
                {
                    new szSpeed[9];
                    new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
                    new vehiclefuel = CombustibleCoche(modelid);
                    format(szSpeed, sizeof(szSpeed),"%d/%d",VehicleFuel[iVehicle[playerid]],vehiclefuel);
                    PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][1],szSpeed);
                }
            }
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(PlayerInfo[playerid][pVelocimetro] == 1)
                {
                    new carid = GetPlayerVehicleID(playerid);
                    new Float: fCurrentSpeed, szSpeed[8];
                    fCurrentSpeed = GetVehicleSpeed(carid);
                    fVehSpeed[playerid] = fCurrentSpeed;
                    if(!BICI(GetPlayerVehicleID(playerid)))
                    {
                        new modelo = GetVehicleModel(carid);
                        new velocityveh = VelocidadMaxAuto(modelo);
                        if(fCurrentSpeed >= velocityveh) fCurrentSpeed = velocityveh;
                        format(szSpeed, sizeof(szSpeed),"%.0f", fCurrentSpeed);
                        PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][0], szSpeed);
                        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Velocimetro], GetVehicleSpeed(carid));
                        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Velocimetro]);
                    }
                }
            }
        }
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 6) KickAntiCheat(playerid, 0, 0, "Volar con cheat");
		new AnimWeap;
		AnimWeap = GetPlayerWeapon(playerid);
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 974) return KickAntiCheat(playerid, 0, 0, "Skin Bug 1");
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 972) return KickAntiCheat(playerid, 0, 0, "Skin Bug 2");
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 968) return KickAntiCheat(playerid, 0, 0, "Skin Bug 3");
    }
    foreach(new i : Player)
    {
        if(NotificacionConectado[i] > 0)
        {
            NotificacionConectado[i] --;
            if(NotificacionConectado[i] <= 1)
            {
                PlayerTextDrawHide(i, NotiConnect[i][0]);
                PlayerTextDrawHide(i, NotiConnect[i][1]);
                PlayerTextDrawHide(i, NotiConnect[i][2]);
                PlayerTextDrawHide(i, NotiConnect[i][3]);
                PlayerTextDrawHide(i, NotiConnect[i][4]);
            }
        }
    }
    new Float:health, carid, arrDamage[4];
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        carid = GetPlayerVehicleID(playerid);
        iVehicle[playerid] = GetPlayerVehicleID(playerid);
        for(new s=0;s<20;s++)
        {
            if(SpikeStrips[s][sX] != 0)
            {
                if(VehicleToPoint( 3.0, carid, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
                {
                    GetVehicleDamageStatus(carid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
                    arrDamage[3] = encode_tires(1, 1, 1, 1);
                    UpdateVehicleDamageStatus(carid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
                }
            }
        }
        GetVehicleHealth(iVehicle[playerid], health);
        if(health < 375.0)
        {
            if(vehaveriado[carid] == 1) return 1;
            SetVehicleHealth(iVehicle[playerid], 375.0);
            vehaveriado[carid] = 1;
            GameTextForPlayer(playerid, "~r~MOTOR AVERIADO", 2500, 3);
            GetVehicleParamsEx(iVehicle[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(iVehicle[playerid], 0, lights, alarm, doors, bonnet, boot, objective);
            averiado[carid] = 1;
            MotorAuto[carid] = 0;
            SendClientMessage(playerid,-1,"El motor dejó de funcionar, llama a un mecánico. {DBED15}/servicio mecanico");
            if(EnCarreras[playerid] > 0 && VehiculoCarrera[EnCarreras[playerid]-1] == iVehicle[playerid])
            {
                SacarCarrera(playerid, 2);
                if(ParticipantesCarrera <= 0)
                {
                    ResetearCarrera();
                    HabilitarCarreras = 0;
                    Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{FF3300}Boleteria cerrada\n{DBED16}Horarios de los eventos: {FFFFFF}5hs,11hs,17hs,23hs");
                }
                SendClientMessage(playerid,-1,"Has sido descalificado por destruir el vehículo.");
            }
        }
        if(VehicleFuel[iVehicle[playerid]] == 0 && !BICI(iVehicle[playerid]) && MensajeSinGasoEnviado[playerid] == 0)
        {
            GameTextForPlayer(playerid, "~r~Sin combustible!", 2500, 3);
            GetVehicleParamsEx(iVehicle[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(iVehicle[playerid], 0, lights, alarm, doors, bonnet, boot, objective);
            MotorAuto[carid] = 0;
            MensajeSinGasoEnviado[playerid] = 1;
        }
        else if(health > 375.0 && averiado[carid] == 1) averiado[carid] = 0;
    }
    return 1;
}
task ActivarEventos[500]()
{
	new dia,mes,ano;
	getdate(ano,mes,dia);
	if(HallX == false && mes == 10 && dia >= 16 && dia <= 31) EventoHall(true);
	else if(NidadX == false && mes == 12 && dia > 24) EventoNavi(true);
	else if(EventoActivo == false && mes == 10 && dia >= 1 && dia <= 15) EventoFC(true);
	else
	{
	    if(HallX == true && mes != 10 && dia != 16 && dia != 31) EventoHall(false);
	    else if(NidadX == true && mes != 12 && dia != 25) EventoNavi(false);
	    else if(EventoActivo == true && mes != 10 && dia != 1 && dia != 15) EventoFC(false);
	}
	return 1;
}
ptask TimerDeMinuto[1000 * 60](i)
{
    if(JugadorLogeado[i] == 1)
    {
        if(GetPlayerScore(i) > 0)
        {
            if(PlayerInfo[i][pNivel] == 1)
            {
                new Float:X,Float:Y,Float:Z;
                GetPlayerPos(i,X,Y,Z);
                if(PosPDX[i] != X || PosPDY[i] != Y || PosPDZ[i] != Z)
                {
                    GetPlayerPos(i,PosPDX[i],PosPDY[i],PosPDZ[i]);
                    PlayerInfo[i][TiempoPD] ++;
                }
            }
            else PlayerInfo[i][TiempoPD] ++;
        }
        gettime(Hora, Minuto);
        SetPlayerTime(i,Hora,Minuto);
        if(ViajeAvion[i] == 1)
        {
            new string[50], llegaavion;
            llegaavion = 301 - contadoravion;
            if(llegaavion < 60) format(string, sizeof(string), "El avión arribará en {00CC00}%ds", llegaavion);
            else if(llegaavion >= 60) format(string, sizeof(string), "El avión arribará en {00CC00}%dm %ds", llegaavion/60, llegaavion%(60));
            SendClientMessage(i, -1, string);
        }
        for(new u = 0; u < GetVehiclePoolSize(); u++)
		{
			new tipo = 0;
			if(!AVION(u) && !BOTE(u) && !CAMION(u))
			{
				if(IsVehicleInArea(u, -1896.8235, -1375.4326, -240.8752, 354.2918) || IsVehicleInArea(u, -1755,-1552,-193.5,77.5)) tipo = 4; // Easter Basin docks
				if(IsVehicleInArea(u, -597.9696,-536.7734, 2337.8618, 2350.0432)) tipo = 5; // Castillo del diablo
				if(tipo > 0)
				{
					for(new a = 0; a < MAX_PAUTOS; a++)
					{
						if(!IsValidVehicle(autos[a][i])) continue;
						if(u == autos[a][i] && AutoOcupado(u) == 0) Auto(i,a,tipo);
					}
				}
			}
		}
    }
    return 1;
}

ptask TimerGlobalPlayerid[1000](playerid)
{
    TimerPlantas();
    for(new i = 1; i < MAX_PEDIDOS; i++)
    {
        new DB_Query[256];
        if(PEDIDO_INFO[i][pi_ID] != 0 && PEDIDO_INFO[i][pi_ESTADO] == 0)
        {
            if((PEDIDO_INFO[i][pt_TIME] - gettime()) < 0)
            {
                PEDIDO_INFO[i][pi_ID] = 0;
                PEDIDO_INFO[i][pi_ESTADO] = 1;
                mysql_format(handle_db, DB_Query, sizeof(DB_Query), "DELETE FROM `pedidos` WHERE `ID` = '%d'", PEDIDO_INFO[i][pi_DB]);
                mysql_query(handle_db, DB_Query, false);
                CargarPedidos();
            }
        }
    }
    gettime(Hora, Minuto, Segundo);
    if(Minuto == 2 && PaydayDado == 0){PayDay(40);PaydayDado = 1;}
    if(Minuto == 3 && PaydayDado == 1){PaydayDado = 0;}
    if(TiempoAvion > 0){TiempoAvion --;}
    new hora,minuto,segundos;
    gettime(hora,minuto,segundos);
    if(JugadorLogeado[playerid] == 1)
    {
        if(gettime() > Tiempos[playerid][pTIME_LORO] && PlayerTemp[playerid][LoroHabla])
        {
            for(new i = 0; i < MAX_PTOYS; i ++)
            {
                if(PlayerToys[playerid][i][pUsando] && PlayerTemp[playerid][@Specteando] == 0)
                {
                    if(PlayerToys[playerid][i][pModelID] == 19078 || PlayerToys[playerid][i][pModelID] == 19079)
                    {
						new chatadmin[128],chatadmin2[128];
						format(chatadmin,sizeof(chatadmin),"Loro de %s dice: %s",PlayerInfo[playerid][Nickname], FraseLoro[playerid]);
						ProxDetector(15.0, playerid, chatadmin, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF);
						format(chatadmin2,sizeof(chatadmin2),"(Loro): ¡%s!", FraseLoro[playerid]);
						SetPlayerChatBubble(playerid,chatadmin2,COLOR_WHITE,30.0,6000);
                        Tiempos[playerid][pTIME_LORO] = gettime() + 90;
                    }
                }
            }
		}
        foreach(new x : Player)
        {
            if((Tiempos[playerid][p_REF]) && (Tiempos[playerid][p_TIME_REF] > gettime()))
            {
                if(PlayerInfo[x][pFaccion] == 1)
                {
                    if(PlayerInfo[x][pFaccion] == PlayerInfo[playerid][pFaccion]) SetPlayerMarkerForPlayer(x, playerid, COLOR_POLICIAREF);
                }
                else if(PlayerInfo[x][pFaccion] > 1)
                {
                    if(PlayerInfo[x][pFaccion] == PlayerInfo[playerid][pFaccion]) SetPlayerMarkerForPlayer(x, playerid, 0xFF8C00FF);
                }
            }
            else if((Tiempos[playerid][p_REF]) && ((Tiempos[playerid][p_TIME_REF] - gettime()) < 0))
            {
                Tiempos[playerid][p_REF] = false;
                if(PlayerInfo[x][pFaccion] == 1)
                {
                    if(PlayerInfo[x][pFaccion] == PlayerInfo[playerid][pFaccion]) SetPlayerMarkerForPlayer(x, playerid, TEAM_BLUE_COLOR);
                }
                else if(PlayerInfo[x][pFaccion] > 1)
                {
                    if(PlayerInfo[x][pFaccion] == PlayerInfo[playerid][pFaccion]) SetPlayerMarkerForPlayer(x, playerid, COLORCARGO0);
                }
            }
        }
        if(!Tiempos[playerid][p_REF] && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, COLOR_POLICIA);
        new Float:player_health,Float:player_armour;
	    GetPlayerHealth(playerid, player_health);
	    GetPlayerArmour(playerid, player_armour);
		if(gettime() > Tiempos[playerid][TIMER_VIDA])
		{
			if(player_health > PlayerInfo[playerid][j_HEALTH] + 10.0) SetPlayerHealthEx(playerid, PlayerInfo[playerid][j_HEALTH]);
			else if(player_health < PlayerInfo[playerid][j_HEALTH]) PlayerInfo[playerid][j_HEALTH] = player_health;
		}
	    if(gettime() > Tiempos[playerid][TIMER_CHALECO])
		{
			if(player_armour > PlayerInfo[playerid][j_ARMOUR] + 10.0) SetPlayerArmourEx(playerid, PlayerInfo[playerid][j_ARMOUR]);
			else if(player_armour < PlayerInfo[playerid][j_ARMOUR]) PlayerInfo[playerid][j_ARMOUR] = player_armour;
		}
		if(GetPlayerWeapon(playerid) == 4)
		{
			new Animacionn[32], Libreriaa[32];
			GetAnimationName(GetPlayerAnimationIndex(playerid), Libreriaa, sizeof(Libreriaa), Animacionn, sizeof(Animacionn));
			if(strcmp(Libreriaa,"KNIFE") == 0 && strcmp(Animacionn,"KILL_PARTIAL") == 0)
			{
				SetPlayerArmedWeapon(playerid, 0);
				ClearAnimations(playerid);
			}
		}
        if(AvisosAuto[playerid] > 0) AvisosAuto[playerid]--;
        if((Tiempos[playerid][Entrando] - gettime()) <= 0)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new vehicleid = GetPlayerVehicleID(playerid), surf = GetPlayerSurfingVehicleID(playerid), surf_object = GetPlayerSurfingObjectID(playerid);
                if((GetVehicleSpeed(vehicleid) > (GetVehicleTopSpeed(vehicleid)+160)) && !AVION(vehicleid) && surf == INVALID_VEHICLE_ID && surf_object == INVALID_OBJECT_ID && MotorAuto[vehicleid] > 0)
                {
                    if(Tiempos[playerid][TiempoAntiC] > gettime()) return 1;
                    Tiempos[playerid][TiempoAntiC] = gettime() + 2;
                    new Vel = VelocidadMaxAuto(GetVehicleModel(vehicleid));
                    new string[256];
                    format(string, 256,"{FFFFFF}Posible cheat de choque {FF3300}%s(ID: %d){FFFFFF} - Velocidad: %d/%d",PlayerInfo[playerid][Nickname], playerid, GetVehicleSpeed(vehicleid), Vel);
                    MensajeAdmin(0xa9c4e4cc, string, 3);
                    if(PlayerInfo[playerid][pNivel] == 2)
                    {
                        NoTeleportHack(playerid);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(playerid, X, Y, Z);
                        SendClientMessage(playerid, -1, "{FFFFFF}Saliste disparado del vehículo a causa de un fuerte impacto.");
                        RemovePlayerFromVehicle(playerid);
                        SetPlayerPosEx(playerid, X, Y, Z+5);
                    }
                }
            }
        }
        if(TrenUno > 0) Barreras(TrenUno,1);
        if(TrenDos > 0) Barreras(TrenDos,2);
        if(TrenTres > 0) Barreras(TrenTres,3);
        if(TrenCuatro > 0) Barreras(TrenCuatro,4);
        if(PlayerInfo[playerid][pTiempoCarcel] >= 0 && Jail[playerid] == 1)
        {
            if(EstaEnBus[playerid] == 0)
            {
                if(!IsPlayerPaused(playerid)) PlayerInfo[playerid][pTiempoCarcel] --;
                if(PlayerInfo[playerid][pTiempoCarcel] <= 0)
                {
                    SendClientMessage(playerid,-1,"{11FF00}Cumpliste tu condena{FFFFFF}, quedas en libertad.");
                    PlayerInfo[playerid][pTiempoCarcel] = 0;
                    PlayerInfo[playerid][pTiempoJail] = 0;
                    Esposando[playerid] = 0;
                    CeldaJugador[playerid] = 0;
                    Jail[playerid] = 0;
                    San[playerid] = 0;
                    CargarMapeosEx(playerid);
                    if(EstaDomiciliaria[playerid] == 0)
                    {
                        switch(PlayerInfo[playerid][pTipoCarcel])
                        {
                            case 1:
                            {
                                new donde = random(6);
                                switch(donde)
                                {
                                    case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,1);
                                    case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,1);
                                    case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,1);
                                    case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,1);
                                    case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,1);
                                    case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,1);
                                }
                            }
                            case 2:
                            {
                                new donde = random(6);
                                switch(donde)
                                {
                                    case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,5);
                                    case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,5);
                                    case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,5);
                                    case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,5);
                                    case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,5);
                                    case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,5);
                                }
                            }
                            case 3:
                            {
                                new donde = random(6);
                                switch(donde)
                                {
                                    case 0: SetPosEx(playerid, 212.4893,158.3311,1003.0300,265.8078,3,7);
                                    case 1: SetPosEx(playerid, 212.3264,157.0358,1003.0300,270.1945,3,7);
                                    case 2: SetPosEx(playerid, 212.6126,159.4301,1003.0300,270.5078,3,7);
                                    case 3: SetPosEx(playerid, 211.6316,159.2158,1003.0234,270.5078,3,7);
                                    case 4: SetPosEx(playerid, 211.3360,158.4849,1003.0300,270.5078,3,7);
                                    case 5: SetPosEx(playerid, 211.4012,157.4245,1003.0300,270.5078,3,7);
                                }
                            }
                            case 4:
                            {
                                new donde = random(6);
                                switch(donde)
                                {
                                    case 0: SetPosEx(playerid, 292.9334,1419.6272,10.1358,263.0111,0,0);
                                    case 1: SetPosEx(playerid, 292.3492,1418.9880,10.1810,263.0111,0,0);
                                    case 2: SetPosEx(playerid, 293.0168,1420.9564,10.1436,263.0111,0,0);
                                    case 3: SetPosEx(playerid, 293.6794,1419.9397,10.0793,263.0111,0,0);
                                    case 4: SetPosEx(playerid, 293.8986,1418.5115,10.0506,263.0111,0,0);
                                    case 5: SetPosEx(playerid, 294.7386,1419.3837,9.9930,263.0111,0,0);
                                }
                            }
                        }
                    }
                    EstaDomiciliaria[playerid] = 0;
                    PlayerInfo[playerid][pTipoCarcel] = 0;
                }
            }
        }
        if(PlayerInfo[playerid][pTiempoJail] >= 0 && San[playerid] == 1)
        {
            if(!IsPlayerPaused(playerid)) PlayerInfo[playerid][pTiempoJail] --;
            if(PlayerInfo[playerid][pTiempoJail] <= 0)
            {
                Jail[playerid] = 0;
                PlayerInfo[playerid][pTiempoCarcel] = 0;
                PlayerInfo[playerid][pTiempoJail] = 0;
                San[playerid] = 0;
                new donde = random(6);
                switch(donde)
                {
                    case 0: SetPosEx(playerid, 1443.8561,-1663.9950,13.5530,91.1813,0,0);
                    case 1: SetPosEx(playerid, 1443.4794,-1665.1669,13.5530,91.1813,0,0);
                    case 2: SetPosEx(playerid, 1443.6100,-1666.9442,13.5530,91.1813,0,0);
                    case 3: SetPosEx(playerid, 1445.0105,-1666.2917,13.5530,91.1813,0,0);
                    case 4: SetPosEx(playerid, 1444.9506,-1664.9329,13.5530,91.1813,0,0);
                    case 5: SetPosEx(playerid, 1444.5131,-1663.3024,13.5530,91.1813,0,0);
                }
                SendClientMessage(playerid, -1, "Has cumplido tu tiempo de sancion, ten en cuenta las reglas para no volver a ser sancionado.");
            }
        }
        if(Tiempos[playerid][TiempoCargo] > 0)
        {
            Tiempos[playerid][TiempoCargo] --;
            if(Tiempos[playerid][TiempoCargo] == 0)
            {
                if(PlayerInfo[playerid][pCargos] == 2)
                {
                    new value = 0;
                    if(RoboTienda[playerid] == 1)
                    {
                        foreach(new c : Player)
                        {
                            if(PlayerInfo[c][pFaccion] == 1 && PlayerInfo[c][pDuty] == 1 && EstaEnP(playerid,c,30.00))
                            {
                                Tiempos[playerid][TiempoCargo] = 60;
                                SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} está muy cerca, {FF0000}tienes que escapar{FFFFFF} para perder los cargos.");
                            }
                            else value = 1;
                        }
                        if(value == 1)
                        {
                            RoboTienda[playerid] = 0;
                            SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} dejó de buscarte, ahora {00CC00}puedes robar{FFFFFF} otro negocio.");
                            PlayerInfo[playerid][pCargos] = 0;
                            ActualizarRadar();
                            SetPlayerWantedLevel(playerid,PlayerInfo[playerid][pCargos]);
                        }
                    }
                    else
                    {
                        PlayerInfo[playerid][pCargos] = 0;
                        ActualizarRadar();
                        SetPlayerWantedLevel(playerid,PlayerInfo[playerid][pCargos]);
                        CagoSeguro[playerid] = 0;
                    }
                }
            }
        }
        if(EnSalonEvento(playerid) && Alquilado == true && Boleto[playerid] == false)
        {
            if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 1)
            {
                NoTeleportHack(playerid);
                SendClientMessage(playerid,-1,"Los guardias del salón te expulsaron por no haber pagado la entrada.");
                SetPlayerPosEx(playerid,1423.4301,-1180.1801,25.9922);
                SetPlayerVirtualWorld(playerid,0);
                SetPlayerInterior(playerid,0);
            }
        }
        if(EnSalonEvento(playerid) && Escuchando[playerid] == false && Alquilado == true && PlayerInfo[playerid][pSonidos] == 1)
        {
            Escuchando[playerid] = true;
        }
        else if(!EnSalonEvento(playerid) && Escuchando[playerid] == true)
        {
            Escuchando[playerid] = false;
            StopAudioStreamForPlayer(playerid);
        }
        if(JugadorLogeado[playerid] == 1)
        {
            if(Curando[playerid] == 1)
            {
                if(PlayerInfo[playerid][j_HEALTH] >= 60)
                {
                    Curando[playerid] = 0;
                    SetPlayerHealthEx(playerid, 60);
                    SetTimerEx("ApareceHospital2", 1000, false, "d", playerid);
                }
                else GivePlayerHealth(playerid, 2.0);
            }
        }
    }
	if(EmpezoCarreraP[playerid] > 0)
	{
		if(EmpezoCarrera == 1)
		{
			if(EnCarreras[playerid] > 0 && IsPlayerConnected(playerid))
			{
				Tiempos[playerid][TiempoCarrera] ++;
				new string[50];
				format(string,sizeof(string),"%d:%s",Tiempos[playerid][TiempoCarrera]/60,NumeroEntero(Tiempos[playerid][TiempoCarrera]%(60)));
				PlayerTextDrawSetString(playerid,CarreraT[playerid][2],string);
			}
		}
	}
    if(Tiempos[playerid][TiempoAnuncio] > 0) Tiempos[playerid][TiempoAnuncio]--;
    if(Tiempos[playerid][TiempoDuda] > 0) Tiempos[playerid][TiempoDuda]--;
    if(TiempoEntrada[playerid] > 0) TiempoEntrada[playerid]--;
    if(Tiempos[playerid][TiempoVenderJ] > 0) Tiempos[playerid][TiempoVenderJ]--;
    if(Tiempos[playerid][ParticiparFabrica] > 0) Tiempos[playerid][ParticiparFabrica] --;
    if(HornoUsarP[playerid] > 0) HornoUsarP[playerid]--;
    if(Tiempos[playerid][TiempoBolso] > 0) Tiempos[playerid][TiempoBolso]--;
    if(PruebaOnline[playerid] == true) Tiempos[playerid][TiempoAcademia]++;
    if(TiempoReparar[playerid] > 0) TiempoReparar[playerid]--;
    if(YoLlame[playerid] == 1) MinutoLlamada[playerid] += 1;
    if(Tiempos[playerid][TiempoAgresor] > 0 && Agresor[playerid] != INVALID_PLAYER_ID) Tiempos[playerid][TiempoAgresor]--;
    if(JustReported[playerid] != 0) JustReported[playerid]--;
    else if(Tiempos[playerid][TiempoAgresor] <= 0 && Agresor[playerid] != INVALID_PLAYER_ID) Tiempos[playerid][TiempoAgresor] = 0,Agresor[playerid] = INVALID_PLAYER_ID;
    new bool:habilitar = false;
    getdate(hora,minuto,segundos);
    if(hora == 5 && minuto == 0 && HabilitarCarreras == 0) habilitar = true;
    else if(hora == 11 && minuto == 0 && HabilitarCarreras == 0) habilitar = true;
    else if(hora == 17 && minuto == 0 && HabilitarCarreras == 0) habilitar = true;
    else if(hora == 23 && minuto == 0 && HabilitarCarreras == 0) habilitar = true;
    if(habilitar == true)
    {
		ResetearCarrera();
		HabilitarCarreras = 1;
		Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{00CC00}Boleteria abierta\n{FFFFFF}Costo de la entrada {00CC00}$600\n{DBED15}/comprar entrada");
		ConteoCarrera = 610;
		SetTimer("EmpezarCarrera",60*1000,0);
		new string[250];
		format(string,sizeof(string),"En {00CC00}%d minutos{FFFFFF} comienza la carrera, ya se inscribieron {DBED15}%d{FFFFFF} jugadores",ConteoCarrera/60,ParticipantesCarrera);
		foreach(new i : Player) if(PlayerToPoint(i,250,-1408.8688,-304.5082,1056.4351) && GetPlayerInterior(i) == 7) SendClientMessage(i,-1,string);
	}
    return 1;
}
public Quitar1Cargo(playerid)
{
    if(PlayerInfo[playerid][pCargos] == 1 && CagoSeguro[playerid] == 1)
    {
        PlayerInfo[playerid][pCargos] --;
        SetPlayerWantedLevel(playerid,PlayerInfo[playerid][pCargos]);
        CagoSeguro[playerid] = 0;
        ActualizarRadar();
        SendClientMessage(playerid, COLOR_WHITE, "Tu nivel de búsqueda se redujo.");
    }
    return 1;
}
public Quitar2Cargos(playerid)
{
    if(PlayerInfo[playerid][pCargos] == 2 && RoboTienda[playerid] == 1)
    {
        PlayerInfo[playerid][pCargos] = 0;
        SetPlayerWantedLevel(playerid,PlayerInfo[playerid][pCargos]);
        RoboTienda[playerid] = 0;
        ActualizarRadar();
        SendClientMessage(playerid, COLOR_WHITE, "La {3399FF}policía{FFFFFF} dejó de buscarte, ahora {00CC00}puedes robar{FFFFFF} otro negocio.");
    }
    return 1;
}
public OnPlayerConnect(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerConnect) PlayerID: %d", playerid);
    #endif
    EnablePlayerCameraTarget(playerid, true);
    GetPlayerIp(playerid, PlayerInfo[playerid][IP], 32);
    new nombrefaster[32];
    randomString(nombrefaster, 15);
    if(!IsPlayerNPC(playerid))
    {
        LimpiarCuenta(playerid);
  		Progressbar[playerid][Sed]  			= 	CreatePlayerProgressBar(playerid, 547.299682, 35.30001, 59.300001, 5.099998, 394578431, 100);
		Progressbar[playerid][Hambre]			= 	CreatePlayerProgressBar(playerid, 547.299682, 24.199985, 59.300001, 5.099998, -8912641, 100);
		Progressbar[playerid][Experiencia]		= 	CreatePlayerProgressBar(playerid, 1.089, 444.50, 640.199951, 1.500001, 0xfce679FF, 100.0);
        Progressbar[playerid][Velocimetro]      =   CreatePlayerProgressBar(playerid, 551.000000, 385.000000, 68.000000, 5.500000, -1, 100); 
        Progressbar[playerid][Combustible]      =   CreatePlayerProgressBar(playerid, 551.000000, 411.000000, 68.000000, 5.500000, -1, 100); 
        Progressbar[playerid][Camionero]        =   CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
        Progressbar[playerid][Cosecha]          =   CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
        Progressbar[playerid][ReparandoBar]     =   CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
        Progressbar[playerid][Picar]            =   CreatePlayerProgressBar(playerid, 261.0000, 416.00, 110.50, 3.50, 16711935, 10.0);
        Progressbar[playerid][Revisar]          =   CreatePlayerProgressBar(playerid, 277.000000, 428.000000, 94.500000, 2.199999, 16711935, 100);

		format(PlayerInfo[playerid][Nickname],128,"%s",nombrefaster);
        format(PlayerInfo[playerid][Nickname],128,"%s",PlayerName(playerid));
        
        new country[30],city[30];
        GetPlayerCountry(playerid, country, sizeof(country));
        GetPlayerCity(playerid, city, sizeof(city));
        LCHAT[playerid] = SetTimerEx("TCHAT",1000,true,"d",playerid);
        LoginTimer[playerid] = SetTimerEx("TimerLogin",segundos(SECONDS_TO_LOGIN),0,"d",playerid);
        TextDrawShowForPlayer(playerid, CN);
        TextDrawShowForPlayer(playerid, CN2);
        TextDrawShowForPlayer(playerid, CN3);
        TextDrawShowForPlayer(playerid, CN4);
        TextDrawHideForPlayer(playerid, Sangre);
        TextDrawHideForPlayer(playerid, Sangre2);
        TextDrawHideForPlayer(playerid, NewPlayer[2]);
        TextDrawHideForPlayer(playerid, NewPlayer[0]);
        if(IsPlayerConnected(playerid))
        {
            new Query[90];
            mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username`='%s' LIMIT 1", PlayerInfo[playerid][Nickname]);
            mysql_tquery(handle_db, Query, "OnPlayerDataLoaded", "d", playerid);
        }
        gettime(Hora, Minuto);
        SetPlayerTime(playerid,Hora,Minuto);
        LimpiarChat(playerid, 25, 1);
        CrearTextdrawPlayer(playerid);
        gettime(Hora, Minuto);
        SetPlayerTime(playerid,Hora,Minuto);
        return 1;
    }
    return 1;
}
stock GetYesOrNoConfig(var)
{
    new str[32];
    switch(var)
    {
        case 0: str = "> {FA0505}No{FFFFFF}";
        default: str = "< {2BA30A}Sí{FFFFFF}";
    }
    return str;
}

DestroyVehicleEx(vehicleid)
{
	if(DestroyVehicleEx(vehicleid))
	{
		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_OBJETOS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}
		return true;
	}
	return false;
}

EntrarInterior(playerid)
{
	if(TiempoEntrada[playerid] != 0) return 1;
    if(PlayerInfo[playerid][pTiempoCarcel] > 0) return 1;
    for(new fb = 0; fb < MAX_FABRICAS; fb++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,Fabricas[fb][pEntradaX],Fabricas[fb][pEntradaY],Fabricas[fb][pEntradaZ]))
		{
		    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
			if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFaccion] == Fabricas[fb][pBanda] && PlayerInfo[playerid][pFaccion] != 0  && Fabricas[fb][Interferida] == 0 || Fabricas[fb][pBanda] > 0 && Fabricas[fb][pSoborno]+86400 <= gettime() && PlayerInfo[playerid][pDuty] == 1)
			{
				if(GetPlayerVirtualWorld(playerid) == 0)
				{
					if(PlayerInfo[playerid][pCargos] >= 2)
					{
						foreach(new i : Player)
						{
							if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pDuty] == 1 && EstaEnP(playerid,i,30.00)) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
						}
					}
					SetPlayerPos(playerid,Fabricas[fb][pSalidaX],Fabricas[fb][pSalidaY],Fabricas[fb][pSalidaZ]);
					SetPlayerFacingAngle(playerid,86.5570);
					SetPlayerInterior(playerid,Fabricas[fb][pInt]);
					SetPlayerVirtualWorld(playerid,Fabricas[fb][pVW]);
					CargarMapeosEx(playerid);
				}
			}
		}
	}
    for(new et = 0; et < MAX_GARAGES; et++)
    {
        if(Estacionamientos[et][eEnUso] > 0)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
            {
                if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[et][PosX], Estacionamientos[et][PosY], Estacionamientos[et][PosZ]))
                {
                    SetPosEx(playerid,Estacionamientos[et][SalidX], Estacionamientos[et][SalidY], Estacionamientos[et][SalidZ],Estacionamientos[et][SalidA],Estacionamientos[et][eInterior], Estacionamientos[et][eMundoVirtual]);
                    CargarMapeosEx(playerid);
                }
            }
        }
    }
    if(PlayerInfo[playerid][pTiempoJail] == 0)
    {
        for(new c = 0; c < MAX_PROPIEDADES; c++)
        {
            if(PropInfo[c][pEnUso] == 1)
            {
                if(IsPlayerInRangeOfPoint(playerid,2.0,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]))
                {
                    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
                    if(GetPlayerVirtualWorld(playerid) == 0)
                    {
                        if(PlayerInfo[playerid][pCargos] >= 2)
                        {
                            foreach(new i : Player)
                            {
                                if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pDuty] == 1 && EstaEnP(playerid,i,30.00)) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
                            }
                        }
                        if(PlayerInfo[playerid][pID] != PropInfo[c][pIDPropietario] && PropInfo[c][pAbierta] == 0) return SendClientMessage(playerid,-1,"La propiedad está cerrada, solo el dueño puede entrar.");
                        if(PropInfo[c][pAbierta] == 0 && PropInfo[c][pIDPropietario] == PlayerInfo[playerid][pID]) SendClientMessage(playerid,-1,"La puerta se encuentra cerrada, escribe {DBED15}/abrir puerta{FFFFFF} para abrirla.");
                        SetPosEntrar(playerid,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS],PropInfo[c][pPosAS],PropInfo[c][pInteriorID],PropInfo[c][pVW]);
                        if(PropInfo[c][pEmisora] != 0)
                        {
                            foreach(new id : Player)
                            {
                                if(Emisoras[id][CabinaOcupada] == PropInfo[c][pEmisora])
                                {
                                    if(Emisoras[id][TransEmisora] == 1)
                                    {
                                        MensajeEx(playerid, 0xFFFFFFFF, "{FFFFFF}Escuchando radio {DBED15}%s", Emisoras[id][NombreEmisora]);
                                        new stringa[70];
                                        format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
                                        ReproducirEmisora(playerid, PropInfo[c][pEmisora], stringa);
                                    }
                                }
                            }
                        }
                    }
                }
                if(IsPlayerInRangeOfPoint(playerid,2.0, PropInfo[c][pRoperoX],PropInfo[c][pRoperoY],PropInfo[c][pRoperoZ]) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
                    if(PlayerInfo[playerid][pID] == PropInfo[c][pIDPropietario] && PropInfo[c][pRoperoAbierto] == 0)
                    {
                        AccionesRol(playerid,"abre el ropero, entra y lo cierra rápidamente.", 20);
                        SendClientMessage(playerid,-1,"El ropero está cerrado, usa {DBED15}/abrir ropero{FFFFFF} para abrirlo.");
                    }
                    if(PlayerInfo[playerid][pID] != PropInfo[c][pIDPropietario] && PropInfo[c][pRoperoAbierto] == 0) return SendClientMessage(playerid,-1,"El ropero está cerrado.");
                    CargarMapeosEx(playerid);
                    NoTeleportHack(playerid);
                    SetPosEntrar(playerid,254.2685,-41.5420,1002.0308,267.0000,14,GetPlayerVirtualWorld(playerid));
                }
                if(IsPlayerInRangeOfPoint(playerid,3.0,300.3367,311.7175,999.1484) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW] && GetPlayerInterior(playerid) == 4)
                {
                    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
                    {
                        SetPosEntrar(playerid,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS],PropInfo[c][pPosAS],PropInfo[c][pInteriorID],PropInfo[c][pVW]);
                        return 1;
                    }
                    else SendClientMessage(playerid,-1,"Necesitas estar parado en la puerta para entrar.");
                }
            }
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1094.0945,1597.0083,12.5469)) // Estadio
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        if(HabilitarCarreras == 0) return SendClientMessage(playerid,-1,"El estadio está cerrado, consulta los horarios en la boletería.");
        if(PlayerInfo[playerid][pNivel] >= 4)
        {
            if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al estadio.");
            if(EntradaCarrera[playerid] == false) return SendClientMessage(playerid,-1,"Debes comprar una entrada en la boleteria primero.");
            if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
            SetPosEntrar(playerid,-1387.9806,-324.9726,1052.0834,3.5876,7,7);
            CargarMapeosEx(playerid);
            Boleto[playerid] = false;
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 649.0013,-1360.7864,13.5868))  // Estudio de Radio y Television
    {
        if(PlayerInfo[playerid][pNivel] == 1 && PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid,-1,"Necesitas aumentar de nivel para ingresar al Estudio de Radio y Televisión.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al Estudio de radio y Televisión.");
        return SetPosEntrar(playerid, 387.4330,194.3359,1040.1078,185.9930,5,5);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1376.2739,-1795.0626,13.5472))  // Tienda DP
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		if(Armados(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
		if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a la tienda..");
        SetPosEntrar(playerid, -1069.1005,-2568.5393,2876.4106,270.9951,50,50);
        CargarMapeosEx(playerid);
		SetCameraBehindPlayer(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1204.8096,12.6643,1000.9219)) return MostrarMenuBailarinas(playerid); //Puticlub salón privado
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1742.9551,-1864.2202,13.5741)) return SetPosEntrar(playerid,-2029.7441,-118.6951,1038.8187,355.6106,5,5);  // Unity Station
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2229.6833,-1721.4192,13.5627)) return SetPosEx(playerid,772.2999,-5.2435,1000.7286,0,5,0);  // GYM Ganton
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2492.1536,924.8977,11.0234)) return SetPosEntrar(playerid,-2191.3962,-82.6744,1016.4689,90.0000,1,0);  // Iglesia LV Entrada
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2014.8400,1150.4700,10.9203)) return SetPosEntrar(playerid,966.1780,-53.2595,1001.2200,90.0000,3,0); //Burdel
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 824.8679,860.2719,12.3028)) return SetPosEntrar(playerid,-229.1293,1401.1205,27.7656,0,18,0); // Bar Cantera
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1820.8500,-125.7650,5.7484)) return SetPosEntrar(playerid,502.0160,-67.6595,998.7578,180,11,3); //bar sf
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -49.9430,-269.3648,6.6332)) // ALBERGUE ENTRAR
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        if(Armados(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
        SetPosEntrar(playerid,2332.5701,-1254.7500,1026.2899,0.0000,1,19);
        CargarMapeosEx(playerid);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1836.9700,-1682.4700,13.4258)) // ALHAMBRA ENTRAR
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        if(Armados(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
        SetPosEntrar(playerid,493.3470,-24.8391,1000.7800,90.0000,17,3);
        CargarMapeosEx(playerid);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2014.8101,1107.0100,10.9203)) // Club Striptease
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        if(Armados(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
        for(new i = 0; i < 7; i++) DineroTirado[playerid][i] = 0;
        SetPosEntrar(playerid,1204.8600,-13.8459,1001.0200,0.0000,2,5);
        CargarMapeosEx(playerid);
        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,276.2080,122.0958,1004.6172) && PlayerInfo[playerid][pFaccion] == 1)   // Vestuario LSPD - SFPD
    {
        switch(GetPlayerVirtualWorld(playerid)) {
            case 1: SetPosEntrar(playerid,251.20,76.40,1003.64,180,6,2);
            case 5: SetPosEntrar(playerid,251.20,76.40,1003.64,180,6,6);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2507.3855,1242.2521,10.8270)) return SetPosEntrar(playerid, 502.0160,-67.6595,998.8580,180.0000,11,6); // Bar LS
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 681.6400,-473.3480,16.6363)) return SetPosEntrar(playerid, 502.0160,-67.6595,998.8580,180.0000,11,16); // Bar Dillimore
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2310.0757,-1643.5259,14.8270)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,9); // Bar 88
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2348.5005,-1372.6783,24.3984)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,12);// Bar ganton
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -89.6105,1378.2312,10.4698)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,15); // Bar Lilprobe
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2112.9055,-1211.4561,23.9629)) return SetPosEntrar(playerid,203.9241,-50.6627,1001.8047,2.5871,1,66); // SubUrban
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1377.0605,1152.7566,10.8203)) return SetPosEntrar(playerid,2594.3301,1649.7200,1087.5581,90.0000,1,5);// RS Haul
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -384.8158,2206.0991,42.4235)) return SetPosEntrar(playerid,-376.4527,2196.6853,25.4105,92.0502,1,1);  // Oficina Minero
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -550.2115,2347.3640,76.3864)) return SetPosEntrar(playerid,269.1789,293.6963,999.8400,353.5747,1,1);  // Vestuario Minero
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1451.6393,-2287.0862,13.5469)) return SetPosEntrar(playerid,1167.2200,-14.5555,1020.7500,0.0000,1,1);  // Escuela de Piloto
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2362.7698,2306.3025,8.1406))   // Academia
    {
        if(PlayerInfo[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Necesitas ser {00CC00}nivel 4{FFFFFF} para poder entrar.");
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado a la academia.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        SetPosEntrar(playerid,663.4366,-202.8868,1276.7941,97.8041,1,9);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2107.7473,2165.5085,10.8203)) return SetPosEntrar(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,1); //Ferreteria 1
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2861.2581,2430.7432,11.0690)) return SetPosEx(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,2); //Ferreteria 2
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1480.9843,2591.6638,55.8359)) return SetPosEx(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,3); //Ferreteria 3
    if(IsPlayerInRangeOfPoint(playerid,2.0,1423.4301,-1180.1801,25.9922))   //Salon de eventos
    {
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al salón de eventos.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        SetPosEntrar(playerid,-1275.5626,2108.7246,1246.5457,263.2210,13,1);
    }
    if(IsPlayerInRangeOfPoint(playerid,5.0,1410.7946,-1228.7570,13.5469))   //Salon de eventos - vehiculos
    {
        if(TipoEvento != 3) return SendClientMessage(playerid,-1,"Solamente podrán ingresar vehículos al salón cuando haya una exposición.");
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Esta entrada es solamente para entrar en vehículo.");
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al salón de eventos.");
        SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 13);
        SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 1);
        SetVehiclePosEx(GetPlayerVehicleID(playerid), -1165.8710,2118.6238,1246.5457);
        SetVehicleZAngle(GetPlayerVehicleID(playerid),182.4401);
        CargarMapeosEx(playerid);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1172.0782,-1323.3225,15.4029))     // Hospital LS
    {
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
  		CargandoEx(playerid);
        SetPosEntrar(playerid,1156.9583,-1312.1549,-10.7849,180,6,6);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2025.3247,-1401.6721,17.2105))     // Hospital grove
    {
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        SetPosEntrar(playerid,1251.8484,-812.2070,1164.2759,90,6,7);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2665.0000,640.1640,14.5531))      // Hospital SF
    {
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        SetPosEntrar(playerid,-2737.1101,625.3660,1385.6547,270.0000,6,8);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1607.4094,1815.2427,10.8203))       // Hospital LV
    {
        if(Armado(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
        if(PlayerInfo[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
        SetPosEntrar(playerid,1251.8484,-812.2070,1164.2759,90,6,9);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1498.4301,-1581.8600,13.5498)) return SetPosEntrar(playerid,834.4220,7.3780,1004.2900,89.0000,3,0);        //Banco plaza
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1581.3199,867.0190,7.7953))  return SetPosEntrar(playerid,2304.8401,-16.4665,26.8422,0.0000,0,5);         //Banco SF
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2449.4690,2290.2200,10.8203)) return SetPosEntrar(playerid,1092.6782,-152.2306,1001.1160,7.3089,3,6);      //Bank LV
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1457.1293,-1009.9208,26.8438)) return SetPosEntrar(playerid,1092.6782,-152.2306,1001.1160,7.3089,3,7);     //Bank LS 2
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2244.4436,-1665.2526,15.4766)) return SetPosEntrar(playerid,207.6859,-110.8290,1005.1328,0,15,3);          //Binco
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1456.4785,-1137.6067,23.9485)) return SetPosEntrar(playerid,161.4287,-96.9712,1001.8047,355.9063,18,55);   //zip
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 499.5177,-1360.6284,16.3690)) return SetPosEntrar(playerid,207.0226,-140.2560,1003.5078,352.1463,3,0);     //proplaps
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 454.2013,-1477.9746,30.8137)) return SetPosEntrar(playerid,204.2934,-168.8588,1000.5234,358.0996,14,57);   //didier sachs
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 461.7039,-1500.7959,31.0453)) return SetPosEntrar(playerid,227.5291,-8.1299,1002.2109,82.0738,5,56);       //victim
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1940.0084,-2116.0210,13.6953)) return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,15);   // Sex Shop Ganton
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1087.6561,-922.4826,43.3906)) return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,3);     // Sex Shop Vinewood
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 953.8881,-1336.8315,13.5389))  return SetPosEntrar(playerid,-100.4110,-24.9332,1000.7188,90.0000,3,20);    // Sex Shop Atras HPC
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2421.4526,-1219.2432,25.5619))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,0.0000,3,12);    // Sex Shop LS
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1137.9877,-1365.3778,13.9844))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,6);   // Sex Shop Hospital
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2085.1189,2073.9683,11.0547))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,9);    // Sex Shop LV
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1554.49,-1675.58,16.200000))   return SetPosEntrar(playerid,246.4140,107.3210,1003.3199,356.0000,10,1);    // LSPD
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2290.4199,2431.8401,10.9203))  return SetPosEntrar(playerid,238.7010,138.6510,1003.1200,0.0000,3,7);       // LVPD
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1605.5137,710.2757,13.8672)) return SetPosEntrar(playerid,246.42,107.30,1003.22,0,10,5);                   // SFPD}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 186.8628,1428.6979,10.5912) && PlayerInfo[playerid][pTiempoCarcel] >= 1 && PuedenSalirPatio == true) return SetPosEx(playerid,168.1524,1436.1014,1084.8462,0,15,15); // Celdas Fort Carson
    if(IsPlayerInRangeOfPoint(playerid, 2.0,207.9470,142.3866,1003.0234) && PlayerInfo[playerid][pFaccion] == 1) return SetPosEntrar(playerid,251.0166,76.3774,1003.6400,180.0000,6,8);   // Vestuario LVPD
    if(IsPlayerInRangeOfPoint(playerid, 2.0,638.8741,-218.1260,1276.7928) && PlayerInfo[playerid][pFaccion] == 1) return SetPosEntrar(playerid,251.0166,76.3774,1003.6400,180.0000,6,10);  // Vestuario Academia
    // Autoservicios
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1928.5809,-1776.2848,13.5469))return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,1);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1000.5939,-919.9257,42.3281)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,2);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-78.3736,-1169.9005,2.1355))  return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,3);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1676.1718,432.1964,7.1797))  return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,4);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-2420.1506,969.8429,45.2969)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,5);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1320.4795,2698.6536,50.2663))return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,6);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,639.0652,1683.3542,7.1875))   return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,7);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1599.0673,2221.8108,11.0625)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,8);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2637.2786,1129.6777,11.1797)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,9);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2117.5002,896.7776,11.1797))  return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,10);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2344.0371,583.3854,11.2078))  return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,11);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2187.7114,2469.6384,11.2422)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,12);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1383.2498,465.5594,20.1919))  return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,13);
    // Pizzeria
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1808.7142,945.9161,24.8906)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,1);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1720.9456,1359.7822,7.1853)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,2);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2083.3376,2224.7012,11.0234)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,3);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2756.7642,2477.3533,11.0625)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,4);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2638.7839,1849.7867,11.0234)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,5);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2331.8098,75.0506,26.6210))   return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,6);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,1367.5475,248.2522,19.5669))  return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,7);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,203.3945,-201.9418,1.5781))   return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,8);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2105.4844,-1806.4695,13.5547))return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,9);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2351.8242,2533.6289,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,10);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2330.6023,2533.6121,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,11);
    if(IsPlayerInRangeOfPoint(playerid, 2.0,2309.5044,2533.6143,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,12);
	//Supermercados 24/7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1104.8700,-1370.2800,14.0844)) return SetPosEntrar(playerid,-27.3408,-31.7468,1003.6600,90.0000,4,56,1); // 24-7 Market
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1833.7693,-1842.5848,13.5781)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,1,1); // 24-7 Unity
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1315.4862,-897.6825,39.5781))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,2,1); // 24-7 Vinewood
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-2442.7354,755.4177,35.1719))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,3,1); // 24-7 SF
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1352.3689,-1759.2521,13.5078)) return SetPosEntrar(playerid,-27.3931,-58.2556,1003.6500,90.0000,6,66,1); // 24-7 LS
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2194.9404,1991.0470,12.2969))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,5,1); // 24-7 LV
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2424.1951,-1742.8109,13.5454)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,6,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2884.5591,2454.0518,11.0690))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,7,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2247.6382,2396.1689,10.8203))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,8,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2546.5747,1972.6678,10.8203))  return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,9,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1766.6003,-1398.0162,15.7578)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,10,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1565.8555,-1171.4226,24.0953)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,11,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1565.8555,-1171.4226,24.0953)) return SetPosEntrar(playerid,-30.9685,-91.5752,1003.5469,0,18,24,1); // 24-7
    return true;
}
SalirInterior(playerid)
{
    if(TiempoEntrada[playerid] != 0) return 1;
    if(PlayerInfo[playerid][pTiempoCarcel] > 0) return 1;
    for(new et = 0; et < MAX_GARAGES; et++)
    {
        if(Estacionamientos[et][eEnUso] > 0)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
            {
                if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[et][SalidX], Estacionamientos[et][SalidY], Estacionamientos[et][SalidZ]))
                {
                    if(GetPlayerInterior(playerid) == Estacionamientos[et][eInterior] && GetPlayerVirtualWorld(playerid) == Estacionamientos[et][eMundoVirtual])
                    {
                        SetPosEx(playerid,Estacionamientos[et][PosX], Estacionamientos[et][PosY], Estacionamientos[et][PosZ],Estacionamientos[et][PosA], 0, 0);
                        CargarMapeosEx(playerid);
                    }
                }
            }
        }
    }
    for(new fb = 0; fb < MAX_FABRICAS; fb++)
	{
		if(PlayerInfo[playerid][pTiempoJail] == 0)
		{
			if(Fabricas[fb][pEnUso] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.5,Fabricas[fb][pSalidaX],Fabricas[fb][pSalidaY],Fabricas[fb][pSalidaZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Fabricas[fb][pVW])
					{
						SetPlayerPos(playerid,Fabricas[fb][pEntradaX],Fabricas[fb][pEntradaY],Fabricas[fb][pEntradaZ]);
						SetPlayerFacingAngle(playerid,Fabricas[fb][pEntradaA]+180.0);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
					}
				}
			}
		}
	}
    for(new c = 0; c < MAX_PROPIEDADES; c++)
    {
        if(PropInfo[c][pEnUso] == 1)
        {
            if(IsPlayerInRangeOfPoint(playerid,1.0,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS]))
            {
                if(PlayerInfo[playerid][pTiempoCarcel] == 0)
                {
                    if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                    {
                        CargarMapeosEx(playerid);
                        NoTeleportHack(playerid);
                        SetPlayerPosEx(playerid,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]);
                        SetPlayerFacingAngle(playerid,PropInfo[c][pPosA]+180.0);
                        SetPlayerInterior(playerid,0);
                        SetPlayerVirtualWorld(playerid,0);
                        PararEmisora(playerid);
                    }
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid,1.0,254.2685,-41.5420,1002.0308) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
            {
                CargarMapeosEx(playerid);
                NoTeleportHack(playerid);
                SetPlayerPosEx(playerid,PropInfo[c][pRoperoX],PropInfo[c][pRoperoY],PropInfo[c][pRoperoZ]);
                SetPlayerInterior(playerid,PropInfo[c][pInteriorID]);
            }
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-1071.2651,-2568.4934,2876.4106)) SetPosEntrar(playerid,1376.8839,-1795.0229,13.5514,271.1778,0,0);    // Tienda DP salida
    if(IsPlayerInRangeOfPoint(playerid, 1.0,1783.8291,-1301.7024,13.5026)) SetPosEntrar(playerid,1786.6675,-1299.3005,13.4228,350.8194,0,0);    // Elevador
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 387.3900,194.3362,1040.1078)) SetPosEntrar(playerid,649.0013,-1360.7864,13.5868,96.7888,0,0);      // Emisoras
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-2029.7441,-118.6951,1038.8187)) SetPosEntrar(playerid,1742.9551,-1864.2202,13.5741,0,0,0);         // Unity Station
    if(IsPlayerInRangeOfPoint(playerid, 1.0,493.3470,-24.8391,1000.7800)) SetPosEntrar(playerid,1836.9700,-1682.4700,13.4258,90.0000,0,0);      // Club Alhambra
    if(IsPlayerInRangeOfPoint(playerid, 1.0,772.2999,-5.2435,1000.7286)) SetPosEntrar(playerid, 2229.6833,-1721.4192,13.5627,88.3268,0,0);      // GYM Ganton
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-229.1293,1401.1205,27.7656)) SetPosEntrar(playerid, 824.8679,860.2719,12.3028,23.8002+180,0,0);    // Bar Pequeño
    if(IsPlayerInRangeOfPoint(playerid,1.0,-1275.5626,2108.7246,1246.5457)) SetPosEntrar(playerid,1423.4301,-1180.1801,25.9922,0,0,0);          //Salon de eventos
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -2191.3962,-82.6744,1016.4689)) SetPosEntrar(playerid,2492.1550,925.4753,11.0234,354.8306,0,0);	// Iglesia LV
    if(IsPlayerInRangeOfPoint(playerid,5.0,-1166.5009,2126.8232,1246.5457))     //Salon de eventos - vehiculos
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Esta salida es solamente para salir en vehículo.");
        CargarMapeosEx(playerid);
        SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
        SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
        SetVehiclePosEx(GetPlayerVehicleID(playerid), 1410.2614,-1237.0621,13.3828);
        SetVehicleZAngle(GetPlayerVehicleID(playerid),177.9267);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-1387.9806,-324.9726,1052.0834))    // Estadio LV
    {
        CargarMapeosEx(playerid);
        SetPosEx(playerid,1094.0945,1597.0083,12.5469,0,0,0);
        EntradaCarrera[playerid] = false;
        if(EnCarreras[playerid] > 0) SacarCarrera(playerid, 1);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-376.4527,2196.6853,25.4105)) SetPosEx(playerid,-384.8158,2206.0991,42.4235,99.8075,0,0);       // Oficina Minero
    if(IsPlayerInRangeOfPoint(playerid, 2.0,269.1789,293.6963,999.8400)) SetPosEx(playerid,-550.2115,2347.3640,76.3864,247.7023,0,0);       // Vestuario Minero
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 2332.5701,-1254.7500,1026.2899)) SetPosEntrar(playerid,-49.9430,-269.3648,6.6332,180.0000,0,0);// ALBERGUE SALIR
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1204.8600,-13.8459,1001.0200)) {  // Club Striptease
        for(new i = 0; i < 7; i++) DineroTirado[playerid][i] = 0;
        SetPosEntrar(playerid,2014.8101,1107.0100,10.9203,210.0000,0,0);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 501.8426,-67.7034,998.7578))       // Bares Grandes
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 3: SetPosEntrar(playerid,-1820.8500,-125.7650,5.7484,0.0000,0,0);
            case 6: SetPosEntrar(playerid,2507.3855,1242.2521,10.8270,0,0,0);
            case 9: SetPosEntrar(playerid,2310.0757,-1643.5259,14.8270,316.1429,0,0);
            case 12: SetPosEntrar(playerid,2348.5005,-1372.6783,24.3984,180,0,0);
            case 15: SetPosEntrar(playerid,-89.6105,1378.2312,10.4698,316.1429,0,0);
            case 16: SetPosEntrar(playerid,681.6400,-473.3480,16.6363,180.0000,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -100.2077,-24.9942,1000.7188))     // Sex Shop's
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 3: SetPosEntrar(playerid,1087.6561,-922.4826,43.3906,186.5433,0,0);
            case 6: SetPosEntrar(playerid,1137.9877,-1365.3778,13.9844,89.5541,0,0);
            case 9: SetPosEntrar(playerid,2085.1189,2073.9683,11.0547,93.0609,0,0);
            case 12: SetPosEntrar(playerid,2421.4468,-1219.3365,25.5559,173.1247,0,0);
            case 15: SetPosEntrar(playerid,1940.0084,-2116.0210,13.6953,0,0,0);
            case 20: SetPosEntrar(playerid,953.9083,-1336.8312,13.5389,0,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -1074.4355,339.9846,1180.5259))    // Ferreterias LV
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 1: SetPosEntrar(playerid,2107.7473,2165.5085,10.8203,0.2875,0,0);
            case 2: SetPosEntrar(playerid,2861.2581,2430.7432,11.0690,0.2875,0,0);
            case 3: SetPosEntrar(playerid,-1480.9843,2591.6638,55.8359,0.2875,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,251.20,76.40,1003.64) && PlayerInfo[playerid][pFaccion] == 1) // Vestuario SAPD
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 2: SetPosEntrar(playerid,276.2080,122.0958,1004.6172,0,10,1);
            case 6: SetPosEntrar(playerid,276.2080,122.0958,1004.6172,0,10,5);
            case 8: SetPosEntrar(playerid,207.9470,142.3866,1003.0234,0,3,7);
            case 10: SetPosEntrar(playerid,638.8741,-218.1260,1276.7928,0,55,55);
            default: SetPosEntrar(playerid,276.2080,122.0958,1004.6172,0,10,1);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 203.9241,-50.6627,1001.8047))  SetPosEntrar(playerid,2112.9055,-1211.4561,23.9629,-90,0,0);        // Sub Urban
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 834.4220,7.3780,1004.2900)) SetPosEntrar(playerid,1498.4301,-1581.8600,13.5498,90.0000,0,0);       // Bancos Pequeños (Plaza)
    if(IsPlayerInRangeOfPoint(playerid, 1.0,2304.8401,-16.4665,26.8422))   SetPosEntrar(playerid,-1581.3199,867.0190,7.7953,90.0000,0,0);       // Banco SF
    if(IsPlayerInRangeOfPoint(playerid, 1.0,1092.6782,-152.2306,1001.1160))     // Banco Central LS - LV
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 6: SetPosEntrar(playerid,2449.4690,2290.2200,10.8203,90.0000,0,0);
            case 7: SetPosEntrar(playerid,1457.1293,-1009.9208,26.8438,180,0,0);
        }
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 966.1780,-53.2595,1001.2200)) SetPosEntrar(playerid,2014.8400,1150.4700,10.9203,328.0000,0,0);     // Trabajo prostitución
    if(IsPlayerInRangeOfPoint(playerid, 1.0,207.6859,-110.8290,1005.1328)) SetPosEntrar(playerid,2244.3147,-1665.3564,15.4766,346.2641,0,0);    // Binco
    if(IsPlayerInRangeOfPoint(playerid, 1.0,161.4287,-96.9712,1001.8047))  SetPosEntrar(playerid,1456.4785,-1137.6067,23.9485,220.2317,0,0);    // ZIP
    if(IsPlayerInRangeOfPoint(playerid, 1.0,207.0226,-140.2560,1003.5078))  SetPosEntrar(playerid,499.5177,-1360.6284,16.3690,339.9262,0,0);    // Pro Laps
    if(IsPlayerInRangeOfPoint(playerid, 1.0,204.2934,-168.8588,1000.5234))  SetPosEntrar(playerid,454.2013,-1477.9746,30.8137,111.2141,0,0);    // Didier Sachs
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1167.2426,-14.5519,1020.6459)) SetPosEx(playerid,1451.6300,-2286.1201,13.5469,90.0000,0,0);  		// Escuela de Piloto
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 663.4366,-202.8868,1276.7941)) SetPosEntrar(playerid,2362.7698,2306.3025,8.1406,0,0,0);            // Academia
    if(IsPlayerInRangeOfPoint(playerid, 1.0,227.5291,-8.1299,1002.2109)) SetPosEntrar(playerid,461.7039,-1500.7959,31.0453,96.1739,0,0);        // Victim
    if(IsPlayerInRangeOfPoint(playerid, 1.0,2594.2100,1649.7188,1087.5581))     // RS Haul
    {
        if(GetPlayerVirtualWorld(playerid) == 5) SetPosEntrar(playerid,1377.0605,1152.7566,10.8203,0.0000,0,0);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,1251.8484,-812.2070,1164.2759)) //Hospital ganton - Lv
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 7: SetPosEntrar(playerid,2025.3247,-1401.6721,17.2105,180,0,0);
            case 9: SetPosEntrar(playerid,1607.4094,1815.2427,10.8203,0,0,0);
        }
    }
   	if(IsPlayerInRangeOfPoint(playerid, 1.0, -30.9007,-91.4636,1003.5469))      // 24/7
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 1: SetPosEntrar(playerid,1833.7819,-1842.6631,13.5781,271.0529-180,0,0);
			case 2: SetPosEntrar(playerid,1315.4862,-897.6825,39.5781,180.0000,0,0);
			case 3: SetPosEntrar(playerid,-2442.7354,755.4177,35.1719,180.0000,0,0);
			case 4: SetPosEntrar(playerid,1352.3689,-1759.2521,13.5078,1.8684,0,0);
			case 5: SetPosEntrar(playerid,2194.9404,1991.0470,12.2969,1.8684,0,0);
			case 6: SetPosEntrar(playerid,2424.1951,-1742.8109,13.5454,0,0,0);
			case 7: SetPosEntrar(playerid,2884.5591,2454.0518,11.0690,0,0,0);
			case 8:	SetPosEntrar(playerid,2247.6382,2396.1689,10.8203,0,0,0);
			case 9: SetPosEntrar(playerid,2546.5747,1972.6678,10.8203,0,0,0);
			case 10: SetPosEntrar(playerid,1766.6003,-1398.0162,15.7578,0,0,0);
			case 11: SetPosEntrar(playerid,1565.8555,-1171.4226,24.0953,0,0,0);
			case 24: SetPosEntrar(playerid,1565.6500,-1171.0500,24.1925,90.0000,0,0);
		}
	}
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-27.3931,-58.2556,1003.6500))
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 66: SetPosEntrar(playerid,1352.3500,-1759.2400,13.6078,90.0000,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-27.3528,-31.4270,1003.5573))
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 56: SetPosEntrar(playerid,1104.7693,-1370.2813,13.9844,180.0000,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -25.9019,-188.0416,1007.7300))      // Autoservicios
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 1: SetPosEntrar(playerid,1928.5809,-1776.2848,13.5469,270.0000,0,0);
            case 2: SetPosEntrar(playerid,1000.5939,-919.9257,42.3281,94.3611,0,0);
            case 3: SetPosEntrar(playerid,-78.3736,-1169.9005,2.1355,61.8761,0,0);
            case 4: SetPosEntrar(playerid,-1676.1718,432.1964,7.1797,224.6751,0,0);
            case 5: SetPosEntrar(playerid,-2420.1506,969.8429,45.2969,87.5656,0,0);
            case 6: SetPosEntrar(playerid,-1320.4795,2698.6536,50.2663,28.8933,0,0);
            case 7: SetPosEntrar(playerid,639.0652,1683.3542,7.1875,224.9244,0,0);
            case 8: SetPosEntrar(playerid,1599.0673,2221.8108,11.0625,41.5389,0,0);
            case 9: SetPosEntrar(playerid,2637.2786,1129.6777,11.1797,2.2830,0,0);
            case 10: SetPosEntrar(playerid,2117.5002,896.7776,11.1797,0.0000,0,0);
            case 11: SetPosEntrar(playerid,2344.0371,583.3854,11.2078,264.4542,0,0);
            case 12: SetPosEntrar(playerid,2187.7114,2469.6384,11.2422,264.4542,0,0);
            case 13: SetPosEntrar(playerid,1383.2498,465.5594,20.1919,157.1449,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 372.3595,-133.5242,1001.4922))      // Pizzerias
    {
        switch(GetPlayerVirtualWorld(playerid))
        {
            case 1: SetPosEntrar(playerid,-1808.7142,945.9161,24.8906,91.7226,0,0);
            case 2: SetPosEntrar(playerid,-1720.9456,1359.7822,7.1853,91.7226,0,0);
            case 3: SetPosEntrar(playerid,2083.3376,2224.7012,11.0234,91.7226,0,0);
            case 4: SetPosEntrar(playerid,2756.7642,2477.3533,11.0625,91.7226,0,0);
            case 5: SetPosEntrar(playerid,2638.7839,1849.7867,11.0234,91.7226,0,0);
            case 6: SetPosEntrar(playerid,2331.8098,75.0506,26.6210,-90.0000,0,0);
            case 7: SetPosEntrar(playerid,1367.5475,248.2522,19.5669,91.7226,0,0);
            case 8: SetPosEntrar(playerid,203.3945,-201.9418,1.5781,91.7226,0,0);
            case 9: SetPosEntrar(playerid,2105.4844,-1806.4695,13.5547,0.00000,0,0);
            case 10: SetPosEntrar(playerid,2351.8242,2533.6289,10.8203,0.00000,0,0);
            case 11: SetPosEntrar(playerid,2330.6023,2533.6121,10.8203,0.00000,0,0);
            case 12: SetPosEntrar(playerid,2309.5044,2533.6143,10.8203,0.00000,0,0);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -2029.7225,-119.6245,1035.1719))
    {
        if(GetPlayerInterior(playerid) == 3) SetPosEntrar(playerid,1554.9100,-1675.6300,16.1953,90.0000,0,0);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 246.4200,107.3000,1003.2200))      // LSPD - SFPD
    {
        if(GetPlayerVirtualWorld(playerid) == 1) SetPosEntrar(playerid,1554.9100,-1675.6300,16.1953,90.0000,0,0);
        else if(GetPlayerVirtualWorld(playerid) == 5) SetPosEntrar(playerid,-1605.4000,711.5900,13.8672,90.0000,0,0);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0,238.7010,138.6510,1003.1200))  SetPosEx(playerid,2290.4199,2431.8401,10.9203,180.0000,0,0);     // LVPD
    if(IsPlayerInRangeOfPoint(playerid, 1.0,-2737.1101,625.3660,1385.6547))  SetPosEx(playerid,-2665.0000,640.1640,14.5531,180.0000,0,0);   // HOSPITAL SF
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1156.9583,-1312.1549,-10.7849)) SetPosEx(playerid,1172.0782,-1323.3225,15.4029,270.0000,0,0);  //Hospital Interior
    return true;
}
public OnPlayerDisconnect(playerid, reason)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerDisconnect) PlayerID: %d | Reason: %d", playerid, reason);
    #endif
    if(IsPlayerNPC(playerid))
    {
        new string[32],botName[MAX_PLAYER_NAME];
        switch(reason)
        {
            case 0: format(string, sizeof string, "Timeout (perdió conexión)");
            case 1: format(string, sizeof string, "Quiteo por si solo (??)");
            case 2: format(string, sizeof string, "El GM lo kickeó");
            default: format(string, sizeof string, "Indefinido (wtf)");
        }

        printf("El NPC ID %d se ha desconectado! Razón: %s", playerid,string);

        GetPlayerName(playerid,botName,sizeof(botName));
        if(!strcmp(botName,".Motorman1")) ReJoinNPC(0);
        if(!strcmp(botName, ".Motorman2")) ReJoinNPC(1);
        if(!strcmp(botName, ".Motorman3")) ReJoinNPC(2);
        if(!strcmp(botName, ".Motorman4")) ReJoinNPC(3);
        if(!strcmp(botName, ".Sergio")) ReJoinNPC(4);
        if(!strcmp(botName, ".Angelica", true))
        {
            DestroyDynamic3DTextLabel(TextBot[0]);
            ReJoinNPC(10);
        }
        if(!strcmp(botName, ".Marcelo", true))
        {
            DestroyDynamic3DTextLabel(TextBot[1]);
            KillTimer(TimerTxtMarcelo);
            ReJoinNPC(6);
        }
        if(!strcmp(botName, ".Ignacio", true))
        {
            DestroyDynamic3DTextLabel(TextBot[2]);
            ReJoinNPC(12);
        }
        if(!strcmp(botName, ".Alejandro", true))
        {
            DestroyDynamic3DTextLabel(TextBot[3]);
            ReJoinNPC(7);
        }
        if(!strcmp(botName, ".Camello1", true))
        {
            DestroyDynamic3DTextLabel(TextBot[4]);
            ReJoinNPC(8);
        }
        if(!strcmp(botName, ".HippiePepe", true))
        {
            DestroyDynamic3DTextLabel(TextBot[5]);
            ReJoinNPC(9);
        }
        if(!strcmp(botName, ".Hugo", true))
        {
            DestroyDynamic3DTextLabel(TextBot[6]);
            ReJoinNPC(13);
        }
        if(!strcmp(botName, ".Mao", true))
        {
            DestroyDynamic3DTextLabel(TextBot[7]);
            ReJoinNPC(14);
        }
        if(!strcmp(botName, ".Jorge", true))
        {
            DestroyDynamic3DTextLabel(TextBot[8]);
            ReJoinNPC(11);
        }
        if(!strcmp(botName, ".Drogas", true))
        {
            ReJoinNPC(15);
        }
    }
    if(PlayerInfo[playerid][MobileSub] == 2540 || PlayerInfo[playerid][MobileSub] == 911)  ColgarLaLlamada(playerid);
    new callere = PlayerInfo[playerid][MobileSub];
    if(IsPlayerConnected(callere) && callere != -1)
    {
        SendClientMessage(callere, -1, "Colgaron la llamada.");
        SetPlayerSpecialAction(callere, SPECIAL_ACTION_STOPUSECELLPHONE);
        PlayerInfo[callere][MobileSub] = -1;
        EnLlamada[callere] = 0;
        finllamada(callere);
        ColgarLaLlamada(playerid);
    }
    if(IsPlayerInAnyVehicle(playerid))
    {
        new vrID = GetPlayerVehicleID(playerid);
        if(GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID] != 0)
        {
            CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID]][2]--;
            foreach(new i : Player)
            {
                if(IsPlayerInVehicle(i, vrID))
                {
                    CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID]][2]--;
                }
            }
        }
        GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID] = 0;
    }
    PararEmisora(playerid);
    if(Emisoras[playerid][TransEmisora] == 1)
    {
        CerrarEmisora(Emisoras[playerid][CabinaOcupada]);
        Emisoras[playerid][TransEmisora] = 0;
        Emisoras[playerid][CabinaOcupada] = -1;
    }
    if(Companero[playerid] != INVALID_PLAYER_ID)
    {
        RecorridoBasu[Companero[playerid]] = 0;
        PBasura[Companero[playerid]] = 0;
        Companero[Companero[playerid]] = -1;
        DisablePlayerCheckpoint(Companero[playerid]);
        SendClientMessage(Companero[playerid], -1, "Tu compañero se ha marchado y el recorrido fue cancelado.");
    }
    KillTimer(ResetearYaMostro[playerid]);
    KillTimer(HCurando[playerid]);
    KillTimer(ResetearYaMostro[playerid]);
    GuardarCuenta(playerid);
    QuitarSombreroH(playerid);
    if(Mats1[playerid] == 1) DarDinero(playerid,1250);
    if(Mats2[playerid] == 1) DarDinero(playerid,1250);
    if(Mats3[playerid] == 1) DarDinero(playerid,6250);
    if(Frecuencia[playerid] == 1)   {   frecuencias[1] -= 1;    }
    if(Frecuencia[playerid] == 2)   {   frecuencias[2] -= 1;    }
    if(Frecuencia[playerid] == 3)   {   frecuencias[3] -= 1;    }
    if(Frecuencia[playerid] == 4)   {   frecuencias[4] -= 1;    }
    if(Frecuencia[playerid] == 5)   {   frecuencias[5] -= 1;    }
    if(Frecuencia[playerid] == 6)   {   frecuencias[6] -= 1;    }
    if(Frecuencia[playerid] == 7)   {   frecuencias[7] -= 1;    }
    if(Frecuencia[playerid] == 8)   {   frecuencias[8] -= 1;    }
    KillTimer(TM[playerid]);
    KillTimer(TCV[playerid]);
    KillTimer(TCV2[playerid]);
    KillTimer(BaulPB[playerid]);
    KillTimer(llamadasonido1[playerid]);
    KillTimer(CLlamada[playerid]);
    KillTimer(llamadasonido2[playerid]);
    KillTimer(asd[playerid]);
    KillTimer(asdtren[playerid]);
    KillTimer(LoginTimer[playerid]);
    if(Specteado[playerid] == 1)
    {
        foreach(new i : Player)
        {
            if(SpecJugador[i] == playerid)
            {
                Specteado[i] = INVALID_PLAYER_ID;
                TogglePlayerSpectating(i,false);
            }
        }
    }
    if(TraeDinero[playerid] == 1)
	{
		for(new f = 0; f < MAX_FABRICAS; f++)
		{
			if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
			{
				TraeDinero[playerid] = 0;
				DarDineroFabrica(f,1000000);
			}
		}
	}
	HidePlayerProgressBar(playerid, Progressbar[playerid][Sed]);
	HidePlayerProgressBar(playerid, Progressbar[playerid][Hambre]);
    DestroyPlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
    DestroyPlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
    DestroyPlayerProgressBar(playerid, Progressbar[playerid][ReparandoBar]);
    DestroyPlayerProgressBar(playerid, Progressbar[playerid][Picar]);
    DestroyPlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
    if(EnCarreras[playerid] > 0) SacarCarrera(playerid, 2);
    TextDrawHideForPlayer(playerid, BoxCarrera[0]);
    TextDrawHideForPlayer(playerid, BoxCarrera[1]);
    TextDrawHideForPlayer(playerid, BoxCarrera[2]);
    TextDrawHideForPlayer(playerid, BoxCarrera[3]);
    PlayerTextDrawHide(playerid, CarreraPosicion[playerid]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][0]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][1]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][2]);
    if(GetPlayerScore(playerid) == 0) return 1;
    new stringo[128];
    for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid)
		{
			Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
		}
	}
    if(PlayerInfo[playerid][pCama] > 0)
    {
        KillTimer(HCurando[playerid]);
        SendClientMessage(playerid,-1,"Ya te has recuperado completamente, puedes ir a tu casa.");
        switch(PlayerInfo[playerid][enHospital])
        {
            case 1: CamillaLS[PlayerInfo[playerid][pCama]] = 0;
            case 2: CamillaSF[PlayerInfo[playerid][pCama]] = 0;
            case 3: CamillaLV[PlayerInfo[playerid][pCama]] = 0;
            case 4: CamillaGA[PlayerInfo[playerid][pCama]] = 0;
        }
        PlayerInfo[playerid][pCama] = 0;
    }
    if(IsValidDynamicObject(Transportistas[playerid][Objeto1]))
    {
        DestroyDynamicObject(Transportistas[playerid][Objeto1]);
        Transportistas[playerid][Objeto1] = INVALID_OBJECT_ID;
    }
    if(IsValidDynamicObject(Transportistas[playerid][Objeto2]))
    {
        DestroyDynamicObject(Transportistas[playerid][Objeto2]);
        Transportistas[playerid][Objeto2] = INVALID_OBJECT_ID;
    }
    if(IsValidDynamicObject(Transportistas[playerid][Objeto3]))
    {
        DestroyDynamicObject(Transportistas[playerid][Objeto3]);
        Transportistas[playerid][Objeto3] = INVALID_OBJECT_ID;
    }
    new szMessage[200];
    switch (reason)
    {
        case 0: format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [Timeout]", PlayerInfo[playerid][Nickname],playerid);
        case 1:
        {
            format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [/q]", PlayerInfo[playerid][Nickname],playerid);
            ProxDetector(10.0, playerid, szMessage, COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE);
        }
        case 2: format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [Baneado o Kickeado]", PlayerInfo[playerid][Nickname],playerid);
    }
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pAdmin] >= 3)
        {
            new adminx[570];
            format(adminx,sizeof(adminx),"%s (ID: %d) se desconectó con la IP: %s",PlayerInfo[playerid][Nickname],playerid,PlayerTemp[playerid][voIP]);
            SendClientMessage(i,-1,adminx);
        }
    }
    if(EnCombate[playerid] == 1)
    {
        if(reason == 1)
        {
            if(NoQuitar[playerid] == 0 && PlayerInfo[playerid][pDuty] != 1)
            {
                QuitarArmas(playerid);
                format(stringo, 128, "%s(%d) perdió las armas por cerrar el juego en combate.",PlayerInfo[playerid][Nickname],playerid);
                ProxDetector(15.0, playerid, stringo, COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE);
                KillTimer(TimerCombate[playerid]);
            }
        }
    }
    new caller = PlayerInfo[playerid][MobileSub];
    if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 2540 || caller == 911)
    {
        if(caller < 50)
        SendClientMessage(caller,  -1, "Colgaron la llamada.");
        finllamada(caller);
        PlayerInfo[caller][MobileSub] = INVALID_PLAYER_ID;
        PlayerInfo[caller][Mobile] = INVALID_PLAYER_ID;
        PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
        PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
        SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
        SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
    }
    PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
    if(Manejando[playerid] == 1) DarArmas(playerid);
    for(new i=0;i<GetVehiclePoolSize();i++)
    {
        if(Chofer[i] == playerid)
        {
            Chofer[i] = INVALID_PLAYER_ID;
            CamionCargado[i] = 0;
        }
    }
	SaveAccount(playerid);
    DisablePlayerCheckpoint(playerid);
    new Query[150];
    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Online`='0' WHERE `Username`='%e'", PlayerInfo[playerid][Nickname]);
    mysql_query(handle_db, Query);
    LimpiarCuenta(playerid);
    return 1;
}
funcion CerrarIsla1()
{
    MoveDynamicObject(controls[8], 833.4200, -2963.8000, 11.7460-SPEED_CONTROLS, SPEED_CONTROLS, 0.00000, -90.00000, 0.00000);
    return 1;
}
funcion CerrarIsla2()
{
    MoveDynamicObject(controls[9], 833.4100, -2954.5200, 12.1000-SPEED_CONTROLS, SPEED_CONTROLS, 0.00000, 90.00000, 0.00000);
    return 1;
}

public BorrarDinero(id)
{
    if(IsValidDynamicPickup(id)) DestroyDynamicPickup(id);
    return 1;
}

public ClearAnim(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    return 1;
}
public CerrarAviso(playerid)
{
    TextDrawHideForPlayer(playerid, Cuadroputi);
    TextDrawHideForPlayer(playerid, Cuadroputi1);
    PlayerTextDrawHide(playerid, AfinidadconX[playerid]);
    PlayerTextDrawHide(playerid, LineasPutiNivel[playerid]);
    TextDrawHideForPlayer(playerid, PuticlubMedia);
    TextDrawHideForPlayer(playerid, PuticlubAlta);
    TextDrawHideForPlayer(playerid, FlechasArribaPuti);
    TextDrawHideForPlayer(playerid, FlechasArribaPuti2);
    PlayerTextDrawHide(playerid, Radly[playerid]);
    return 1;
}
public LevantarMano(playerid,actor)
{
    KillTimer(PlayerTemp[playerid][TimerRobar]);
    PlayerTemp[playerid][TimerRobar] = SetTimerEx("LevantarMano",1000,false,"dd",playerid,actor);
    new apuntando = GetPlayerTargetDynamicActor(playerid),id;
    for(new i = 0; i < MAX_NPC_ROBOS; i++)
    {
        if(IsValidDynamicActor(actor))
        {
            if(actor == RoboTiendas[i][Actor]) id = RoboTiendas[i][rID];
        }
    }
    if(RoboTiendas[id][TiendaRobada] > 0) return PlayerTemp[playerid][PuedeRobar] = 0;
    if(PermiteRobar(playerid,id) == 0) return PlayerTemp[playerid][PuedeRobar] = 0;
    if(apuntando == INVALID_ACTOR_ID || apuntando == 0)
    {
        PlayerTemp[playerid][PuedeRobar] = 0;
        CancelarRobo(playerid,actor);
        KillTimer(PlayerTemp[playerid][TimerRobar]);
        return 1;
    }
    for(new i = 0; i < MAX_NPC_ROBOS; i++)
    {
        if(IsValidDynamicActor(actor))
        {
            if(actor == RoboTiendas[i][Actor])
            {
                RoboTiendas[id][RoboProceso] ++;
                switch(RoboTiendas[id][RoboProceso])
                {
                    case 1: { ApplyDynamicActorAnimation(actor,"PED", "handsup", 4.1, 0, 0, 0, 1, 0); }
                    case 3: { ApplyDynamicActorAnimation(actor,"MISC", "PLYR_SHKHEAD", 4.1, 0, 0, 0, 1, 0); }
                    case 5: { ApplyDynamicActorAnimation(actor,"CASINO", "Roulette_bet", 4.1, 1, 1, 1, 1, 1); }
                    case 12:
                    {
                        RoboTiendas[id][RoboProceso] = 0;
                        KillTimer(PlayerTemp[playerid][TimerRobar]);
                        RobarTiendaTerminado(playerid,actor,id);
                    }
                }
            }
        }
    }
    return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if((newkeys & KEY_SPRINT) && (newkeys & KEY_CTRL_BACK))
    {
        if(!IsPlayerInAnyVehicle(playerid)) AbrirBaul(playerid);
    }
    if(newkeys & KEY_SPRINT && newkeys & KEY_YES || newkeys & KEY_HANDBRAKE && newkeys & KEY_YES && GetPlayerVehicleID(playerid))
    {
        if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 10) return 1;
        AbrirVehiculo(playerid);
    }
    if(newkeys & KEY_YES)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) TunearCoche(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) EnReparacion(playerid);
       	SetPVarInt(playerid, "antiflood", GetTickCount());
	}
    if(newkeys & KEY_CTRL_BACK)
    {
        new encmd;
        if(PlayerToPoint(5.0,playerid,1802.7854,-1303.8938,93.0391)) encmd = 1; // Comprar Vehiculo
        if(PlayerToPoint(5.0,playerid,1809.5894,-1299.8063,65.8125)) encmd = 2; // Comprar Propiedad
        if(PlayerToPoint(5.0,playerid,1821.7529,-1280.6038,109.3594))encmd = 3; // Servicio Grúa
        if(encmd > 0)
        {
            if(encmd == 1) callcmd::vender(playerid, "vehiculo");
            if(encmd == 2) callcmd::vender(playerid, "propiedad");
            if(encmd == 3) callcmd::servicio(playerid, "grua");
        }
    }
    if(newkeys & KEY_YES)
    {
        new encmd;
        if(PlayerToPoint(5.0,playerid,1163.9730,-2.7876,1020.6459)) encmd = 3; // Comprar licencia
        if(PlayerToPoint(5.0,playerid,-1072.1169,354.2132,1180.5259)) encmd = 4; // Comprar Herramientas
        if(PlayerToPoint(5.0,playerid,93.3250,-161.6600,2.5938)) encmd = 5; // Comprar Repuestos
        if(encmd > 0)
		{
			if(encmd == 3) callcmd::comprar(playerid, "licencia");
			if(encmd == 4) callcmd::comprar(playerid, "herramientas");
			if(encmd == 5) callcmd::comprar(playerid, "repuestos");
		}
    }
   	if(newkeys & KEY_YES)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.5, -2019.9447,243.5474,1035.8162))
			{
			    for(new f = 0; f<MAX_FABRICAS; f++)
			    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
			    {
			        if(GetPlayerWeapon(playerid) == 32 || GetPlayerWeapon(playerid) == 26 || GetPlayerWeapon(playerid) == 34 || GetPlayerWeapon(playerid) == 28)
					{
						if(GetPlayerWeapon(playerid) == 34 && Fabricas[f][pSniper] > 9) return SendClientMessage(playerid,-1,"El estante se encuentra lleno.");
						if(GetPlayerWeapon(playerid) == 26 && Fabricas[f][pRecortada] > 9) return SendClientMessage(playerid,-1,"El estante no puede contener más de este tipo de arma.");
						if(GetPlayerWeapon(playerid) == 28 && Fabricas[f][pUzi] > 9) return SendClientMessage(playerid,-1,"El estante no puede contener más de este tipo de arma.");
						if(GetPlayerWeapon(playerid) == 32 && Fabricas[f][pTec9] > 9) return SendClientMessage(playerid,-1,"El estante se encuentra lleno.");
						SendClientMessage(playerid,-1,"{00CC00}Guardaste un arma{FFFFFF} en el depósito de la fabrica.");
						switch(GetPlayerWeapon(playerid))
						{
							case 26: { Fabricas[f][pRecortada] ++; ActualizarRecortadas(f,1); }
							case 28: { Fabricas[f][pUzi] ++; ActualizarUzi(f,1); }
							case 32: { Fabricas[f][pTec9] ++; ActualizarTec(f,1);}
							case 34: { Fabricas[f][pSniper] ++; ActualizarSnipers(f,1); }
						}
						QuitarArma(playerid, GetPlayerWeapon(playerid));
						ActualizarLabelArmas(f);
						GuardarFabrica(f);
					}
					else SendClientMessage(playerid,-1,"No se permite guardar este tipo de arma.");
				}
			}
		}
	}
    if(newkeys & KEY_YES)
    {
    	if(PlayerInfo[playerid][pFaccion] == 1)
        {
            if(PlayerInfo[playerid][suspendido] == 0)
            {
                if(PlayerToPoint(2.0,playerid, 254.4149,73.7001,1003.6406))
                {
                    if(PlayerInfo[playerid][pDuty] == 0)
                    {
                    	if(PlayerInfo[playerid][pSexo] == 1) ShowModelSelectionMenu(playerid, policiahombre, "Uniformes");
                        else if(PlayerInfo[playerid][pSexo] == 2) ShowModelSelectionMenu(playerid, policiamujer, "Uniformes");
                	}
                	else
                	{
    		       		if(PlayerToPoint(2.0,playerid, 254.4149,73.7001,1003.6406))
    		        	SetPlayerColor(playerid,COLOR_WHITE);
    		        	frecuencias[Frecuencia[playerid]]--;
    		            Frecuencia[playerid] = 0;
    		            SendClientMessage(playerid, -1, "Dejaste el uniforme de policía y recuperaste tu ropa.");
    		            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
    		            PlayerInfo[playerid][pDuty] = 0;
    		            if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(3)] == 3)
    		            ResetPlayerWeapons(playerid);
    		            RopaMine[playerid] = 0, RopaMedi[playerid] = 0, RopaBasu[playerid] = 0,RopaMeca[playerid] = 0;
    		            DarArmas(playerid);
    			     }
  			 	}
  			}
       	    else SendClientMessage(playerid, COLORCARGO0, "No puedes usar tu uniforme de policía mientras te encuentres suspendido.");
		}
	}
    if(newkeys & KEY_CROUCH) // H con vehículo
    {
        new pvehicle = 0, vehicleid = GetPlayerVehicleID(playerid);
		for(new a = 0; a < MAX_PAUTOS; a++)
		{
			if(!IsValidVehicle(autos[a][playerid])) continue;
			if(GetPlayerVehicleID(playerid) == autos[a][playerid]) pvehicle++;
		}
        if(PlayerToPoint(10.0, playerid, -88.1874,-1127.1766,1.0847))
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                if(PlayerInfo[playerid][CasaID] == 14 || PlayerInfo[playerid][CasaID2] == 14 || PlayerInfo[playerid][pAdmin] >= 5)
                {
                    if(PortonAbiertoCasa == 0)
                    {
                        PortonAbiertoCasa = 1;
                        MoveDynamicObject(controls[10],-84.5720, -1118.8861, 0.2805,2);
                    }
                    else
                    {
                        PortonAbiertoCasa = 0;
                        MoveDynamicObject(controls[10], -87.67600, -1127.18213, 0.28050,2);
                    }
                }
            }
        }
        new patrulla;
        patrulla = GetPlayerVehicleID(playerid);
        if(PlayerToPoint(15.0, playerid, 1545.7398,-1627.7280,15.2062) && PlayerInfo[playerid][pDuty] != 0)
        {
            MoveDynamicObject(barrera, 1544.6943359375, -1630.73046875, 13.27956199646+0.0001, 0.00009, 0, 0, 90);
            SetTimer("Cerrar_Barrera", 3000, 0);
        }
        if(PlayerToPoint(15.0, playerid, 1589.0533,-1638.1231,14.1229) && PlayerInfo[playerid][pDuty] != 0)
        {
            if(PlayerInfo[playerid][pDuty] == 1 || SAPD(patrulla) || patrulla == NPC_Tren[4] || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            {
                MoveDynamicObject(porton,  1589.274658,-1638.286499,10.616429, 2);
                SetTimer("Cerrar_Porton", 5000, 0);
            }
        }
        if(PlayerToPoint(15.0, playerid, 294.3390,1412.8501,9.9911) && PlayerInfo[playerid][pDuty] != 0)
        {
            if(PlayerInfo[playerid][pDuty] == 1 || SAPD(patrulla) || patrulla == NPC_Tren[4] || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            {
                MoveDynamicObject(reja1,  288.9500, 1420.6600, 12.9000, 2);
                MoveDynamicObject(reja2,  288.9500, 1402.3979, 12.9000, 2);
                SetTimer("Cerrar_Rejas1", 3000, 0);
            }
        }
        if(PlayerToPoint(15.0, playerid, 264.4435,1411.4097,10.4904) && PlayerInfo[playerid][pDuty] != 0)
        {
            if(PlayerInfo[playerid][pDuty] == 1 || SAPD(patrulla) || patrulla == NPC_Tren[4] || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            {
                MoveDynamicObject(reja3,  263.1500, 1420.6600, 13.0500, 2);
                MoveDynamicObject(reja4,  263.1500, 1402.2100, 13.0500, 2);
                SetTimer("Cerrar_Rejas2", 3000, 0);
            }
        }
        if(PlayerToPoint(15.0, playerid, 227.9451,1421.2976,10.5859) && PlayerInfo[playerid][pDuty] != 0)
        {
            if(PlayerInfo[playerid][pDuty] == 1 || SAPD(patrulla) || patrulla == NPC_Tren[4] || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            {
                MoveDynamicObject(reja5,  237.3140, 1420.7500, 13.1700, 2);
                MoveDynamicObject(reja6,  218.6780, 1420.7500, 13.1700, 2);
                SetTimer("Cerrar_Rejas3", 3000, 0);
            }
        }
        if(!IsPlayerNPC(playerid))
        {
            for(new c = 0;c<MAX_PROPIEDADES; c++)
            {
                if(PropInfo[c][pEnUso] == 1)
                {
                    if(IsPlayerInRangeOfPoint(playerid,4.5,PropInfo[c][pGX],PropInfo[c][pGY],PropInfo[c][pGZ]) && PropInfo[c][pGX] != 0)
                    {
                        if(PlayerInfo[playerid][pID] == PropInfo[c][pIDPropietario])
                        {
                            if(IsPlayerInAnyVehicle(playerid))
                            {
                                if(PlayerInfo[playerid][pCargos] >= 2)
                                {
                                    foreach(new i : Player)
                                    {
                                        if(PlayerInfo[i][pFaccion] == 1 && PlayerInfo[i][pDuty] == 1 && EstaEnP(playerid,i,15)) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
                                    }
                                }
                                if(pvehicle != 0)
								{
									if(PropInfo[c][pInterior] == 43) SetVehPos(playerid,vehicleid,1403.4666,594.2648,1001.0300+1,174.4890,1,PropInfo[c][pVW]);
									else SetVehPos(playerid,vehicleid,303.7281,306.4251,999.2913,0,4,PropInfo[c][pVW]);
									GuardarPropiedad(c);
                                }
                                else SendClientMessage(playerid,-1,"Este vehículo no te pertenece.");
                            }
                        }
                        else SendClientMessage(playerid,-1,"El dueño de la casa puede guardar sus vehículos.");
                    }
                    //estacionamiento casa
                    if(IsPlayerInRangeOfPoint(playerid,10,303.7281,306.4251,999.2913) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW] && GetPlayerInterior(playerid) == 4)
                    {
                        if(PlayerInfo[playerid][pID] == PropInfo[c][pIDPropietario])
                        {
                            if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                            {
                                if(PlayerInfo[playerid][pTiempoCarcel] == 0)
                                {
                                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                    {
                                        NoTeleportHack(playerid);
                                        GuardarPropiedad(c);
                                        CargarMapeosEx(playerid);
                                        new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
                                        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
                                        posx = PropInfo[c][pGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-PropInfo[c][pGA], degrees));
                                        posy = PropInfo[c][pGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-PropInfo[c][pGA], degrees));
                                        SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,PropInfo[c][pGZ]);
                                        SetVehicleZAngle(GetPlayerVehicleID(playerid),PropInfo[c][pGA]+180);
                                        SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
                                        SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
                                    }
                                }
                            }
                            else SendClientMessage(playerid,-1,"No puedes sacar vehículos de este garaje.");
                        }
                    }
                    if(IsPlayerInRangeOfPoint(playerid, 3.0,1403.4666,594.2648,1001.0300) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                    {
                        if(PlayerInfo[playerid][pID] == PropInfo[c][pIDPropietario])
                        {
                            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                            {
                                if(PlayerInfo[playerid][pTiempoCarcel] == 0)
                                {
                                    CargarMapeosEx(playerid);
                                    GuardarPropiedad(c);
                                    NoTeleportHack(playerid);
                                    new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
                                    GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
                                    posx = PropInfo[c][pGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-PropInfo[c][pGA], degrees));
                                    posy = PropInfo[c][pGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-PropInfo[c][pGA], degrees));
                                    SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,PropInfo[c][pGZ]);
                                    SetVehicleZAngle(GetPlayerVehicleID(playerid),PropInfo[c][pGA]+180);
                                    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
                                    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
                                }
                            }
                        }
                        else SendClientMessage(playerid,-1,"No puedes sacar vehículos de este garaje.");
                    }
                }
            }
        }
        // Estacionamiento
        for(new e = 0; e < MAX_GARAGES; e++)
        {
            if(Estacionamientos[e][eEnUso] > 0)
            {
                if(IsPlayerInRangeOfPoint(playerid,5.0,Estacionamientos[e][SalidX], Estacionamientos[e][SalidY], Estacionamientos[e][SalidZ]))
                {
                    if(GetPlayerVirtualWorld(playerid) == Estacionamientos[e][eMundoVirtual] && GetPlayerInterior(playerid) == Estacionamientos[e][eInterior])
                    {
                        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                        {
                            if(pvehicle != 0)
                            {
                                CargarMapeosEx(playerid);
                                new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
                                GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
                                posx = Estacionamientos[e][PosX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-Estacionamientos[e][PosA]+180, degrees));
                                posy = Estacionamientos[e][PosY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-Estacionamientos[e][PosA]+180, degrees));
                                SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,Estacionamientos[e][PosZ]);
                                SetVehicleZAngle(GetPlayerVehicleID(playerid),Estacionamientos[e][PosA]);
                                SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
                                SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
                            }
                            else return SendClientMessage(playerid,-1,"No puedes salir con un vehículo que no te pertenece.");
                        }
                    }
                }
                if(IsPlayerInRangeOfPoint(playerid,5.0,Estacionamientos[e][PosX], Estacionamientos[e][PosY], Estacionamientos[e][PosZ]))
                {
                    if(GetPlayerVirtualWorld(playerid) == 0)
                    {
                        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                        {
                            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 609 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 456) return SendClientMessage(playerid,-1,"Este vehículo no puede entrar.");
                            CargarMapeosEx(playerid);
                            if(Estacionamientos[e][SalidX] == 1707.62) SetPosVeh(GetPlayerVehicleID(playerid), 1700.6200,-1877.1000,-49.3597,90.0000, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
                            if(Estacionamientos[e][SalidX] == 2058.54) SetPosVeh(GetPlayerVehicleID(playerid), 2058.3923,2429.0286,10.5962,180.0001, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
                            if(Estacionamientos[e][SalidX] == -1283.28) SetPosVeh(GetPlayerVehicleID(playerid), -1276.2654,461.1677,7.1351,268.8531, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
                            SendClientMessage(playerid, -1, "Ingresaste a un {DBED15}estacionamiento{FFFFFF}, el costo por día es de {00CC00}$150");
                            SendClientMessage(playerid, -1, "Por favor, usa {DBED15}/estacionar{FFFFFF} para dejar tu vehículo guardado en este estacionamiento.");
                            SendClientMessage(playerid, -1, "Al guardarlo te aseguras de que nadie pueda sacarlo del estacionamiento.");
                            QuitarDinero(playerid,150);
                        }
                    }
                }
            }
        }
        for(new f = 0; f<MAX_FABRICAS; f++)
		{
			if(Fabricas[f][pEnUso] == 1)
			{
			    if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
				{
			    	if(Fabricas[f][pEnUso] == 1 && f > 0)
					{
						if(IsPlayerInRangeOfPoint(playerid,5.0,-1978.9973,212.0329,1035.8162))
						{
							if(Fabricas[f][pVW] == GetPlayerVirtualWorld(playerid))
							{
								if(SAPD(vehicleid) && Fabricas[f][pSoborno]+86400 <= gettime() && PlayerInfo[playerid][pDuty] == 1|| pvehicle != 0)
								{
									CargarMapeosEx(playerid);
									new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
									GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
									posx = Fabricas[f][pEntradaGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-Fabricas[f][pEntradaGA], degrees));
									posy = Fabricas[f][pEntradaGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-Fabricas[f][pEntradaGA], degrees));
									SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
									SetVehiclePos(vehicleid,posx,posy,Fabricas[f][pEntradaGZ]);
									SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
									SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),0);
									SetVehicleZAngle(GetPlayerVehicleID(playerid),Fabricas[f][pEntradaGA]+180);
								}
								else if(Fabricas[f][Auto1F] == vehicleid || Fabricas[f][Auto2F] == vehicleid)
								{
									if(VehiculoConBarril[vehicleid] != 0) return SendClientMessage(playerid,-1,"Tienes que {EB0000}descargar los químicos{FFFFFF} para poder salir con camioneta.");
									if(VehiculoConCajas[vehicleid] < 5 && VehiculoConCajas[vehicleid] != 0) return SendClientMessage(playerid,-1,"La camioneta tiene que estar cargada con {DBED15}5 cajas {FFFFFF}de {00CCFF}metanfetamina{FFFFFF}.");
									CargarMapeosEx(playerid);
									new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
									GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
									posx = Fabricas[f][pEntradaGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-Fabricas[f][pEntradaGA], degrees));
									posy = Fabricas[f][pEntradaGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-Fabricas[f][pEntradaGA], degrees));
									SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
									SetVehiclePos(vehicleid,posx,posy,Fabricas[f][pEntradaGZ]);
									SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),0);
									SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
									SetVehicleZAngle(GetPlayerVehicleID(playerid),Fabricas[f][pEntradaGA]+180);
									if(Fabricas[f][Auto1F] == vehicleid && GetVehicleModel(vehicleid) == 554)
									{
										ObjetosTransporte(Fabricas[f][Auto1F], f);
										BarrilesTransporte(Fabricas[f][Auto1F], f);
									}
									if(Fabricas[f][Auto2F] == vehicleid)
									{
										if(IsValidVehicle(vehicleid))
										{
											if(GetVehicleModel(vehicleid) == 554) ObjetoDistraccion(Fabricas[f][Auto2F], f);
										}
									}
								}
							}
						}
						if(IsPlayerInRangeOfPoint(playerid,5.0,Fabricas[f][pEntradaGX],Fabricas[f][pEntradaGY],Fabricas[f][pEntradaGZ]))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							{
								if(pvehicle != 0)
								{
									CargarMapeosEx(playerid);
									SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), Fabricas[f][pInt]);
									SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), Fabricas[f][pVW]);
									SetVehiclePos(GetPlayerVehicleID(playerid), -1988.1583,212.3283,1035.3835);
									SetVehicleZAngle(GetPlayerVehicleID(playerid),90.0000);
								}
								else if(vehicleid == Fabricas[f][Auto1F] || vehicleid == Fabricas[f][Auto2F])
								{
									CargarMapeosEx(playerid);
									if(VehiculoConBarril[GetPlayerVehicleID(playerid)] > 0)
									{
										if(Tiempos[playerid][ParticiparFabrica] == 0)
										{
											LoadBarrelMeta(f);
											Tiempos[playerid][ParticiparFabrica] = 2;
											LlegoAutoF[f] = 0;
											new coco = 7500 + random(1500);
											foreach(new i : Player)
											{
												if(PlayerInfo[i][pFaccion] == Fabricas[f][pBanda] && Participo[i] == 1)
												{
													Participo[i] = 0;
													DarDinero(i,coco);
													new string[128];
													format(string,sizeof(string),"Productos químicos transportados con éxito. Recibes {00CC00}$%d {FFFFFF}por haber participado.", coco);
													SendClientMessage(i,-1,string);
												}
											}
										}
									}
									SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), Fabricas[f][pInt]);
									SetVehiclePos(GetPlayerVehicleID(playerid), -1988.1442,212.3253,1035.9305);
									SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), Fabricas[f][pVW]);
									SetVehicleZAngle(GetPlayerVehicleID(playerid),90.0000);
									if(Fabricas[f][Auto1F] == vehicleid && GetVehicleModel(vehicleid) == 554)
									{
										ObjetosTransporte(Fabricas[f][Auto1F], f);
										BarrilesTransporte(Fabricas[f][Auto1F], f);
									}
									if(Fabricas[f][Auto2F] == vehicleid)
									{
										if(IsValidVehicle(vehicleid))
										{
											if(GetVehicleModel(vehicleid) == 554) ObjetoDistraccion(Fabricas[f][Auto2F], f);
										}
									}
								}
								else SendClientMessage(playerid,-1,"No puedes entrar con un vehículo que no sea de tu propiedad.");
							}
						}
					}
				}
			}
		}
	}
    if(newkeys & KEY_YES)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, -611.3183,2325.3333,79.5786))  // Mina Entrada
        {
            if(Armados(playerid) && PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado a la mina.");
            if(PlayerInfo[playerid][pTrabajo] == T_Minero || PlayerInfo[playerid][pTrabajo2] == T_Minero)
            {
                if(GetPlayerSkin(playerid) == 27 || GetPlayerSkin(playerid) == 131) return SetPosEx(playerid,-718.7835,2462.5969,9.9039,192.4327,9,9);
                else return SendClientMessage(playerid,-1,"Necesitas la ropa de minero para poder ingresar a la mina.");
            }
            else return SendClientMessage(playerid,-1,"Necesitas el trabajo de minero para poder ingresar a la mina.");
        }
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-718.7835,2462.5969,9.9039))        // Mina Salida
        {
            if(PlayerInfo[playerid][pTrabajo] == T_Minero || PlayerInfo[playerid][pTrabajo2] == T_Minero) return SetPosEx(playerid,-611.3183,2325.3333,79.5786,307.3289,0,0);
            else return SendClientMessage(playerid,-1,"Necesitas el trabajo de minero para poder salir de la mina.");
        }
        if(PlayerToPoint(5.0, playerid, 830.1780,-2962.6921,11.9932))
        {
            MoveDynamicObject(controls[8], 833.4200, -2963.8000, 11.7460+SPEED_CONTROLS, SPEED_CONTROLS, 0.0000, -10.0000, 0.0000);
            SetTimer("CerrarIsla1", 3000, 0);
            return 1;
        }
        if (PlayerToPoint(5.0, playerid, 836.8367,-2955.8198,12.2332))
        {
            MoveDynamicObject(controls[9], 833.4100, -2954.5200, 12.1000+SPEED_CONTROLS, SPEED_CONTROLS, 0.0000, 10.0000, 0.0000);
            SetTimer("CerrarIsla2", 3000, 0);
            return 1;
        }
        if(EnAscensor(playerid))
        {
            new stringas1[24],stringas2[24],stringas3[24],stringas4[24],stringas5[24],stringas6[24],stringas7[24],stringas8[24],stringas9[24],stringas10[24];
            switch(Piso[playerid])
            {
                case 1: stringas1 = "{FFFFFF}"; case 2: stringas2 = "{FFFFFF}";
                case 3: stringas3 = "{FFFFFF}"; case 4: stringas4 = "{FFFFFF}";
                case 5: stringas5 = "{FFFFFF}"; case 6: stringas6 = "{FFFFFF}";
                case 7: stringas7 = "{FFFFFF}"; case 8: stringas8 = "{FFFFFF}";
                case 9: stringas9 = "{FFFFFF}"; case 10: stringas10 = "{FFFFFF}";
            }
            new string[256];
            format(string,sizeof(string),"{8baab7}%sPiso 1\n{8baab7}%sPiso 2\n{8baab7}%sPiso 3\n{8baab7}%sPiso 4\n{8baab7}%sPiso 5\n{8baab7}%sPiso 6\n{8baab7}%sPiso 7\n{8baab7}%sPiso 8\n{8baab7}%sPiso 9\n{8baab7}%sPiso 10",stringas1,stringas2,stringas3,stringas4,stringas5,stringas6,stringas7,stringas8,stringas9,stringas10);
            ShowPlayerDialog(playerid, DASCENSOR, DIALOG_STYLE_LIST, "Ascensor", string, "Aceptar" , "Cancelar");
            Piso[playerid] = 0;
        }
        DarTrabajo(playerid);
        if(IsPlayerInRangeOfPoint(playerid, 3.6,1219.3627,-7.0459,1001.3281) && Bailarina1 == 0) darAfinidad(playerid,1);
        if(IsPlayerInRangeOfPoint(playerid, 2.5,1214.0870,-4.2850,1001.3281) && Bailarina2 == 0) darAfinidad(playerid,2);
        if(IsPlayerInRangeOfPoint(playerid, 2.0,1202.8500,9.1434,1000.9219) && Bailarina3 == 0) darAfinidad(playerid,3);
        if(IsPlayerInRangeOfPoint(playerid, 2.5,1220.9673,8.2033,1001.3356) && Bailarina4 == 0) darAfinidad(playerid,4);
        if(IsPlayerInRangeOfPoint(playerid, 2.5,1208.4001,-6.2825,1001.3281) && Bailarina5 == 0) darAfinidad(playerid,5);
        if(IsPlayerInRangeOfPoint(playerid, 2.5,1202.9122,-8.3771,1002.0255) && Bailarina6 == 0) darAfinidad(playerid,6);
        if(TienePorro[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoFumarPorro] - gettime() <= 0)
            {
                if(GetPlayerAnimationIndex(playerid) != 1189) return SendClientMessage(playerid,-1,"No puedes hacer eso en movimiento.");
                Tiempos[playerid][TiempoFumarPorro] = gettime() + 8;
                if(PlayerInfo[playerid][j_ARMOUR] >= 100 && PlayerInfo[playerid][j_HEALTH] >= 100) SetPlayerHealthEx(playerid, 100),SetPlayerArmourEx(playerid, 100);
                else if(PlayerInfo[playerid][j_HEALTH] >= 100) SetPlayerHealthEx(playerid, 100),GivePlayerArmour(playerid, 5.0);
                else GivePlayerHealth(playerid, 5.0);
                if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "GANGS", "SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 0);
                TienePorro[playerid] --;
                if(TienePorro[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
            }
        }
        if(TieneSprunk[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoBebida] - gettime() <= 0)
            {
                TieneSprunk[playerid] --;
                Tiempos[playerid][TiempoBebida] = gettime() + 3;
                if(PlayerInfo[playerid][pSed] <= 5) PlayerInfo[playerid][pSed] = 0;
				else PlayerInfo[playerid][pSed] -= 5;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneSprunk[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
				if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 1);
            }
        }
        if(TieneAquariu[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoBebida] - gettime() <= 0)
            {
                TieneAquariu[playerid] --;
                Tiempos[playerid][TiempoBebida] = gettime() + 3;
                if(PlayerInfo[playerid][pSed] <= 10) PlayerInfo[playerid][pSed] = 0;
				else PlayerInfo[playerid][pSed] -= 10;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneAquariu[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
				if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 1);
            }
        }
        if(TienePizza[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoBebida] - gettime() <= 0)
            {
                TienePizza[playerid] --;
                Tiempos[playerid][TiempoBebida] = gettime() + 3;
                if(PlayerInfo[playerid][pHambre] <= 7) PlayerInfo[playerid][pHambre] = 0;
				else PlayerInfo[playerid][pHambre] -= 7;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, false, false, false, 0, false);
				if(TienePizza[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
				if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 1);
            }
        }
        if(TieneCerveza[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoBebida] - gettime() <= 0)
            {
                TieneCerveza[playerid] --;
                new borrachera = GetPlayerDrunkLevel(playerid);
                SetPlayerDrunkLevel(playerid, borrachera + 5000);
                Tiempos[playerid][TiempoBebida] = gettime() + 3;
                if(GetPlayerDrunkLevel(playerid) > 15000) return Borracho(playerid);
                if(PlayerInfo[playerid][pSed] <= 5) PlayerInfo[playerid][pSed] = 0;
				else PlayerInfo[playerid][pSed] -= 5;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneCerveza[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
				if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 1);
            }
        }
        if(TieneVino[playerid] > 0)
        {
            if(Tiempos[playerid][TiempoBebida] - gettime() <= 0)
            {
                TieneVino[playerid] --;
                new borrachera = GetPlayerDrunkLevel(playerid);
                SetPlayerDrunkLevel(playerid, borrachera + 2000);
                if(GetPlayerDrunkLevel(playerid) > 15000) return Borracho(playerid);
                Tiempos[playerid][TiempoBebida] = gettime() + 3;
                if(PlayerInfo[playerid][pSed] <= 4) PlayerInfo[playerid][pSed] = 0;
				else PlayerInfo[playerid][pSed] -= 4;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneVino[playerid] == 0) RemovePlayerAttachedObject(playerid,4);
				if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 1);
            }
        }
        if(Alquilado == true && PermisoSalon[playerid] == true || strcmp(PlayerInfo[playerid][Nickname],Alquilador,true) == 0 || Alquilado == false)
        {
            if(IsPlayerInRangeOfPoint(playerid,1,-1257.0300, 2096.7400, 1246.8900))
            {
                if(PuertaAbierta[0] == 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[0],-1258.2170, 2096.6799, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
                    PuertaAbierta[0] = 1;
                }
                else if(PuertaAbierta[0] == 1)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[0],-1256.8500, 2096.6799, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
                    PuertaAbierta[0] = 0;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid,1,-1244.8000, 2116.8301, 1246.8300))
            {
                if(PuertaAbierta[1] == 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[1],-1244.6700, 2117.0041, 1245.5200,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[1] = 1;
                }
                else if(PuertaAbierta[1] == 1)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[1],-1244.6700, 2115.6001, 1245.5200,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[1] = 0;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid,1, -1244.7800, 2084.8201, 1246.8900))
            {
                if(PuertaAbierta[2] == 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[2],-1244.7400, 2083.5960, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[2] = 1;
                }
                else if(PuertaAbierta[2] == 1)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[2],-1244.7400, 2085.0000, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[2] = 0;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid,1, -1242.7600, 2087.8401, 1246.8300))
            {
                if(PuertaAbierta[3] == 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[3],-1245.3040, 2087.7700, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
                    PuertaAbierta[3] = 1;
                }
                else if(PuertaAbierta[3] == 1)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[3],-1244.4800, 2087.7700, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
                    PuertaAbierta[3] = 0;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid,1, -1232.6200, 2027.6801, 1246.8900))
            {
                if(PuertaAbierta[4] == 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[4],-1232.5699, 2026.5060, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[4] = 1;
                }
                else if(PuertaAbierta[4] == 1)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveObject(Puerta[4],-1232.5699, 2027.9100, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
                    PuertaAbierta[4] = 0;
                }
            }
        }
        if(EnBotiquin(playerid)) MostrarBotiquin(playerid);
        if(EnCajero(playerid)) ShowPlayerDialog(playerid, BANCO, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona la operación que desees realizar", "Retirar\nDepositar\nConsultar saldo \nTransferir dinero", "Seleccionar", "Cancelar");
        if(EnVerMapa(playerid)) ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "Puntos de interés", "Concesionarios\nLugares de trabajo\nTiendas de ropa\nBancos\nTienda 24/7\nEdificios Municipales\nFerreterias\nGranjas\nIglesias\nTienda BabyZone\nTaller Tuning", "Siguiente", "Cerrar");
        MostrarHeladera(playerid);
        for(new f = 0; f < MAX_FABRICAS; f++)
		{
		    if(Fabricas[f][pEnUso] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid,0.6,-2022.8929, 253.0043, 1036.1030))
				{
					if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
					{
						if(PlayerInfo[playerid][pRango] == 8)
						{
							if(GetPlayerInterior(playerid) != Fabricas[f][pInt] && GetPlayerVirtualWorld(playerid) != Fabricas[f][pVW]) return 1;
							if(PuertaAbiertaFabrica[f] == 0)
							{
								PuertaAbiertaFabrica[f] = 1;
								ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
								MoveDynamicObject(Fabricas[f][pPuerta],-2022.93274, 255.60370, 1036.06921, 0.8);
							}
							else
							{
								PuertaAbiertaFabrica[f] = 0;
								ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
								MoveDynamicObject(Fabricas[f][pPuerta],-2022.93274, 254.14169, 1036.06921, 0.7);
							}
						}
						else SendClientMessage(playerid,-1,"Solamente el {FF0000}líder de la banda{FFFFFF} puede abrir esta puerta.");
					}
				}
				//HORNOS
				if(IsPlayerInRangeOfPoint(playerid,3,-1992.2786, 194.1294, 1035.4269))
				{
					if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
					{
						if(GetPlayerInterior(playerid) != Fabricas[f][pInt] && GetPlayerVirtualWorld(playerid) != Fabricas[f][pVW]) return 0;
						if(HornoUsarP[playerid] != 0) return 1;
						switch(HornoEncendido1[f])
						{
							case 0:
							{
								if(Fabricas[f][pTanqueUno] == 0 && Fabricas[f][pTanqueDos] == 0 && Fabricas[f][pTanqueTres] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
								Fabricas[f][humo1] = CreateDynamicObject(18725, -1992.2786, 194.1294, 1035.4269-1.3,   0.00000, 0.00000, 16.73000, Fabricas[f][pVW],Fabricas[f][pInt]);
								HornoUsarP[playerid] = 2;
								new string[256];
								Fabricas[f][tiempoh1] = SetTimerEx("Horno1",segundos(TIEMPO_COCINA),true,"d",f);
								AccionesRol(playerid, "encendió una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido1[f] = 1;
								format(string,sizeof(string),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje1],EstadoH(HornoEncendido1[f]),EstadoHo(HornoEncendido1[f]),EstadoCristal(Fabricas[f][Crisol1]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla1], COLOR_ROJO, string);
							}
							case 1:
							{
								DestroyDynamicObject(Fabricas[f][humo1]);
								HornoUsarP[playerid] = 2;
								new string[256];
								KillTimer(Fabricas[f][tiempoh1]);
								AccionesRol(playerid, "apagó una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido1[f] = 0;
								format(string,sizeof(string),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje1],EstadoH(HornoEncendido1[f]),EstadoHo(HornoEncendido1[f]),EstadoCristal(Fabricas[f][Crisol1]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla1], COLOR_ROJO, string);
							}
						}
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,3,-1995.6786, 194.1294, 1035.4269))
				{
					if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
					{
						if(GetPlayerInterior(playerid) != Fabricas[f][pInt] && GetPlayerVirtualWorld(playerid) != Fabricas[f][pVW]) return 0;
						if(HornoUsarP[playerid] != 0) return 1;
						switch(HornoEncendido2[f])
						{
							case 0:
							{
								if(Fabricas[f][pTanqueCuatro] == 0 && Fabricas[f][pTanqueCinco] == 0 && Fabricas[f][pTanqueSeis] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
								Fabricas[f][humo2] = CreateDynamicObject(18725, -1995.6786, 194.1294, 1035.4269-1.3,   0.00000, 0.00000, 16.73000, Fabricas[f][pVW],Fabricas[f][pInt]);
								HornoUsarP[playerid] = 2;
								new string[256];
								Fabricas[f][tiempoh2] = SetTimerEx("Horno2",segundos(TIEMPO_COCINA),true,"d",f);
								AccionesRol(playerid, "encendió una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido2[f] = 1;
								format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, string);
							}
							case 1:
							{
								DestroyDynamicObject(Fabricas[f][humo2]);
								HornoUsarP[playerid] = 2;
								new string[256];
								KillTimer(Fabricas[f][tiempoh2]);
								AccionesRol(playerid, "apagó una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido2[f] = 0;
								format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, string);
							}
						}
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,3,-1999.1986, 194.1294, 1035.4269))
				{
					if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
					{
						if(GetPlayerInterior(playerid) != Fabricas[f][pInt] && GetPlayerVirtualWorld(playerid) != Fabricas[f][pVW]) return 0;
						if(HornoUsarP[playerid] != 0) return 1;
						switch(HornoEncendido3[f])
						{
							case 0:
							{
								if(Fabricas[f][pTanqueSiete] == 0 && Fabricas[f][pTanqueOcho] == 0 && Fabricas[f][pTanqueNueve] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
								Fabricas[f][humo3] = CreateDynamicObject(18725, -1999.1986, 194.1294, 1035.4269-1.3,   0.00000, 0.00000, 16.73000, Fabricas[f][pVW],Fabricas[f][pInt]);
								HornoUsarP[playerid] = 2;
								new string[256];
								Fabricas[f][tiempoh3] = SetTimerEx("Horno3",segundos(TIEMPO_COCINA),true,"d",f);
								AccionesRol(playerid, "encendió una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido3[f] = 1;
								format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, string);
							}
							case 1:
							{
								DestroyDynamicObject(Fabricas[f][humo3]);
								HornoUsarP[playerid] = 2;
								new string[256];
								KillTimer(Fabricas[f][tiempoh3]);
								AccionesRol(playerid, "apagó una cocina de metanfetamina.", 20);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
								HornoEncendido3[f] = 0;
								format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
								UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, string);
							}
						}
					}
				}
			}
		}
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14) MostrarEstanteria(playerid);
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -23.2806,-55.6424,1003.5469) || IsPlayerInRangeOfPoint(playerid, 1.5, -30.5101,-28.9864,1003.5573) || IsPlayerInRangeOfPoint(playerid, 1.5, -28.0060,-89.9514,1003.5469))  // 24/7
        {
            if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
            {
                ShowPlayerDialog(playerid, PRODUCTOS, DIALOG_STYLE_LIST, "{DBED15}Productos y servicios (24/7).", "Teléfono móvil ($1500)\nGuía telefónica ($35)\nTraba de seguridad para vehículos\nAlarma para vehículos.\nRadio comunicador ($2000)\nGPS ($800)\nBebida para guardar en heladera: Cerveza x6 unidades ($470)\nBebida para guardar en heladera: Vino x6 unidades ($590)\nBebida para guardar en heladera: Sprunk x4 unidades ($200)\nBebida: Sprunk ($65)", "Comprar", "Salir");
                return 1;
            }
        }
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -784.2098,500.1945,1371.7422)) // Restaurante
        {
            if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
            {
                new cervezas[30],vino[30],sprunk[30],aquarius[30];
                for(new p; p < MAX_PROPIEDADES; p++)
                {
                    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                    {
                        switch(PropInfo[p][pCerveza]) { case 0: format(cervezas,sizeof(vino),"{EB0000}Cerveza"); default: format(cervezas,sizeof(vino),"{FFFFFF}Cerveza"); }
                        switch(PropInfo[p][pVino]) { case 0: format(vino,sizeof(vino),"{EB0000}Vino"); default: format(vino,sizeof(vino),"{FFFFFF}Vino"); }
                        switch(PropInfo[p][pSprunk]) { case 0: format(sprunk,sizeof(sprunk),"{EB0000}Vaso de sprunk"); default: format(sprunk,sizeof(sprunk),"{FFFFFF}Vaso de sprunk"); }
                        switch(PropInfo[p][pAquarius]) { case 0: format(aquarius,sizeof(aquarius),"{EB0000}Aquarius"); default: format(aquarius,sizeof(aquarius),"{FFFFFF}Aquarius"); }
                    }
                }
                new string[256];
                format(string,sizeof(string),"Producto\tPrecio\n%s\t{00CC00}$80{FFFFFF}\n%s\t{00CC00}$100\n%s\t{00CC00}$60{FFFFFF}\n%s\t{00CC00}$160{FFFFFF}",cervezas,vino,sprunk,aquarius);
                ShowPlayerDialog(playerid, PRODUCTOS2, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos",string,"Comprar", "Salir");
            }
        }
        if(IsPlayerInRangeOfPoint(playerid, 1.5, 373.7276,-118.8039,1001.4922)) // Pizzeria
        {
            if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0) ShowPlayerDialog(playerid, DIALOG_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos","Producto\tPrecio\nPorción de pizza\t{00CC00}$40{FFFFFF}\nPizza completa {232621}- (Para llevar)\t{00CC00}$300{FFFFFF}\nSprunk\t{00CC00}$70{FFFFFF}\nAquarius\t{00CC00}$170{FFFFFF}","Comprar", "Salir");
        }
        if(IsPlayerInRangeOfPoint(playerid, 1.5, 1214.8492,-13.3533,1000.9219) || IsPlayerInRangeOfPoint(playerid, 2.0, 969.3793,-44.8069,1001.1172) ||IsPlayerInRangeOfPoint(playerid, 2.0, 214.9070,-13.3532,1000.9219) ||IsPlayerInRangeOfPoint(playerid, 2.0, -1262.6428,2119.9490,1246.5457) || IsPlayerInRangeOfPoint(playerid, 2.0, -1396.3044,-320.4939,1052.0834) || IsPlayerInRangeOfPoint(playerid, 2.0, 499.9690,-20.6826,1000.6797)) // Salón de eventos
        {
            if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0) ShowPlayerDialog(playerid, DIALOG_SALON, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos","Producto\tPrecio\nVino\t{00CC00}$110{FFFFFF}\nCerveza\t{00CC00}$80{FFFFFF}\nVaso de sprunk\t{00CC00}$70{FFFFFF}\nAquarius\t{00CC00}$170{FFFFFF}","Comprar", "Salir");
        }
        //Tienda DP
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -1062.5808,-2556.3596,2876.4106)) ShowModelSelectionMenu(playerid, objetos, "Catalogo de prendas");
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -1050.7212,-2557.5125,2876.4106)) ShowPlayerDialog(playerid, DIALOG_ROPA, DIALOG_STYLE_LIST, "Catalogo de ropa", "Ropa Hombre\t$1.500\nRopa Mujer\t$1.500","Aceptar", "Cancelar");
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -1053.5027,-2568.4131,2876.4106)) callcmd::tienda(playerid);
        //Fin Tienda DP
       	if(PlayerToPoint(10.0, playerid, -88.1874,-1127.1766,1.0847))
       	{
  			if(!IsPlayerInAnyVehicle(playerid))
 	   		{
  				if(PlayerInfo[playerid][CasaID] == 59 || PlayerInfo[playerid][CasaID2] == 59 || PlayerInfo[playerid][pAdmin] >= 5)
      			{
         			if(PortonAbiertoCasa == 0)
    	       		{
  	          			PortonAbiertoCasa = 1;
  	        			MoveDynamicObject(controls[10],-84.5720, -1118.8861, 0.2805,2);
					}
 	  				else
    	  			{
  	      				PortonAbiertoCasa = 0;
      	     			MoveDynamicObject(controls[10], -87.67600, -1127.18213, 0.28050,2);
          			}
           		}
      		}
			// BOTONES FORT CARSON
			new enbotonFC = 0;
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 223.1140, 1429.5740, 1091.4900)) enbotonFC = 1;
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 211.4600, 1442.8979, 1091.4900)) enbotonFC = 2;
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 206.8940, 1442.9100, 1085.2300)) enbotonFC = 3;
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 201.4500, 1447.4900, 1085.2100)) enbotonFC = 4;
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 170.3860, 1450.8101, 1085.2100)) enbotonFC = 5;
			if(enbotonFC > 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0) return SendClientMessage(playerid,-1,"Acceso denegado.");
				{
					if(enbotonFC == 1) MoveDynamicObject(PuertasFC[1],220.6440, 1429.5300, 1091.4500,3),SetTimer("Cerrar_RejaFC1", 3000, 0);
					if(enbotonFC == 2) MoveDynamicObject(PuertasFC[2],208.9680, 1442.9100, 1091.4399,3),SetTimer("Cerrar_RejaFC2", 3000, 0);
					if(enbotonFC == 3) MoveDynamicObject(PuertasFC[3],206.6800, 1440.3900, 1085.0900,3),SetTimer("Cerrar_RejaFC3", 3000, 0);
					if(enbotonFC == 4) MoveDynamicObject(PuertasFC[4],201.3900, 1448.9821, 1083.8400,3),SetTimer("Cerrar_RejaFC4", 3000, 0);
					if(enbotonFC == 5)
					{
					    if(rejacuartilla == 0) rejacuartilla = 1,MoveDynamicObject(PuertasFC[5],170.3500, 1449.9479, 1085.0900,1.5);
					    if(rejacuartilla == 1) rejacuartilla = 0,MoveDynamicObject(PuertasFC[5],170.35001, 1448.48999, 1085.08997,1.5);
					}
				}
				ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
			}
            // BOTON LVPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 209.0449, 177.1701, 1003.5126))
            {
                if(PlayerInfo[playerid][pDuty] != 0)
                {
                    if(BotonesAcademia[0] == 0)
                    {
                        BotonesAcademia[0] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasLVPD[1],208.9700, 179.9100, 1003.2800,1.5);
                    }
                    else if(BotonesAcademia[0] == 1)
                    {
                        BotonesAcademia[0] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasLVPD[1],208.9700, 178.2600, 1003.2800,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON LVPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 209.1364, 160.2765, 1003.5126))
            {
                if(PlayerInfo[playerid][pDuty] > 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveDynamicObject(PuertasLVPD[2],209.0100, 157.4540, 1003.2800,1.5);
                    SetTimer("Cerrar_RejaLVPD2", 5000, 0);
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 639.9840, -187.0800, 1277.1400))
            {
                if(PlayerInfo[playerid][pDuty] > 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[1] == 0)
                    {
                        BotonesAcademia[1] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[1],636.8300, -187.1200, 1275.8000,1.5);
                    }
                    else if(BotonesAcademia[1] == 1)
                    {
                        MoveDynamicObject(PuertasACA[1],638.090027, -187.119995, 1275.800049,1.5);
                        BotonesAcademia[1] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 643.1800, -210.3840, 1277.1400))
            {
                if(PlayerInfo[playerid][pDuty] > 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[2] == 0)
                    {
                        BotonesAcademia[2] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[2],646.3500, -210.2300, 1275.8000,1.5);
                    }
                    else if(BotonesAcademia[2] == 1)
                    {
                        BotonesAcademia[2] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[2],645.059998, -210.229996, 1275.800049,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 645.2700, -217.0220, 1277.1400) || IsPlayerInRangeOfPoint(playerid, 1.0, 643.2601,-216.6602,1276.7993))
            {
                if(PlayerInfo[playerid][pDuty] > 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[3] == 0)
                    {
                        BotonesAcademia[3] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[3],646.3920, -217.0800, 1275.7600,1.5);
                    }
                    else if(BotonesAcademia[3] == 1)
                    {
                        BotonesAcademia[3] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[3],645.114014, -217.080002, 1275.760010,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 642.7260, -224.4200, 1277.1400))
            {
                if(PlayerInfo[playerid][pDuty] > 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[4] == 0)
                    {
                        BotonesAcademia[4] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[4],642.7700, -227.3580, 1275.7600,1.5);
                    }
                    else if(BotonesAcademia[4] == 1)
                    {
                        BotonesAcademia[4] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[4],642.770020, -226.110001, 1275.760010,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 642.6900, -237.2600, 1277.1400))
            {
                if(PlayerInfo[playerid][pDuty] != 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[5] == 0)
                    {
                        BotonesAcademia[5] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[5],642.7500, -236.2000, 1275.7600,1.5);
                    }
                    else if(BotonesAcademia[5] == 1)
                    {
                        BotonesAcademia[5] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[5],642.750000, -237.466003, 1275.760010,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ACADEMIA
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 645.1000, -239.8460, 1277.1400))
            {
                if(PlayerInfo[playerid][pDuty] != 0 && PlayerInfo[playerid][pRango] > 3)
                {
                    if(BotonesAcademia[6] == 0)
                    {
                        BotonesAcademia[6] = 1;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[6],643.9860, -239.7800, 1275.7600,1.5);
                    }
                    else if(BotonesAcademia[6] == 1)
                    {
                        BotonesAcademia[6] = 0;
                        ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                        MoveDynamicObject(PuertasACA[6],645.270020, -239.779999, 1275.760010,1.5);
                    }
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ABRIR PUERTA LSPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.40552, -1637.85229, 13.70560))
            {
                if(PlayerInfo[playerid][pDuty] != 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveDynamicObject(puerta_1,1581.2899, -1638.0200, 12.4100,1.5);
                    SetTimer("Cerrar_Puerta1", 5000, 0);
                }
                else AccesoDenegado(playerid);
            }
            // BOTON ABRIR PUERTA LSPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.40283, -1638.34985, 13.70560))
            {
                if(PlayerInfo[playerid][pDuty] != 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveDynamicObject(puerta_1,1581.2899, -1638.0200, 12.4100,1.5);
                    SetTimer("Cerrar_Puerta1", 5000, 0);
                }
                else AccesoDenegado(playerid);
            }
            // BOTON CELDAS LSPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 216.32980, 116.65350, 999.39240))
            {
                if(PlayerInfo[playerid][pDuty] != 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveDynamicObject(puerta_2,215.5482, 116.5364, 998.0455,1.5);
                    MoveDynamicObject(puerta_3,220.1184, 116.5364, 998.0455,1.5);
                    SetTimer("Cerrar_Puerta2", 5000, 0);
                }
                else AccesoDenegado(playerid);
            }
            // BOTON CELDAS LSPD
            if(IsPlayerInRangeOfPoint(playerid, 1.0, 216.28259, 116.40660, 999.39240))
            {
                if(PlayerInfo[playerid][pDuty] != 0)
                {
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    MoveDynamicObject(puerta_2,215.5482, 116.5364, 998.0455,1.5);
                    MoveDynamicObject(puerta_3,220.1184, 116.5364, 998.0455,1.5);
                    SetTimer("Cerrar_Puerta2", 5000, 0);
                }
                else AccesoDenegado(playerid);
            }
        }
        if(IsPlayerInRangeOfPoint(playerid, 5.0,265.9726,115.5081,1004.6172) && PlayerInfo[playerid][pFaccion] == 1) // Elevadores SAPD
        {
            ShowPlayerDialog(playerid, ELEVADORSAPD, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Estacionamiento\nHelipuerto", "Aceptar", "Cancelar");
        }
        if(IsPlayerInRangeOfPoint(playerid, 5.0,1524.4830,-1677.9261,6.2188) && PlayerInfo[playerid][pFaccion] == 1) // Elevadores SAPD
        {
            ShowPlayerDialog(playerid, ELEVADORGARAGE, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Departamento\nHelipuerto", "Aceptar", "Cancelar");
        }
        if(IsPlayerInRangeOfPoint(playerid, 5.0,1558.0905,-1675.5868,28.3955) && PlayerInfo[playerid][pFaccion] == 1) // Elevadores SAPD
        {
            ShowPlayerDialog(playerid, ELEVADORTEJADO, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Departamento\nEstacionamiento", "Aceptar", "Cancelar");
        }
        new accesoa=0;
        // Centro de emisoras
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 386.7000, 174.4800, 1040.5500))
        {
            if(Emisoras[playerid][TieneEmisora] == 1) accesoa=1;
            if(accesoa == 1)
            {
                if(YaEstaAbierta[0] == 0)
                {
                    YaEstaAbierta[0] = 1;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[0],390.000000, 174.539993, 1039.109985, 3.0);
                }
                else
                {
                    YaEstaAbierta[0] = 0;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[0],388.7088, 174.3999, 1039.1100, 3.0);
                }
            }
        }
        // Emisora 1
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0600, 178.2900, 1040.4500))
        {
            if(CabinasOcupadasEmisoras[1][0] == 1)  {   if(CabinasOcupadasEmisoras[1][1] == playerid) accesoa=1;    }
            else if(CabinasOcupadasEmisoras[1][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
            if(accesoa == 1)
            {
                if(YaEstaAbierta[1] == 0)
                {
                    YaEstaAbierta[1] = 1;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[1],349.2600, 177.4100, 1039.1100, 3.0);
                }
                else
                {
                    YaEstaAbierta[1] = 0;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[1],349.260010, 178.690002, 1039.109985, 3.0);
                }
            }
        }
        // Emisora 2
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0272, 160.3499, 1040.4500))
        {
            if(CabinasOcupadasEmisoras[2][0] == 1)  {   if(CabinasOcupadasEmisoras[2][1] == playerid) accesoa=1;    }
            else if(CabinasOcupadasEmisoras[2][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
            if(accesoa == 1)
            {
                if(YaEstaAbierta[2] == 0)
                {
                    YaEstaAbierta[2] = 1;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[2],349.2600, 159.4300, 1039.1100, 3.0);
                }
                else
                {
                    YaEstaAbierta[2] = 0;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[2],349.260010, 160.729996, 1039.109985, 3.0);
                }
            }
        }
        // Emisora 3
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0400, 148.8500, 1040.4500))
        {
            if(CabinasOcupadasEmisoras[3][0] == 1)  {   if(CabinasOcupadasEmisoras[3][1] == playerid)   accesoa=1;  }
            else if(CabinasOcupadasEmisoras[3][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
            if(accesoa == 1)
            {
                if(YaEstaAbierta[3] == 0)
                {
                    YaEstaAbierta[3] = 1;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[3],349.1800, 147.9900, 1039.1100, 3.0);
                }
                else
                {
                    YaEstaAbierta[3] = 0;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[3],349.1800, 149.2300, 1039.1100, 3.0);
                }
            }
        }
        // Emisora 4
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 363.1623, 152.4068, 1040.4500))
        {
            if(CabinasOcupadasEmisoras[4][0] == 1) { if(CabinasOcupadasEmisoras[4][1] == playerid) accesoa=1; }
            else if(CabinasOcupadasEmisoras[4][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
            if(accesoa == 1)
            {
                if(YaEstaAbierta[4] == 0)
                {
                    YaEstaAbierta[4] = 1;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[4],359.9500, 152.3300, 1039.1100, 3.0);
                }
                else
                {
                    YaEstaAbierta[4] = 0;
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
                    return MoveDynamicObject(PuertasDeBotones[4],361.2100, 152.3300, 1039.1100, 3.0);
                }
            }
        }
        for(new c = 0; c <MAX_PROPIEDADES; c++)
        {
            if(IsPlayerInRangeOfPoint(playerid,1.5,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]))
			{
				if(PropInfo[c][pEnVenta] == 1)
				{
					new Query[580];
					if(PropInfo[c][pEnVentaPor] == 0 && PropInfo[c][pPrecio] > PlayerInfo[playerid][pDinero]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar esta propiedad.");
					else if(PropInfo[c][pEnVentaPor] == 1 && PropInfo[c][pPrecio] > PlayerInfo[playerid][Moneda]) return SendClientMessage(playerid,-1,"No tienes suficientes "SERVER_COIN" para comprar esta propiedad.");
					if(PlayerInfo[playerid][pNivel] < PropInfo[c][pNivel]) return SendClientMessage(playerid,-1,"No tienes el nivel necesario para comprar esta propiedad.");
					if(PlayerInfo[playerid][CasaID] > 0 && PlayerInfo[playerid][CasaID2] > 0) return SendClientMessage(playerid,-1,"Sólo puedes tener 2 propiedades.");
					if(PlayerInfo[playerid][CasaID] == 0)
					{
						PlayerInfo[playerid][CasaID] = PropInfo[c][pID];
						mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID`='%d' WHERE `Username`='%e'",PropInfo[c][pID],PlayerInfo[playerid][Nickname]);
						mysql_tquery(handle_db,Query,"","");
					}
					else if(PlayerInfo[playerid][CasaID2] == 0)
					{
						if(PlayerInfo[playerid][pVip] == 2)
						{
							PlayerInfo[playerid][CasaID2] = PropInfo[c][pID];
							mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `CasaID2`='%d' WHERE `Username`='%e'",PropInfo[c][pID],PlayerInfo[playerid][Nickname]);
							mysql_tquery(handle_db,Query,"","");
						}
						else return SendClientMessage(playerid,-1,"Sólo los usuarios VIP pueden tener 2 propiedades.");
					}
					switch(PropInfo[c][pEnVentaPor])
					{
						case 0: QuitarDinero(playerid,PropInfo[c][pPrecio]);
						case 1: PlayerInfo[playerid][Moneda] -= PropInfo[c][pPrecio];
					}
					PropInfo[c][pEnVenta] = 0;
					PropInfo[c][pEnUso] = 1;
					format(PropInfo[c][pPropietario],40,"%s",PlayerInfo[playerid][Nickname]);
					BorrarLabelCasa(c);
					CargarPropiedad(c);
					mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `EnVenta`='0',`EnUso`='1',`Propietario`='%e',`IDPropietario`='%d' WHERE `ID`='%d'", PropInfo[c][pPropietario], PlayerInfo[playerid][pID], PropInfo[c][pID]);
					mysql_tquery(handle_db, Query, "", "");
					SendClientMessage(playerid,-1,"{00CC00}Acabas de comprar la propiedad.");
					if(PropInfo[c][pTipo] == 1) RevisarLogro(playerid, 9);
					if(PropInfo[c][pTipo] == 2) RevisarLogro(playerid, 10);
					if(PropInfo[c][pTipo] == 3) RevisarLogro(playerid, 11);
					PropInfo[c][pIDPropietario] = PlayerInfo[playerid][pID];
				}
				else SendClientMessage(playerid,-1,"Esta propiedad no esta en venta.");
			}
        }
        if(Emisoras[playerid][TieneEmisora] == 1 || PlayerInfo[playerid][pAdmin] > 2 || PlayerInfo[playerid][pDuty] == 1)
        {
            if(CercaDeObjeto(2.5,playerid,PuertaEmisora[0]))
            {
                if(PuertaAbiertaEmisora[0] == 0)
                {
                    PuertaAbiertaEmisora[0] = 1;
                    MoveDynamicObject(PuertaEmisora[0],390.000000, 174.539993, 1039.109985, 3.0);
                }
                else
                {
                    PuertaAbiertaEmisora[0] = 0;
                    MoveDynamicObject(PuertaEmisora[0],388.7088, 174.3999, 1039.1100, 3.0);
                }
            }
            else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[1]))
            {
                if((CabinasOcupadasEmisoras[1][0] == 1 && CabinasOcupadasEmisoras[1][1] == playerid) || CabinasOcupadasEmisoras[1][0] == 0 || PlayerInfo[playerid][pDuty] == 1)
                {
                    if(PuertaAbiertaEmisora[1] == 0)
                    {
                        PuertaAbiertaEmisora[1] = 1;
                        MoveDynamicObject(PuertaEmisora[1],349.2600, 177.4100, 1039.1100, 3.0);
                    }
                    else
                    {
                        PuertaAbiertaEmisora[1] = 0;
                        MoveDynamicObject(PuertaEmisora[1],349.260010, 178.690002, 1039.109985, 3.0);
                    }
                }
            }
            else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[2]))
            {
                if((CabinasOcupadasEmisoras[2][0] == 1 && CabinasOcupadasEmisoras[2][1] == playerid) || CabinasOcupadasEmisoras[2][0] == 0 || PlayerInfo[playerid][pDuty] == 1)
                {
                    if(PuertaAbiertaEmisora[2] == 0)
                    {
                        PuertaAbiertaEmisora[2] = 1;
                        MoveDynamicObject(PuertaEmisora[2],349.2600, 159.4300, 1039.1100, 3.0);
                    }
                    else
                    {
                        PuertaAbiertaEmisora[2] = 0;
                        MoveDynamicObject(PuertaEmisora[2],349.2600, 159.3700, 1039.1100, 3.0);
                    }
                }
            }
            else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[3]))
            {
                if((CabinasOcupadasEmisoras[3][0] == 1 && CabinasOcupadasEmisoras[3][1] == playerid) || CabinasOcupadasEmisoras[3][0] == 0 || PlayerInfo[playerid][pDuty] == 1)
                {
                    if(PuertaAbiertaEmisora[3] == 0)
                    {
                        PuertaAbiertaEmisora[3] = 1;
                        MoveDynamicObject(PuertaEmisora[3],349.1800, 147.9900, 1039.1100, 3.0);
                    }
                    else
                    {
                        PuertaAbiertaEmisora[3] = 0;
                        MoveDynamicObject(PuertaEmisora[3],349.1800, 149.2300, 1039.1100, 3.0);
                    }
                }
            }
            else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[4]))
            {
                if((CabinasOcupadasEmisoras[4][0] == 1 && CabinasOcupadasEmisoras[4][1] == playerid) || CabinasOcupadasEmisoras[4][0] == 0 || PlayerInfo[playerid][pDuty] == 1)
                {
                    if(PuertaAbiertaEmisora[4] == 0)
                    {
                        PuertaAbiertaEmisora[4] = 1;
                        MoveDynamicObject(PuertaEmisora[3],359.9500, 152.3300, 1039.1100, 3.0);
                    }
                    else
                    {
                        PuertaAbiertaEmisora[4] = 0;
                        MoveDynamicObject(PuertaEmisora[3],361.2100, 152.3300, 1039.1100, 3.0);
                    }
                }
            }
        }
    }
    if((newkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) || (newkeys & KEY_SPRINT) && (newkeys & KEY_FIRE) && (newkeys & KEY_CROUCH))
	{
	   	if(Muriendo[playerid] == 1 || (Tiempos[playerid][Consumible] - gettime()) > 0 || VariableCaido[playerid] == 1 || Esposando[playerid] == 2 || recogiendo[playerid] > 0) return 1;
		if(GetPlayerWeapon(playerid) == 24)
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			if(PlayerInfo[playerid][pAdmin] == 6) return 1;
			TogglePlayerControllable(playerid,0);
			SetTimerEx("DescongelarCBUG",4000,false,"d",playerid);
			SetPlayerArmedWeapon(playerid, 0);
		}
	}
    if(newkeys == KEY_LOOK_LEFT)    // Q
	{
		if(IsPlayerNPC(playerid))
		{
			foreach(new i : Player)
			{
				if(EstaEnBus[i] == 1)
				{
					new rand;
					PlayerInfo[i][pTipoCarcel] = 4;
					SetPlayerVirtualWorld(i, 15);
					SetPlayerInterior(i, 15);
					rand = random(sizeof(FortCarsonSpawn));
					SetPlayerPos(i, FortCarsonSpawn[rand][0], FortCarsonSpawn[rand][1], FortCarsonSpawn[rand][2]);
					EstaEnBus[i] = 0;
					PlayerInfo[i][pEnFC] = 1;
					CargarMapeosEx(i);
				}
			}
		}
	}
    if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 46)
    {
        PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(46)] = 0;
    }
    if(newkeys & KEY_CTRL_BACK)
    {
        if(Tiempos[playerid][RobadoReciente] > gettime()) return SendClientMessage(playerid,-1,"Tu personaje esta cansado, vuelve a intentarlo en unos segundos.");
        new abierta,lacasa;
        if(Objeto[playerid] > 0) return 1;
        for(new i = 0; i < sizeof(ObjetoRobo); i++)
        {
            switch(i)
            {
                case 0..6: lacasa=1,abierta = CasaAbierta;
                case 7..13: lacasa=2,abierta = CasaAbierta2;
                case 14..20: lacasa=3,abierta = CasaAbierta3;
                case 21..27: lacasa=4,abierta = CasaAbierta4;
                case 28..34: lacasa=5,abierta = CasaAbierta5;
                case 35..41: lacasa=6,abierta = CasaAbierta6;
                case 42..48: lacasa=7,abierta = CasaAbierta7;
                case 49..55: lacasa=9,abierta = CasaAbierta9;
                case 56..62: lacasa=11,abierta = CasaAbierta11;
                case 63..69: lacasa=12,abierta = CasaAbierta12;
                case 70..77: lacasa=18,abierta = CasaAbierta8;
                case 78..85: lacasa=10,abierta = CasaAbierta10;
            }
            if(IsValidDynamicObject(ObjetoRobo[i]))
            {
                if(PlayerNearObject(playerid,ObjetoRobo[i],10.0))
                {
                    if(EnRobarCasa(playerid) == lacasa)
                    {
                        if(abierta == 0)
                        {
                            SendClientMessage(playerid,-1,"La puerta se ha cerrado, ya no puedes robar mas objetos.");
                            break;
                        }
                        if(PlayerInfo[playerid][pNivel] < 3)
                        {
                            SendClientMessage(playerid,-1,"Solamente jugadores de nivel 3 en adelante pueden robar casas.");
                            break;
                        }
                        Tiempos[playerid][RobadoReciente] = gettime() + 5;
                        DarObjetoBaul(playerid,GetDynamicObjectModel(ObjetoRobo[i]));
                        DestroyDynamicObjectEx(ObjetoRobo[i]);
                        SendClientMessage(playerid,-1,"Tienes que {DBED15}/baul guardar objeto{FFFFFF} en un baúl y escapar antes que llegue la policía.");
                        break;
                    }
                }
            }
        }
    }
    if(newkeys & KEY_CTRL_BACK)
 	{
 	    for(new f = 0; f<MAX_FABRICAS; f++)
 	    {
			if(Fabricas[f][pEnUso] == 1)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
					{
						if(Fabricas[f][pInt] == GetPlayerInterior(playerid))
						{
							if(IsPlayerInRangeOfPoint(playerid,2.0, -1995.5045,222.0777,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen1] == 0) return 1;
										if(Fabricas[f][Almacen1] == 1) DestroyDynamicObject(Fabricas[f][Meta1][0]);
										else if(Fabricas[f][Almacen1] == 2) DestroyDynamicObject(Fabricas[f][Meta1][1]);
										Fabricas[f][Almacen1] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen1] > 2 || Fabricas[f][Almacen1] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen1] == 0) Fabricas[f][Meta1][0] = CreateDynamicObject(1271, Cajas1[0][0], Cajas1[0][1], Cajas1[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen1] == 1) Fabricas[f][Meta1][1] = CreateDynamicObject(1271, Cajas1[1][0], Cajas1[1][1], Cajas1[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen1] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -1999.6919,222.0572,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen2] == 0) return 1;
										if(Fabricas[f][Almacen2] == 1) DestroyDynamicObject(Fabricas[f][Meta2][0]);
										else if(Fabricas[f][Almacen2] == 2) DestroyDynamicObject(Fabricas[f][Meta2][1]);
										Fabricas[f][Almacen2] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen2] > 2 || Fabricas[f][Almacen2] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen2] == 0) Fabricas[f][Meta2][0] = CreateDynamicObject(1271, Cajas2[0][0], Cajas2[0][1], Cajas2[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen2] == 1) Fabricas[f][Meta2][1] = CreateDynamicObject(1271, Cajas2[1][0], Cajas2[1][1], Cajas2[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen2] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2003.9482,222.0583,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen3] == 0) return 1;
										if(Fabricas[f][Almacen3] == 1) DestroyDynamicObject(Fabricas[f][Meta3][0]);
										else if(Fabricas[f][Almacen3] == 2) DestroyDynamicObject(Fabricas[f][Meta3][1]);
										Fabricas[f][Almacen3] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen3] > 2 || Fabricas[f][Almacen3] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen3] == 0) Fabricas[f][Meta3][0] = CreateDynamicObject(1271, Cajas3[0][0], Cajas3[0][1], Cajas3[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen3] == 1) Fabricas[f][Meta3][1] = CreateDynamicObject(1271, Cajas3[1][0], Cajas3[1][1], Cajas3[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen3] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2008.3027,222.0571,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen4] == 0) return 1;
										if(Fabricas[f][Almacen4] == 1) DestroyDynamicObject(Fabricas[f][Meta4][0]);
										else if(Fabricas[f][Almacen4] == 2) DestroyDynamicObject(Fabricas[f][Meta4][1]);
										Fabricas[f][Almacen4] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen4] > 2 || Fabricas[f][Almacen4] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen4] == 0) Fabricas[f][Meta4][0] = CreateDynamicObject(1271, Cajas4[0][0], Cajas4[0][1], Cajas4[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen4] == 1) Fabricas[f][Meta4][1] = CreateDynamicObject(1271, Cajas4[1][0], Cajas4[1][1], Cajas4[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen4] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2012.3131,222.0612,1035.8225))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen5] == 0) return 1;
										if(Fabricas[f][Almacen5] == 1) DestroyDynamicObject(Fabricas[f][Meta5][0]);
										else if(Fabricas[f][Almacen5] == 2) DestroyDynamicObject(Fabricas[f][Meta5][1]);
										Fabricas[f][Almacen5] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen5] > 2 || Fabricas[f][Almacen5] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen5] == 0) Fabricas[f][Meta5][0] = CreateDynamicObject(1271, Cajas5[0][0], Cajas5[0][1], Cajas5[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen5] == 1) Fabricas[f][Meta5][1] = CreateDynamicObject(1271, Cajas5[1][0], Cajas5[1][1], Cajas5[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen5] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2016.8007,222.0583,1035.8225))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen6] == 0) return 1;
										if(Fabricas[f][Almacen6] == 1) DestroyDynamicObject(Fabricas[f][Meta6][0]);
										else if(Fabricas[f][Almacen6] == 2) DestroyDynamicObject(Fabricas[f][Meta6][1]);
										Fabricas[f][Almacen6] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen6] > 2 || Fabricas[f][Almacen6] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen6] == 0) Fabricas[f][Meta6][0] = CreateDynamicObject(1271, Cajas6[0][0], Cajas6[0][1], Cajas6[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen6] == 1) Fabricas[f][Meta6][1] = CreateDynamicObject(1271, Cajas6[1][0], Cajas6[1][1], Cajas6[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen6] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2021.0313,222.0580,1035.8225))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen7] == 0) return 1;
										if(Fabricas[f][Almacen7] == 1) DestroyDynamicObject(Fabricas[f][Meta7][0]);
										else if(Fabricas[f][Almacen7] == 2) DestroyDynamicObject(Fabricas[f][Meta7][1]);
										Fabricas[f][Almacen7] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen7] > 2 || Fabricas[f][Almacen7] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen7] == 0) Fabricas[f][Meta7][0] = CreateDynamicObject(1271, Cajas7[0][0], Cajas7[0][1], Cajas7[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen7] == 1) Fabricas[f][Meta7][1] = CreateDynamicObject(1271, Cajas7[1][0], Cajas7[1][1], Cajas7[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen7] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0, -2024.7906,223.9543,1035.8225))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen8] == 0) return 1;
										if(Fabricas[f][Almacen8] == 1) DestroyDynamicObject(Fabricas[f][Meta8][0]);
										else if(Fabricas[f][Almacen8] == 2) DestroyDynamicObject(Fabricas[f][Meta8][1]);
										Fabricas[f][Almacen8] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen8] > 2 || Fabricas[f][Almacen8] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen8] == 0) Fabricas[f][Meta8][0] = CreateDynamicObject(1271, Cajas8[0][0], Cajas8[0][1], Cajas8[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen8] == 1) Fabricas[f][Meta8][1] = CreateDynamicObject(1271, Cajas8[1][0], Cajas8[1][1], Cajas8[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen8] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0,-2024.7908,227.3648,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen9] == 0) return 1;
										if(Fabricas[f][Almacen9] == 1) DestroyDynamicObject(Fabricas[f][Meta9][0]);
										else if(Fabricas[f][Almacen9] == 2) DestroyDynamicObject(Fabricas[f][Meta9][1]);
										Fabricas[f][Almacen9] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen9] > 2 || Fabricas[f][Almacen9] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen9] == 0) Fabricas[f][Meta9][0] = CreateDynamicObject(1271, Cajas9[0][0], Cajas9[0][1], Cajas9[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen9] == 1) Fabricas[f][Meta9][1] = CreateDynamicObject(1271, Cajas9[1][0], Cajas9[1][1], Cajas9[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen9] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2.0,-2018.0074,231.9918,1035.8162))
							{
								switch(TieneCajaMeta[playerid])
								{
									case 0:
									{
										if(Fabricas[f][Almacen10] == 0) return 1;
										if(Fabricas[f][Almacen10] == 1) DestroyDynamicObject(Fabricas[f][Meta10][0]);
										else if(Fabricas[f][Almacen10] == 2) DestroyDynamicObject(Fabricas[f][Meta10][1]);
										Fabricas[f][Almacen10] --;
										GuardarCajaFabrica(playerid,f,1);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
									case 1:
									{
										if(Fabricas[f][Almacen10] > 2 || Fabricas[f][Almacen10] == 2) return SendClientMessage(playerid,-1,"No entran más cajas en este lugar.");
										if(Fabricas[f][Almacen10] == 0) Fabricas[f][Meta10][0] = CreateDynamicObject(1271, Cajas10[0][0], Cajas10[0][1], Cajas10[0][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										else if(Fabricas[f][Almacen10] == 1) Fabricas[f][Meta10][1] = CreateDynamicObject(1271, Cajas10[1][0], Cajas10[1][1], Cajas10[1][2],   0.00000, 0.00000, 0.00000, Fabricas[f][pVW],Fabricas[f][pInt]);
										Fabricas[f][Almacen10] ++;
										GuardarCajaFabrica(playerid,f,0);
										DCaja(playerid);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
									}
								}
							}
							//Retirar cajas metanfetaminas ya procesadas
							new caja,procesada;
							if(IsPlayerInRangeOfPoint(playerid,2, -2017.67334, 227.02380, 1035.15454)) caja = 0, procesada = 1;
							if(IsPlayerInRangeOfPoint(playerid,2, -2013.86060, 227.05284, 1035.15454)) caja = 1, procesada = 2;
							if(IsPlayerInRangeOfPoint(playerid,2, -2009.98157, 227.00481, 1035.15454)) caja = 2, procesada = 3;
							if(IsPlayerInRangeOfPoint(playerid,2, -2006.16040, 226.99612, 1035.15454)) caja = 3, procesada = 4;
							if(IsPlayerInRangeOfPoint(playerid,2, -2002.34033, 227.01234, 1035.15454)) caja = 4, procesada = 5;
							if(procesada > 0)
							{
								if(TieneCajaMeta[playerid] == 0)
								{
									if(Fabricas[f][Termino][caja] == 1)
									{
										Fabricas[f][Termino][caja] = 0;
										Fabricas[f][EstadoCocinero][caja] = 2;
										ActualizarLabelMoledores(f,procesada);
										TieneCajaMeta[playerid] = 1;
										DestroyDynamicObject(Fabricas[f][Bloque][caja]);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
										SetPlayerAttachedObject(playerid, 4, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
									}
								}
							}
							//Retirar Cristal (olla)
							if(IsPlayerInRangeOfPoint(playerid,2, -1992.3154,195.8535,1035.8162))
							{
								if(TieneCrisol[playerid] == 0)
								{
									if(Fabricas[f][Crisol1] == 1)
									{
										Fabricas[f][Crisol1] = 0;
										new stringas[256];
										format(stringas,sizeof(stringas),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje1],EstadoH(HornoEncendido1[f]),EstadoHo(HornoEncendido1[f]),EstadoCristal(Fabricas[f][Crisol1]));
										UpdateDynamic3DTextLabelText(Fabricas[f][olla1], COLOR_ROJO, stringas);
										TieneCrisol[playerid] = 1;
										ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
										SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
										SetPlayerAttachedObject(playerid, 4, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
										GuardarFabrica(f);
										AccionesRol(playerid,"retiró el cristal de una cocina.",20);
										SendClientMessage(playerid,-1,"Pulsa {DBED16}'H' {FFFFFF}para dejar el cristal sobre alguna {00CCFF}mesa de producción{FFFFFF}.");
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2, -1995.7380,195.8532,1035.8162))
							{
								if(TieneCrisol[playerid] == 0)
								{
									if(Fabricas[f][Crisol2] == 1)
									{
										Fabricas[f][Crisol2] = 0;
										new stringas[256];
										format(stringas,sizeof(stringas),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje2],EstadoH(HornoEncendido2[f]),EstadoHo(HornoEncendido2[f]),EstadoCristal(Fabricas[f][Crisol2]));
										UpdateDynamic3DTextLabelText(Fabricas[f][olla2], COLOR_ROJO, stringas);
										TieneCrisol[playerid] = 1;
										ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
										SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
										SetPlayerAttachedObject(playerid, 4, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
										GuardarFabrica(f);
										AccionesRol(playerid,"retiró el cristal de una cocina.",20);
										SendClientMessage(playerid,-1,"Pulsa {DBED16}'H' {FFFFFF}para dejar el cristal sobre alguna {00CCFF}mesa de producción{FFFFFF}.");
									}
								}
							}
							else if(IsPlayerInRangeOfPoint(playerid,2, -1999.2255,195.8546,1035.8162))
							{
								if(TieneCrisol[playerid] == 0)
								{
									if(Fabricas[f][Crisol3] == 1)
									{
										Fabricas[f][Crisol3] = 0;
										new stringas[256];
										format(stringas,sizeof(stringas),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[f][Porcentaje3],EstadoH(HornoEncendido3[f]),EstadoHo(HornoEncendido3[f]),EstadoCristal(Fabricas[f][Crisol3]));
										UpdateDynamic3DTextLabelText(Fabricas[f][olla3], COLOR_ROJO, stringas);
										TieneCrisol[playerid] = 1;
										ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
										SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
										SetPlayerAttachedObject(playerid, 4, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
										GuardarFabrica(f);
										AccionesRol(playerid,"retiró el cristal de una cocina.",20);
										SendClientMessage(playerid,-1,"Pulsa {DBED16}'H' {FFFFFF}para dejar el cristal sobre alguna {00CCFF}mesa de producción{FFFFFF}.");
									}
								}
							}
							//Empezar procesamiento de cristal
							new cocinero, empezo;
							if(IsPlayerInRangeOfPoint(playerid,1, -2016.3990,226.0631,1035.8225)) cocinero = 0, empezo = 1;
							if(IsPlayerInRangeOfPoint(playerid,1, -2012.5623,227.9782,1035.8162)) cocinero = 1, empezo = 2;
							if(IsPlayerInRangeOfPoint(playerid,1, -2008.6569,226.0630,1035.8162)) cocinero = 2, empezo = 3;
							if(IsPlayerInRangeOfPoint(playerid,1, -2004.9270,227.9702,1035.8162)) cocinero = 3, empezo = 4;
							if(IsPlayerInRangeOfPoint(playerid,1, -2001.0062,226.0610,1035.8162)) cocinero = 4, empezo = 5;
							if(empezo > 0)
							{
								if(Fabricas[f][TieneCocinero][cocinero] != 0)
								{
									if(Fabricas[f][EstadoCocinero][cocinero] == 2)
									{
										if(TieneCrisol[playerid] == 1)
										{
											DCaja(playerid);
											SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
											RemovePlayerAttachedObject(playerid, 4);
											Fabricas[f][EstadoCocinero][cocinero] = 1;
											TieneCrisol[playerid] = 0;
											if(cocinero == 0) Fabricas[f][tiempoc1] = SetTimerEx("JobCocinero1",segundos(TIEMPO_PROCESO),true,"d",f);
											if(cocinero == 1) Fabricas[f][tiempoc2] = SetTimerEx("JobCocinero2",segundos(TIEMPO_PROCESO),true,"d",f);
											if(cocinero == 2) Fabricas[f][tiempoc3] = SetTimerEx("JobCocinero3",segundos(TIEMPO_PROCESO),true,"d",f);
											if(cocinero == 3) Fabricas[f][tiempoc4] = SetTimerEx("JobCocinero4",segundos(TIEMPO_PROCESO),true,"d",f);
											if(cocinero == 4) Fabricas[f][tiempoc5] = SetTimerEx("JobCocinero5",segundos(TIEMPO_PROCESO),true,"d",f);
											ActualizarLabelMoledores(f,empezo);
										}
									}
									else SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");
								}
							}
							//Tanque1
							if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 209.3350, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueUno] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueUno] >= 90) { Fabricas[f][pTanqueUno] = 100; } else { Fabricas[f][pTanqueUno] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueUno]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque1], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque2
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 212.2440, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueDos] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueDos] >= 90) { Fabricas[f][pTanqueDos] = 100; } else { Fabricas[f][pTanqueDos] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueDos]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque2], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque3
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 215.3320, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueTres] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueTres] >= 90) { Fabricas[f][pTanqueTres] = 100; } else { Fabricas[f][pTanqueTres] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[f][pTanqueTres]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque3], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque4
							if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 194.5190, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueCuatro] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueCuatro] >= 90) { Fabricas[f][pTanqueCuatro] = 100; } else { Fabricas[f][pTanqueCuatro] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueCuatro]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque4], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque5
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 197.5950, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueCinco] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueCinco] >= 90) { Fabricas[f][pTanqueCinco] = 100; } else { Fabricas[f][pTanqueCinco] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueCinco]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque5], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque6
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-2025.3972, 200.4760, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueSeis] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueSeis] >= 90) { Fabricas[f][pTanqueSeis] = 100; } else { Fabricas[f][pTanqueSeis] += 10; }
									GuardarFBarril(playerid,f);
         							RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[f][pTanqueSeis]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque6], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque7
							if(IsPlayerInRangeOfPoint(playerid,3.0,-1976.9731, 200.2980, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueSiete] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueSiete] >= 90) { Fabricas[f][pTanqueSiete] = 100; } else { Fabricas[f][pTanqueSiete] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueSiete]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque7], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque8
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-1976.9731, 197.4360, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueOcho] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueOcho] >= 90) { Fabricas[f][pTanqueOcho] = 100; } else { Fabricas[f][pTanqueOcho] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueOcho]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque8], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
							//Tanque9
							else if(IsPlayerInRangeOfPoint(playerid,3.0,-1976.9731, 194.3620, 1041.0414-0.5))
							{
								if(TieneBarril[playerid] == 1)
								{
									if(Fabricas[f][pTanqueNueve] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
									if(Fabricas[f][pTanqueNueve] >= 90) { Fabricas[f][pTanqueNueve] = 100; } else { Fabricas[f][pTanqueNueve] += 10; }
									GuardarFBarril(playerid,f);
									RemovePlayerAttachedObject(playerid, 4);
									DCaja(playerid);
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
									new stringass[360];
									AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.",20);
									format(stringass,sizeof(stringass),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[f][pTanqueNueve]);
									UpdateDynamic3DTextLabelText(Fabricas[f][LTanque9], COLOR_ROJO, stringass);
									GuardarFabrica(f);
								}
							}
						}
						new mensaje = 0;
						if(QuimicosActivo[f] > 0)
						{
							for(new i = 0; i < 55; i++)
							{
								if(PlayerNearObject(playerid,Fabricas[f][Barriles][i],1.0))
								{
									if(LlegoAutoF[f] > 0)
									{
										switch(TieneBarril[playerid])
										{
											case 0:
											{
												TieneBarril[playerid] = 1;
												Participo[playerid] = 1;
												if(IsValidDynamicObject(Fabricas[f][Barriles][i])) DestroyDynamicObject(Fabricas[f][Barriles][i]);
												if(IsValidDynamic3DTextLabel(Fabricas[f][BarrilesText][i])) DestroyDynamic3DTextLabel(Fabricas[f][BarrilesText][i]);
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
												AccionesRol(playerid,"levantó un tanque de químicos.", 20);
												SendClientMessage(playerid,-1,"Pulsa {DBED15}'H'{FFFFFF} para dejar el tanque sobre el vehículo de la fabrica");
												SetPlayerAttachedObject(playerid, 4, 3632, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
											}
											default: SendClientMessage(playerid,-1,"Descarga el barril que llevas en las manos para poder agarrar otro.");
										}
										break;
									}
									else mensaje = 1;
								}
							}
							if(mensaje == 1) SendClientMessage(playerid,-1,"El vehículo de la fabrica {FF0000}no llegó{FFFFFF} al punto indicado.");
						}
						if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
						{
							new Float:a1x,Float:a1y,Float:a1z;
							GetVehiclePos(Fabricas[f][Auto1F], a1x, a1y, a1z);
							if(IsPlayerInRangeOfPoint(playerid,3.5, a1x, a1y, a1z))
							{
								if(!IsPlayerInAnyVehicle(playerid))
								{
									if(TieneBarril[playerid] == 0)
									{
										if(VehiculoConCajas[Fabricas[f][Auto1F]] == 0)
										{
											if(VehiculoConBarril[Fabricas[f][Auto1F]] > 0)
											{
												if(GetPlayerInterior(playerid) != Fabricas[f][pInt] && GetPlayerVirtualWorld(playerid) != Fabricas[f][pVW]) return 1;
												if(VehiculoConBarril[Fabricas[f][Auto1F]] == 1) { DestroyDynamicObject(BarrilMeta[f][0]); BarrilMeta[f][0] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000); }
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 2) { DestroyDynamicObject(BarrilMeta[f][1]); BarrilMeta[f][1] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000); }
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 3) { DestroyDynamicObject(BarrilMeta[f][2]); BarrilMeta[f][2] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000); }
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 4) { DestroyDynamicObject(BarrilMeta[f][3]); BarrilMeta[f][3] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000); }
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 5) { DestroyDynamicObject(BarrilMeta[f][4]); BarrilMeta[f][4] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000); }
												VehiculoConBarril[Fabricas[f][Auto1F]] --;
												TieneBarril[playerid] = 1;
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
												SetPlayerAttachedObject(playerid, 4, 3632, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
												AccionesRol(playerid, "sacó un tanque de químicos de la camioneta.", 20);
												SendClientMessage(playerid,-1,"Lleva el {00CCFF}tanque de químicos{FFFFFF} al contenedor que más lo necesite.");
											}
										}
									}
									else if(TieneBarril[playerid] == 1)
									{
										if(VehiculoConCajas[Fabricas[f][Auto1F]] == 0)
										{
											if(VehiculoConBarril[Fabricas[f][Auto1F]] < 5)
											{
												if(VehiculoConBarril[Fabricas[f][Auto1F]] == 0) AttachDynamicObjectToVehicle(BarrilMeta[f][0], Fabricas[f][Auto1F], 0.394999, -1.084999, 0.230000, 0.000000, 0.000000, 0.000000);
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 1) AttachDynamicObjectToVehicle(BarrilMeta[f][1], Fabricas[f][Auto1F], -0.519999, -1.084999, 0.199500, 0.000000, 0.000000, 0.000000);
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 2) AttachDynamicObjectToVehicle(BarrilMeta[f][2], Fabricas[f][Auto1F], -0.049999, -1.729998, 0.230000, 0.000000, 0.000000, 0.000000);
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 3) AttachDynamicObjectToVehicle(BarrilMeta[f][3], Fabricas[f][Auto1F], 0.429999, -2.320005, 0.165000, 0.000000, 0.000000, 0.000000);
												else if(VehiculoConBarril[Fabricas[f][Auto1F]] == 4) AttachDynamicObjectToVehicle(BarrilMeta[f][4], Fabricas[f][Auto1F], -0.554999, -2.285004, 0.220000, 0.000000, 0.000000, 0.000000);
												VehiculoConBarril[Fabricas[f][Auto1F]] ++;
												TieneBarril[playerid] = 0;
												Objeto[playerid] = 0;
												DCaja(playerid);
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
												RemovePlayerAttachedObject(playerid, 4);
												AccionesRol(playerid, "dejó un tanque de químicos en la camioneta.", 20);
											}
										}
									}
									if(TieneCajaMeta[playerid] == 0)
									{
										if(VehiculoConBarril[Fabricas[f][Auto1F]] == 0)
										{
											if(VehiculoConCajas[Fabricas[f][Auto1F]] > 0)
											{
												if(VehiculoConCajas[Fabricas[f][Auto1F]] == 1) { DestroyDynamicObject(CajaMeta[f][0]); CajaMeta[f][0] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[f][pVW],Fabricas[f][pInt]); }
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 2) { DestroyDynamicObject(CajaMeta[f][1]); CajaMeta[f][1] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[f][pVW],Fabricas[f][pInt]); }
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 3) { DestroyDynamicObject(CajaMeta[f][2]); CajaMeta[f][2] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[f][pVW],Fabricas[f][pInt]); }
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 4) { DestroyDynamicObject(CajaMeta[f][3]); CajaMeta[f][3] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[f][pVW],Fabricas[f][pInt]); }
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 5) { DestroyDynamicObject(CajaMeta[f][4]); CajaMeta[f][4] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[f][pVW],Fabricas[f][pInt]); }
												VehiculoConCajas[Fabricas[f][Auto1F]] --;
												TieneCajaMeta[playerid] = 1;
												Objeto[playerid] = 0;
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
												SetPlayerAttachedObject(playerid, 4, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
												AccionesRol(playerid, "agarró una caja de metanfetaminas de la camioneta.", 20);
											}
										}
									}
									else if(TieneCajaMeta[playerid] == 1)
									{
										if(VehiculoConBarril[Fabricas[f][Auto1F]] == 0)
										{
											if(VehiculoConCajas[Fabricas[f][Auto1F]] < 5)
											{
												if(VehiculoConCajas[Fabricas[f][Auto1F]] == 0) AttachDynamicObjectToVehicle(CajaMeta[f][0], Fabricas[f][Auto1F], -0.011962,-1.074538,0.107927,-0.199999,0.000000,0.000000);
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 1) AttachDynamicObjectToVehicle(CajaMeta[f][1], Fabricas[f][Auto1F], 0.000000,-1.999999,0.100000,0.349999,-1.149999,0.000000);
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 2) AttachDynamicObjectToVehicle(CajaMeta[f][2], Fabricas[f][Auto1F], -0.007348,-1.509131,0.746309,0.000000,0.000000,0.000000);
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 3) AttachDynamicObjectToVehicle(CajaMeta[f][3], Fabricas[f][Auto1F], 0.658764,-2.240282,0.650753,0.000000,34.049999,0.000000);
												else if(VehiculoConCajas[Fabricas[f][Auto1F]] == 4) AttachDynamicObjectToVehicle(CajaMeta[f][4], Fabricas[f][Auto1F], -0.714648,-2.216089,0.620124,0.000000,-29.000000,0.000000);
												VehiculoConCajas[Fabricas[f][Auto1F]] ++;
												TieneCajaMeta[playerid] = 0;
												DCaja(playerid);
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
												RemovePlayerAttachedObject(playerid, 4);
												AccionesRol(playerid, "dejó una caja con metanfetaminas en la camioneta.", 20);
											}
										}
									}
								}
							}
						}
						if(IsPlayerInRangeOfPoint(playerid,2.0, 235.7830,109.9401,1010.2188))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							{
								if(TraeDinero[playerid] == 1)
								{
									if(Fabricas[f][bolsospagados] < 6 && Fabricas[f][pSoborno] <= gettime())
									{
										new string[128];
										new day,month,year;
										getdate(year,month,day);
										RemovePlayerAttachedObject(playerid, 4);
										TraeDinero[playerid] = 0;
										Fabricas[f][bolsospagados] += 1;
										new soborno = 5-Fabricas[f][bolsospagados];
										if(Fabricas[f][bolsospagados] < 5) format(string,sizeof(string),"Tu banda pagó {00CC00}$1000000{FFFFFF} de soborno y aún falta pagar {FF0000}$%d000000{FFFFFF}.",soborno);
										else
										{
											Fabricas[f][pSoborno] = gettime()+604800;
											GuardarFabrica(f);
											format(string,sizeof(string),"Tu banda {00CC00}pagó el soborno{FFFFFF} semanal a la {3399FF}policía{FFFFFF}.",soborno);
										}
										MandarMensajeFabrica(f,string);
									}
									else SendClientMessage(playerid,-1,"El dinero del soborno ya se pagó.");
								}
							}
						}
						if(IsPlayerInRangeOfPoint(playerid,1.8, -2025.2623,253.8624,1035.8389))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda])
							{
								switch(TraeDinero[playerid])
								{
									case 0:
									{
										if(Tiempos[playerid][TiempoBolso] != 0) return 1;
										if(PuertaAbiertaFabrica[f] == 0) return 1;
										if(Fabricas[f][pCantidadDinero] < 1000000) return SendClientMessage(playerid,-1,"No hay suficiente dinero para sacar.");
										ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
										TraeDinero[playerid] = 1;
										AccionesRol(playerid,"agarró un bolso con dinero.", 20);
										Fabricas[f][pCantidadDinero] -= 1000000;
										ActualizarBolsos(f, 2);
										SetPlayerAttachedObject(playerid, 4, 1550, 1, 0.116999, -0.283999, -0.046999, -178.400024, 81.999984, -5.399999, 1.000000, 1.000000, 1.000000);
										ActualizarDineroPared(f);
										GuardarFabrica(f);
										Tiempos[playerid][TiempoBolso] = 3;
									}
									case 1:
									{
										if(Tiempos[playerid][TiempoBolso] != 0) return 1;
										if(PuertaAbiertaFabrica[f] == 0) return 1;
										ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
										TraeDinero[playerid] = 0;
										AccionesRol(playerid,"dejó un bolso de dinero en el suelo.", 20);
										Fabricas[f][pCantidadDinero] += 1000000;
										ActualizarBolsos(f, 1);
										RemovePlayerAttachedObject(playerid, 4);
										ActualizarDineroPared(f);
										GuardarFabrica(f);
										Tiempos[playerid][TiempoBolso] = 3;
									}
								}
							}
						}
						if(IsPlayerInRangeOfPoint(playerid,1.5,-2019.9447,243.5474,1035.8162))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && GetPlayerVirtualWorld(playerid) == Fabricas[f][pVW])
							{
								new string[300];
								format(string,sizeof(string),"Arma\tCantidad Disponible\n{FFFFFF}Sniper rifle\t{00CC00}%d{FFFFFF}\nEscopeta recortada\t{00CC00}%d{FFFFFF}\nMicro UZI\t{00CC00}%d{FFFFFF}\nTec-9\t{00CC00}%d{FFFFFF}",Fabricas[f][pSniper],Fabricas[f][pRecortada],Fabricas[f][pUzi],Fabricas[f][pTec9]);
								ShowPlayerDialog(playerid, F_SACARMA, DIALOG_STYLE_TABLIST_HEADERS, "Tomar arma", string, "Aceptar","Cancelar");
							}
						}
						if(IsPlayerInRangeOfPoint(playerid,1.7,-2020.3898,252.1498,1035.8389))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && GetPlayerVirtualWorld(playerid) == Fabricas[f][pVW])
							{
								if(PlayerInfo[playerid][pRango] == 8)
								{
									new string[300];
									format(string,sizeof(string),"Contratar empleados\nComprar armas\nComprar chalecos antibalas\nRegresar vehiculo de la fabrica\nRegresar vehiculo de distracción");
									ShowPlayerDialog(playerid, ADMINISTRACION, DIALOG_STYLE_LIST, "Administración de fabrica", string, "Siguiente","Salir");
								}
								else SendClientMessage(playerid,-1,"Solamente el {FF0000}líder de la banda{FFFFFF} puede administrar la fabrica.");
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid,1.5, -2020.0726,238.9793,1035.8162))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && GetPlayerVirtualWorld(playerid) == Fabricas[f][pVW])
							{
								new Float:armadura;
								GetPlayerArmour(playerid, armadura);
								if(Fabricas[f][pChalecos] < 1) return SendClientMessage(playerid,-1,"{FF0000}No quedan más chalecos{FFFFFF} antibalas en el depósito.");
								if(armadura >= 91) return SendClientMessage(playerid,-1,"{FF0000}Ya tienes{FFFFFF} un chaleco antibalas equipado.");
								SetPlayerArmourEx(playerid, 100);
								ActualizarCantidadFChale(f);
								GuardarFabrica(f);
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid,2,-2018.3846,248.9650,1035.8389))
						{
							if(PlayerInfo[playerid][pFaccion] == Fabricas[f][pBanda] && GetPlayerVirtualWorld(playerid) == Fabricas[f][pVW])
							{
								new string[128];
								format(string,sizeof(string),"Adquirir químicos\nVender metanfetamina\nPagar soborno a la policía");
								ShowPlayerDialog(playerid, ACTIVIDAD, DIALOG_STYLE_LIST, "Actividades", string, "Realizar","Cancelar");
							}
						}
					}
				}
			}
		}
	}
    if(newkeys & KEY_CTRL_BACK)
    {
        if(PuedeTomarDinero[playerid] != INVALID_ACTOR_ID)
        {
            new Float:x,Float:y,Float:z;
            GetDynamicActorPos(PuedeTomarDinero[playerid], x,y,z);
            if(IsPlayerInRangeOfPoint(playerid,5.0,x,y,z))
            {
                if(valortotal[playerid] > 0)
                {
                    PuedeTomarDinero[playerid] = INVALID_ACTOR_ID;
                    DarDineroRoboTienda(playerid);
                }
            }
        }
        if(Muriendo[playerid] != 0)
        {
            MostrarBoxMedico(playerid);
            PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
        }
    }
    if(newkeys == KEY_LOOK_BEHIND)  // 2
	{
		if(IsPlayerNPC(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, 1571.4235,-1704.3674,5.9946))
			{
				foreach(new i : Player)
				{
					if(Jail[i] == 1 && TipoPrision[i] == 1)
					{
						if(San[i] != 1)
						{
							if(PlayerInfo[i][pTipoCarcel] != 4 && EstaDomiciliaria[i] == 0)
							{
								SetPlayerVirtualWorld(i, 0);
								SetPlayerInterior(i, 0);
								PlayerInfo[i][pTipoCarcel] = 4;
								SendClientMessage(i,-1,"Estás siendo trasladado a la penitenciaría Fort Carson.");
								EstaEnBus[i] = 1;
								PlayerInfo[i][pEnFC] = 1;
								new asiento = random(8);
								switch(asiento)
								{
									case 0: PutPlayerInVehicle(i, NPC_Tren[4], 1);	case 1: PutPlayerInVehicle(i, NPC_Tren[4], 2);
									case 2: PutPlayerInVehicle(i, NPC_Tren[4], 3);	case 3: PutPlayerInVehicle(i, NPC_Tren[4], 4);
									case 4: PutPlayerInVehicle(i, NPC_Tren[4], 5);	case 5: PutPlayerInVehicle(i, NPC_Tren[4], 6);
									case 6: PutPlayerInVehicle(i, NPC_Tren[4], 7);	case 7: PutPlayerInVehicle(i, NPC_Tren[4], 8);
								}
								TogglePlayerControllable(i, 0);
								SetPVarInt(i, "IsFrozen", 0);
							}
						}
					}
				}
			}
			//SF
			if(IsPlayerInRangeOfPoint(playerid, 20, -1580.4059,716.8102,-5.2422))
			{
				foreach(new i : Player)
				{
					if(Jail[i] == 1 && TipoPrision[i] == 2)
					{
						if(PlayerInfo[i][pTipoCarcel] != 4 && EstaDomiciliaria[i] == 0)
						{
							SetPlayerVirtualWorld(i, 0);
							SetPlayerInterior(i, 0);
							PlayerInfo[i][pTipoCarcel] = 4;
							SendClientMessage(i,-1,"Estás siendo trasladado a la penitenciaría Fort Carson.");
							EstaEnBus[i] = 1;
							new asiento = random(8);
							switch(asiento)
							{
								case 0: PutPlayerInVehicle(i, NPC_Tren[5], 1);	case 1: PutPlayerInVehicle(i, NPC_Tren[5], 2);
								case 2: PutPlayerInVehicle(i, NPC_Tren[5], 3);	case 3: PutPlayerInVehicle(i, NPC_Tren[5], 4);
								case 4: PutPlayerInVehicle(i, NPC_Tren[5], 5);	case 5: PutPlayerInVehicle(i, NPC_Tren[5], 6);
								case 6: PutPlayerInVehicle(i, NPC_Tren[5], 7);	case 7: PutPlayerInVehicle(i, NPC_Tren[5], 8);
							}
							TogglePlayerControllable(i, 0);
							SetPVarInt(i, "IsFrozen", 0);
						}
					}
				}
			}
		}
    }
    if(newkeys & KEY_HANDBRAKE)
    {
        if(GetPlayerWeapon(playerid) == 4)
        {
            SetPlayerArmedWeapon(playerid, 0);
            ClearAnimations(playerid);
        }
    }
    if(newkeys & KEY_SECONDARY_ATTACK)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
            if((Tiempos[playerid][Entrando] - gettime()) <= 0)
            {
                EntrarInterior(playerid);
                SalirInterior(playerid);
            }
        }
        if(TieneCerveza[playerid] != 0 || TieneSprunk[playerid] != 0 || TienePizza[playerid] != 0 || TieneAquariu[playerid] != 0 || TienePorro[playerid] != 0 || TieneVino[playerid] != 0)
		{
			QuitarConsumibles(playerid);
			RemovePlayerAttachedObject(playerid, 4);
		}
    }
    new TextoUnidad[280];
    new Float: PosSAPD[3];
    GetPlayerPos(playerid, PosSAPD[0], PosSAPD[1], PosSAPD[2]);
    if(newkeys == KEY_LOOK_BEHIND)
    {
        if(!IsPlayerNPC(playerid))
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
                    if(Tiempos[playerid][TiempoMotor] - gettime() <= 0)
                    {
                        if(VehiculosInfo[vehicleid][vcomprable] != 1)
                        {
                            if(!BICI(vehicleid))
                            {
                                if(MotorAuto[vehicleid] == 0)
                                {
                                    if(VehicleFuel[vehicleid] <= 1) return SetTimerEx("SinGasolina",1200, false, "d",playerid);
                                    SendClientMessage(playerid, COLOR_WHITE, "Arrancando vehículo...");
                                    SetTimerEx("EncenderMotor",1200, false, "d",playerid);
                                    Tiempos[playerid][TiempoMotor] = gettime() + 2;
                                }
                                else
                                {
                                    Tiempos[playerid][TiempoMotor] = gettime() + 2;
                                    ApagarMotor(playerid);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if(newkeys & KEY_FIRE && newkeys & KEY_LOOK_BEHIND)
    {
        if(!IsPlayerNPC(playerid))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
            {
                if(Tiempos[playerid][TiempoComputadora] > gettime())
                {
                    new mensajep[126];
                    format(mensajep,126,"Por favor espera {FF3300}%d{FFFFFF} segundos.",Tiempos[playerid][TiempoComputadora] - gettime());
                    SendClientMessage(playerid, -1, mensajep);
                    return 1;
                }
                new patrulla = GetPlayerVehicleID(playerid);
                if(HELISAPD(patrulla) && PlayerInfo[playerid][pDuty] == 1 || SAPD(patrulla) && PlayerInfo[playerid][pDuty] == 1)
                {
                    new poder = 1;
                    AccionesRol(playerid,"inició la búsqueda de sospechosos en la computadora de la patrulla.", 30);
                    Tiempos[playerid][TiempoComputadora] = gettime() + 60;
                    foreach(new b : Player)
                    {
                        if(IsPlayerInRangeOfPoint(b, 30.0,PosSAPD[0],PosSAPD[1],PosSAPD[2]) && PlayerInfo[b][pDuty] == 0 && PlayerInfo[b][pCargos] < 3)
                        {
                            if((SiTieneArma(b,25) || SiTieneArma(b,27) || SiTieneArma(b,29) || SiTieneArma(b,30) || SiTieneArma(b,31) || SiTieneArma(b,33)) && (MOTO(GetPlayerVehicleID(b)) || !IsPlayerInAnyVehicle(b)))
                            {
                                format(TextoUnidad,sizeof(TextoUnidad),"[Patrulla de %s] {FFFFFF}Resultado: Se detectó a %s armado, proceder con precaución.",PlayerInfo[playerid][Nickname], PlayerInfo[b][Nickname]);
                                SendRadioPoliceMessage(TEAM_BLUE_COLOR, TextoUnidad, b);
                                PlayerInfo[b][pCargos] = 3;
                                SetPlayerWantedLevel(b, PlayerInfo[b][pCargos]);
                                ActualizarRadar();
                                poder = 0;
                            }
                        }
                    }
                    if(poder == 1)
                    {
                        new Resultado[128];
                        format(Resultado,sizeof(Resultado),"{3399FF}[Patrulla de %s] {FFFFFF}Resultado: No se detectaron sospechosos.",PlayerInfo[playerid][Nickname]);
                        SendRadioMessagePatrulla(1,-1,Resultado);
                    }
                }
            }
        }
    }
    return 1;
}
public SaveAccount(playerid)
{
	if(GetPlayerScore(playerid) == 0) return 1;
	if(JugadorLogeado[playerid] == 1)
	{
        GuardarPrendas(playerid);
		#if DEBUG_GM == 1
		printf("SaveAccount: %d", playerid);
		#endif
		JugadorLogeado[playerid] = 0;
		new Query[1000];
		new Float:x,Float:y,Float:z,Float:z_a,Float:VidaV,inte,vw;
		new day,month,year;
		getdate(year,month,day);
		for(new a = 0; a < MAX_PAUTOS; a++)
  		{
			if(autos[a][playerid] > 0)
			{
				GetVehicleDamageStatus(autos[a][playerid], VehicleInfo[playerid][a][VE1], VehicleInfo[playerid][a][VE2], VehicleInfo[playerid][a][VE3], VehicleInfo[playerid][a][VE4]);
				VehicleInfo[playerid][a][vGas] = VehicleFuel[autos[a][playerid]];
				GetVehicleHealth(autos[a][playerid], VidaV);
				GetVehiclePos(autos[a][playerid], x,y,z);
				VehicleInfo[playerid][a][vX] = x;
				VehicleInfo[playerid][a][vY] = y;
				VehicleInfo[playerid][a][vZ] = z;
				GetVehicleZAngle(autos[a][playerid], z_a);
				VehicleInfo[playerid][a][vA] = z_a;
				VehicleInfo[playerid][a][pVidaV] = VidaV;
				inte = GetVehicleInterior(autos[a][playerid]);
				vw = GetVehicleVirtualWorld(autos[a][playerid]);
				VehicleInfo[playerid][a][vinterior] = inte;
				VehicleInfo[playerid][a][vvw] = vw;
				DestroyVehicleEx(autos[a][playerid]);
				Baul[autos[a][playerid]] = 0;
				bloqueado[autos[a][playerid]] = 0;
				Luces[autos[a][playerid]] = 0;
				MotorAuto[autos[a][playerid]] = 0;
				alarma[autos[a][playerid]] = 0;
				autos[a][playerid] = 0;
				mysql_format(handle_db, Query, sizeof(Query),"UPDATE `p_vehicles` SET VE1='%d', VE2='%d', VE3='%d', VE4='%d', vGas='%d', VidaV='%f', X='%f', Y='%f', Z='%f', A='%f', Ointerior='%d', Ovw='%d' WHERE `ID`='%d'",VehicleInfo[playerid][a][VE1],VehicleInfo[playerid][a][VE2],VehicleInfo[playerid][a][VE3],VehicleInfo[playerid][a][VE4],VehicleInfo[playerid][a][vGas],VehicleInfo[playerid][a][pVidaV],VehicleInfo[playerid][a][vX],VehicleInfo[playerid][a][vY],VehicleInfo[playerid][a][vZ],VehicleInfo[playerid][a][vA],VehicleInfo[playerid][a][v0_interior],VehicleInfo[playerid][a][v0_vw],VehicleInfo[playerid][a][v_DBID]);
				mysql_tquery(handle_db, Query);
				mysql_format(handle_db, Query, sizeof(Query),"UPDATE `p_vehicles` SET vTraba='%d', Segurov='%d', OX='%f', OY='%f', OZ='%f', OA='%f', vinterior='%d', vvw='%d', Alarm='%d', Alarma='%d' WHERE `ID`='%d'",VehicleInfo[playerid][a][vTraba],VehicleInfo[playerid][a][vSeguro],VehicleInfo[playerid][a][pOX],VehicleInfo[playerid][a][pOY],VehicleInfo[playerid][a][pOZ],VehicleInfo[playerid][a][pOA],VehicleInfo[playerid][a][vinterior],VehicleInfo[playerid][a][vvw],VehicleInfo[playerid][a][vAlarm],VehicleInfo[playerid][a][vAlarma],VehicleInfo[playerid][a][v_DBID]);
				mysql_tquery(handle_db, Query);
			}
		}
		if(PlayerInfo[playerid][pDinero] < 0) PlayerInfo[playerid][pDinero] = 0;
		if(PlayerInfo[playerid][pBanco] < 0) PlayerInfo[playerid][pBanco] = 0;
		PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, PlayerInfo[playerid][@X], PlayerInfo[playerid][@Y], PlayerInfo[playerid][@Z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][@A]);
		if(EnClub[playerid] > 0)
		{
			EnClub[playerid] = 0;
			PlayerInfo[playerid][@X] = 1204.8699;
			PlayerInfo[playerid][@Y] = 12.5584;
			PlayerInfo[playerid][@Z] = 1000.921;
			PlayerInfo[playerid][pInterior] = 2;
			PlayerInfo[playerid][pMundoVirtual] = 5;
		}
		new hour,minute,second,baneo[64];
		gettime(hour, minute, second);
		format(PlayerInfo[playerid][jConexion], 90, "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minute,second);
		format(baneo,sizeof(baneo),"%02d/%02d/%02d",year,month,day);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Online`='0',`Vida`='%f', `Chaleco`='%f', `Admin`='%d', `Nivel`='%d', `Money`='%d',`GPS`='%d',`Radio`='%d',`Sexo`='%d',`Numero`='%d',`Guia`='%d',`Sonidos`='%d',`Muteos`='%d',`Barras`='%d',`Alerta`='%d',`Velocimetro`='%d',`Interior`='%d',`MundoVirtual`='%d',`NivelArmero`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][j_HEALTH], PlayerInfo[playerid][j_ARMOUR],PlayerInfo[playerid][pAdmin],PlayerInfo[playerid][pNivel],PlayerInfo[playerid][pDinero],PlayerInfo[playerid][pGPS],PlayerInfo[playerid][pRadio],PlayerInfo[playerid][pSexo],PlayerInfo[playerid][pNumero],PlayerInfo[playerid][pGuia],PlayerInfo[playerid][pSonidos],PlayerInfo[playerid][pMuteos],PlayerInfo[playerid][pBarras],PlayerInfo[playerid][pAlerta],PlayerInfo[playerid][pVelocimetro],PlayerInfo[playerid][pInterior],PlayerInfo[playerid][pMundoVirtual],PlayerInfo[playerid][pNivelArmero],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoJail`='%d',Sanciones='%d', `posX`='%f', `posY`='%f', `posZ`='%f',`posA`='%f',`Agonizando`='%d',`Trabajo`='%d',`Faccion`='%d',`ExpLadron`='%d',`NivelLadron`='%d',`NivelPiloto`='%d',`ExpPiloto`='%d',`NivelTransportista`='%d',`ExpTransportista`='%d',`TipoCarcel`='%d',`SocioHP`='%d',`LicenciaVuelo`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pTiempoJail],PlayerInfo[playerid][sancionado],PlayerInfo[playerid][@X], PlayerInfo[playerid][@Y], PlayerInfo[playerid][@Z],PlayerInfo[playerid][@A], PlayerInfo[playerid][Agonizando],PlayerInfo[playerid][pTrabajo],PlayerInfo[playerid][pFaccion],PlayerInfo[playerid][pExpLadron],PlayerInfo[playerid][pNivelLadron],PlayerInfo[playerid][pNivelMecanico],PlayerInfo[playerid][pExpMecanico],PlayerInfo[playerid][pNivelTransportista],PlayerInfo[playerid][pExpTransportista],PlayerInfo[playerid][pTipoCarcel],PlayerInfo[playerid][pSocioHP], PlayerInfo[playerid][pLicenciaVuelo],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Fecha_Ban`='%e',`IP`='%e',`Banco`='%d',`Moneda`='%d',`EnCasa`='%d',`EnRopero`='%d',`EnGarage`='%d',`TiempoPD`='%d', `totems`='%d', `arrestado`='%d', `horasjugadas`='%d',`ExpArmero`='%d',`Materiales`='%d',`NivelCamionero`='%d',`NivelBasurero`='%d',`ExpBasurero`='%d' WHERE `Username`='%e'",baneo,PlayerInfo[playerid][IP],PlayerInfo[playerid][pBanco],PlayerInfo[playerid][Moneda],PlayerInfo[playerid][EnCasa],PlayerInfo[playerid][EnRopero],PlayerInfo[playerid][EnGarage],PlayerInfo[playerid][TiempoPD], PlayerInfo[playerid][Totems], PlayerInfo[playerid][arrestado], PlayerInfo[playerid][horasjugadas],PlayerInfo[playerid][pExpArmero],PlayerInfo[playerid][pMateriales],PlayerInfo[playerid][pNivelCamionero],PlayerInfo[playerid][pNivelBasurero],PlayerInfo[playerid][pExpBasurero],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Cargos`='%d',`SkinTrabajo`='%d',`Duty`='%d',`WP0`='%d',`WP1`='%d',`WP2`='%d',`WP3`='%d',`WP4`='%d',`WP5`='%d',`WP6`='%d',`WP7`='%d',`WP8`='%d',`WP9`='%d',`WP10`='%d',`WP11`='%d',`WP12`='%d',`Experiencia`='%d',`TiempoCarcelS`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][pCargos],PlayerInfo[playerid][pModelo],PlayerInfo[playerid][pDuty],PlayerInfo[playerid][j_ARMAS][0],PlayerInfo[playerid][j_ARMAS][1],PlayerInfo[playerid][j_ARMAS][2],PlayerInfo[playerid][j_ARMAS][3],PlayerInfo[playerid][j_ARMAS][4],PlayerInfo[playerid][j_ARMAS][5],PlayerInfo[playerid][j_ARMAS][6],PlayerInfo[playerid][j_ARMAS][7],PlayerInfo[playerid][j_ARMAS][8],PlayerInfo[playerid][j_ARMAS][9],PlayerInfo[playerid][j_ARMAS][10],PlayerInfo[playerid][j_ARMAS][11],PlayerInfo[playerid][j_ARMAS][12],PlayerInfo[playerid][pExperiencia],PlayerInfo[playerid][pTiempoCarcel],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Conexion`='%e',`Sed`='%d',`Hambre`='%d',`Semillas`='%d',`RopaBasu`='%d',`RopaMedi`='%d',`RopaMeca`='%d',`RopaMine`='%d',`Martillo`='%d',`Destornillador`='%d',`Barreta`='%d',`Balde`='%d',`Patines`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][jConexion],PlayerInfo[playerid][pSed],PlayerInfo[playerid][pHambre],PlayerInfo[playerid][pSemillas], RopaBasu[playerid], RopaMedi[playerid], RopaMeca[playerid], RopaMine[playerid], PlayerInfo[playerid][pMartillo], PlayerInfo[playerid][pDestornillador], PlayerInfo[playerid][pBarreta], PlayerInfo[playerid][pBalde], PlayerInfo[playerid][pPatines],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Afinidad1`='%d',`Afinidad2`='%d',`Afinidad3`='%d',`Afinidad4`='%d',`Afinidad5`='%d',`Afinidad6`='%d',`Caramelos`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pAfinidad1],PlayerInfo[playerid][pAfinidad2],PlayerInfo[playerid][pAfinidad3],PlayerInfo[playerid][pAfinidad4],PlayerInfo[playerid][pAfinidad5],PlayerInfo[playerid][pAfinidad6],PlayerInfo[playerid][pCaramelos],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `ExpCamionero`='%d',`Agenda`='%d', `Crack`='%d',`Medicamentos`='%d',`Tranquilizantes`='%d',`Marihuana`='%d',`Trabajo2`='%d',`VIP`='%d',`Rango`='%d',`Repuestos`='%d',`TiempoDuda`='%d',`TiempoVenderJ`='%d',`TiempoAnuncio`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pExpCamionero],PlayerInfo[playerid][pAgenda],PlayerInfo[playerid][pCrack],PlayerInfo[playerid][pMedicamentos],PlayerInfo[playerid][pTranquilizantes],PlayerInfo[playerid][pMarihuana],PlayerInfo[playerid][pTrabajo2],PlayerInfo[playerid][pVip],PlayerInfo[playerid][pRango],PlayerInfo[playerid][Repuestos],Tiempos[playerid][TiempoDuda],Tiempos[playerid][TiempoVenderJ],Tiempos[playerid][TiempoAnuncio],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoOffline`='%d', `BaneosHechos`='%d',`BaneosDia`='%d', `XE`='%f',`YE`='%f',`ZE`='%f',`NivelMedico`='%d',`ExpMedico`='%d' WHERE `Username`='%e'",gettime(), PlayerInfo[playerid][BaneosD],PlayerInfo[playerid][BaneosD2],PlayerInfo[playerid][jPosE_x], PlayerInfo[playerid][jPosE_y], PlayerInfo[playerid][jPosE_z],PlayerInfo[playerid][pNivelMedico],PlayerInfo[playerid][pExpMedico],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin`='%d',`Estacionado1`='%d',`Estacionado2`='%d',`Estacionado3`='%d',`Estacionado4`='%d',`TerritorioMapa`='%d',`TerritorioAviso`='%d' WHERE `Username`='%e'", PlayerInfo[playerid][pRopa], PlayerInfo[playerid][vEstacionado1],PlayerInfo[playerid][vEstacionado2],PlayerInfo[playerid][vEstacionado3],PlayerInfo[playerid][vEstacionado4],PlayerInfo[playerid][pTerritorioMapa],PlayerInfo[playerid][pTerritorioAviso],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `ExpMinero`='%d',`PuntosCarrera`='%d',`NivelMinero`='%d',`EntradaX`='%f',`EntradaY`='%f',`EntradaZ`='%f',`IP`='%s',`NivelPescador`='%d',`ExpPescador`='%d' WHERE `Username`='%e'",PlayerInfo[playerid][pExpMinero],PlayerInfo[playerid][pPuntosCarrera],PlayerInfo[playerid][pNivelMinero],PlayerInfo[playerid][jPosE_x],PlayerInfo[playerid][jPosE_y],PlayerInfo[playerid][jPosE_z], PlayerInfo[playerid][IP],PlayerInfo[playerid][pNivelPescador],PlayerInfo[playerid][pExpPescador],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Puesto1H`='%d',`Puesto2H`='%d',`Puesto3H`='%d',`Puesto4H`='%d',`Puesto5H`='%d',`Puesto6H`='%d',`Puesto7H`='%d',`Puesto8H`='%d',`Puesto9H`='%d',`Puesto10H`='%d',`Puesto11H`='%d',`Puesto12H`='%d',`Puesto13H`='%d',`Puesto14H`='%d',`Puesto15H`='%d',`Puesto16H`='%d',`Puesto17H`='%d' WHERE `Username`='%e'", Halloween[playerid][P1Hora],Halloween[playerid][P2Hora],Halloween[playerid][P3Hora],Halloween[playerid][P4Hora],Halloween[playerid][P5Hora],Halloween[playerid][P6Hora],Halloween[playerid][P7Hora],Halloween[playerid][P8Hora],Halloween[playerid][P9Hora],Halloween[playerid][P10Hora],Halloween[playerid][P11Hora],Halloween[playerid][P12Hora],Halloween[playerid][P13Hora],Halloween[playerid][P14Hora],Halloween[playerid][P15Hora],Halloween[playerid][P16Hora],Halloween[playerid][P17Hora],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Puesto18H`='%d',`Puesto19H`='%d',`Puesto20H`='%d',`Puesto21H`='%d',`Puesto22H`='%d',`Puesto23H`='%d',`Puesto24H`='%d',`Puesto25H`='%d',`Puesto26H`='%d',`Puesto27H`='%d',`Puesto28H`='%d',`Puesto29H`='%d',`Puesto30H`='%d',`Puesto31H`='%d',`Puesto32H`='%d' WHERE `Username`='%e'",Halloween[playerid][P18Hora],Halloween[playerid][P19Hora],Halloween[playerid][P20Hora],Halloween[playerid][P21Hora],Halloween[playerid][P22Hora],Halloween[playerid][P23Hora],Halloween[playerid][P24Hora],Halloween[playerid][P25Hora],Halloween[playerid][P26Hora],Halloween[playerid][P27Hora],Halloween[playerid][P28Hora],Halloween[playerid][P29Hora],Halloween[playerid][P30Hora],Halloween[playerid][P31Hora],Halloween[playerid][P32Hora],PlayerInfo[playerid][Nickname]);
		mysql_query(handle_db, Query);
	}
	return 1;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerEnterRaceCheckpoint) PlayerID: %d", playerid);
    #endif
    if(EnCarreras[playerid] > 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,10,-1418.1959,-276.4316,1051.0911))
		{
			VueltasCarrera[playerid] ++;
			new string2[50];
			format(string2,sizeof(string2),"Vuelta: %d/5",VueltasCarrera[playerid]);
			PlayerTextDrawSetString(playerid,CarreraT[playerid][0],string2);
			if(VueltasCarrera[playerid] >= 5)
			{
				NoTeleportHack(playerid);
				DisablePlayerRaceCheckpoint(playerid);
				SetPlayerPos(playerid,-1405.2959,-309.6738,1052.0900);
                SetPlayerFacingAngle(playerid,190.0000);
                TextDrawHideForPlayer(playerid, BoxCarrera[0]);
                TextDrawHideForPlayer(playerid, BoxCarrera[1]);
                TextDrawHideForPlayer(playerid, BoxCarrera[2]);
                TextDrawHideForPlayer(playerid, BoxCarrera[3]);
                PlayerTextDrawHide(playerid, CarreraPosicion[playerid]);
                PlayerTextDrawHide(playerid, CarreraT[playerid][0]);
                PlayerTextDrawHide(playerid, CarreraT[playerid][1]);
                PlayerTextDrawHide(playerid, CarreraT[playerid][2]);
                SlotGanador ++;
                new string[250];
                if(SlotGanador == 1)
                {
                    new premio = 2800;
                    switch(ParticipantesCarrera2)
                    {
                        case 2: premio = 2800; case 3: premio = 4200;
                        case 4: premio = 5600; case 5: premio = 8600;
                        case 6: premio = 9700; case 7: premio = 10500;
                        case 8: premio = 11600; case 9: premio = 13400;
                        case 10: premio = 14800;
                    }
                    MensajeEx(playerid,-1,"¡Felicidades! Ganaste la carrera, tu premio es de {00CC00}$%d{FFFFFF}.",premio);
                    DarDinero(playerid,premio);
                    format(string,sizeof(string),"El corredor {00CCFF}%s{FFFFFF} consiguió el primer puesto tardando {00CC00}%d:%d{FFFFFF}.",PlayerInfo[playerid][Nickname],Tiempos[playerid][TiempoCarrera]/60,Tiempos[playerid][TiempoCarrera]%(60));
                    PlayerInfo[playerid][pPuntosCarrera] += 3;
                    new query[256];
                    mysql_format(handle_db,query,sizeof(query),"UPDATE usuarios SET PuntosCarrera = '%d' WHERE Username = '%e'",PlayerInfo[playerid][pPuntosCarrera],PlayerInfo[playerid][Nickname]);
                    mysql_tquery(handle_db,query);
                    RevisarLogro(playerid,7);
                }
                else if(SlotGanador == 2)
                {
                    new premio = 1000;
                    switch(ParticipantesCarrera2)
                    {
                        case 2: premio = 1000; case 3: premio = 1500;
                        case 4: premio = 2000; case 5: premio = 2500;
                        case 6: premio = 3000; case 7: premio = 3500;
                        case 8: premio = 4000; case 9: premio = 4500;
                        case 10: premio = 5450;
                    }
                    MensajeEx(playerid,-1,"Lograste terminar la carrera en el segundo lugar, tu premio es de {00CC00}$%d{FFFFFF}.",premio);
                    DarDinero(playerid,premio);
                    SendClientMessage(playerid,-1,"Conseguiste 2 puntos en el torneo del mes.");
                    format(string,sizeof(string),"El corredor {00CCFF}%s{FFFFFF} consiguió el segundo puesto tardando {00CC00}%d:%d{FFFFFF}.",PlayerInfo[playerid][Nickname],Tiempos[playerid][TiempoCarrera]/60,Tiempos[playerid][TiempoCarrera]%(60));
                    PlayerInfo[playerid][pPuntosCarrera] += 2;
                    new query[256];
                    mysql_format(handle_db,query,sizeof(query),"UPDATE usuarios SET PuntosCarrera = '%d' WHERE Username = '%e'",PlayerInfo[playerid][pPuntosCarrera],PlayerInfo[playerid][Nickname]);
                    mysql_tquery(handle_db,query);
                }
                else if(SlotGanador == 3)
                {
                   	new premio = 600;
                    switch(ParticipantesCarrera2)
                    {
                        case 3: premio = 600; case 4: premio = 800;
                        case 5: premio = 1000; case 6: premio = 1200;
						case 7: premio = 1400; case 8: premio = 1600;
                        case 9: premio = 1800; case 10: premio = 2000;
                    }
                    MensajeEx(playerid,-1,"Lograste terminar la carrera en el tercer lugar, tu premio es de {00CC00}$%d{FFFFFF}.",premio);
                    DarDinero(playerid,premio);
                    SendClientMessage(playerid,-1,"Conseguiste 1 punto en el torneo del mes.");
                    format(string,sizeof(string),"El corredor {00CCFF}%s{FFFFFF} consiguió el tercer puesto tardando {00CC00}%d:%d{FFFFFF}.",PlayerInfo[playerid][Nickname],Tiempos[playerid][TiempoCarrera]/60,Tiempos[playerid][TiempoCarrera]%(60));
                    PlayerInfo[playerid][pPuntosCarrera] += 1;
                    new query[256];
                    mysql_format(handle_db,query,sizeof(query),"UPDATE usuarios SET PuntosCarrera = '%d' WHERE Username = '%e'",PlayerInfo[playerid][pPuntosCarrera],PlayerInfo[playerid][Nickname]);
                    mysql_tquery(handle_db,query);
                }
                else if(SlotGanador > 3) {
                    format(string,sizeof(string),"El corredor {00CCFF}%s{FFFFFF} consiguió terminar en la posición %d tardando {00CC00}%d:%d{FFFFFF}.",PlayerInfo[playerid][Nickname],SlotGanador,Tiempos[playerid][TiempoCarrera]/60,Tiempos[playerid][TiempoCarrera]%(60));
                    MensajeEx(playerid,-1,"Lograste terminar la carrera en la posición %d.",SlotGanador);
                }
                foreach(new i : Player) if(IsPlayerInRangeOfPoint(i,250,-1408.8688,-304.5082,1056.4351) && GetPlayerInterior(i) == 7) SendClientMessage(i,-1,string);
                SacarCarrera(playerid,2);
                if(ParticipantesCarrera <= 0)
                {
                    ResetearCarrera();
                    HabilitarCarreras = 0;
                    Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{FF3300}Boleteria cerrada\n{DBED16}Horarios de los eventos: {FFFFFF}5hs,11hs,17hs,23hs");
                }
            }
            else
            {
                PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
                SetPlayerRaceCheckpoint(playerid,0,-1357.2258,-130.9288,1051.0356,-1365.4042,-280.5632,1045.2321,10);
                InfoCP[0][VueltasCarrera[playerid]] ++;
                new string[100];
                format(string,sizeof(string),"%d/%d",InfoCP[0][VueltasCarrera[playerid]],ParticipantesCarrera2);
                PlayerTextDrawSetString(playerid,CarreraT[playerid][1],string);
            }
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-1357.2258,-130.9288,1051.0356))
        {
            PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
            InfoCP[1][VueltasCarrera[playerid]] ++;
            SetPlayerRaceCheckpoint(playerid,0,-1365.4042,-280.5632,1045.2321,-1504.3351,-154.6163,1049.3365,10);
            new string[100];
            format(string,sizeof(string),"%d/%d",InfoCP[1][VueltasCarrera[playerid]],ParticipantesCarrera2);
            PlayerTextDrawSetString(playerid,CarreraT[playerid][1],string);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-1365.4042,-280.5632,1045.2321))
        {
            PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
            SetPlayerRaceCheckpoint(playerid,0,-1504.3351,-154.6163,1049.3365,-1418.1959,-276.4316,1051.0911,10);
            InfoCP[2][VueltasCarrera[playerid]] ++;
            new string[100];
            format(string,sizeof(string),"%d/%d",InfoCP[2][VueltasCarrera[playerid]],ParticipantesCarrera2);
            PlayerTextDrawSetString(playerid,CarreraT[playerid][1],string);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-1504.3351,-154.6163,1049.3365))
        {
            PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
            if(VueltasCarrera[playerid] == 4) SetPlayerRaceCheckpoint(playerid,1,-1418.1959,-276.4316,1051.0911,-1357.2258,-130.9288,1051.0356,10);
            else SetPlayerRaceCheckpoint(playerid,0,-1418.1959,-276.4316,1051.0911,-1357.2258,-130.9288,1051.0356,10);
            InfoCP[3][VueltasCarrera[playerid]] ++;
            new string[100];
            format(string,sizeof(string),"%d/%d",InfoCP[3][VueltasCarrera[playerid]],ParticipantesCarrera2);
            PlayerTextDrawSetString(playerid,CarreraT[playerid][1],string);
        }
	}
	if(Cosechas[playerid][RutaCosecha] != 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new autoid = GetPlayerVehicleID(playerid);
	        if(COSECHA(autoid))
	        {
	            if(Cosechas[playerid][ProgresoCosecha] > 19 && Cosechas[playerid][RutaCosecha] == 1 && Cosechas[playerid][CosechaLugar] == 1) return PagarCosechador(playerid);
	            if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 2 && Cosechas[playerid][CosechaLugar] == 1) return PagarCosechador(playerid);
	            if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 1 && Cosechas[playerid][CosechaLugar] == 2) return PagarCosechador(playerid);
	            if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 2 && Cosechas[playerid][CosechaLugar] == 2) return PagarCosechador(playerid);
	            Cosechas[playerid][ProgresoCosecha] ++;
	            RutaCosechador(playerid);
	            SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],Cosechas[playerid][ProgresoCosecha]);
	            UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
    	    }
    	}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerEnterCheckpoint) PlayerID: %d", playerid);
    #endif
    new autoid = GetPlayerVehicleID(playerid);
    // Localizar
    if(Localizando[playerid] == 1)
    {
        SendClientMessage(playerid, -1,"Si no encuentras tu vehículo, quiere decir que te lo han robado.");
        SendClientMessage(playerid, -1,"Por favor, llama a la policía para que lo recuperen.");
        DisablePlayerCheckpoint(playerid);
        Localizando[playerid] = 0;
        return 1;
    }
    // Cerrar GPS
    if(TieneGPSActivo[playerid] == 1)
    {
        TieneGPSActivo[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
        return 1;
    }
    // Pruebas Academia LV
    if(EnPrueba[playerid])
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0,635.3787,-222.2007,1276.7941))
        {
            PruebaOnline[playerid] = true;
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 608.2529,-221.9856,1276.7941, 3.0);
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid, 3.0,608.2529,-221.9856,1276.7941)) return SetPlayerCheckpoint(playerid, 593.6731,-221.9529,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,593.6731,-221.9529,1276.7941)) return SetPlayerCheckpoint(playerid, 593.2269,-261.0184,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,593.2269,-261.0184,1276.7941)) return SetPlayerCheckpoint(playerid, 587.6206,-248.2012,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,587.6206,-248.2012,1276.7941)) return SetPlayerCheckpoint(playerid, 583.4668,-237.1445,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,583.4668,-237.1445,1276.7941)) return SetPlayerCheckpoint(playerid, 552.4970,-235.8692,1280.2028, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,552.4970,-235.8692,1280.2028)) return SetPlayerCheckpoint(playerid, 552.4763,-266.4409,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,552.4763,-266.4409,1276.7941)) return SetPlayerCheckpoint(playerid, 598.8328,-266.1846,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,598.8328,-266.1846,1276.7941)) return SetPlayerCheckpoint(playerid, 636.0906,-230.4454,1276.7941, 3.0);
        if(IsPlayerInRangeOfPoint(playerid, 3.0,636.0906,-230.4454,1276.7941))
        {
            new tempo[160];
            DisablePlayerCheckpoint(playerid);
            if(Tiempos[playerid][TiempoAcademia] < 60)      format(tempo, 160, "{00CCFF}%s{FFFFFF} terminó la prueba fisica en {00CC00}%d segundos", PlayerInfo[playerid][Nickname], Tiempos[playerid][TiempoAcademia]);
            else if(Tiempos[playerid][TiempoAcademia] >= 60)    format(tempo, 160, "{00CCFF}%s{FFFFFF} terminó la prueba fisica en {00CC00}%d minutos con %d segundos", PlayerInfo[playerid][Nickname], Tiempos[playerid][TiempoAcademia]/60, Tiempos[playerid][TiempoAcademia]%(60));
            foreach(new i : Player)
            {
                if(EnAcademia(i)) SendClientMessage(i, -1, tempo);
            }
            Tiempos[playerid][TiempoAcademia] = 0;
            PruebaOnline[playerid] = false;
            EnPrueba[playerid] = false;
            return 1;
        }
    }
    // Armero Piezas
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2160.7837,-2280.9233,13.3838))
    {
        new string[256];
        format(string, 256, "Armaste {DBED15}%d {FFFFFF}piezas de armas, las cuales están listas parar crear armas.", PlayerInfo[playerid][piezas]/10);
        SendClientMessage(playerid, -1,string);
        PlayerInfo[playerid][pMateriales] += PlayerInfo[playerid][piezas]/10;
        PlayerInfo[playerid][piezas] = 0;
        Mats1[playerid] = 0, Mats2[playerid] = 0, Mats3[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1191.43,-1326.39,13.40) || IsPlayerInRangeOfPoint(playerid, 5.0, 2030.36,-1419.79,16.99)|| IsPlayerInRangeOfPoint(playerid, 5.0, 1605.58,1830.17,10.82)|| IsPlayerInRangeOfPoint(playerid, 5.0, -2662.87,631.44,14.45))
    {
        foreach(new i : Player)
        {
            if(AMBU(autoid))
            {
                if(IsPlayerInVehicle(i,autoid) && LlamadaMedicos[i] == 1)
                {
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(i,X,Y,Z);
                    if(IsPlayerInRangeOfPoint(playerid, 1.0,X , Y , Z))
                    {
                        if(Paciente[playerid] == i) Paciente[playerid] = INVALID_PLAYER_ID;
                        if(Paciente2[playerid] == i) Paciente2[playerid] = INVALID_PLAYER_ID;
                    }
                    TextDrawHideForPlayer(i, Sangre);
                    SendClientMessage(playerid, -1, "Ganaste {00CC00}$800{FFFFFF} por salvar una vida.");
                    SendClientMessage(i, -1, "Se te desconto {FF3300}$800{FFFFFF} por el servicio médico.");
                    ExpMedico(playerid);
                    new string99[128];
                    format(string99,128,"%s (ID: %d | Nivel: %d) recibe $800 por salvarle la vida a %s (ID:%d - Nivel:%d - %dhs)",PlayerInfo[playerid][Nickname],playerid,PlayerInfo[playerid][pNivel],PlayerInfo[i][Nickname],i,PlayerInfo[i][pNivel],PlayerInfo[i][horasjugadas]);
                    MensajeAdmin(COLOR_YELLOW,string99, 3);
                    QuitarDinero(i, 800);
                    DarDinero(playerid, 800);
                    RemovePlayerFromVehicle(i);
                    PacienteAmbu[i] = 0;
                    LlamadaMedicos[i] = 0;
                    MedicoCP2[playerid] = 0;
                    MedicoReanimo[i] = INVALID_PLAYER_ID;
                    TogglePlayerControllable(i, 1);
                    SetPVarInt(i, "IsFrozen", 1);
                    PlayerInfo[i][Agonizando] = 0;
                    DisablePlayerCheckpoint(playerid);
                    return 1;
                }
            }
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 7.0,2431.9109,-1672.5043,13.6113) || IsPlayerInRangeOfPoint(playerid, 7.0,1091.5337,-1245.3550,15.8272) || IsPlayerInRangeOfPoint(playerid, 7.0,1520.5901,-1473.3662,9.5000) || IsPlayerInRangeOfPoint(playerid, 7.0,2206.5029,-2296.2642,14.7647))
   	{
   	    for(new f = 0; f<MAX_FABRICAS; f++)
		if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
		{
		    if(GetPlayerVehicleID(playerid) == Fabricas[f][Auto1F])
		    {
		        if(VehiculoConCajas[Fabricas[f][Auto1F]] != 5) return SendClientMessage(playerid,-1,"Necesitas tener todas las cajas de metanfetamina en la camioneta para poder venderlas.");
				new caca;
				if(MetanfetaminaEnSlot[f] == 1) caca = 5362;
				if(MetanfetaminaEnSlot[f] == 2) caca = 7296;
				if(MetanfetaminaEnSlot[f] == 3) caca = 7121;
				if(MetanfetaminaEnSlot[f] == 4) caca = 8665;
				if(MetanfetaminaEnSlot[f] == 5) caca = 9917;
				new coco = caca + random(169), Float:Pos[3],stringas[128];
				GetVehiclePos(Fabricas[f][Auto1F], Pos[0],Pos[1],Pos[2]);
				foreach(new i : Player)
				{
					if(IsPlayerInRangeOfPoint(i,50.0, Pos[0],Pos[1],Pos[2]))
					{
					    if(PlayerInfo[i][pFaccion] == Fabricas[f][pBanda])
					    {
							DarDinero(i,coco);
							format(stringas,sizeof(stringas),"Metanfetamina transportada con éxito, recibes {00CC00}$%d{FFFFFF} por haber participado.",coco);
							SendClientMessage(i,-1,stringas);
						}
					}
                }
                DarDineroFabrica(f,1150000);
				DestroyDynamicObject(CajaMeta[f][0]);
				DestroyDynamicObject(CajaMeta[f][1]);
				DestroyDynamicObject(CajaMeta[f][2]);
				DestroyDynamicObject(CajaMeta[f][3]);
				DestroyDynamicObject(CajaMeta[f][4]);
				VehiculoConCajas[Fabricas[f][Auto1F]] = 0;
				format(stringas,sizeof(stringas),"Tu fabrica recibió {00CC00}$1.150.000{FFFFFF} por la venta de la metanfetamina.");
				DisablePlayerCheckpoint(playerid);
				MandarMensajeFabrica(f,stringas);
				GuardarFabrica(f);
				ActualizarCajasMeta(Fabricas[f][Auto1F],f);
 		    }
		}
   	}
   	if(EnRecorrido(playerid))
	{
	    for(new f = 0; f<MAX_FABRICAS; f++)
		if(Fabricas[f][pBanda] == PlayerInfo[playerid][pFaccion])
		{
			if(Fabricas[f][Auto1F] == GetPlayerVehicleID(playerid))
			{
			    LlegoAutoF[f] = 1;
				ActualizarBarriles(GetPlayerVehicleID(playerid),f);
				SendClientMessage(playerid,-1,"Carga los {00CC00}tanques{FFFFFF} en la camioneta y regresalos a la {ff3e3e}fabrica{FFFFFF}.");
				DisablePlayerCheckpoint(playerid);
			}
			else return SendClientMessage(playerid,-1,"Necesitas el {00CCFF}vehículo de la fabrica{FFFFFF} para hacer el {FF0000}recorrido{FFFFFF} de químicos.");
		}
	}
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 2880.5110,1751.4082,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -2473.1599,2303.7029,4.9844) || IsPlayerInRangeOfPoint(playerid, 7.0, -2458.4258,2292.2588,4.9844) || IsPlayerInRangeOfPoint(playerid, 7.0, 305.6055,887.2976,20.4063) || IsPlayerInRangeOfPoint(playerid, 7.0, 208.3321,-28.7516,1.5781) || IsPlayerInRangeOfPoint(playerid, 7.0, 1023.9153,2110.9341,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -1741.5210,1425.7820,7.1875) || IsPlayerInRangeOfPoint(playerid, 7.0, -2003.7317,-2413.3181,30.6250) || IsPlayerInRangeOfPoint(playerid, 7.0, 684.1342,896.0093,-39.7265) || IsPlayerInRangeOfPoint(playerid, 7.0, 586.4625,856.0408,-42.9917) || IsPlayerInRangeOfPoint(playerid, 7.0, 1335.5570,286.8253,19.5615)) //Rocas LV
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(tviaje[playerid] == 2) return 1;
        if(DFT(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SetTimerEx("RutraTransportista",1500,false,"d",playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 1607.8633,1718.3813,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 2609.3381,-2202.1799,13.5469) || IsPlayerInRangeOfPoint(playerid, 7.0, 1905.8856,958.5278,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 2316.5032,1733.3368,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 789.2708,2028.4414,6.7109) || IsPlayerInRangeOfPoint(playerid, 7.0, 2415.1252,1893.7064,6.0156) || IsPlayerInRangeOfPoint(playerid, 7.0, 2811.3918,1654.1230,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -1733.7360,184.4388,3.5547) || IsPlayerInRangeOfPoint(playerid, 7.0, -267.1364,-2151.0940,28.8347) || IsPlayerInRangeOfPoint(playerid, 7.0, -2097.1208,208.2063,35.3177) || IsPlayerInRangeOfPoint(playerid, 7.0, 1251.0417,-1258.1145,13.1514) || IsPlayerInRangeOfPoint(playerid, 7.0, 1048.7633,2111.3118,10.8203))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(DFT(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(tviaje[playerid] == 2)
                {
                    new Paga,vip_price;
                    switch(PlayerInfo[playerid][pNivelTransportista])
                    {
                        case 1: Paga = 2150;    case 2: Paga = 2300;
                        case 3: Paga = 2450;    case 4: Paga = 2600;
                        case 5: Paga = 2750;    case 6: Paga = 2900;
                    }
                    new string[128];
                    if(PlayerInfo[playerid][pVip] == 0) vip_price = 0;
                    if(PlayerInfo[playerid][pVip] == 1) vip_price = 150;
                    if(PlayerInfo[playerid][pVip] == 2) vip_price = 300;
                    new cantidad_final = Paga + vip_price;
                    if(PlayerInfo[playerid][pVip] > 0) format(string,sizeof(string),"{00CC00}¡Buen trabajo!{FFFFFF} Tus ganancias son {00CC00}$%d{FFFFFF} + {00CC00}$%d {FFFFFF}por ser ciudadano VIP.",Paga,vip_price);
                    else format(string,sizeof(string),"{00CC00}¡Buen trabajo!{FFFFFF} Tus ganancias son {00CC00}$%d{FFFFFF}.",cantidad_final);
                    SendClientMessage(playerid,-1,string);
                    if(IsValidDynamicObject(Transportistas[playerid][Objeto1])) DestroyDynamicObject(Transportistas[playerid][Objeto1]);
                    if(IsValidDynamicObject(Transportistas[playerid][Objeto2])) DestroyDynamicObject(Transportistas[playerid][Objeto2]);
                    if(IsValidDynamicObject(Transportistas[playerid][Objeto3])) DestroyDynamicObject(Transportistas[playerid][Objeto3]);
                    tviaje[playerid] = 0;
                    Transportistas[playerid][Ruta] = 0;
                    DisablePlayerCheckpoint(playerid);
                    ExpTrans(playerid);
                    if(RoboTienda[playerid] == 0) DarDinero(playerid, cantidad_final);
                    return 1;
                }
            }
        }
    }
    // Cargando camion (Camionero)
    if(IsPlayerInRangeOfPoint(playerid, 19.0, -1711.7150,62.1237,3.5495))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Necesitas estar en un camión.");
        if(CAMION(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new string[350];
            CargandoC[playerid] = 1;
            TogglePlayerControllable(playerid, 0);
            SetPVarInt(playerid, "IsFrozen", 0);
            DisablePlayerCheckpoint(playerid);
            switch(PlayerInfo[playerid][pNivelCamionero])
            {
                case 1: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$1250{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$1250{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$1250{FFFFFF} + {00CC00}4{FFFFFF} medicamentos + {FF3300}2g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$1250{FFFFFF} + {FF3300}2 piezas de armas{FFFFFF})");
                case 2: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$3500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$1500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$1500{FFFFFF} + {00CC00}6{FFFFFF} medicamentos + {FF3300}3g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$1500{FFFFFF} + {FF3300}5 piezas de armas{FFFFFF})");
                case 3: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$4500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$1750{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$1750{FFFFFF} + {00CC00}8{FFFFFF} medicamentos + {FF3300}4g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$1750{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
                case 4: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$5500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$2000{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$2000{FFFFFF} + {00CC00}10{FFFFFF} medicamentos + {FF3300}5g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$2000{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
                case 5: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$6500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$2250{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$2250{FFFFFF} + {00CC00}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
                case 6: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$7500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF} + {00CC00}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
                default: format(string, sizeof(string), "{00CC00}Productos 24/7 {FFFFFF}(Ganancias {00CC00}$7500{FFFFFF}) \n{00CC00}Ropa {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF} + {00CC00}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {00CC00}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
            }
            ShowPlayerDialog(playerid, CAMIOND,DIALOG_STYLE_LIST, "¿Qué deseas transportar?", string, "Cargar","Salir");
            SendClientMessage(playerid, -1, "Seleccionas lo que deseas cargar.");
            return 1;
        }
        else return SendClientMessage(playerid, -1, "Necesitas necesitas estar en un camión.");
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    // Descargando camion (Camionero)
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 1832.3918,-1832.4200,13.1546) || IsPlayerInRangeOfPoint(playerid, 7.0, 1338.6766,-912.8005,35.6672))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            CongelarPlayerID(playerid);
            DisablePlayerCheckpoint(playerid);
            AbrirPuertasCamionero(playerid);
            TimerDescargarCamion[playerid] = 5;
            SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
            return 1;
        }
    }
    // Recorridos Camionero
    else if(IsPlayerInRangeOfPoint(playerid, 7.0, 455.0953,-1502.9357,30.8655) || IsPlayerInRangeOfPoint(playerid, 7.0, 810.9319,-1391.0319,13.8416) || IsPlayerInRangeOfPoint(playerid, 7.0, 488.1939,-1277.0747,15.9604))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            CongelarPlayerID(playerid);
            DisablePlayerCheckpoint(playerid);
            AbrirPuertasCamionero(playerid);
            TimerDescargarCamion[playerid] = 5;
            SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
            return 1;
        }
    }
    // Recorridos Camionero 2
    else if(IsPlayerInRangeOfPoint(playerid, 7.0, 2169.3521,-2275.2957,13.1360) || IsPlayerInRangeOfPoint(playerid, 7.0, 2480.9316,-2115.3042,13.2740))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            CongelarPlayerID(playerid);
            DisablePlayerCheckpoint(playerid);
            AbrirPuertasCamionero(playerid);
            TimerDescargarCamion[playerid] = 5;
            SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
            return 1;
        }
    }
    // Pago Camionero
    if(IsPlayerInRangeOfPoint(playerid, 7.0, -1699.9927,10.2943,3.5547))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            Respawnear(vehicleid);
            DisablePlayerCheckpoint(playerid);
            Chofer[vehicleid] = INVALID_PLAYER_ID;
            CamionCargado[vehicleid] = 0;
            PlayerTemp[playerid][pt_Camionero] = false;
            if(gettime() > TimerCamionero[playerid]) PagoCamionero(playerid, PlayerInfo[playerid][pNivelCamionero], Carga[playerid]);
            else
            {
                new numero = 300-(TimerCamionero[playerid] - gettime()), query[520];
                mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='Speed Hack (%d:1:%d)',`Banpor`='Anticheat' WHERE `Username`='%e'",numero, Carga[playerid],PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, query);
				KickAntiCheat(playerid, 0, 0, "Speed Hack");
            }
            TimerCamionero[playerid] = 0;
            Carga[playerid] = 0;
            return 1;
        }
    }
    //PagaPesca
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 2786.7866,-2594.8406,-1.0248))
    {
        if(BOTE(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && RecorridoPescador[playerid] == 1)
        {
            new atext[20], peso;
            switch(pesca[playerid])
            {
                case 1: atext = "la tortuga";
                case 2: atext = "el delfin";
                case 3: atext = "el tiburon";
            }
            if(gettime() > TimerPescador[playerid]) ExpPescador(playerid,peso,atext);
            else
            {
                new numero = 300-(TimerPescador[playerid] - gettime()), query[520];
                mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='Speed Hack (%d:1:%d)',`Banpor`='Anticheat' WHERE `Username`='%e'",numero, Carga[playerid],PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, query);
				KickAntiCheat(playerid, 0, 0, "Speed Hack");
            }
            Respawnear(vehicleid);
            SetPosEx(playerid,2773.6609,-2597.2288,2.3560,357.6909,0,0);
            DestroyObject(pescador[playerid]);
            DisablePlayerCheckpoint(playerid);
            permisopesca[playerid] = 0;
            RemovePlayerMapIcon(playerid, 99);
            GangZoneHideForPlayer(playerid, mares);
            RecorridoPescador[playerid] = 0;
        }
    }
    // Basurero CP Inicio
    if(IsPlayerInRangeOfPoint(playerid, 5.0,-178.6163,-1618.1124,3.4908) && BASU(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        foreach(new i : Player)
        {
            if((PlayerInfo[i][pTrabajo] == T_Basurero || PlayerInfo[i][pTrabajo2] == T_Basurero) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleSeat(i) == 1)
            {
                if(RopaBasu[playerid] == 1 || PlayerInfo[playerid][pVip] > 0)
                {
                    if(BASU(GetPlayerVehicleID(i)) && GetPlayerVehicleID(i) == vehicleid && i != playerid)
                    {
                        Companero[i] = playerid;
                        Companero[playerid] = i;
                        PlayerTemp[i][pt_RolBasurero] = 1;
                        PlayerTemp[playerid][pt_RolBasurero] = 2;
                        SendClientMessage(playerid,-1,"Muy bien, continua el recorrido.");
                        TimerBasurero[playerid] = gettime() + 270;
                        TimerBasurero[i] = gettime() + 270;
                        PBasura[playerid] = 1;
                        PBasura[i] = 1;
                        SetTimerEx("PrimerP",500,false,"d",playerid);
                        DisablePlayerCheckpoint(playerid);
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid,-1,"{999966}Las cuentas comunes necesitan la vestimenta de basurero para trabajar.");
                    SendClientMessage(playerid,-1,"{999966}Si quieres trabajar con cualquier ropa, necesitas una cuenta VIP.");
                }
            }
        }
        SendClientMessage(playerid,-1,"Necesitas un compañero basurero para trabajar.");
        return 1;
    }
    // Basurero CP Fin
    else if(IsPlayerInRangeOfPoint(playerid, 5.0,-135.9441,-1564.9911,6.7356))
    {
        new Float:z_rot;
        GetVehicleZAngle(vehicleid, z_rot);
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && BASU(vehicleid) && RecorridoBasu[playerid] != 0 && z_rot < 200)
        {
            Respawnear(GetPlayerVehicleID(playerid));
            DisablePlayerCheckpoint(Companero[playerid]);
            DisablePlayerCheckpoint(playerid);
            PBasura[Companero[playerid]] = 0;
            PBasura[playerid] = 0;
            if(gettime() > TimerBasurero[playerid])
            {
                PagoBasurero(playerid, PlayerInfo[playerid][pNivelBasurero], RecorridoBasu[playerid]);
                DarHabilidadBasurero(playerid, PlayerInfo[playerid][pNivelBasurero]);
            }
            else
            {
                new numero = 270-(TimerBasurero[playerid] - gettime()), query[520];
                mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='Speed Hack (%d:1:%d)',`Banpor`='Anticheat' WHERE `Username`='%e'",numero, RecorridoBasu[playerid],PlayerInfo[playerid][Nickname]);
                mysql_tquery(handle_db, query);
				KickAntiCheat(playerid, 0, 0, "Speed Hack");
            }
            RecorridoBasu[Companero[playerid]] = 0;
            RecorridoBasu[playerid] = 0;
            TimerBasurero[Companero[playerid]] = 0;
            TimerBasurero[playerid] = 0;
            Companero[Companero[playerid]] = -1;
            Companero[playerid] = -1;
        }
        else return SendClientMessage(playerid,-1,"Acomoda el camion por la parte posterior al momento de entregarlo.");
    }
    else if(procesarCheckpointsBasurero(playerid)) return 1;
    else return DisablePlayerCheckpoint(playerid);
    return 1;
}
public SinGasolina(playerid)
{
    AccionesRol(playerid,"intenta encender el motor de su vehículo pero no puede.", 20);
    SendClientMessage(playerid,-1,"El vehículo necesita combustible.");
}
public EncenderMotor(playerid)
{
    MensajeSinGasoEnviado[playerid] = 0;
    new autoid;
    autoid = GetPlayerVehicleID(playerid);
    if(VehicleFuel[autoid] == 0) return AccionesRol(playerid,"intenta encender el motor de su vehículo pero no puede.", 20);
    if(averiado[autoid] != 0)
    {
        new Randoming;
        Randoming = random(3);
        switch(Randoming)
        {
            case 0: return MotorMalogrado(playerid);
            case 1: return MotorMalogrado(playerid);
            case 2:
            {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                AccionesRol(playerid,"encendió el motor de su vehículo.", 20);
                GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(autoid, 1, lights, alarm, doors, bonnet, boot, objective);
                YaEncendiendo[playerid] = 0;
                MotorAuto[autoid] = 1;
                SetTimerEx("ComprobarDanoMotor", 1000, 0, "d", playerid);
                return 1;
            }
        }
    }
    AccionesRol(playerid,"encendió el motor de su vehículo.", 20);
    GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(autoid, 1, lights, alarm, doors, bonnet, boot, objective);
    YaEncendiendo[playerid] = 0;
    MotorAuto[autoid] = 1;
    SetTimerEx("ComprobarDanoMotor", 1000, 0, "d", playerid);
    return 1;
}
public EstacionarCoche(playerid,type)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	new veh = GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
	if(veh != -1)
	{
		new query[200],Float:X,Float:Y,Float:Z,Float:z_A,Float:Health,interior = GetPlayerInterior(playerid),vw = GetPlayerVirtualWorld(playerid);
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(type == 1)
		{
			AccionesRol(playerid,"estacionó su vehículo.", 20);
			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			SetCameraBehindPlayer(playerid);
		}
		GetVehiclePos(GetPlayerVehicleID(playerid), X,Y,Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), z_A);
		GetVehicleDamageStatus(autos[veh][playerid], VehicleInfo[playerid][veh][VE1], VehicleInfo[playerid][veh][VE2], VehicleInfo[playerid][veh][VE3], VehicleInfo[playerid][veh][VE4]);
		mysql_format(handle_db,query, sizeof(query), "UPDATE `p_vehicles` SET `OX`='%f',`OY`='%f',`OZ`='%f',`OA`='%f',`Ointerior`='%d',`Ovw`='%d',`VidaVE`='%f' WHERE `ID`='%d'",Float:X,Float:Y,Float:Z,Float:z_A,interior,vw,Health,VehicleInfo[playerid][veh][v_DBID]);
		mysql_tquery(handle_db, query);
		VehicleInfo[playerid][veh][pOX] = X;
		VehicleInfo[playerid][veh][pOY] = Y;
		VehicleInfo[playerid][veh][pOZ] = Z;
		VehicleInfo[playerid][veh][pOA] = z_A;
		VehicleInfo[playerid][veh][v0_interior] = interior;
		VehicleInfo[playerid][veh][v0_vw] = vw;
		VehicleInfo[playerid][veh][pVidaVE] = Health;
		MotorAuto[GetPlayerVehicleID(playerid)] = 0;
	}
	return 1;
}
public ApagarMotor(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new carid;
        carid = GetPlayerVehicleID(playerid);
        AccionesRol(playerid,"detuvo el motor de su vehículo.", 20);
        GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
        MotorAuto[carid] = 0;
    }
    return 1;
}
public ComprobarDanoMotor(playerid)
{
    new Float:health;
    new veh = GetPlayerVehicleID(playerid);
    GetVehicleHealth(veh, health);
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(health <= 375.0)
        {
            SetVehicleHealth(veh, 375.0);
            GameTextForPlayer(playerid, "~r~MOTOR AVERIADO", 2500, 3);
            GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(veh, 0, lights, alarm, doors, bonnet, boot, objective);
            averiado[veh] = 1;
            MotorAuto[veh] = 0;
            return 1;
        }
    }
    return 1;
}
public ApareceHospital2(playerid)
{
    new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
    HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
    HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
    HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
    HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
    MedicoCP2[playerid] = 1;
    if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF)
    {
        new rand = random(sizeof(HPCPos));
        SetPosEx(playerid, HPCPos[rand][0], HPCPos[rand][1], HPCPos[rand][2], HPCPos[rand][3], 0, 0,0);
    }
    else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF)
    {
        new rand = random(sizeof(HPGPos));
        SetPosEx(playerid, HPGPos[rand][0], HPGPos[rand][1], HPGPos[rand][2], HPGPos[rand][3], 0, 0,0);
    }
    else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF)
    {
        new rand = random(sizeof(HPLVPos));
        SetPosEx(playerid, HPLVPos[rand][0], HPLVPos[rand][1], HPLVPos[rand][2], HPLVPos[rand][3], 0, 0,0);
    }
    else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV)
    {
        new rand = random(sizeof(HPSFPos));
        SetPosEx(playerid, HPSFPos[rand][0], HPSFPos[rand][1], HPSFPos[rand][2], HPSFPos[rand][3], 0, 0,0);
    }
    if(PlayerInfo[playerid][pSocioHP] > 0)
    {
        SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El costo de los servicios fue de {37db45}$400{FFBC00}.");
        QuitarDinero(playerid,400);
    }
    else if(PlayerInfo[playerid][pSocioHP] == 0)
    {
        SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El costo de los servicios fue de {37db45}$450{FFBC00}.");
        QuitarDinero(playerid,450);
    }
    else if(PlayerInfo[playerid][pDuty] == 1)   SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El gobierno de San Andreas pagó por tus servicios médicos.");
    TogglePlayerControllable(playerid,1);
    SetPVarInt(playerid, "IsFrozen", 1);
    SetCameraBehindPlayer(playerid);
    if(San[playerid] > 0)
    {
        SetPlayerInterior(playerid, 6);
        SetPlayerVirtualWorld(playerid, playerid);
        SetPlayerPosEx(playerid, 346.870025,309.259033,999.155700);
    }
    PlayerTemp[playerid][@pHospital] = 0;
    return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerExitVehicle) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
    #endif
    PararEmisora(playerid);
    Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 3;
    if(Taxista[playerid] != INVALID_PLAYER_ID)
    {
        if(Ficha[Taxista[playerid]] != 0)
        {
            PlayerTextDrawSetString(playerid,TAXIMET2[Taxista[playerid]], "$0");
            TextDrawHideForPlayer(playerid,TAXIMET); PlayerTextDrawHide(playerid,TAXIMET2[playerid]);
            TextDrawHideForPlayer(playerid,TAXIMET3); TextDrawHideForPlayer(playerid,TAXIMET4);
            MensajeEx(playerid,-1,"Has pagado al conductor un total de {00CC00}$%d{FFFFFF}.",Monto[Taxista[playerid]]);
            MensajeEx(Taxista[playerid],-1,"%s te ha pagado {00CC00}$%d{FFFFFF} por el recorrido",PlayerInfo[playerid][Nickname],Monto[Taxista[playerid]]);
            Monto[Taxista[playerid]] = 0,Ficha[Taxista[playerid]] = 0;
            Pasajero[Taxista[playerid]] = INVALID_PLAYER_ID,Taxista[playerid] = INVALID_PLAYER_ID;
        }
    }
    if(COSECHA(vehicleid) && Cosechas[playerid][CosechaLugar] == 0) SetTimerEx("RespawnearV",1000,false,"d",vehicleid);
    if(VehiculosInfo[vehicleid][vcomprable] == 1) SetTimerEx("RespawnearV",3000,false,"d",vehicleid);
    if(BajandoV[playerid] == 0) BajandoV[playerid] = 1;
    EnAuto[playerid] = INVALID_VEHICLE_ID;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 2;
    return 1;
}
funcion DudaAdmin(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/n [Pregunta]{FFFFFF} para preguntar/responder a otros jugadores");
    {
        new string[300],arank[64];
        switch(PlayerInfo[playerid][pAdmin])
        {
            case 1: arank = "Ayudante";
            case 2,3,4: { if(PlayerInfo[playerid][pSexo] == 2) arank = "Moderadora"; else arank = "Moderador"; }
            case 5: arank = "ADM";
            case 6: { if(PlayerInfo[playerid][pSexo] == 2) arank = "Dueña"; else arank = "Dueño"; }
		}
        format(string, sizeof(string), "({009966}Canal /n{009999}) [%s] %s (%d): %s", arank, PlayerInfo[playerid][Nickname],playerid,params[0]);
        foreach(new i : Player)
        {
            if(CanalDudas[i] == 1) SendClientMessage(i,0x009999FF,string);
        }
       	new Query[560];
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `canal_dudas` (Nombre, Mensaje, IDJugador) VALUES ('%s','%s','%d')",PlayerName(playerid),params,playerid);
		mysql_tquery(handle_db, Query);
    }
    return 1;
}
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
            {
                GetPlayerPos(i, posx, posy, posz);
                tempposx = (oldposx -posx);
                tempposy = (oldposy -posy);
                tempposz = (oldposz -posz);
                if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SendClientMessage(i, col1, string);
                else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SendClientMessage(i, col2, string);
                else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SendClientMessage(i, col3, string);
                else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SendClientMessage(i, col4, string);
                else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SendClientMessage(i, col5, string);
            }
        }
    }
    return 1;
}
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(GetVehicleModel(vehicleid) == 490) Respawnear(vehicleid);
    return 1;
}
Pescadores(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pTrabajo] == T_Pescador) return 1;
        else if(PlayerInfo[playerid][pTrabajo2] == T_Pescador) return 1;
    }
    return 0;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(GetPlayerScore(playerid) == 0) return ExpulsarJugador(playerid, "Sube a vehiculo sin nivel");
    if(FabricaMedica[playerid] == 1) return ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
    Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
    Tiempos[playerid][TIMER_SURFING] = gettime() + 3;
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 3;
    GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
    MensajeSinGasoEnviado[playerid] = 0;
    if(BICI(vehicleid) && PlayerInfo[playerid][pCargos] >= 3)
    {
        SendClientMessage(playerid,-1,"No puedes subirte a una bici si tienes cargos.");
        RemovePlayerFromVehicle(playerid);
        ClearAnimations(playerid);
    }
    if(ispassenger == 0 && AVION(vehicleid) && PlayerInfo[playerid][pLicenciaVuelo] == 0)
    {
        SendClientMessage(playerid,-1,"No tienes licencia de vuelo, puedes conseguir una en el edificio municipal.");
        RemovePlayerFromVehicle(playerid);
        ClearAnimations(playerid);
    }
    if(recogiendo[playerid] > 0) RemovePlayerFromVehicle(playerid);
    if(PlayerInfo[playerid][Agonizando] == 1) RemovePlayerFromVehicle(playerid);
    if(bloqueado[vehicleid] == 0)
    {
        EnAuto[playerid] = vehicleid;
        BajandoV[playerid] = 0;
    }
    else
    {
        SendClientMessage(playerid,-1,"El vehículo está cerrado, si eres el propietario usa {DBED15}/abrir {FFFFFF}o {DBED15}ESPACIO{FFFFFF} + {DBED15}'Y'{FFFFFF} para destrabarlo");
        ClearAnimations(playerid);
        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
        return 1;
    }
    if(CAMION(vehicleid) && ispassenger == 0)
    {
        if(PlayerInfo[playerid][pTrabajo] != T_Camionero && PlayerInfo[playerid][pTrabajo2] != T_Camionero)
        {
            SendClientMessage(playerid, -1, "Necesitas el empleo de camionero para usar este vehículo.");
            SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos");
            RemovePlayerFromVehicle(playerid);
            ClearAnimations(playerid);
        }
    }
    if(ispassenger == 0)
    {
        if(BICI(vehicleid) && VehiculosInfo[vehicleid][vcomprable] == 0)
        {
            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
        }
    }
    if(ispassenger == 0)
    {
        if(VehiculosInfo[vehicleid][vtrabajo] == T_Pescador && !Pescadores(playerid))
        {
            RemovePlayerFromVehicle(playerid);
            new Float:sx, Float:sy, Float:sz;
            GetPlayerPos(playerid, sx, sy, sz);
            SetPlayerPos(playerid, sx, sy, sz);
            SendClientMessage(playerid,-1,"Este barco es solamente para pescadores con licencia.");
            SendClientMessage(playerid,-1,"Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos{FFFFFF}.");
            EnAuto[playerid] = 0;
        }
    }
    if(ispassenger == 0)
    {
        if(BASU(vehicleid))
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Basurero && PlayerInfo[playerid][pTrabajo2] != T_Basurero)
            {
                SendClientMessage(playerid, -1, "Necesitas obtener el trabajo de basurero antes de usar este vehículo.");
                SacarVehiculo(playerid);
                return 1;
            }
            if(RecorridoBasu[playerid] == 0)
            {
                if(RopaBasu[playerid] == 1 || PlayerInfo[playerid][pVip] > 0)
                {
                    PBasura[playerid] = 1;
                    SendClientMessage(playerid,-1,"{999966}Consigue a un compañero basurero y comienza a trabajar.");
                    SetPlayerCheckpoint(playerid, -178.6163, -1618.1124, 3.4908,5.0);
                    PuntoBaX[playerid] = -178.6163; PuntoBaY[playerid] = -1618.1124; PuntoBaZ[playerid] = 3.4908; PuntoBaA[playerid] = 5.0;
                    return 1;
                }
                else
                {
                    SendClientMessage(playerid,-1,"{999966}Las cuentas comunes necesitan la vestimenta de basurero para trabajar.");
                    SendClientMessage(playerid,-1,"{999966}Si quieres trabajar con cualquier ropa, necesitas una cuenta VIP.");
                }
                Localizando[playerid] = 0;
            }
            else return SendClientMessage(playerid,-1,"{999966}Consigue un compañero basurero y termina el trabajo.");
        }
    }
    if(ispassenger == 0)
    {
        if(BASU(vehicleid))
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Basurero && PlayerInfo[playerid][pTrabajo2] != T_Basurero)
            {
                SendClientMessage(playerid, -1, "Necesitas el empleo de basurero para usar este vehículo.");
                SendClientMessage(playerid,-1,"Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos");
                SacarVehiculo(playerid);
                return 1;
            }
            if(RopaBasu[playerid] != 1 && PlayerInfo[playerid][pVip] == 0)
            {
                SendClientMessage(playerid, -1, "Necesitas tener la ropa de trabajo para conducir este vehículo");
                SacarVehiculo(playerid);
                return 1;
            }
            if(RecorridoBasu[playerid] == 0)
            {
                PBasura[playerid] = 1;
                if(RopaBasu[playerid] == 1) SendClientMessage(playerid,0x9c9d6bff,"Consigue un compañero basurero y comienza a trabajar.");
                else if(RopaBasu[playerid] != 1 && PlayerInfo[playerid][pVip] > 0) SendClientMessage(playerid,0x9c9d6bff,"Consigue un compañero basurero y comienza a trabajar.");
                SetPlayerCheckpoint(playerid, -173.0988,-1619.5331,3.4375,10.0);
                PuntoBaX[playerid] = -192.9705; PuntoBaY[playerid] = -1625.0140; PuntoBaZ[playerid] = 3.7387; PuntoBaA[playerid] = 10.0;
                return 1;
            }
            else return SendClientMessage(playerid,-1,"Ya tienes activo un recorrido, terminalo para comenzar uno nuevo");
        }
    }
    if(ispassenger == 0)
    {
        if(VehiculosInfo[vehicleid][vfaccion] > 0 && PlayerInfo[playerid][pFaccion] != VehiculosInfo[vehicleid][vfaccion])
        {
            SacarVehiculo(playerid);
            SendClientMessage(playerid,-1,"Este vehículo pertenece a una facción, unete a ella para poder utilizarlo.");
        }
    }
    if(ispassenger == 0)
    {
        if(SAPD(vehicleid))
        {
            if(PlayerInfo[playerid][pDuty] == 0 && PlayerInfo[playerid][pFaccion] != 1 || PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pFaccion] != 1 || PlayerInfo[playerid][pDuty] == 0 && PlayerInfo[playerid][pFaccion] == 1){
                SendClientMessage(playerid,-1,"Necesitas ser policía y estar con el uniforme puesto para conducir este vehículo.");RemovePlayerFromVehicle(playerid);
                SacarVehiculo(playerid);
            }
        }
    }
    if(ispassenger && EsUnTren(vehicleid))
    {
        if(Boletos[playerid] == 0)
        {
            NoTeleportHack(playerid);
            new Float:slx, Float:sly, Float:slz;
            GetPlayerPos(playerid, slx, sly, slz);
            SetPlayerPosEx(playerid, slx+3, sly+3, slz+2);
            SetCameraBehindPlayer(playerid);
            RemovePlayerFromVehicle(playerid);
            SendClientMessage(playerid, -1, "Necesitas comprar un boleto para viajar en tren.");
        }
    }
    if(ispassenger == 0)
    {
        if(HELISAPD(vehicleid))
        {
            if(PlayerInfo[playerid][pDuty] != 1)
            {
                SendClientMessage(playerid,-1,"Necesitas ser policía y estar con el uniforme puesto para conducir este vehículo.");
                SacarVehiculo(playerid);
                return 1;
            }
            if(PlayerInfo[playerid][pRango] < 2)
            {
                SendClientMessage(playerid, -1, "Necesitas ser oficial para poder manejar este tipo de vehículo.");
                SacarVehiculo(playerid);
                return 1;
            }
        }
    }
    if(ispassenger == 0)
    {
        if(AMBU(vehicleid))
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico)
            {
                SendClientMessage(playerid,-1,"Necesitas el empleo de médico para usar este vehículo.");
                SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos");
                SacarVehiculo(playerid);
            }
        }
    }
    if(ispassenger == 0)
    {
        if(TAXI(vehicleid))
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Taxista && PlayerInfo[playerid][pTrabajo2] != T_Taxista)
            {
                SendClientMessage(playerid,-1,"Necesitas el empleo de taxista para usar este vehículo.");
                SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {DBED15}/ayuda trabajos");
                SacarVehiculo(playerid);
            }
        }
    }
    foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && i != playerid)
		{
			if(!ispassenger == true)
			{
				new Float:sx, Float:sy, Float:sz;
				GetPlayerPos(playerid, sx, sy, sz);
				SetPlayerPos(playerid, sx, sy, sz);
				RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				SetTimerEx("AntiCJ",2000,false,"d",playerid);
				VWTemporal[playerid] = GetPlayerVirtualWorld(playerid);
				SetPlayerVirtualWorld(playerid, 99);
				EnAuto[playerid] = 0;
				Contador[playerid]++;
				if(Contador[playerid] == 0) SendClientMessage(playerid, -1, "No intentes robar vehículos sin rol, quedas congelado por 2 segundos.");
				else MensajeEx(playerid, -1, "No intentes robar vehículos sin rol, quedas congelado por 2 segundos. ({FF0000}Advertencia: %d/5{FFFFFF})",Contador[playerid]);
				if(Contador[playerid] >= 5) Kick(playerid);
			}
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerDeath) PlayerID: %d | KillerID: %d", playerid, killerid);
    #endif
    foreach(new i : Player)
    {
    	if(PlayerInfo[i][pAdmin] >= 3) SendDeathMessageToPlayer(i, killerid, playerid, reason);
    }
    QuitarSombreroH(playerid);
    if(!IsPlayerNPC(playerid)) GuardarPosicionMuerte(playerid);
    Tiempos[playerid][TIMER_CHALECO] = gettime() + 3;
    Tiempos[playerid][TIMER_VIDA] = gettime() + 3;
    if(killerid != INVALID_PLAYER_ID && Jail[killerid] == 1 && PlayerInfo[killerid][pTiempoCarcel] > 0)
    {
        SendClientMessage(killerid, -1, "Acabas de asesinar a una persona en prisión, tu condena fue aumentada.");
        PlayerInfo[killerid][pTiempoCarcel] += (10*60);
    }
    if(Specteado[playerid] == 1)
    {
        foreach(new i : Player)
        {
            if(SpecJugador[i] == playerid)
            {
                SpecJugador[i] = INVALID_PLAYER_ID;
                TogglePlayerSpectating(i,false);
            }
        }
    }
	PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);
    PlayerInfo[playerid][EnCasa] = 0;
    PlayerInfo[playerid][EnRopero] = 0;
    PlayerInfo[playerid][EnGarage] = 0;
    Objeto[playerid] = 0;
    if(Manejando[playerid] == 1) { Manejando[playerid] = 0; }
    if(PlayerInfo[playerid][pTiempoCarcel] > 0) return 1;
    // Cargos
    new LugarCargo[100];
    LugarCargo = "Feli";
    if(IsPlayerInRangeOfPoint(Agresor[playerid],180.0,1759.6833,-1892.0160,13.5556) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en Unity Station";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],130.0,1173.2209,-1332.7537,13.9884) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en Hospital Central";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],70.0,2030.1166,-1413.7969,16.9989) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital Country General";
    else if((IsPlayerInRangeOfPoint(Agresor[playerid],70.0,-1745.5931,-131.6944,3.7314) || IsPlayerInRangeOfPoint(Agresor[playerid],450.0,-1652.7432,23.0748,4.4347)) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo ="en los Muelles de San Fierro";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],100.0,-384.4948,-1474.2228,25.7266) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo ="en las Granjas de Flint Range";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],100.0,-148.6831,-1577.2129,9.3045) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el basural";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,-2647.9409,605.9929,15.2346) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital de San Fierro";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,1611.4006,1781.1265,37.8510) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital de Las Venturas";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,869.8167,873.0883,12.9141) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en la Cantera de Hunter Quarry";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,1551.7198,-1675.6492,15.9741) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrente de la Comisaría";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],50,830.2910,3.9240,1004.1797) && GetPlayerInterior(Agresor[playerid]) == 3) LugarCargo = "en el Banco Plaza";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],80,1092.2074,-141.3113,1001.1160) && GetPlayerInterior(Agresor[playerid]) == 3) LugarCargo = "en Banco Central de Los Santos";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],25,2311.8379,-8.2884,26.7422) && GetPlayerInterior(Agresor[playerid]) == 0 && GetPlayerVirtualWorld(Agresor[playerid]) != 0) LugarCargo = "en Banco de San Fierro";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,-1622.6633,702.1961,11.2764) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrete de la Comisaría de San Fierro";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,2282.8855,2454.9976,9.8203) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrete de la Comisaría decase  Las Venturas";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,374.6797,-124.4743,1001.4995) && GetPlayerInterior(Agresor[playerid]) == 5) LugarCargo = "en The Well Stacked Pizza";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,-29.1592,-83.4654,1003.5542) && GetPlayerInterior(Agresor[playerid]) == 18) LugarCargo = "en 24/7";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,767.7672,4.7224,1000.7183) && GetPlayerInterior(Agresor[playerid]) == 5) LugarCargo = "en GYM";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],50,-1412.7083,-310.4966,1058.1694) && GetPlayerInterior(Agresor[playerid]) == 7 && GetPlayerVirtualWorld(Agresor[playerid]) == 7) LugarCargo = "en el Estadio de Las Venturas";
    else if(IsPlayerInRangeOfPoint(Agresor[playerid],100,1094.0922,1597.0083,12.5469) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Estadio de Las Venturas";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],100,278.6463,1411.3732,10.4271) && GetPlayerInterior(Agresor[playerid]) == 0 && Jail[Agresor[playerid]] == 0) LugarCargo = "en el penal de Fort Carson";
    if(PlayerInfo[playerid][pDuty] == 1 && Agresor[playerid] != INVALID_PLAYER_ID && PlayerInfo[Agresor[playerid]][pFaccion] != 1 && suicidio[playerid] == 0)
    {
        new string[256],string2[150];
        if(PlayerInfo[Agresor[playerid]][pCargos] < 5)
        {
            PlayerInfo[Agresor[playerid]][pCargos] = 5;
            ActualizarRadar();
            format(string2,150,"%s",PlayerInfo[playerid][Nickname]);
            PlayerInfo[Agresor[playerid]][QuienC] = string2;
            format(string, 256, "{3399FF}[Central de policía]{FFFFFF} reportando: {00CCFF}%s{FFFFFF} [%d] asesinó a un oficial, detener vivo o muerto.",PlayerInfo[Agresor[playerid]][Nickname],Agresor[playerid]);
            SendRadioPoliceMessage(-1, string);
        }
        else if(PlayerInfo[Agresor[playerid]][pCargos] >= 5)
        {
            PlayerInfo[Agresor[playerid]][pCargos] += 2;
            format(string, 256, "{3399FF}[Central de policía]{FFFFFF} reportando: {00CCFF}%s{FFFFFF} [%d] es un asesino serial, lo queremos vivo o muerto.",PlayerInfo[Agresor[playerid]][Nickname],Agresor[playerid]);
            SendRadioPoliceMessage(-1, string);
        }
        SetPlayerWantedLevel(Agresor[playerid], PlayerInfo[Agresor[playerid]][pCargos]);
        ReportCrimen(Agresor[playerid],3);
    }
    else if(strcmp(LugarCargo,"Feli"))
    {
        if(PlayerInfo[Agresor[playerid]][pDuty] == 0 && !IsPlayerInAnyVehicle(Agresor[playerid]) && GetPlayerState(Agresor[playerid]) != PLAYER_STATE_DRIVER && suicidio[playerid] == 0)
        {
            new string[200],string2[150];
            format(string, 200,"{3399FF}[Central de policía]{FFFFFF} reportando: {00CCFF}%s{FFFFFF} [%d] cometió un asesinato %s.",PlayerInfo[Agresor[playerid]][Nickname],Agresor[playerid],LugarCargo);
            SendRadioPoliceMessage(-1,string);
            SendClientMessage(Agresor[playerid],-1,"Acabas de asesinar a una persona, te vio el guardia de seguridad.");
            SendClientMessage(Agresor[playerid],-1,"Ya no tienes forma de escapar, toda la policía fue alertada.");
            format(string2,150,"Zona Segura (%d)", Agresor[playerid]);
            ReportCrimen(Agresor[playerid],1);
            if(PlayerInfo[Agresor[playerid]][pCargos] < 3) PlayerInfo[Agresor[playerid]][pCargos] = 3;
            else if(PlayerInfo[Agresor[playerid]][pCargos] >= 3 && PlayerInfo[Agresor[playerid]][pCargos] < 6) PlayerInfo[Agresor[playerid]][pCargos] = 6;
            else if(PlayerInfo[Agresor[playerid]][pCargos] >= 6) PlayerInfo[Agresor[playerid]][pCargos] += 2;
            SetPlayerWantedLevel(Agresor[playerid], PlayerInfo[Agresor[playerid]][pCargos]);
            ActualizarRadar();
        }
    }
    if(PlayerInfo[playerid][pCargos] > 0 && VariableCaido[playerid] == 0)
    {
        if(PlayerInfo[playerid][pCargos] == 1 && CagoSeguro[playerid] == 1)
        {
            PlayerInfo[playerid][pCargos] = 0;
            SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
            CagoSeguro[playerid] = 0;
        }
        else
        {
            if(GetPlayerInterior(playerid) > 0) return SetTimerEx("Encerrando2",2000,false,"d",playerid);
            GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
            SetSpawnInfo(playerid, 0, 0,DeathX[playerid],DeathY[playerid],DeathZ[playerid],0,0,0,0,0,0,0);
            VariableCaido[playerid] = 1;
            return 1;
        }
    }
    if(PlayerInfo[playerid][Agonizando] == 0 && PlayerInfo[playerid][pCargos] == 0)
    {
        GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
        SetSpawnInfo(playerid,0,PlayerInfo[playerid][pRopa],DeathX[playerid], DeathY[playerid], DeathZ[playerid],0,0,0,0,0,0,0);
        PlayerInfo[playerid][Agonizando] = 1;
        return 1;
    }
    else if(PlayerInfo[playerid][Agonizando] == 1) PlayerInfo[playerid][Agonizando] = 2;
    return 1;
}
public MostrarMapas(playerid)
{
	GangZoneShowForPlayer(playerid, isla[1], 0xF6C91DA3); GangZoneShowForPlayer(playerid, isla[2], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, isla[3], 0xF6C91DA3); GangZoneShowForPlayer(playerid, isla[4], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, isla[5], 0xF6C91DA3); GangZoneShowForPlayer(playerid, isla[6], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, pistas[1], 0x060605FF); GangZoneShowForPlayer(playerid, pistas[2], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[3], 0x060605FF); GangZoneShowForPlayer(playerid, pistas[4], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[5], 0x060605FF); GangZoneShowForPlayer(playerid, pistas[6], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[7], 0x060605FF); GangZoneShowForPlayer(playerid, pistas[8], 0x060605FF);
	GangZoneShowForPlayer(playerid, suelo[1], 0x7B8384FF); GangZoneShowForPlayer(playerid, suelo[2], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, suelo[3], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[1], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[2], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[3], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[4], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[5], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[6], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[7], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[8], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[9], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[10], 0x7B8384FF); GangZoneShowForPlayer(playerid, nuevoszonesmap[11], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[1], 0x7B8384FF); GangZoneShowForPlayer(playerid, muelles[2], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[3], 0x7B8384FF); GangZoneShowForPlayer(playerid, muelles[4], 0x7B8384FF);
}
public OnVehicleDeath(vehicleid, killerid)
{
    Baul[vehicleid] = 0;
    Capo[vehicleid] = 0;
    for(new f = 0; f<MAX_FABRICAS; f++)
	{
		if(Fabricas[f][pEnUso] > 0)
		{
			if(Fabricas[f][Auto1F] == vehicleid) { RespawnearVF2(vehicleid),CargarVehiculoFabrica(f,1); Baul[vehicleid] = 0,MotorAuto[vehicleid] = 0; if(QuimicosActivo[f] > 0) LoadBarrelMeta(f); }
			if(Fabricas[f][Auto2F] == vehicleid) { ObjetoDistraccion(vehicleid,f),RespawnearVF2(vehicleid),CargarVehiculoFabrica(f,2); Baul[vehicleid] = 0,MotorAuto[vehicleid] = 0; }
		}
	}
    foreach(new i : Player)
    {
        for(new a = 0; a < MAX_PAUTOS; a++)
		{
			if(vehicleid == autos[a][i])
			{
				new count = 0;
				if(GetVehicleModel(vehicleid) == 578)
				{
					if(IsValidDynamicObject(Transportistas[i][Objeto1])) { DestroyDynamicObject(Transportistas[i][Objeto1]); Transportistas[i][Objeto1] = INVALID_OBJECT_ID; count ++; }
					if(IsValidDynamicObject(Transportistas[i][Objeto2])) { DestroyDynamicObject(Transportistas[i][Objeto2]); Transportistas[i][Objeto2] = INVALID_OBJECT_ID; count ++; }
					if(IsValidDynamicObject(Transportistas[i][Objeto3])) { DestroyDynamicObject(Transportistas[i][Objeto3]); Transportistas[i][Objeto3] = INVALID_OBJECT_ID; count ++; }
					if(count > 0) tviaje[i] = 0;
				}
				SetVehicleToRespawn(vehicleid);
				SetVehicleHealth(vehicleid, 1000.0);
				VidaVehiculo[vehicleid] = 1000.0;
				Baul[vehicleid] = 0;
				MotorAuto[vehicleid] = 0;
			}
		}
    }
    if(CAMION(vehicleid))
    {
        if(CamionCargado[vehicleid] != 0)
        {
            foreach(new e : Player)
            {
                if(Chofer[vehicleid] == e) CamioneroFallado(e,vehicleid);
            }
        }
    }
    return 1;
}
public OnPlayerSpawn(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerSpawn) PlayerID: %d", playerid);
    #endif
    if(IsPlayerNPC(playerid))
	{
		new npcname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, npcname, sizeof(npcname));
		if(!strcmp(npcname,".Motorman1"))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[0], 0);
			SetPlayerSkin(playerid,71);
			ColorJugadorDefault(playerid);
			TrenUno = playerid;
			SetVehicleColor(NPC_Tren[0], 1, 1);
		}
		if(!strcmp(npcname,".Motorman2"))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[3], 0);
			SetPlayerSkin(playerid,71);
			ColorJugadorDefault(playerid);
			TrenDos = playerid;
			SetVehicleColor(NPC_Tren[1], 1, 1);
		}
		if(!strcmp(npcname,".Motorman3"))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[1], 0);
			SetPlayerSkin(playerid,71);
			ColorJugadorDefault(playerid);
			TrenTres = playerid;
			SetVehicleColor(NPC_Tren[2], 1, 1);
		}
		if(!strcmp(npcname,".Motorman4"))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[2], 0);
			SetPlayerSkin(playerid,71);
			ColorJugadorDefault(playerid);
			TrenCuatro = playerid;
			SetVehicleColor(NPC_Tren[3], 1, 1);
		}
		if(!strcmp(npcname, ".Sergio", true))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[4], 0);
			SetPlayerSkin(playerid, 71);
			PlayerInfo[playerid][pDuty] = 1;
			ColorJugadorDefault(playerid);
		}
		if(!strcmp(npcname, ".Miguel", true))
		{
			PutPlayerInVehicle(playerid, NPC_Tren[5], 0);
			SetPlayerSkin(playerid, 71);
			PlayerInfo[playerid][pDuty] = 1;
			ColorJugadorDefault(playerid);
		}
		if(!strcmp(npcname, ".Drogas", true))
		{
			SetPlayerSkin(playerid, 28);
			ColorJugadorDefault(playerid);
		}
		if(!strcmp(npcname, ".Angelica", true))
		{
			TextBot[0] = CreateDynamic3DTextLabel("{DBED15}Angelica",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,192);
			SetPlayerScore(playerid, 1);
			ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop", 4.1, 1, 1, 1, 0, 0, 1);
			ColorJugadorDefault(playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Marcelo", true))
		{
			TextBot[1] = CreateDynamic3DTextLabel("{DBED15}Marcelo",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,281);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			TimerTxtMarcelo = SetTimerEx("TextoMarcelo",10000,true,"d",playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Ignacio", true))
		{
			TextBot[2] = CreateDynamic3DTextLabel("{DBED15}Ignacio",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Alejandro", true))
		{
			TextBot[3] = CreateDynamic3DTextLabel("{DBED15}Alejandro",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Camello1", true))
		{
			TextBot[4] = CreateDynamic3DTextLabel("{DBED15}Camello",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,28);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			Camello = playerid;
			return 1;
		}
		if(!strcmp(npcname, ".HippiePepe", true))
		{
			TextBot[5] = CreateDynamic3DTextLabel("{DBED15}HippiePepe",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,50);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Hugo", true))
		{
			TextBot[6] = CreateDynamic3DTextLabel("{DBED15}Hugo",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(npcname, ".Mao", true))
		{
			TextBot[7] = CreateDynamic3DTextLabel("{DBED15}Mao",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,57);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			return 1;
		}
		if(!strcmp(npcname, ".Jorge", true))
		{
			TextBot[8] = CreateDynamic3DTextLabel("{DBED15}Jorge",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,240);
			SetPlayerScore(playerid, 1);
			ColorJugadorDefault(playerid);
			SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 6);
			return 1;
		}
		return 1;
    }
    if(PrimerSpawn[playerid] == 0)
    {
        Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 1000, playerid);
        KillTimer(LCHAT[playerid]);
        new country[256],plrIP2[20];
        GetPlayerCountry(playerid, country, sizeof(country));
        PaisActual[playerid] = GetPlayerCountry(playerid, country, sizeof(country));
        GetPlayerIp(playerid, plrIP2, sizeof(plrIP2));
        if(strcmp("127.0.0.1", plrIP2, true) == 0)
        {
            format(country, sizeof(country), "Colombia");
            format(plrIP2, sizeof(plrIP2), "localhost");
        }
        if(strcmp("Venezuela", plrIP2, true) == 0) {
            format(country, sizeof(country), "Venezuela, Bolivarian Republic of");
        }
  		if(PlayerInfo[playerid][pInterior] > 0) CargandoEx(playerid);
		if(PlayerInfo[playerid][pMundoVirtual] > 0) CargandoEx(playerid);
        KillTimer(LoginTimer[playerid]);
        if(LoggedYet[playerid] == 0)
        {
            if(PlayerTemp[playerid][pOwner] == 1) PlayerTemp[playerid][pOwnerCMD_Use] = 1;
            new cadena[128],texto[128],Query[256];
            KillTimer(LCHAT[playerid]);
            if(PlayerInfo[playerid][pInterior] > 0) CargarMapeosEx(playerid);
            if(PlayerInfo[playerid][pMundoVirtual] > 0) CargarMapeosEx(playerid);
            GetPlayerPos(playerid,PosPDX[playerid],PosPDY[playerid],PosPDZ[playerid]);
            TextDrawHideForPlayer(playerid, CN); TextDrawHideForPlayer(playerid, CN2); TextDrawHideForPlayer(playerid, CN3); TextDrawHideForPlayer(playerid, CN4);
            if(strcmp(PlayerInfo[playerid][jConexion], "1", false) != 0)
            {
                SendClientMessage(playerid, -1, "-----------------------------------------------------------------------------------------------------");
                format(cadena, sizeof(cadena), "Hola {00CCFF}%s{FFFFFF}, te vimos por última vez el %s", PlayerInfo[playerid][Nickname], PlayerInfo[playerid][jConexion]);
                SendClientMessage(playerid, -1, cadena);
                SendClientMessage(playerid, -1, "-----------------------------------------------------------------------------------------------------");
                GameTextForPlayer(playerid, "~n~~r~Cargando...~n~~w~Espera por favor", 4000, 4);
                SendClientMessage(playerid, -1, "{FFFFFF}Cargando datos del juego...");
                SetTimerEx("CargadoMensajes",2000,false,"d", playerid);
                mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `aka` WHERE IP = '%e'", PlayerIP(playerid));
                mysql_tquery(handle_db, Query, "OnPlayerAkaLoaded", "d", playerid);
            }
            else
            {
                SendClientMessage(playerid, -1, "-----------------------------------------------------------------------------------------------------");
                format(cadena, sizeof(cadena), "Felicitaciones {00CCFF}%s{FFFFFF}, tu cuenta fue creada correctamente", PlayerInfo[playerid][Nickname]);
                SendClientMessage(playerid, -1, cadena);
                SendClientMessage(playerid, -1, "-----------------------------------------------------------------------------------------------------");
                GameTextForPlayer(playerid, "~n~~r~Cargando...~n~~w~Espera por favor", 4000, 4);
                DarStatsJugador(playerid);
                SetTimerEx("CargadoMensajes",2000,false,"d", playerid);
                TogglePlayerControllable(playerid, 1);
                SetCameraBehindPlayer(playerid);
                PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
                mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `aka` WHERE IP = '%e'", PlayerIP(playerid));
                mysql_tquery(handle_db, Query, "OnPlayerAkaLoaded", "d", playerid);
                PlayerInfo[playerid][pSed] = 1;
				PlayerInfo[playerid][pHambre] = 1;
		    	BarrasFunciones(playerid, 2);
            }
            if(PlayerInfo[playerid][pNivel] == 1) MostrarAyudaComandos(playerid);
            new city[30],string[128];
            GetPlayerCountry(playerid, country, sizeof(country));
            GetPlayerCity(playerid, city, sizeof(city));
            format(string, 128, "{FFFFFF} %s [%d] ha ingresado al servidor [IP: %s] [Ciudad: %s] [Pais: %s]",PlayerInfo[playerid][Nickname],playerid,PlayerIP(playerid),city,country);
            MensajeAdmin(COLOR_GREY, string, 3);
            if(strcmp(PlayerInfo[playerid][pPaisRegistro], "Desconocido", true) == 0 || strcmp(PlayerInfo[playerid][pPaisRegistro], "desconocido", true) == 0) ActualizarPais(playerid);
            if(strcmp(PlayerInfo[playerid][pPaisRegistro], "Unknown", true) == 0 || strcmp(PlayerInfo[playerid][pPaisRegistro], "unknown", true) == 0 || strcmp(PlayerInfo[playerid][pPaisRegistro], "0", true) == 0) ActualizarPais(playerid);
            format(texto, sizeof(texto), "%s", country);
            LoggedYet[playerid] = 1;
            CreatePlayerObject(playerid, 18789,833.3800000,-2338.6599100,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 0
            CreatePlayerObject(playerid, 18789,833.3800000,-2188.6599100,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 1
            CreatePlayerObject(playerid, 18789,833.3800000,-2038.6600300,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 2
            CreatePlayerObject(playerid, 18789,833.3800000,-1888.8499800,20.6600000,0.0000000,3.0000000,90.0000000,250); //Object number 3
            CreatePlayerObject(playerid, 18789,833.3800000,-2488.5600600,21.9700000,0.0000000,-2.0000000,90.0000000,250); //Object number 4
            CreatePlayerObject(playerid, 18789,833.3800000,-2638.5200200,19.3500000,0.0000000,0.0000000,90.0000000,250); //Object number 5
            CreatePlayerObject(playerid, 18789,833.3800000,-2788.4199200,16.7300000,0.0000000,-2.0000000,90.0000000,250); //Object number 6
            CreatePlayerObject(playerid, 18789,833.3800000,-2938.3300800,11.5000000,0.0000000,-2.0000000,90.0000000,250); //Object number 7
            CreatePlayerObject(playerid, 18802,833.3800000,-3023.2800300,6.7900000,0.0000000,0.0000000,90.0000000,250); //Object number 8
            CreatePlayerObject(playerid, 18802,833.3800000,-1803.9399400,14.6400000,0.0000000,0.0000000,-90.0000000,250); //Object number 9
            CreatePlayerObject(playerid, 19529, 819.02002, -3555.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19529, 819.02002, -3680.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 616.53003, -3048.27002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 616.53003, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19540, 881.51001, -3743.22998, 4.87000,   0.00000, 0.00000, 270.00000, 250);
            CreatePlayerObject(playerid, 19540, 586.54999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53003, -3743.22998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19540, 896.47998, -3033.30005, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53003, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 586.54999, -3313.25000, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19540, 881.51001, -3493.22998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 896.47998, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53998, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53998, -3328.26001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 616.53003, -3180.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 888.98999, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 586.54999, -3180.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3040.78003, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3040.78003, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 594.04999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 609.04999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3180.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3320.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 888.98999, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 609.04999, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3320.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3180.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 594.04999, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3743.22998, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 896.47998, -3110.77002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53998, -3110.77002, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 616.53003, -3250.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 818.98999, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53998, -3250.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 616.53003, -3110.77002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 586.54999, -3250.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 586.54999, -3110.77002, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 896.47998, -3250.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53003, -3555.72998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 881.51001, -3680.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3743.22998, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53003, -3680.72998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 881.51001, -3555.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 8420, 815.82001, -3571.54004, 5.05000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 9062, 815.79785, -3649.03760, 5.05000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19531, 819.02002, -3250.76001, 5.01000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19531, 819.02002, -3110.78003, 5.01000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 888.98999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 594.04999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 594.04999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3680.72998, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 609.04999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3555.72998, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 819.02002, -3180.76001, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19532, 819.02002, -3040.78003, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19532, 888.98999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 818.98999, -3320.76001, 4.86000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 609.04999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19788, 888.98999, -3320.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19788, 889.02002, -3040.77002, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19788, 749.02002, -3040.78003, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 18803, 749.02002, -3403.27002, 4.56000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19534, 594.04999, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 749.02002, -3485.73999, 4.88000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19534, 609.03998, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 623.97998, -3180.76001, 4.90000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 749.02002, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 18805, 666.76001, -3180.76001, -0.70000,   0.00000, -4.00000, 0.00000, 250);
            //Estacionamiento
            CreatePlayerObject(playerid, 7010, 1727.82605, -1891.48206, -41.05000,   0.00000, 0.00000, 359.88000, 1148829696);
            CreatePlayerObject(playerid, 7244, 1653.01001, -1860.55005, -51.76400,   0.00000, 0.00000, 0.00000, 1148829696);
            //Salon de Eventos
            CreatePlayerObject(playerid, 13657, -1252.81006, 2055.30005, 1248.78003,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 13657, -1252.81995, 2099.14990, 1254.63000,   0.00000, 180.00000, 180.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1304.91003, 2021.48999, 1269.75000,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1273.46997, 2017.13000, 1276.88000,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1265.25000, 1972.28003, 1269.75000,   0.00000, 0.00000, 0.00000, 1148829696);
            TogglePlayerControllable(playerid, 1);
        }
        StopAudioStreamForPlayer(playerid);
        if(PlayerInfo[playerid][pBloqueado] == 0)
        {
            if(strcmp(PlayerInfo[playerid][pPaisRegistro], country, true) != 0 && strcmp(country, "Unknown", true) != 0 && strcmp(PlayerIP(playerid), "127.0.0.1", true) != 0)
            {
                if(PlayerInfo[playerid][pAdmin] > 2 || PlayerInfo[playerid][pFaccion] == 1)
                {
                    new string[126];
                    if(PlayerInfo[playerid][pFaccion] == 1) format(string,sizeof(string),"El policía %s ingresó desde un país diferente, su cuenta fue bloqueada.",PlayerInfo[playerid][Nickname]);
                    else if(PlayerInfo[playerid][pAdmin] > 0) format(string,sizeof(string),"El %s %s ingresó al servidor desde un país distinto, su cuenta fue bloqueada.",ADMIN_RANKS(PlayerInfo[playerid][pAdmin]), PlayerInfo[playerid][Nickname]);
                    MensajeAdmin(0xFFDBED15FF, string, 5);
                    format(string,sizeof(string),"País de registro: %s | Pais actual: %s",PlayerInfo[playerid][pPaisRegistro],country);
                    MensajeAdmin(0xFFDBED15FF, string, 5);
                    PlayerInfo[playerid][pBloqueado] = 1;
                    new Query[255];
                    mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Bloqueado`='1' WHERE `Username`='%e'",PlayerInfo[playerid][Nickname]);
                    mysql_tquery(handle_db, Query);
                    SendClientMessage(playerid,-1,"Atención: Su cuenta fue bloqueada por ingresar desde un país distinto.");
                    ExpulsarJugador(playerid,"Cuenta bloqueada.");
                }
            }
        }
        if(PlayerInfo[playerid][pFaccion] > 1 && PlayerInfo[playerid][pRango] == 8)
		{
			for(new fb = 0; fb < MAX_FABRICAS; fb++)
			{
				if(Fabricas[fb][pEnUso] > 0)
				{
					if(Fabricas[fb][pBanda] == PlayerInfo[playerid][pFaccion])
					{
						if(Fabricas[fb][pSoborno] <= gettime()) SendClientMessage(playerid, 0xFFFFFFFF, "Tu fabrica {FF0000}no ha pagado el soborno{FFFFFF} a la policía.");
					}
				}
			}
		}
        if(PlayerInfo[playerid][pAdmin] > 0)
		{
			new string[128];
			format(string,128,"Bienvenido {00CCFF}%s{FFFFFF}, te conectaste como {00CC00}%s{FFFFFF}.",PlayerName(playerid),ADMIN_RANKS(PlayerInfo[playerid][pAdmin]));
			SendClientMessage(playerid,COLOR_WHITE,string);
		}
        if(PlayerInfo[playerid][pVip] > 0) SetTimerEx("CheckVIP",1000,false,"d",playerid);
        if(PlayerInfo[playerid][pFaccion] > 0) MostrarBoxLogeo(playerid);
        CalcularNivel(playerid);
        new year, month,day;
        new hour,minuite,second;
        new string2[128], Query[256], plrIP[16];
        new isp[256];
        getdate(year, month, day);
        gettime(hour,minuite,second);
        if(PlayerInfo[playerid][pAdmin] == 0) Tiempos[playerid][TiempoDarDinero] = gettime() + 300;
        else Tiempos[playerid][TiempoDarDinero] = gettime() + 15;
        GetPlayerIp(playerid, plrIP, sizeof(plrIP));
        format(PlayerTemp[playerid][voIP],sizeof(plrIP),"%s", plrIP);
        GetPlayerISP(playerid, isp, sizeof(isp));
        if(strcmp("127.0.0.1", plrIP, true) == 0)
        {
            format(isp, sizeof(isp), "undefined.hostname.localhost");
            format(country, sizeof(country), "Colombia");
            format(plrIP, sizeof(plrIP), "localhost");
        }
        else if(strcmp("Unknown", isp, true) == 0) format(isp, sizeof(isp), "%s", plrIP);
        else if(strcmp("Desconocido", isp, true) == 0) format(isp, sizeof(isp), "%s", plrIP);
        format(string2, sizeof(string2), "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minuite,second);
        mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO `log_ingresos` (`Nombre`, `Pais`, `IP` , `Host`, `Fecha`) VALUES ('%e', '%e', '%e', '%e', '%e')", PlayerInfo[playerid][Nickname], country, plrIP, isp, string2);
        mysql_tquery(handle_db, Query);
        MostrarMapas(playerid);
        LoadAnimLibs(playerid);
        DarRopa(playerid);
        LoadPlayerPhoneBook(playerid);
        TextDrawShowForPlayer(playerid, CN5);
        StopAudioStreamForPlayer(playerid);
        ClearAnimations(playerid);
        gettime(Hora, Minuto);
        SetPlayerTime(playerid,Hora,Minuto);
        SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pMundoVirtual]);
        DarArmas(playerid);
		if(PlayerInfo[playerid][pBarras] == 0) BarrasFunciones(playerid, 2);
		else BarrasFunciones(playerid, 1);
        ColorJugadorDefault(playerid);
        ResetPlayerMoney(playerid);
        SetTimerEx("Logeado",1000,false,"d",playerid);
        SetTimerEx("Logeado2",3000,false,"d",playerid);
        Logeando[playerid] = 0;
        JugadorLogeado[playerid] = 1;
        LoadPrendas(playerid);
        LoadAchievements(playerid);
        SetPlayerStats(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Experiencia], PlayerInfo[playerid][ExperienciaTotal]);
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Experiencia],PlayerInfo[playerid][pExperiencia]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Experiencia]);
		ShowPlayerProgressBar(playerid, Progressbar[playerid][Experiencia]);
        SetPlayerHealthEx(playerid, PlayerInfo[playerid][j_HEALTH]);
        SetPlayerArmourEx(playerid, PlayerInfo[playerid][j_ARMOUR]);
        if(PlayerInfo[playerid][CasaID] != 0)
        {
            new bool:result = false;
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID])
                    {
                        result = true;
                        break;
                    }
                }
            }
            if(!result) PlayerInfo[playerid][CasaID] = 0;
        }
        if(PlayerInfo[playerid][CasaID2] != 0)
        {
            new bool:result = false;
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(PropInfo[p][pID] == PlayerInfo[playerid][CasaID2])
                    {
                        result = true;
                        break;
                    }
                }
            }
            if(!result) PlayerInfo[playerid][CasaID2] = 0;
        }
        if(PlayerInfo[playerid][pTiempoCarcel] > 0)
        {
            DarRopa(playerid);
            EnviarCarcel(playerid);
            Jail[playerid] = 1;
            DarPrendas(playerid);
            return 1;
        }
        if(PlayerInfo[playerid][pTiempoJail] > 0)
        {
            DarRopa(playerid);
            San[playerid] = 1;
            SetTimerEx("EnviarJail", 2000, false, "d", playerid);
            DarPrendas(playerid);
            return 1;
        }
        return 1;
    }
    if(PlayerTemp[playerid][@Specteando] == 1)
	{
		NoTeleportHack(playerid);
		SetPlayerArmourEx(playerid, PlayerInfo[playerid][j_ARMOUR]);
		SetPlayerHealthEx(playerid, PlayerInfo[playerid][j_HEALTH]);
		DarRopa(playerid),DarArmas(playerid),DarPrendas(playerid);
		SetPlayerPos(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
		SetPlayerInterior(playerid,SpecInt[playerid]);
		SetPlayerVirtualWorld(playerid,SpecVW[playerid]);
		PlayerTemp[playerid][@Specteando] = 0;
		Specteado[SpecJugador[playerid]] = 0;
		SpecJugador[playerid] = INVALID_PLAYER_ID;
		CargandoEx(playerid);
		return 1;
	}
    if(VariableCaido[playerid] == 1 && PlayerInfo[playerid][pCargos] > 1)
    {
        if(GetPlayerInterior(playerid) > 0)
        {
            Revivir(playerid);
            Encerrando2(playerid);
            Muriendo[playerid] = 0;
            PlayerInfo[playerid][Agonizando] = 0;
            Jail[playerid] = 1;
            return 1;
        }
        if(GetPolicesOn() > 0)
        {
            SetPlayerArmedWeapon(playerid, 0);
            PlayerInfo[playerid][Agonizando] = 0;
            VariableCaido[playerid] = 1;
            DarRopa(playerid);
            TogglePlayerControllable(playerid,0);
            SetPVarInt(playerid, "IsFrozen", 0);
            SetPlayerHealthEx(playerid, 10.0);
            SendClientMessage(playerid, 0xafafafFF,"{FFBC00}Los médicos no van a tratar con un delincuente.");
            SendClientMessage(playerid, 0xafafafFF,"{FFBC00}Espera a que la policía te traslade.");
            ClearAnimations(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            new Float:anglex;
            GetPlayerFacingAngle(playerid, anglex);
            DarPrendas(playerid);
            DarArmas(playerid);
            return 1;
        }
        else
        {
            SetPlayerArmedWeapon(playerid, 0);
            QuitarConsumibles(playerid);
            SetPlayerHealthEx(playerid, 90);
            TextDrawShowForPlayer(playerid, Sangre);
            DarRopa(playerid);
            DarArmas(playerid);
            Muriendo[playerid] = 1;
            DarDinero(playerid,0);
            ClearAnimations(playerid);
            SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
            SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pMundoVirtual]);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            SendClientMessage(playerid, 0xafafafFF,"{FFFFFF}Estás muy malherido y comienzas a perder sangre.");
            MostrarBoxMedico(playerid);
            DarPrendas(playerid);
            return 1;
        }
    }
    if(VariableCaido[playerid] == 1 && PlayerInfo[playerid][pCargos] <= 1)
    {
        PlayerInfo[playerid][pCargos] = 0;
        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos]);
        DarPrendas(playerid);
        DarRopa(playerid);
        ResetPlayerWeapons(playerid);
        DarArmas(playerid);
        Muriendo[playerid] = 1;
        SetPlayerHealthEx(playerid, 90);
        TextDrawShowForPlayer(playerid, Sangre);
        DarDinero(playerid,0);
        ClearAnimations(playerid);
		SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pMundoVirtual]);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        SendClientMessage(playerid, 0xafafafFF,"{FFFFFF}Estás muy malherido y comienzas a perder sangre.");
        MostrarBoxMedico(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][pTiempoCarcel] > 0)
    {
        DarRopa(playerid);
        EnviarCarcel(playerid);
        Jail[playerid] = 1;
        DarPrendas(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][pTiempoJail] > 0)
    {
        DarRopa(playerid);
        San[playerid] = 1;
        SetTimerEx("EnviarJail", 2000, false, "d", playerid);
        DarPrendas(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][Agonizando] == 1)
    {
        DarPrendas(playerid);
        DarRopa(playerid);
        ResetPlayerWeapons(playerid);
        DarArmas(playerid);
        Muriendo[playerid] = 1;
        SetPlayerHealthEx(playerid, 90);
        TextDrawShowForPlayer(playerid, Sangre);
        DarDinero(playerid,0);
        ClearAnimations(playerid);
		SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pMundoVirtual]);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        SendClientMessage(playerid, 0xafafafFF,"{FFFFFF}Estás muy malherido y comienzas a perder sangre.");
        MostrarBoxMedico(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][Agonizando] == 2)
    {
        if(PlayerInfo[playerid][pDuty] != 1) QuitarArmas(playerid);
        PlayerTemp[playerid][@pHospital] = 1;
        ApareceHospital(playerid);
        DarPrendas(playerid);
        return 1;
    }
    return 1;
}
public OnTrailerUpdate(playerid, vehicleid)
{
    if(PlayerInfo[playerid][pAdmin] < 5)
    {
        new string[80];
        format(string,sizeof(string),"%s(ID:%d) cheat de vehículos (Nivel:%d - %dhs)",PlayerInfo[playerid][Nickname],playerid,PlayerInfo[playerid][pNivel],PlayerInfo[playerid][horasjugadas]);
        MensajeAdmin(COLOR_WHITE,string,3);
        BanEx(playerid, "Blue Eclipse");
    }
    return 0;
}
public OnPlayerRequestClass(playerid, classid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerRequestClass) PlayerID: %d | ClassID: %d", playerid, classid);
    #endif
    if(IsPlayerNPC(playerid)) return 1;
    return 1;
}
public OnPlayerRequestSpawn(playerid)
{
    #if DEBUG_GM == 1
    printf("(OnPlayerRequestSpawn) PlayerID: %d", playerid);
    #endif
    if(IsPlayerNPC(playerid)) return 1;
    if(JugadorLogeado[playerid] == 1)
    {
        Tiempos[playerid][TiempoAntiTP] = gettime() + 4;
        SetSpawnInfo(playerid,NO_TEAM,PlayerInfo[playerid][pRopa],DeathX[playerid], DeathY[playerid], DeathZ[playerid],0,0,0,0,0,0,0);
        SpawnPlayer(playerid);
    }
    return 0;
}
public OnPlayerText(playerid, text[])
{
    if(strfind(text,PlayerInfo[playerid][ContraTemporal],true) != -1)
    {
		MensajeEx(playerid, 0xE6E6E6E6, "%s dice: %s",PlayerInfo[playerid][Nickname], text);
		ShowPlayerDialog(playerid,INFOMEDICO,DIALOG_STYLE_MSGBOX,"{DBED15}¡ATENCIÓN!","{FFFFFF}No le des tu contraseña a NADIE, si alguien te pidió tu la contraseña reportalo usando {DBED15}/reportar [ID o Nombre] Ladrón de cuentas.\n\n{00CC00}** Los administradores no necesitan tu contraseña. **{FFFFFF}\n\nNo te preocupes por haber enviado la contraseña, el mensaje fue filtrado por nuestro sistema.\nDe todas formas puedes cambiar tu contraseña si lo deseas desde la web.","Cerrar","");
		return false;
    }
    if(text[0] == '@' && text[1] != '@')
    {
        if(PlayerInfo[playerid][pAdmin] > 0 && VerAdmin[playerid] > 0)
        {
            if(strlen(text[1]) > 0)
            {
                new string[600];
                format(string,128,"{58D68D}[Admins]{FFFFFF} %s %s (ID: %d | Nivel: %d) dice: %s",ADMIN_RANKS(PlayerInfo[playerid][pAdmin]),PlayerInfo[playerid][Nickname],playerid,PlayerInfo[playerid][pNivel],text[1]);
                MensajeAdmin(0xFFFFFFFF, string, 1);
                return 0;
            }
        }
    }
    SacarAyudaComandos(playerid);
    DetectarSPAM(playerid,text);
    if(text[0] == '!' && text[1] != '!')
    {
        if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el radio comunicador antes de meterte en la celda.");
        if(PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pFaccion] == 1)
        {
            if(PlayerInfo[playerid][pRadio] != 1) { SendClientMessage(playerid,-1,"Tu no tienes un radio comunicador, puedes comprar uno en un 24/7"); return 0;}
            if(PlayerInfo[playerid][pDuty] != 1) { SendClientMessage(playerid,-1,"No estas en servicio"); return 0;}
            new chatadmin[256], banda = PlayerInfo[playerid][pFaccion];
            format(chatadmin,sizeof(chatadmin),"[Radio] (%s %s) dice: %s",RangoBanda(banda, PlayerInfo[playerid][pRango]),PlayerInfo[playerid][Nickname], text[1]);
            ProxDetector(15.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
            format(chatadmin,sizeof(chatadmin),"{3399FF}[Radio]{FFFFFF} %s %s: %s",RangoBanda(banda, PlayerInfo[playerid][pRango]),PlayerInfo[playerid][Nickname], text[1]);
            SendRadioPoliceMessage(-1, chatadmin,playerid, Frecuencia[playerid]);
            ReportCrimen(playerid,3);
            return 0;
        }
        else if(PlayerInfo[playerid][pFaccion] > 1)
        {
            if(PlayerInfo[playerid][pDuty] == 1) PlayerInfo[playerid][pDuty] = 0;
            if(PlayerInfo[playerid][pRadio] > 0)
            {
                new CrewColorChat = getPlayerCrewColor(playerid), chatadmin[256],banda = PlayerInfo[playerid][pFaccion];
                format(chatadmin,sizeof(chatadmin),"[Radio de banda] {FFFFFF}%s dice: %s", PlayerInfo[playerid][Nickname],text[1]);
                ProxDetector(15.0, playerid, chatadmin, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
                format(chatadmin,sizeof(chatadmin),"[Radio] {FFFFFF}%s - %s dice: %s",RangoBanda(banda, PlayerInfo[playerid][pRango]),PlayerInfo[playerid][Nickname],text[1]);
                SendRadioMessage(PlayerInfo[playerid][pFaccion], CrewColorChat, chatadmin,playerid);
                return 0;
            }
        }
        else
        {
            new string[256];
            if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PlayerInfo[playerid][Nickname], text);
            else format(string, sizeof(string), "%s dice: %s",PlayerInfo[playerid][Nickname], text);
            if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
            SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
            return false;
        }
    }
    if(text[0] == '!' && text[1] == '!')
    {
        if(PlayerInfo[playerid][pFaccion] == 1)
        {
            new chatadmin[256];
            format(chatadmin,sizeof(chatadmin),"{3399FF}[Radio]{FFFFFF} %s: (( %s ))",PlayerInfo[playerid][Nickname], text[2]);
            SendRadioMessage(1, -1, chatadmin);
            return 0;
        }
        else if(PlayerInfo[playerid][pFaccion] > 1)
        {
            if(PlayerInfo[playerid][pRadio] > 0)
            {
                new CrewColorChat = getPlayerCrewColor(playerid),chatadmin[256],banda = PlayerInfo[playerid][pFaccion];
                format(chatadmin,sizeof(chatadmin),"[Radio] {FFFFFF}%s - %s: (( %s ))",RangoBanda(banda, PlayerInfo[playerid][pRango]),PlayerInfo[playerid][Nickname], text[2]);
                SendRadioMessage(PlayerInfo[playerid][pFaccion], CrewColorChat, chatadmin,INVALID_PLAYER_ID);
                return 0;
            }
        }
    }
    if(PlayerInfo[playerid][Mobile] != INVALID_PLAYER_ID)
    {
        if(PlayerInfo[playerid][Mobile] == 2540)
        {
            if(text[0] == 's' && text[1] == 'i' || text[0] == 'S' && text[1] == 'i' || text[0] == 'S' && text[1] == 'I')
            {
                new string[256];
                format(string, sizeof(string), "%s (por celular) dice: %s", PlayerInfo[playerid][Nickname], text);
                if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
                SetTimerEx("LlamadaAceptada",1000,false,"d",playerid);
                return 0;
            }
            else if(text[0] == 'n' || text[0] == 'N')
            {
                new string[256];
                format(string, sizeof(string), "%s (por celular) dice: %s", PlayerInfo[playerid][Nickname], text);
                if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
                SetTimerEx("LlamadaCancelada",1000,false,"d",playerid);
                return 0;
            }
            else SendClientMessage(playerid, -1, "Usa para contestar {DBED15}si{FFFFFF} o {DBED15}no{FFFFFF} enviándolo como chat común.");
        }
        if(EnLlamada911[playerid] == 911)
        {
            new string[256];
            format(string, sizeof(string), "%s (por celular) {FFFFFF}dice: %s", PlayerInfo[playerid][Nickname], text);
            SendClientMessage(PlayerInfo[playerid][Mobile],TEAM_BLUE_COLOR,string);
            if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
            return 0;
        }
        else
        {
            new str_text[145];
            format(str_text, 145, "%s dice (por teléfono): %s", PlayerInfo[playerid][Nickname], text);
            if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, str_text, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
            MensajeEx(PlayerInfo[playerid][Mobile],COLOR_DORADO, "Teléfono(%s) dice: %s", convertPhoneNumber(PlayerInfo[playerid][Mobile],PlayerInfo[playerid][pNumero], playerid), text);
            return 0;
        }
    }
    new string[256];
    if(IsPlayerInRangeOfPoint(playerid, 1.0, -1191.9042,2035.5724,1248.3600) || IsPlayerInRangeOfPoint(playerid, 1.0, 631.2384,-180.1683,1276.7941))
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 631.2384,-180.1683,1276.7941))
        {
            if(PlayerInfo[playerid][pDuty] == 1)
            {
                if(GetPlayerDrunkLevel(playerid) > 1999) format(string, sizeof(string), "%s alcoholizado por micrófono: %s",PlayerInfo[playerid][Nickname], text);
                else format(string, sizeof(string), "%s por micrófono: %s",PlayerInfo[playerid][Nickname], text);
                ProxDetector(25.0, playerid, string,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF);
            }
            else
            {
                if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PlayerInfo[playerid][Nickname], text);
                else format(string, sizeof(string), "%s dice: %s",PlayerInfo[playerid][Nickname], text);
                if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
                SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
            }
        }
        else
        {
            if(GetPlayerDrunkLevel(playerid) > 1999) format(string, sizeof(string), "%s alcoholizado por micrófono: %s",PlayerInfo[playerid][Nickname], text);
            else format(string, sizeof(string), "%s por micrófono: %s",PlayerInfo[playerid][Nickname], text);
            ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
        }
    }
    else
    {
        if(PlayerInfo[playerid][pAcento] > 0)
        {
            if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "[Acento %s] %s alcoholizado dice: %s",GetNameAcento(PlayerInfo[playerid][pAcento]), PlayerInfo[playerid][Nickname], text);
            else format(string, sizeof(string), "[Acento %s] %s dice: %s", GetNameAcento(PlayerInfo[playerid][pAcento]), PlayerInfo[playerid][Nickname], text);
        }
        else if(PlayerInfo[playerid][pAcento] == 0 && GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PlayerInfo[playerid][Nickname], text);
        else format(string, sizeof(string), "%s dice: %s",PlayerInfo[playerid][Nickname], text);
        if(PlayerTemp[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
        SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
    }
    return 0;
}
public KickPlayerState(playerid)
{
    SetPlayerVirtualWorld(playerid, VirtualWorldAutos[playerid]);
    TogglePlayerControllable(playerid, 1);
    SetPVarInt(playerid, "IsFrozen", 1);
}

PreloadAnimLib(playerid, animlib[])
{
    ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
LoadAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"RIOT");
    PreloadAnimLib(playerid,"ATTRACTORS");              PreloadAnimLib(playerid,"BAR");                 PreloadAnimLib(playerid,"BASEBALL");
    PreloadAnimLib(playerid,"BENCHPRESS");              PreloadAnimLib(playerid,"BOMBER");              PreloadAnimLib(playerid,"BLOWJOBZ");
    PreloadAnimLib(playerid,"BSKTBALL");                PreloadAnimLib(playerid,"CAR");                 PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"COP_AMBIENT");             PreloadAnimLib(playerid,"CRACK");               PreloadAnimLib(playerid,"FIGHT_C");
    PreloadAnimLib(playerid,"DAM_JUMP");                PreloadAnimLib(playerid,"DANCING");             PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"GRAFFITI");                PreloadAnimLib(playerid,"FOOD");                PreloadAnimLib(playerid,"FREEWEIGHTS");
    PreloadAnimLib(playerid,"GANGS");                   PreloadAnimLib(playerid,"GHANDS");              PreloadAnimLib(playerid,"GRAVEYARD");
    PreloadAnimLib(playerid,"INT_HOUSE");               PreloadAnimLib(playerid,"HEIST9");              PreloadAnimLib(playerid,"GYMNASIUM");
    PreloadAnimLib(playerid,"POLICE");                  PreloadAnimLib(playerid,"RAPPING");             PreloadAnimLib(playerid,"KISSING");
    PreloadAnimLib(playerid,"KNIFE");                   PreloadAnimLib(playerid,"MD_CHASE");            PreloadAnimLib(playerid,"MEDIC");
    PreloadAnimLib(playerid,"ON_LOOKERS");              PreloadAnimLib(playerid,"PARACHUTE");           PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"PAULNMAC");                PreloadAnimLib(playerid,"PED");                 PreloadAnimLib(playerid,"SHOP");
    PreloadAnimLib(playerid,"SKATE");                   PreloadAnimLib(playerid,"SMOKING");             PreloadAnimLib(playerid,"SPRAYCAN");
    PreloadAnimLib(playerid,"STRIP");                   PreloadAnimLib(playerid,"SUNBATHE");            PreloadAnimLib(playerid,"WUZI");
    PreloadAnimLib(playerid,"SWEET");                   PreloadAnimLib(playerid,"CASINO");              PreloadAnimLib(playerid,"MISC");
}

public LanzarArpon(playerid,tipo)
{
    new vehch = GetPlayerNearestVehicle(playerid),nombrepez[20],string[200];
    ClearAnimations(playerid);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    RemovePlayerAttachedObject(playerid, 4);
    SetPlayerCheckpoint(playerid, 2786.7866,-2594.8406,-1.0248, 7.0);
    RecorridoPescador[playerid] = 1;
    switch(tipo)
    {
        case 1: pescador[playerid] = CreateObject(1609,0,0,-1000,0,0,0,100), nombrepez = "una tortuga";
        case 2: pescador[playerid] = CreateObject(1607,0,0,-1000,0,0,0,100), nombrepez = "un delfín";
        case 3: pescador[playerid] = CreateObject(1608,0,0,-1000,0,0,0,100), nombrepez = "un tiburón";
    }
    AttachObjectToVehicle(pescador[playerid], vehch, -0.075000,-6.524995,2.175000,80.999992,0.000000,0.000000);
    MensajeEx(playerid, -1, "Atrapaste %s, llévala al muelle de Ocean Docks para recibir el dinero.",nombrepez);
    format(string, sizeof(string), "logró atrapar %s.",nombrepez);
    ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
    StopAudioStreamForPlayer(playerid);
    GangZoneHideForPlayer(playerid, mares);
    pesca[playerid] = tipo;
}

public CancelarLlamada(playerid, tipo)
{
	new dialogo[10];
	switch(tipo)
	{
	    case 1: LlamadaMeca[playerid] = 0, dialogo = "mecanico";
	    case 2: LlamadaMedicos[playerid] = 0, dialogo = "medico";
	    case 3: LlamadaTaxi[playerid] = 0, dialogo = "taxi";
	}
	MensajeEx(playerid,-1, "El llamado al servicio %s fue cancelado automáticamente.",dialogo);
	MensajeEx(playerid,-1, "Si aun necesitas un %s, escribe {DBED15}/servicio %s nuevamente.",dialogo,dialogo);
	SetPlayerColor(playerid, COLORCARGO0);
}
public llamada(playerid)
{
    PlayerPlaySoundEx(playerid, 3401, 0.0, 0.0, 0.0);
    llamadasonido1[playerid] = SetTimerEx("llamada2", 950, false, "i", playerid);
    return 1;
}
public llamada2(playerid)
{
    PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
    llamadasonido2[playerid] = SetTimerEx("llamada", 950, false, "i", playerid);
    return 1;
}
public finllamada(playerid)
{
    KillTimer(llamadasonido1[playerid]);
    KillTimer(llamadasonido2[playerid]);
    PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
    return 1;
}
public finllamadax(playerid,i)
{
    KillTimer(llamadasonido1[playerid]);
    KillTimer(llamadasonido2[playerid]);
    PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
    callcmd::colgar(playerid);
    callcmd::colgar(i);
    SendClientMessage(i,-1,"Llamada perdida.");
    return 1;
}

public TimeMiner(playerid)
{
    if(Picando[playerid] < 10)
    {
        Picando[playerid]++;
        SetPlayerProgressBarValue(playerid,Progressbar[playerid][Picar], Picando[playerid]);
        UpdatePlayerProgressBar(playerid,Progressbar[playerid][Picar]);
        if(Picando[playerid] == 10)
        {
            Picando[playerid] = 0;
            KillTimer(hands[playerid]);
            HidePlayerProgressBar(playerid, Progressbar[playerid][Picar]);
            TogglePlayerControllable(playerid, 1);
            SetPVarInt(playerid, "IsFrozen", 1);
            ApplyAnimation(playerid,"CARRY","crry_prtial",10,7,5,1,1,1);
            StopAudioStreamForPlayer(playerid);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            RemovePlayerAttachedObject(playerid,4);
            SetPlayerAttachedObject(playerid,4, 905, 6, 0.121996, -0.002002, -0.212000, -125.299995, 159.900146, -172.099975, 0.207000, 0.293000, 0.202000);
            rocajugador[playerid] = 897;
            AccionesRol(playerid,"agarra una roca con sus manos.", 20);
            SendClientMessage(playerid, -1, "Deja la roca en la procesadora que se encuentra fuera de la mina.");
        }
    }
    return 1;
}

public SetPlayerStats(playerid)
{
    new pistol, silenced,dk,shot,sawn,uzi,mp5,ak,m4,sniper,edc;
    if(PlayerInfo[playerid][pNivel] < 2) { pistol = 400;   silenced = 400; dk = 400;   shot = 400; sawn = 400; uzi = 400;  mp5 = 400;  ak = 400;   m4 = 400;   sniper = 400;   edc = 400; }
    else if(PlayerInfo[playerid][pNivel] == 3) { pistol = 550;   silenced = 1000; dk = 1000;   shot = 1000; sawn = 400; uzi = 400;  mp5 = 550;  ak = 550;   m4 = 550;   sniper = 550;   edc = 550; }
    else { pistol = 550;   silenced = 1000; dk = 1000;   shot = 1000; sawn = 400; uzi = 400;  mp5 = 1000;  ak = 1000;   m4 = 1000;   sniper = 1000;   edc = 1000; }
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, pistol);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, silenced);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, dk);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, shot);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, sawn);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, uzi);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, mp5);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, ak);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, m4);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, sniper);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, edc);
    return 1;
}
PuntosCamello(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,2.5,2385.2434,-1771.1910,13.5469) || IsPlayerInRangeOfPoint(playerid,2.5, 2293.6973,-1693.1864,13.5482) || IsPlayerInRangeOfPoint(playerid,2.5, 2441.2925,-1689.9332,13.8047) || IsPlayerInRangeOfPoint(playerid,2.5, 2252.9622,-1793.9364,13.5546)) return 1;
    else return -1;
}
funcion ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "Ninguno", 0, 4, 4);
		Reports[i][ReportadoID] = 999;
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
	}
	return 1;
}
ProxDetectorS(Float:radi, playerid, targetid)
{
    new Float: fp_playerPos[3];
    GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
    if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) return 1;
    return 0;
}
RespawnNearbyVehicles(playerid, Float:radi)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i=1; i<MAX_VEHICLES; i++)
    {
        if(GetVehicleModel(i))
        {
            new Float:posx, Float:posy, Float:posz,Float:tempposx, Float:tempposy, Float:tempposz;
            GetVehiclePos(i, posx, posy, posz),tempposx = (posx - x),tempposy = (posy - y),tempposz = (posz - z);
            if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SetVehicleToRespawn(i);
        }
    }
}
MandarMensajeSalon(mensaje[], id)
{
    foreach(new i : Player)
    {
        if(strcmp(Alquilador,PlayerInfo[i][Nickname],true) == 0)
        {
            if(id != i) SendClientMessage(i, -1, mensaje);
        }
    }
    return 1;
}
MandarMensajeInvitado(playerid, radio, mensaje[])
{
    foreach(new i : Player)
    {
        if((GLOBAL_VEHICLES[GetPlayerVehicleID(i)][gb_vehicle_EMISORA_ID] == radio || IsPlayerInDynamicArea(i, AreaCabinas[radio])) && i != playerid)
        {
            new locutor = CabinasOcupadasEmisoras[radio][1];
            if(PlayerInfo[i][pAdmin] < 2) MensajeEx(i, 0xFFD46EFF, "[Invitado en radio %s]: %s", Emisoras[locutor][NombreEmisora], mensaje);
            else if(PlayerInfo[i][pAdmin] >= 2) MensajeEx(i, 0xFFD46EFF, "[Emis. Invitado %s (%d)]: %s",PlayerInfo[playerid][Nickname], playerid, mensaje);
        }
    }
    return 1;
}
MandarMensajeLocutor(playerid, radio, mensaje[])
{
    foreach(new i : Player)
    {
        if((GLOBAL_VEHICLES[GetPlayerVehicleID(i)][gb_vehicle_EMISORA_ID] == radio || IsPlayerInDynamicArea(i, AreaCabinas[radio])) && i != playerid)
        {
            new locutor = CabinasOcupadasEmisoras[radio][1];
            if(PlayerInfo[i][pAdmin] < 2) MensajeEx(i, 0xFFD46EFF, "[Locutor de radio %s]: %s", Emisoras[locutor][NombreEmisora], mensaje);
            else if(PlayerInfo[i][pAdmin] >= 2) MensajeEx(i, 0xFFD46EFF, "[Emis. loc. %s (%d)]: %s",PlayerInfo[playerid][Nickname], playerid, mensaje);
        }
    }
    return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    new info[2];
    Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
    switch(info[0])
    {
        case AREA_TYPE_GANGZONE:
        {
            new index = info[1];
            if(TerritorioInfo[index][Territorio_Valido])
            {
                if(PlayerInfo[playerid][pFaccion] > 1)
                {
                    ColorJugadorDefault(playerid);
                    TextDrawHideForPlayer(playerid, Territorio_TD[0]);
                    TextDrawHideForPlayer(playerid, Territorio_TD[1]);
                    PlayerTextDrawHide(playerid, MensajeTD[playerid]);
                }
            }
        }
    }
    if(areaid == AreaCabinas[5])
	{
		KillTimer(DANOF[playerid]);
		TextDrawHideForPlayer(playerid, Sangre);
	}
    new emisora,emisorasurl[200];
    if(areaid == AreaCabinas[1]) emisora = 1;
	if(areaid == AreaCabinas[2]) emisora = 2;
	if(areaid == AreaCabinas[3]) emisora = 3;
	if(areaid == AreaCabinas[4]) emisora = 4;
    if(emisora > 0)
    {
        if(TieneMicrofono[playerid] > 0)
        {
            TieneMicrofono[playerid] = 0;
            RemovePlayerAttachedObject(playerid,4);
        }
        if(CabinasOcupadasEmisoras[emisora][0] != 0)
        {
            new id = CabinasOcupadasEmisoras[emisora][1];
            if(Emisoras[id][CabinaOcupada] == emisora)
            {
                if(Emisoras[id][TransEmisora] == 1)
                {
                    StopAudioStreamForPlayer(playerid);
                    CabinasOcupadasEmisoras[emisora][2]--;
                    if(id == playerid)
                    {
                        if(CabinasOcupadasEmisoras[emisora][0] == 1)
                        {
                            CabinasOcupadasEmisoras[emisora][0] = 0;
                            CabinasOcupadasEmisoras[emisora][1] = -1;
                            CabinasOcupadasEmisoras[emisora][2] = 0;
                            Emisoras[playerid][TransEmisora] = 0;
                            Emisoras[playerid][CabinaOcupada] = 0;
                            format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
                            format(emisorasurl, sizeof(emisorasurl), "{FFFFFF}Radio disponible {C0C0C0}[N%d]",emisora);
                            UpdateDynamic3DTextLabelText(CabinasTextos[emisora], COLOR_ROJO, emisorasurl);
                            SendClientMessage(playerid, COLOR_WHITE, "Has dejado de transmitir en esta cabina.");
                            RemovePlayerAttachedObject(playerid, 4);
                            foreach(new id2 : Player)
                            {
                                if(TieneMicrofono[id2] == 1)
                                {
                                    TieneMicrofono[id2] = 0;
                                    RemovePlayerAttachedObject(id2,4);
                                }
                                if(IsPlayerInDynamicArea(id2, AreaCabinas[emisora]))
                                {
                                    SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
                                    PararEmisora(id2);
                                }
                                if(IsPlayerInAnyVehicle(id2) && GLOBAL_VEHICLES[GetPlayerVehicleID(id2)][gb_vehicle_EMISORA_ID] == emisora)
                                {
                                    SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
                                    PararEmisora(id2);
                                }
                            }
                            for(new vehicleid = 0, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
                            {
                                if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] == emisora) GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
                            }
                            return 1;
                        }
                    }
                    return 1;
                }
            }
        }
    }
    return 1;
}
public bool:Buscar(const search[], const find[])
{
    if(strfind(search, find) != -1) return true;
    return false;
}

CargarParking(id)
{
    if(Estacionamientos[id][eEnUso] > 0)
    {
        new texto[512];
        if(IsValidDynamic3DTextLabel(Estacionamientos[id][Etiqueta])) DestroyDynamic3DTextLabel(Estacionamientos[id][Etiqueta]);
        if(IsValidDynamic3DTextLabel(Estacionamientos[id][EtiquetaInterior])) DestroyDynamic3DTextLabel(Estacionamientos[id][EtiquetaInterior]);
        if(IsValidDynamicPickup(Estacionamientos[id][Pickup])) DestroyDynamicPickup(Estacionamientos[id][Pickup]);
        Estacionamientos[id][Pickup] = CreateDynamicPickup(1318, 1, Estacionamientos[id][PosX],Estacionamientos[id][PosY],Estacionamientos[id][PosZ], 0);
        format(texto,sizeof(texto),"{DBED15}Estacionamiento\n{FFFFFF}ID: %d | Propietario: {03C5DF}%s\n{FFFFFF}Con nivel %d puedes {DBED15}/comprar estacionamiento\n{FFFFFF}Precio: {00CC00}$%d\n\n{FFFFFF}Pulsa {DBED15}'F'{FFFFFF} para entrar a pie y {DBED15}'H'{FFFFFF} para entrar en un vehículo.\nEl costo es de {00CC00}$150{FFFFFF}/día.",id,Estacionamientos[id][DuenoName],Estacionamientos[id][Nivel],Estacionamientos[id][ePrecio]);
        Estacionamientos[id][Etiqueta] = CreateDynamic3DTextLabel(texto, COLOR_ROJO, Estacionamientos[id][PosX], Estacionamientos[id][PosY], Estacionamientos[id][PosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,-1);
        Estacionamientos[id][EtiquetaInterior] = CreateDynamic3DTextLabel(""SALIDAPORF" a pie y {DBED16}'H'{FFFFFF} para salir en un vehículo.", COLOR_ROJO, Estacionamientos[id][SalidX], Estacionamientos[id][SalidY], Estacionamientos[id][SalidZ]+0.2, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Estacionamientos[id][eMundoVirtual], Estacionamientos[id][eInterior]);
    }
}
public EmpezarCarrera()
{
    new string[300];
    if(ConteoCarrera > 60)
    {
        format(string,sizeof(string),"En {00CC00}%d minutos{FFFFFF} comienza la carrera, ya se inscribieron {DBED15}%d{FFFFFF} corredores.",ConteoCarrera/60,ParticipantesCarrera);
        foreach(new i : Player) if(IsPlayerInRangeOfPoint(i,250,-1408.8688,-304.5082,1056.4351) && GetPlayerInterior(i) == 7) SendClientMessage(i,-1,string);
        SetTimer("EmpezarCarrera",segundos(60),0);
        ConteoCarrera -= 60;
    }
    else if(ConteoCarrera <= 60 && ConteoCarrera != 0)
    {
        format(string,sizeof(string),"En {00CC00}%d segundos{FFFFFF} comienza la carrera, ya se inscribieron {DBED15}%d{FFFFFF} corredores.",ConteoCarrera,ParticipantesCarrera);
        foreach(new i : Player) if(IsPlayerInRangeOfPoint(i,250,-1408.8688,-304.5082,1056.4351) && GetPlayerInterior(i) == 7) SendClientMessage(i,-1,string);
        SetTimer("EmpezarCarrera",segundos(10),0);
        ConteoCarrera -= 10;
    }
    else
    {
        ConteoCarrera = 5;
        if(ParticipantesCarrera < 1)
        {
            ResetearCarrera();
            foreach(new i : Player)
            {
                if(IsPlayerInRangeOfPoint(i,250,-1408.8688,-304.5082,1056.4351) && GetPlayerInterior(i) == 7)
                {
                    SendClientMessage(i,-1,"La carrera se canceló automaticamente por la falta de corredores.");
                    UpdateDynamic3DTextLabelText(TextoCarrera,COLOR_WHITE,"{FF3300}Boleteria cerrada\n{DBED15}Horarios de los eventos: {FFFFFF}Carreras a cada hora!");
                }
                if(EnCarreras[i] > 0) SacarCarrera(i, 1);
            }
            return true;
        }
        foreach(new i : Player)
        {
            if(EnCarreras[i] > 0 && IsPlayerConnected(i))
            {
                
                SetPlayerVirtualWorld(i,7);
                SetVehicleInterior(i,7);
                new veh;
                if(EnCarreras[i] == 1)          veh = CreateVehicle(494,-1429.7744, -277.8124, 1051.0447,286.1007 ,-1,-1,-1);
                else if(EnCarreras[i] == 2)     veh = CreateVehicle(494,-1428.6266, -284.8796, 1051.1610,286.0206 ,-1,-1,-1);
                else if(EnCarreras[i] == 3)     veh = CreateVehicle(494,-1436.8180, -279.4531, 1051.0262,278.0089 ,-1,-1,-1);
                else if(EnCarreras[i] == 4)     veh = CreateVehicle(494,-1435.7325, -286.6672, 1051.0447,278.0428 ,-1,-1,-1);
                else if(EnCarreras[i] == 5)     veh = CreateVehicle(494,-1443.9871, -279.9528, 1051.1610,268.7120 ,-1,-1,-1);
                else if(EnCarreras[i] == 6)     veh = CreateVehicle(494,-1443.2439, -287.2351, 1051.0262,269.6268 ,-1,-1,-1);
                else if(EnCarreras[i] == 7)     veh = CreateVehicle(494,-1450.7983, -279.3050, 1051.0447,261.7959 ,-1,-1,-1);
                else if(EnCarreras[i] == 8)     veh = CreateVehicle(494,-1451.0276, -286.7166, 1051.1610,264.2670 ,-1,-1,-1);
                else if(EnCarreras[i] == 9)     veh = CreateVehicle(494,-1457.6642, -278.1770, 1051.0447,259.2639 ,-1,-1,-1);
                else if(EnCarreras[i] == 10)    veh = CreateVehicle(494,-1458.2916, -285.2527, 1051.1610,257.9200 ,-1,-1,-1);
                if(veh > 0)
                { 
                    SetVehicleInterior(veh,7);
                    SetVehicleVirtualWorld(veh,7);
                    ClearAnimations(i);
                    VehiculoCarrera[EnCarreras[i]-1] = veh;
                    EnAuto[i] = veh;
                    PutPlayerInVehicle(i,veh,0);
                    VehicleFuel[veh] = 90;
                    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
                    SetVehicleParamsEx(veh, 1, lights, alarm, doors, bonnet, boot, objective);
                    MotorAuto[veh] = 1;
                    if(PlayerInfo[i][pVelocimetro] == 1) MostrarVelocimetro(i);
                    Congelar(i);
                }
            }
        }
        SetTimer("ConteoCarrera2",1000,false);
        EmpezoCarrera = 1;
    }
    return true;
}
public ConteoCarrera2()
{
    if(ConteoCarrera > 0)
    {
        foreach(new i : Player)
        {
            if(EnCarreras[i] > 0 && IsPlayerConnected(i))
            {
                new string[40];
                format(string,sizeof(string),"~r~%d",ConteoCarrera);
                GameTextForPlayer(i,string,800,6);
                PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
            }
        }
        ConteoCarrera --;
        SetTimer("ConteoCarrera2",1000,0);
    }
    else
    {
        foreach(new i : Player)
        {
            if(EnCarreras[i] > 0 && IsPlayerConnected(i))
            {
                new string[50];
                format(string,sizeof(string),"%d/%d",EnCarreras[i],ParticipantesCarrera);
                PlayerTextDrawSetString(i,CarreraT[i][1],string);
                TextDrawShowForPlayer(i, BoxCarrera[0]);
                TextDrawShowForPlayer(i, BoxCarrera[1]);
                PlayerTextDrawShow(i, CarreraT[i][0]);
                TextDrawShowForPlayer(i, BoxCarrera[2]);
                PlayerTextDrawShow(i, CarreraT[i][2]);
                TextDrawShowForPlayer(i, BoxCarrera[3]);
                PlayerTextDrawShow(i, CarreraT[i][1]);
                PlayerTextDrawShow(i, CarreraPosicion[i]);
                GameTextForPlayer(i,"~g~ya",800,6);
                PlayerPlaySound(i, 1083, 0.0, 0.0, 0.0);
                Descongelar(i);
                SetPlayerRaceCheckpoint(i,0,-1357.2258,-130.9288,1051.0356,-1365.4042,-280.5632,1045.2321,10);
                EmpezoCarreraP[i] = 1;
                Tiempos[i][TiempoCarrera] = 0;
            }
        }
    }
    pickupCarreras = CreatePickup(19132, 14, -1405.1791,-260.0892,1043.6563,-1);
}
SacarCarrera(playerid, codigo)
{
    if(EnCarreras[playerid] == 0) return 1;
    new a = EnCarreras[playerid]+1;
    EnCarreras[playerid] = 0;
    ParticipantesCarrera --;
    EmpezoCarreraP[playerid] = 0;
    Tiempos[playerid][TiempoCarrera] = 0;
    VueltasCarrera[playerid] = 0;
    Tiempos[playerid][TiempoCarrera] = 0;
    Tiempos[playerid][TiempoCarrera2] = 0;
    DisablePlayerRaceCheckpoint(playerid);
    if(codigo == 2) SetPosEx(playerid,-1405.2959,-309.6738,1052.0900,190.0000,7,7,0);
    TextDrawHideForPlayer(playerid, BoxCarrera[0]);
    TextDrawHideForPlayer(playerid, BoxCarrera[1]);
    TextDrawHideForPlayer(playerid, BoxCarrera[2]);
    TextDrawHideForPlayer(playerid, BoxCarrera[3]);
    PlayerTextDrawHide(playerid, CarreraPosicion[playerid]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][0]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][1]);
    PlayerTextDrawHide(playerid, CarreraT[playerid][2]);
    if(EmpezoCarrera == 1) return DestroyVehicleEx(VehiculoCarrera[a-2]),VehiculoCarrera[a-2] = 0;
    foreach(new i : Player)
    {
        if(a >= ParticipantesCarrera) break;
        if(JugadorLogeado[i])
        {
            if(EnCarreras[i] == a)
            {
                EnCarreras[i] = a;
                a ++;
            }
        }
    }
    return true;
}
ResetearCarrera()
{
    ConteoCarrera = 0;
    ParticipantesCarrera = 0;
    ParticipantesCarrera2 = 0;
    lugarcarrera = 0;
    EmpezoCarrera = 0;
    HabilitarCarreras = 0;
    SlotGanador = 0;
    for(new a; a < 4; a++)
    {  
        for(new b; b < 6; b++)
        {  
        InfoCP[a][b] = 0;
        }
    }
}
public TimerFC()
{
	PuedenSalirPatio = true;
	SetTimer("TimerFC2",420000,false);
	foreach(new i : Player)
	{
		if(GetPlayerVirtualWorld(i) == 15 && GetPlayerInterior(i) == 15) SendClientMessage(i, 0x3399FFFF, "[Guardia]:{FFFFFF} Pueden salir al patio por 10 minutos.");
	}
}

public TimerFC2()
{
	SetTimer("TimerFC3",180000,false);
	foreach(new i : Player)
	{
		if(GetPlayerVirtualWorld(i) == 15 && GetPlayerInterior(i) == 15) SendClientMessage(i, 0x3399FFFF, "[Guardia]:{FFFFFF} Tienen 3 minutos para regresar a sus celdas.");
	}
}

public TimerFC3()
{
	new rand;
	SetTimer("TimerFC",300000,false);
	SetTimer("AbrirRejasxd",300000,false);
	AbrirRejas();
	PuedenSalirPatio = false;
	foreach(new i : Player)
	{
		if(GetPlayerVirtualWorld(i) == 15 && GetPlayerInterior(i) == 15)
		{
			if(!EnCelda(i) && PlayerInfo[i][pTipoCarcel] == 4)
			{
				SendClientMessage(i, COLOR_WHITE, "No regresaste a la celda, por mala conducta tu condena fue prolongada.");
				PlayerInfo[i][pTiempoCarcel] += 3;
				rand = random(sizeof(FortCarsonSpawn));
				SetPlayerPos(i, FortCarsonSpawn[rand][0], FortCarsonSpawn[rand][1], FortCarsonSpawn[rand][2]);
			}
		}
	}
}
public AbrirRejasxd()
{
	CerrarRejas();
}
GetPropietarioEstacionamiento(id)
{
    new query[256];
    mysql_format(handle_db,query,sizeof(query),"SELECT * FROM usuarios WHERE ID = '%d'",Estacionamientos[id][Dueno]);
    mysql_tquery(handle_db,query,"setEstacionamientoName", "i",id);
}
public setEstacionamientoName(id)
{
    new content[MAX_PLAYER_NAME];
    if(cache_num_rows() > 0)
    {
        cache_get_value_name(0, "Username", content); format(Estacionamientos[id][DuenoName],MAX_PLAYER_NAME,"%s",content);
    }
    else format(Estacionamientos[id][DuenoName],MAX_PLAYER_NAME,"Nadie");
    CargarParking(id);
}
public LoadParkings()
{
    new count;
    for(new i = 0; i < cache_num_rows(); i++)
    {
        new content[40],p = 0;
        cache_get_value_name(i, "ID", content);     p = strval(content);        Estacionamientos[p][eID] = strval(content);
        if(p > 0)
        {
            cache_get_value_name(i, "Propietario", content);            Estacionamientos[p][Dueno] = strval(content);
            cache_get_value_name(i, "SalidaX", content);                Estacionamientos[p][PosX] = floatstr(content);
            cache_get_value_name(i, "SalidaY", content);                Estacionamientos[p][PosY] = floatstr(content);
            cache_get_value_name(i, "SalidaZ", content);                Estacionamientos[p][PosZ] = floatstr(content);
            cache_get_value_name(i, "SalidaA", content);                Estacionamientos[p][PosA] = floatstr(content);
            cache_get_value_name(i, "EntradaX", content);               Estacionamientos[p][SalidX] = floatstr(content);
            cache_get_value_name(i, "EntradaY", content);               Estacionamientos[p][SalidY] = floatstr(content);
            cache_get_value_name(i, "EntradaZ", content);               Estacionamientos[p][SalidZ] = floatstr(content);
            cache_get_value_name(i, "EntradaA", content);               Estacionamientos[p][SalidA] = floatstr(content);
            cache_get_value_name(i, "Interior", content);               Estacionamientos[p][eInterior] = strval(content);
            cache_get_value_name(i, "VirtualWorld", content);           Estacionamientos[p][eMundoVirtual] = strval(content);
            cache_get_value_name(i, "EnUso", content);                  Estacionamientos[p][eEnUso] = strval(content);
            cache_get_value_name(i, "Nivel", content);                  Estacionamientos[p][Nivel] = strval(content);
            cache_get_value_name(i, "Precio", content);                 Estacionamientos[p][ePrecio] = strval(content);
            GetPropietarioEstacionamiento(p);
            count ++;
        }
    }
    printf("[ESTACIONAMIENTOS]: %d", count);
    return true;
}
public CargarEstacionamientos()
{
    new Query[200];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM estacionamientos");
    mysql_tquery(handle_db, Query,"LoadParkings");
    return 1;
}
public CargarCasas()
{
    new Query[200];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `propiedades`");
    mysql_pquery(handle_db, Query,"CargarPropiedades","");
    return 1;
}
public CargarActores()
{
    new Query[200];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `actores_tiendas`");
    mysql_tquery(handle_db, Query, "cargarRoboTiendas","");
    return 1;
}
public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
    printf("[ERROR] ID: %d - Error: %s - Callback - %s - Query: %s", errorid, error, callback, query);
    return 1;
}
public CargarPropiedades()
{
    new count = 0;
    for(new i = 0; i < cache_num_rows(); i++)
    {
        new content[40],p;
        cache_get_value_name(i, "ID", content); p = strval(content); PropInfo[p][pID] = strval(content);
        if(p > 0)
        {
            cache_get_value_name(i, "EnUso", content);  PropInfo[p][pEnUso] = strval(content);
            cache_get_value_name(i, "EnVentaPor", content); PropInfo[p][pEnVentaPor] = strval(content);
            cache_get_value_name(i, "IDPropietario", content); PropInfo[p][pIDPropietario] = strval(content);
            cache_get_value_name(i, "Propietario", content); format(PropInfo[p][pPropietario],40,"%s",content);
            cache_get_value_name(i, "Localizacion", content); format(PropInfo[p][pLocalizacion],40,"%s",content);
            cache_get_value_name(i, "VW", content);  PropInfo[p][pVW] = strval(content);
            cache_get_value_name(i, "EnVenta", content); PropInfo[p][pEnVenta] = strval(content);
            cache_get_value_name(i, "Precio", content); PropInfo[p][pPrecio] = strval(content);
            cache_get_value_name(i, "Nivel", content); PropInfo[p][pNivel] = strval(content);
            cache_get_value_name(i, "PosX", content); PropInfo[p][pPosX] = floatstr(content);
            cache_get_value_name(i, "PosY", content); PropInfo[p][pPosY] = floatstr(content);
            cache_get_value_name(i, "PosZ", content); PropInfo[p][pPosZ] = floatstr(content);
            cache_get_value_name(i, "PosA", content); PropInfo[p][pPosA] = floatstr(content);
            cache_get_value_name(i, "PosXS", content); PropInfo[p][pPosXS] = floatstr(content);
            cache_get_value_name(i, "PosYS", content); PropInfo[p][pPosYS] = floatstr(content);
            cache_get_value_name(i, "PosZS", content); PropInfo[p][pPosZS] = floatstr(content);
            cache_get_value_name(i, "PosAS", content); PropInfo[p][pPosAS] = floatstr(content);
            cache_get_value_name(i, "GX", content); PropInfo[p][pGX] = floatstr(content);
            cache_get_value_name(i, "GY", content); PropInfo[p][pGY] = floatstr(content);
            cache_get_value_name(i, "GZ", content); PropInfo[p][pGZ] = floatstr(content);
            cache_get_value_name(i, "GA", content); PropInfo[p][pGA] = floatstr(content);
            cache_get_value_name(i, "Ganancias", content);  PropInfo[p][pGanancias] = strval(content);
            cache_get_value_name(i, "Tipo", content);  PropInfo[p][pTipo] = strval(content);
            cache_get_value_name(i, "Interior", content);  PropInfo[p][pInterior] = strval(content);
            cache_get_value_name(i, "InteriorID", content);  PropInfo[p][pInteriorID] = strval(content);
            cache_get_value_name(i, "Abierta", content);  PropInfo[p][pAbierta] = strval(content);
            cache_get_value_name(i, "Sprunk", content);  PropInfo[p][pSprunk] = strval(content);
            cache_get_value_name(i, "Cerveza", content);  PropInfo[p][pCerveza] = strval(content);
            cache_get_value_name(i, "Aquarius", content);  PropInfo[p][pAquarius] = strval(content);
            cache_get_value_name(i, "Pizzas", content);  PropInfo[p][pPizzas] = strval(content);
            cache_get_value_name(i, "Vino", content);  PropInfo[p][pVino] = strval(content);
            cache_get_value_name(i, "Camara", content);  PropInfo[p][pCamara] = strval(content);
            cache_get_value_name(i, "Pala", content);  PropInfo[p][pPala] = strval(content);
            cache_get_value_name(i, "BateDeBeisbol", content);  PropInfo[p][pBateDeBeisbol] = strval(content);
            cache_get_value_name(i, "PaloDeGolf", content);  PropInfo[p][pPaloDeGolf] = strval(content);
            cache_get_value_name(i, "Manopla", content);  PropInfo[p][pManopla] = strval(content);
            cache_get_value_name(i, "PaloDeBillar", content);  PropInfo[p][pPaloDeBillar] = strval(content);
            cache_get_value_name(i, "ConsoladorRosa", content);  PropInfo[p][pConsoladorRosa] = strval(content);
            cache_get_value_name(i, "VibradorBlanco", content);  PropInfo[p][pVibradorBlanco] = strval(content);
            cache_get_value_name(i, "GranVibradorBlanco", content);  PropInfo[p][pGranVibradorBlanco] = strval(content);
            cache_get_value_name(i, "VibradorPlateado", content);  PropInfo[p][pVibradorPlateado] = strval(content);
            cache_get_value_name(i, "Baston", content);  PropInfo[p][pBaston] = strval(content);
            cache_get_value_name(i, "AK47", content);  PropInfo[p][pAK47] = strval(content);
            cache_get_value_name(i, "M4", content);  PropInfo[p][pM4] = strval(content);
            cache_get_value_name(i, "EscopetaNormal", content);  PropInfo[p][pEscopetaNormal] = strval(content);
            cache_get_value_name(i, "EscopetaDeCombate", content);  PropInfo[p][pEscopetaDeCombate] = strval(content);
            cache_get_value_name(i, "MP5", content);  PropInfo[p][pMP5] = strval(content);
            cache_get_value_name(i, "9mm", content);  PropInfo[p][p9mm] = strval(content);
            cache_get_value_name(i, "9mmSilenciada", content);  PropInfo[p][p9mmSilenciada] = strval(content);
            cache_get_value_name(i, "DesertEagle", content);  PropInfo[p][pDesertEagle] = strval(content);
            cache_get_value_name(i, "Rifle", content);  PropInfo[p][pRifle] = strval(content);
            cache_get_value_name(i, "Granada", content);  PropInfo[p][pGranada] = strval(content);
            cache_get_value_name(i, "Cuchillo", content);  PropInfo[p][pCuchillo] = strval(content);
            cache_get_value_name(i, "Katana", content);  PropInfo[p][pKatana] = strval(content);
            cache_get_value_name(i, "Crack", content);  PropInfo[p][pCrack] = strval(content);
            cache_get_value_name(i, "Medicamentos", content);  PropInfo[p][pMedicamentos] = strval(content);
            cache_get_value_name(i, "Tranquilizantes", content);  PropInfo[p][pTranquilizantes] = strval(content);
            cache_get_value_name(i, "Marihuana", content);  PropInfo[p][pMarihuana] = strval(content);
            PropInfo[p][pEmisora] = 0;
            CargarPropiedad(p);
            count ++;
        }
    }
    printf("[PROPIEDADES]: %d",count);
    return true;
}
public CargarFabricas()
{
    new Query[680];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `fabricas`");
   	mysql_query(handle_db, Query,true);

	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p,count;
		cache_get_value_name(i, "ID", content);	p = strval(content); Fabricas[p][pID] = strval(content);
		if(p != 0)
		{
			cache_get_value_name(i, "BandaID", content);  		Fabricas[p][pBanda] = strval(content);
			cache_get_value_name(i, "Localizacion", content); 	format(Fabricas[p][pLocalizacion],40,"%s",content);
			cache_get_value_name(i, "VW", content);  			Fabricas[p][pVW] = strval(content);
			cache_get_value_name(i, "Interior", content);  		Fabricas[p][pInt] = strval(content);
			//ENTRADA A PIE
			cache_get_value_name(i, "EntradaX", content);  		Fabricas[p][pEntradaX] = floatstr(content);
			cache_get_value_name(i, "EntradaY", content);  		Fabricas[p][pEntradaY] = floatstr(content);
			cache_get_value_name(i, "EntradaZ", content);  		Fabricas[p][pEntradaZ] = floatstr(content);
			cache_get_value_name(i, "EntradaA", content);  		Fabricas[p][pEntradaA] = floatstr(content);
			//SALIDA A PIE
			cache_get_value_name(i, "SalidaX", content);  		Fabricas[p][pSalidaX] = floatstr(content);
			cache_get_value_name(i, "SalidaY", content);  		Fabricas[p][pSalidaY] = floatstr(content);
			cache_get_value_name(i, "SalidaZ", content);  		Fabricas[p][pSalidaZ] = floatstr(content);
			//ENTRADA GARAGE
			cache_get_value_name(i, "GarajeE_X", content);  	Fabricas[p][pEntradaGX] = floatstr(content);
			cache_get_value_name(i, "GarajeE_Y", content);  	Fabricas[p][pEntradaGY] = floatstr(content);
			cache_get_value_name(i, "GarajeE_Z", content);  	Fabricas[p][pEntradaGZ] = floatstr(content);
			cache_get_value_name(i, "GarajeE_A", content);  	Fabricas[p][pEntradaGA] = floatstr(content);
			//SALIDA GARAGE
			cache_get_value_name(i, "GarajeS_X", content);  	Fabricas[p][pSalidaGX] = floatstr(content);
			cache_get_value_name(i, "GarajeS_Y", content);  	Fabricas[p][pSalidaGY] = floatstr(content);
			cache_get_value_name(i, "GarajeS_Z", content);  	Fabricas[p][pSalidaGZ] = floatstr(content);
			// SOBORNO (YA SOBORNÓ O NO)
			cache_get_value_name(i, "Soborno"  , content);  	Fabricas[p][pSoborno]  = strval(content);
			//ALMACENES (CAJAS)
			cache_get_value_name(i, "Almacen1", content);  		Fabricas[p][Almacen1] = strval(content);
			cache_get_value_name(i, "Almacen2", content);  		Fabricas[p][Almacen2] = strval(content);
			cache_get_value_name(i, "Almacen3", content);  		Fabricas[p][Almacen3] = strval(content);
			cache_get_value_name(i, "Almacen4", content);  		Fabricas[p][Almacen4] = strval(content);
			cache_get_value_name(i, "Almacen5", content);  		Fabricas[p][Almacen5] = strval(content);
			cache_get_value_name(i, "Almacen6", content);  		Fabricas[p][Almacen6] = strval(content);
			cache_get_value_name(i, "Almacen7", content);  		Fabricas[p][Almacen7] = strval(content);
			cache_get_value_name(i, "Almacen8", content);  		Fabricas[p][Almacen8] = strval(content);
			cache_get_value_name(i, "Almacen9", content);  		Fabricas[p][Almacen9] = strval(content);
			cache_get_value_name(i, "Almacen10", content); 		Fabricas[p][Almacen10] = strval(content);
			//TANQUES
			cache_get_value_name(i, "Tanque1", content);		Fabricas[p][pTanqueUno] = strval(content);
			cache_get_value_name(i, "Tanque2", content);		Fabricas[p][pTanqueDos] = strval(content);
			cache_get_value_name(i, "Tanque3", content);		Fabricas[p][pTanqueTres] = strval(content);
			cache_get_value_name(i, "Tanque4", content);		Fabricas[p][pTanqueCuatro] = strval(content);
			cache_get_value_name(i, "Tanque5", content);		Fabricas[p][pTanqueCinco] = strval(content);
			cache_get_value_name(i, "Tanque6", content);		Fabricas[p][pTanqueSeis] = strval(content);
			cache_get_value_name(i, "Tanque7", content);		Fabricas[p][pTanqueSiete] = strval(content);
			cache_get_value_name(i, "Tanque8", content);		Fabricas[p][pTanqueOcho] = strval(content);
			cache_get_value_name(i, "Tanque9", content);		Fabricas[p][pTanqueNueve] = strval(content);
			//ARMAS ALMACENADAS
			cache_get_value_name(i, "Recortada", content);  	Fabricas[p][pRecortada] = strval(content);
			cache_get_value_name(i, "Sniper", content);  		Fabricas[p][pSniper] = strval(content);
			cache_get_value_name(i, "Uzi", content);  			Fabricas[p][pUzi] = strval(content);
			cache_get_value_name(i, "Tec9", content);  			Fabricas[p][pTec9] = strval(content);
			//CHALECOS ANTIBALAS DISPONIBLES
			cache_get_value_name(i, "Chalecos", content);		Fabricas[p][pChalecos] = strval(content);
			cache_get_value_name(i, "DineroAlmacenado", content);Fabricas[p][pCantidadDinero] = strval(content);
			//DEMÁS DATOS
			cache_get_value_name(i, "Coins", content);			Fabricas[p][pEnVentaPor] = strval(content);
			cache_get_value_name(i, "Precio", content);  		Fabricas[p][pValor] = strval(content);
			cache_get_value_name(i, "EnUso", content);			Fabricas[p][pEnUso] = strval(content);
			cache_get_value_name(i, "MContra", content); 		Fabricas[p][MedicoContratado] = strval(content);
			cache_get_value_name(i, "Crisol1", content);  		Fabricas[p][Crisol1] = strval(content);
			cache_get_value_name(i, "Crisol2", content);  		Fabricas[p][Crisol2] = strval(content);
			cache_get_value_name(i, "Crisol3", content);  		Fabricas[p][Crisol3] = strval(content);
			cache_get_value_name(i, "EstadoC1", content);  		Fabricas[p][EstadoCocinero][0] = strval(content);
			cache_get_value_name(i, "EstadoC2", content);  		Fabricas[p][EstadoCocinero][1] = strval(content);
			cache_get_value_name(i, "EstadoC3", content);  		Fabricas[p][EstadoCocinero][2] = strval(content);
			cache_get_value_name(i, "EstadoC4", content);  		Fabricas[p][EstadoCocinero][3] = strval(content);
			cache_get_value_name(i, "EstadoC5", content);  		Fabricas[p][EstadoCocinero][4] = strval(content);
			cache_get_value_name(i, "ProgresoC1", content);  	Fabricas[p][PorcentajeCocinero][0] = strval(content);
			cache_get_value_name(i, "ProgresoC2", content);  	Fabricas[p][PorcentajeCocinero][1] = strval(content);
			cache_get_value_name(i, "ProgresoC3", content);  	Fabricas[p][PorcentajeCocinero][2] = strval(content);
			cache_get_value_name(i, "ProgresoC4", content);  	Fabricas[p][PorcentajeCocinero][3] = strval(content);
			cache_get_value_name(i, "ProgresoC5", content);  	Fabricas[p][PorcentajeCocinero][4] = strval(content);
			cache_get_value_name(i, "TieneMoledor1", content);  Fabricas[p][TieneCocinero][0] = strval(content);
			cache_get_value_name(i, "TieneMoledor2", content);  Fabricas[p][TieneCocinero][1] = strval(content);
			cache_get_value_name(i, "TieneMoledor3", content);  Fabricas[p][TieneCocinero][2] = strval(content);
			cache_get_value_name(i, "TieneMoledor4", content);  Fabricas[p][TieneCocinero][3] = strval(content);
			cache_get_value_name(i, "TieneMoledor5", content);  Fabricas[p][TieneCocinero][4] = strval(content);
			cache_get_value_name(i, "Porcentaje1", content);	Fabricas[p][Porcentaje1] = strval(content);
			cache_get_value_name(i, "Porcentaje2", content);	Fabricas[p][Porcentaje2] = strval(content);
			cache_get_value_name(i, "Porcentaje3", content);	Fabricas[p][Porcentaje3] = strval(content);
			cache_get_value_name(i, "Termino1", content);  		Fabricas[p][Termino][0] = strval(content);
			cache_get_value_name(i, "Termino2", content);  		Fabricas[p][Termino][1] = strval(content);
			cache_get_value_name(i, "Termino3", content);  		Fabricas[p][Termino][2] = strval(content);
			cache_get_value_name(i, "Termino4", content);  		Fabricas[p][Termino][3] = strval(content);
			cache_get_value_name(i, "Termino5", content);  		Fabricas[p][Termino][4] = strval(content);
			//Estado de los NPC
			cache_get_value_name(i, "EstadoMedico", content); 	Fabricas[p][EstadoMedico] = strval(content);
			cache_get_value_name(i, "EstadoG1", content);  		Fabricas[p][EstadoG][0] = strval(content);
			cache_get_value_name(i, "EstadoG2", content);  		Fabricas[p][EstadoG][1] = strval(content);
			cache_get_value_name(i, "EstadoG3", content);  		Fabricas[p][EstadoG][2] = strval(content);
			cache_get_value_name(i, "EstadoG4", content);  		Fabricas[p][EstadoG][3] = strval(content);
			cache_get_value_name(i, "EstadoG5", content);  		Fabricas[p][EstadoG][4] = strval(content);
			cache_get_value_name(i, "TieneGuardia1", content);  Fabricas[p][TieneGuardia][0] = strval(content);
			cache_get_value_name(i, "TieneGuardia2", content);	Fabricas[p][TieneGuardia][1] = strval(content);
			cache_get_value_name(i, "TieneGuardia3", content);  Fabricas[p][TieneGuardia][2] = strval(content);
			cache_get_value_name(i, "TieneGuardia4", content);  Fabricas[p][TieneGuardia][3] = strval(content);
			cache_get_value_name(i, "TieneGuardia5", content);  Fabricas[p][TieneGuardia][4] = strval(content);
	    	count ++;
	    	CargarFabricass(p);
	    	LoadBarrelMeta(p);
		}
	}
	return true;
}
public CargarPlanta(id)
{
    new string[256];
    switch(Marihuana[id][Status])
    {
        case 1:
        {
            if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
            if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
            if(!IsValidDynamicObject(Marihuana[id][Object])) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-2.3, 0.000000, 0.000000, -0.000000);
            format(string,sizeof(string),"{91ed00}Semillas de Marihuana{FFFFFF}\nSembradas por {4C94F6}%s{FFFFFF}\nSe secan en %dm %ds\n{DBED15}/regar{FFFFFF}", Marihuana[id][Owner], Marihuana[id][Time]/60,Marihuana[id][Time]%(60));
            if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_ROJO, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
            GuardarPlanta(id);
        }
        case 2:
        {
            if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
            if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
            if(Marihuana[id][Time]/3600 <= 1) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1, 0.000000, 0.000000, -0.000000);
            else if(Marihuana[id][Time]/3600 == 2) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.26, 0.000000, 0.000000, -0.000000);
            else if(Marihuana[id][Time]/3600 == 3) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.52, 0.000000, 0.000000, -0.000000);
            else if(Marihuana[id][Time]/3600 == 4) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.78, 0.000000, 0.000000, -0.000000);
            else Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-2.04, 0.000000, 0.000000, -0.000000);
            format(string,sizeof(string),"{00cc00}Planta de Marihuana{FFFFFF}\nSembrada por {00ccff}%s{FFFFFF}\nMadura en %dh %dm %ds", Marihuana[id][Owner],Marihuana[id][Time]/3600, Marihuana[id][Time]/60%(60),Marihuana[id][Time]%(60));
            if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_ROJO, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
            GuardarPlanta(id);
        }
        case 3:
        {
            if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
            if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
            if(!IsValidDynamicObject(Marihuana[id][Object])) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1, 0.000000, 0.000000, -0.000000);
            format(string, sizeof(string), "{00cc00}Planta de Marihuana{FFFFFF}\nSembrada por {00ccff}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{DBED15}/cosechar planta{FFFFFF}", Marihuana[id][Owner],Marihuana[id][Time]/3600, Marihuana[id][Time]/60%(60),Marihuana[id][Time]%(60));
            if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_ROJO, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
            GuardarPlanta(id);
        }
    }
    return true;
}
GuardarPlanta(id)
{
    new query[256];
    mysql_format(handle_db,query,sizeof(query),"UPDATE marihuana SET Owner = '%e', X = '%f', Y = '%f', Z = '%f', Time = '%d', Estado = '%d', Creado = '%d' WHERE ID = '%d'",Marihuana[id][Owner],Marihuana[id][PosX],Marihuana[id][PosY],Marihuana[id][PosZ],Marihuana[id][Time],Marihuana[id][Status],Marihuana[id][Created],Marihuana[id][mID]);
    mysql_tquery(handle_db,query);
    return true;
}
CargarFabricass(id)
{
	new string[350];
	Fabricas[id][CantidadActores] = 0;
	Fabricas[id][ActoresMuertos] = 0;
	if(Fabricas[id][pBanda] > 0)
	{
		CalcularBolsos(id);
		new banda = Fabricas[id][pBanda];
		format(string, sizeof(string), "{EB0000}fabrica de metanfetamina\n{FFFFFF}Propiedad de {dbed15}%s",BandasInfo[banda][BNombre]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel]))Fabricas[id][pLabel] = CreateDynamic3DTextLabel(string, COLOR_ROJO, Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ]+1.0, 20);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel2])) Fabricas[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF" de la propiedad.",COLOR_ROJO,Fabricas[id][pSalidaX],Fabricas[id][pSalidaY],Fabricas[id][pSalidaZ],5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,Fabricas[id][pVW],Fabricas[id][pInt],-1,100.0);
		if(!IsValidDynamicPickup(Fabricas[id][pPickup])) Fabricas[id][pPickup] = CreateDynamicPickup(19524,23,Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ],0);
		if(!IsValidDynamicMapIcon(Fabricas[id][pMapIcon])) Fabricas[id][pMapIcon] = CreateDynamicMapIcon(Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ], 23, -1, -1, -1, -1, 600.0);
		if(IsValidDynamicObject(Fabricas[id][pPuerta])) DestroyDynamicObject(Fabricas[id][pPuerta]);
		if(IsValidDynamicObject(Fabricas[id][tMoney])) DestroyDynamicObject(Fabricas[id][tMoney]);
		Fabricas[id][pPuerta] = CreateDynamicObject(19303, -2022.93274, 254.14169, 1036.06921,   0.00000, 0.00000, 90.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		Fabricas[id][tMoney] = CreateDynamicObject(18660, -2026.720825, 253.748703, 1036.851807, 0.000000, 0.000000, 180.000000, Fabricas[id][pVW],Fabricas[id][pInt], -1);
		CargarVehiculoFabrica(id,1);
		CargarVehiculoFabrica(id,2);
		for(new i = 0; i < 5; i++) {
			if(!IsValidDynamicObject(BarrilMeta[id][i])) BarrilMeta[id][i] = CreateDynamicObject(3632,0,0,-1000,0,0,0, Fabricas[id][pVW],Fabricas[id][pInt]);
			if(!IsValidDynamicObject(CajaMeta[id][i])) CajaMeta[id][i] = CreateDynamicObject(1271,0,0,-1000,0,0,0, Fabricas[id][pVW],Fabricas[id][pInt]);
			if(Fabricas[id][Termino][i] == 0 && Fabricas[id][EstadoCocinero][i] == 4) Fabricas[id][EstadoCocinero][i] = 2;
		}
		//CARGA DE GUARDIAS
		if(Fabricas[id][TieneGuardia][0] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorGuardia][0])) Fabricas[id][ActorGuardia][0] = CreateDynamicActor(66, -1983.3815,207.0429,1040.0468,76.4343, 1, 100.0, Fabricas[id][pVW], Fabricas[id][pInt]);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][0])) SetDynamicActorHealth(Fabricas[id][ActorGuardia][0], 100.0);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][0])) SetDynamicActorInvulnerable(Fabricas[id][ActorGuardia][0], false);
		}
		if(Fabricas[id][TieneGuardia][1] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorGuardia][1])) Fabricas[id][ActorGuardia][1] = CreateDynamicActor(125, -1997.6844,205.5098,1035.8162,359.5049, 1, 100.0, Fabricas[id][pVW], Fabricas[id][pInt]);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][1])) SetDynamicActorHealth(Fabricas[id][ActorGuardia][1], 100.0);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][1])) SetDynamicActorInvulnerable(Fabricas[id][ActorGuardia][1], false);
		}
		if(Fabricas[id][TieneGuardia][2] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorGuardia][2])) Fabricas[id][ActorGuardia][2] = CreateDynamicActor(223, -2016.1063,233.2106,1035.8162,229.3722, 1, 100.0, Fabricas[id][pVW], Fabricas[id][pInt]);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][2])) SetDynamicActorHealth(Fabricas[id][ActorGuardia][2], 100.0);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][2])) SetDynamicActorInvulnerable(Fabricas[id][ActorGuardia][2], false);
		}
		if(Fabricas[id][TieneGuardia][3] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorGuardia][3])) Fabricas[id][ActorGuardia][3] = CreateDynamicActor(165, -2022.6560,243.8168,1035.8162,145.2300, 1, 100.0, Fabricas[id][pVW], Fabricas[id][pInt]);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][3])) SetDynamicActorHealth(Fabricas[id][ActorGuardia][3], 100.0);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][3])) SetDynamicActorInvulnerable(Fabricas[id][ActorGuardia][3], false);
		}
		if(Fabricas[id][TieneGuardia][4] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorGuardia][4])) Fabricas[id][ActorGuardia][4] = CreateDynamicActor(124, -2023.5002,244.8579,1035.8389,1.5771, 1, 100.0, Fabricas[id][pVW], Fabricas[id][pInt]);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][4])) SetDynamicActorHealth(Fabricas[id][ActorGuardia][4], 100.0);
			if(IsValidDynamicActor(Fabricas[id][ActorGuardia][4])) SetDynamicActorInvulnerable(Fabricas[id][ActorGuardia][4], false);
		}
		if(Fabricas[id][Termino][0] == 1)
		{
			Fabricas[id][EstadoCocinero][0] = 4;
			if(!IsValidDynamicObject(Fabricas[id][Bloque][0])) Fabricas[id][Bloque][0] = CreateDynamicObject(1271, -2017.67334, 227.02380, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][Termino][1] == 1)
		{
			Fabricas[id][EstadoCocinero][1] = 4;
			if(!IsValidDynamicObject(Fabricas[id][Bloque][1])) Fabricas[id][Bloque][1] = CreateDynamicObject(1271, -2013.86060, 227.05284, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][Termino][2] == 1)
		{
			Fabricas[id][EstadoCocinero][2] = 4;
			if(!IsValidDynamicObject(Fabricas[id][Bloque][2])) Fabricas[id][Bloque][2] = CreateDynamicObject(1271, -2009.98157, 227.00481, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][Termino][3] == 1)
		{
			Fabricas[id][EstadoCocinero][3] = 4;
			if(!IsValidDynamicObject(Fabricas[id][Bloque][3])) Fabricas[id][Bloque][3] = CreateDynamicObject(1271, -2006.16040, 226.99612, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][Termino][4] == 1)
		{
			Fabricas[id][EstadoCocinero][4] = 4;
			if(!IsValidDynamicObject(Fabricas[id][Bloque][4])) Fabricas[id][Bloque][4] = CreateDynamicObject(1271, -2002.34033, 227.01234, 1035.15454,   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][EstadoCocinero][0] != 3 && Fabricas[id][EstadoCocinero][0] == 1 && Fabricas[id][TieneCocinero][0] != 0 || Fabricas[id][PorcentajeCocinero][0] > 0 && Fabricas[id][TieneCocinero][0] != 0 && Fabricas[id][EstadoCocinero][0] != 3) { Fabricas[id][EstadoCocinero][0] = 1; KillTimer(Fabricas[id][tiempoc1]); Fabricas[id][tiempoc1] = SetTimerEx("JobCocinero1",segundos(TIEMPO_PROCESO),true,"d",id); }
		if(Fabricas[id][EstadoCocinero][1] != 3 && Fabricas[id][EstadoCocinero][1] == 1 && Fabricas[id][TieneCocinero][1] != 0 || Fabricas[id][PorcentajeCocinero][1] > 0 && Fabricas[id][TieneCocinero][1] != 0 && Fabricas[id][EstadoCocinero][1] != 3) { Fabricas[id][EstadoCocinero][1] = 1; KillTimer(Fabricas[id][tiempoc2]); Fabricas[id][tiempoc2] = SetTimerEx("JobCocinero2",segundos(TIEMPO_PROCESO),true,"d",id); }
		if(Fabricas[id][EstadoCocinero][2] != 3 && Fabricas[id][EstadoCocinero][2] == 1 && Fabricas[id][TieneCocinero][2] != 0 || Fabricas[id][PorcentajeCocinero][2] > 0 && Fabricas[id][TieneCocinero][2] != 0 && Fabricas[id][EstadoCocinero][2] != 3) { Fabricas[id][EstadoCocinero][2] = 1; KillTimer(Fabricas[id][tiempoc3]); Fabricas[id][tiempoc3] = SetTimerEx("JobCocinero3",segundos(TIEMPO_PROCESO),true,"d",id); }
		if(Fabricas[id][EstadoCocinero][3] != 3 && Fabricas[id][EstadoCocinero][3] == 1 && Fabricas[id][TieneCocinero][3] != 0 || Fabricas[id][PorcentajeCocinero][3] > 0 && Fabricas[id][TieneCocinero][3] != 0 && Fabricas[id][EstadoCocinero][3] != 3) { Fabricas[id][EstadoCocinero][3] = 1; KillTimer(Fabricas[id][tiempoc4]); Fabricas[id][tiempoc4] = SetTimerEx("JobCocinero4",segundos(TIEMPO_PROCESO),true,"d",id); }
		if(Fabricas[id][EstadoCocinero][4] != 3 && Fabricas[id][EstadoCocinero][4] == 1 && Fabricas[id][TieneCocinero][4] != 0 || Fabricas[id][PorcentajeCocinero][4] > 0 && Fabricas[id][TieneCocinero][4] != 0 && Fabricas[id][EstadoCocinero][4] != 3) { Fabricas[id][EstadoCocinero][4] = 1; KillTimer(Fabricas[id][tiempoc5]); Fabricas[id][tiempoc5] = SetTimerEx("JobCocinero5",segundos(TIEMPO_PROCESO),true,"d",id); }
		for(new i = 0; i < 5; i++) {
			if(Fabricas[id][EstadoCocinero][i] == 0 && Fabricas[id][PorcentajeCocinero][i] == 0) Fabricas[id][EstadoCocinero][i] = 2;
		}
		ActualizarDineroPared(id);
		CargarCajasFabrica(id);
		for(new i = 0; i < 5; i++) {
			if(Fabricas[id][EstadoG][i] == 3 && IsValidDynamicActor(Fabricas[id][ActorGuardia][i])) Fabricas[id][ActoresMuertos] ++,ApplyDynamicActorAnimation(Fabricas[id][ActorGuardia][i], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
		}
		//Moledores de Cristales
		for(new i = 0; i < 5; i++) {
			if(Fabricas[id][TieneCocinero][i] != 0)
			{
				Fabricas[id][CantidadActores] ++;
				new varskin;
				if(Fabricas[id][TieneCocinero][i] == 1) varskin = 146;
				if(Fabricas[id][TieneCocinero][i] == 2) varskin = 145;
				if(i == 0) if(!IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActorCocinero][i] = CreateDynamicActor(varskin, -2016.4310,227.9705,1035.8162,180.0000,1,100,Fabricas[id][pVW]);
				if(i == 1) if(!IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActorCocinero][i] = CreateDynamicActor(varskin, -2012.5667,226.0623,1035.8225,0.0000,1,100,Fabricas[id][pVW]);
				if(i == 2) if(!IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActorCocinero][i] = CreateDynamicActor(varskin, -2008.7354,227.9745,1035.8162,180.0000,1,100,Fabricas[id][pVW]);
				if(i == 3) if(!IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActorCocinero][i] = CreateDynamicActor(varskin, -2004.8615,226.0628,1035.8162,0.0000,1,100,Fabricas[id][pVW]);
				if(i == 4) if(!IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActorCocinero][i] = CreateDynamicActor(varskin, -2001.0369,227.9719,1035.8162,180.0000,1,100,Fabricas[id][pVW]);
				if(Fabricas[id][EstadoCocinero][i] != 3 && IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) ApplyDynamicActorAnimation(Fabricas[id][ActorCocinero][i], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
				if(Fabricas[id][EstadoCocinero][i] == 3 && IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) Fabricas[id][ActoresMuertos] ++,ApplyDynamicActorAnimation(Fabricas[id][ActorCocinero][i], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
				if(IsValidDynamicActor(Fabricas[id][ActorCocinero][i])) SetDynamicActorInvulnerable(Fabricas[id][ActorCocinero][i], false);
			}
		}
		format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][0], E_Cocinero(Fabricas[id][EstadoCocinero][0],Fabricas[id][ActorCocinero][0]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][Cocinero][0])) Fabricas[id][Cocinero][0] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2016.39978, 226.99930, 1035.33789+0.2, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][1], E_Cocinero(Fabricas[id][EstadoCocinero][1],Fabricas[id][ActorCocinero][1]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][Cocinero][1])) Fabricas[id][Cocinero][1] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2012.56006, 226.99930, 1035.33789+0.2, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][2], E_Cocinero(Fabricas[id][EstadoCocinero][2],Fabricas[id][ActorCocinero][2]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][Cocinero][2])) Fabricas[id][Cocinero][2] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2008.72021, 226.99930, 1035.33789+0.2, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][3], E_Cocinero(Fabricas[id][EstadoCocinero][3],Fabricas[id][ActorCocinero][3]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][Cocinero][3])) Fabricas[id][Cocinero][3] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2004.88074, 226.99930, 1035.33789+0.2, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado:%s",Fabricas[id][PorcentajeCocinero][4], E_Cocinero(Fabricas[id][EstadoCocinero][4],Fabricas[id][ActorCocinero][4]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][Cocinero][4])) Fabricas[id][Cocinero][4] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2001.06067, 226.99930, 1035.33789+0.2, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		if(Fabricas[id][pChalecos] > 24) Fabricas[id][pChalecos] = 24;
		for(new cb = 0; cb < Fabricas[id][pCantidadBolsas]; cb++)
		{
			if(!IsValidDynamicObject(Fabricas[id][Bolso][cb])) Fabricas[id][Bolso][cb] = CreateDynamicObject(1550, BolsoSpawn[cb][0], BolsoSpawn[cb][1], BolsoSpawn[cb][2],   0.00000, 0.00000, 0.00000, Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		for(new esco = 0; esco < Fabricas[id][pRecortada]; esco++)
		{
			if(!IsValidDynamicObject(Fabricas[id][EscoObjetos][esco])) Fabricas[id][EscoObjetos][esco] = CreateDynamicObject(350, EscopetasRecortadas[esco][0], EscopetasRecortadas[esco][1], EscopetasRecortadas[esco][2],   EscopetasRecortadas[esco][3], EscopetasRecortadas[esco][4], EscopetasRecortadas[esco][5], Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		for(new ch = 0; ch < Fabricas[id][pChalecos]; ch++)
		{
			if(!IsValidDynamicObject(Fabricas[id][Chalecos][ch])) Fabricas[id][Chalecos][ch] = CreateDynamicObject(373, ChalecoSpawn[ch][0], ChalecoSpawn[ch][1], ChalecoSpawn[ch][2],   ChalecoSpawn[ch][3], ChalecoSpawn[ch][4], ChalecoSpawn[ch][5], Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		for(new snip = 0; snip < Fabricas[id][pSniper]; snip++)
		{
			if(!IsValidDynamicObject(Fabricas[id][SniperObjetos][snip])) Fabricas[id][SniperObjetos][snip] = CreateDynamicObject(358, PSnipers[snip][0], PSnipers[snip][1], PSnipers[snip][2],   PSnipers[snip][3], PSnipers[snip][4], PSnipers[snip][5], Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		if(Fabricas[id][MedicoContratado] != 0)
		{
			Fabricas[id][CantidadActores] ++;
			if(!IsValidDynamicActor(Fabricas[id][ActorMedico])) Fabricas[id][ActorMedico] = CreateDynamicActor(Fabricas[id][MedicoContratado], -2022.5638,215.6430,1035.8162,302.6615,1,100,Fabricas[id][pVW]),SetDynamicActorInvulnerable(Fabricas[id][ActorMedico], false);
			if(Fabricas[id][EstadoMedico] == 3 && IsValidDynamicActor(Fabricas[id][ActorMedico])) Fabricas[id][ActoresMuertos] ++,ApplyDynamicActorAnimation(Fabricas[id][ActorMedico], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
		}
		for(new tects = 0; tects < Fabricas[id][pTec9]; tects++)
		{
			if(!IsValidDynamicObject(Fabricas[id][Tec9Objetos][tects])) Fabricas[id][Tec9Objetos][tects] = CreateDynamicObject(372, PTec[tects][0], PTec[tects][1], PTec[tects][2],   PTec[tects][3], PTec[tects][4], PTec[tects][5], Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		for(new uzis = 0; uzis < Fabricas[id][pUzi]; uzis++)
		{
			if(!IsValidDynamicObject(Fabricas[id][UziObjetos][uzis])) Fabricas[id][UziObjetos][uzis] = CreateDynamicObject(352, PUzis[uzis][0], PUzis[uzis][1], PUzis[uzis][2],   PUzis[uzis][3], PUzis[uzis][4], PUzis[uzis][5], Fabricas[id][pVW],Fabricas[id][pInt]);
		}
		format(string,sizeof(string),"{EB0000}Armas{FFFFFF}\nCantidad disponible:{00CC00} %d{FFFFFF}\n\nPulsa {DBED16}'H'{FFFFFF} para equipar una.\nPulsa {00CCFF}'Y'{FFFFFF} para guardar el arma que llevas en tus manos.",Fabricas[id][pRecortada]+Fabricas[id][pUzi]+Fabricas[id][pTec9]+Fabricas[id][pSniper]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel4])) Fabricas[id][pLabel4] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2019.9447,243.5474,1035.8162+0.3 ,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,Fabricas[id][pVW],Fabricas[id][pInt]);
		format(string,sizeof(string),"{3399FF}Chalecos antibalas{FFFFFF}\nCantidad disponible: {00CC00}%s{FFFFFF}\n\nPulsa {DBED16}'H'{FFFFFF} para equipar uno.",Numeros(Fabricas[id][pChalecos]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel5])) Fabricas[id][pLabel5] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2020.0555,239.3711,1035.8162+0.3, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{DBED16}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[id][Porcentaje1],EstadoH(HornoEncendido1[id]),EstadoHo(HornoEncendido1[id]),EstadoCristal(Fabricas[id][Crisol1]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][olla1])) Fabricas[id][olla1] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1992.2786, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{DBED16}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[id][Porcentaje2],EstadoH(HornoEncendido2[id]),EstadoHo(HornoEncendido2[id]),EstadoCristal(Fabricas[id][Crisol2]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][olla2])) Fabricas[id][olla2] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1995.6786, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{DBED16}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}\n\n%s{FFFFFF}%s",Fabricas[id][Porcentaje3],EstadoH(HornoEncendido3[id]),EstadoHo(HornoEncendido3[id]),EstadoCristal(Fabricas[id][Crisol3]));
		if(!IsValidDynamic3DTextLabel(Fabricas[id][olla3])) Fabricas[id][olla3] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1999.1986, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[id][pTanqueUno]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque1])) Fabricas[id][LTanque1] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 209.3350, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[id][pTanqueDos]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque2])) Fabricas[id][LTanque2] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 212.2440, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #1",Fabricas[id][pTanqueTres]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque3])) Fabricas[id][LTanque3] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 215.3320, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[id][pTanqueCuatro]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque4])) Fabricas[id][LTanque4] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 194.5190, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[id][pTanqueCinco]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque5])) Fabricas[id][LTanque5] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 197.5950, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #2",Fabricas[id][pTanqueSeis]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque6])) Fabricas[id][LTanque6] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -2025.3972, 200.4760, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[id][pTanqueSiete]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque7])) Fabricas[id][LTanque7] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1976.9731, 200.2980, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[id][pTanqueOcho]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque8])) Fabricas[id][LTanque8] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1976.9731, 197.4360, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		format(string,sizeof(string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{DBED16} #3",Fabricas[id][pTanqueNueve]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][LTanque9])) Fabricas[id][LTanque9] = CreateDynamic3DTextLabel(string, COLOR_ROJO, -1976.9731, 194.3620, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,Fabricas[id][pVW], Fabricas[id][pInt],-1,100.0);
		if(Fabricas[id][pEntradaGX] != 0) {
			if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel3])) Fabricas[id][pLabel3] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.", COLOR_ROJO, Fabricas[id][pEntradaGX],Fabricas[id][pEntradaGY],Fabricas[id][pEntradaGZ]+1.0, 20);
		}
	}
	else
	{
		if(Fabricas[id][pEnVentaPor] == 0) format(string, sizeof(string), "{EB0000}fabrica de metanfetamina\n{FFFFFF}En venta\nPrecio: {00CC00}$%s\n{FFFFFF}Usa {DBED16}/comprar fabrica{FFFFFF} para comprarla.",Numeros(Fabricas[id][pValor]));
		else format(string, sizeof(string), "{EB0000}fabrica de metanfetamina\n{FFFFFF}En venta\nPrecio: {00CC00}$%d "SERVER_COIN"\n{FFFFFF}Usa {DBED16}/comprar fabrica{FFFFFF} para comprarla.",Fabricas[id][pValor]);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel])) Fabricas[id][pLabel] = CreateDynamic3DTextLabel(string, COLOR_ROJO, Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ]+1.0, 20);
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel2])) Fabricas[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF" de la propiedad.",COLOR_ROJO,Fabricas[id][pSalidaX],Fabricas[id][pSalidaY],Fabricas[id][pSalidaZ],5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,Fabricas[id][pVW],Fabricas[id][pInt],-1,100.0);
		if(!IsValidDynamicPickup(Fabricas[id][pPickup])) Fabricas[id][pPickup] = CreateDynamicPickup(1273,23,Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ],0);
		if(!IsValidDynamicMapIcon(Fabricas[id][pMapIcon])) Fabricas[id][pMapIcon] = CreateDynamicMapIcon(Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ], 23, -1, -1, -1, -1, 600.0);
		if(Fabricas[id][pEntradaGX] != 0) {
		if(!IsValidDynamic3DTextLabel(Fabricas[id][pLabel3])) Fabricas[id][pLabel3] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.", COLOR_ROJO, Fabricas[id][pEntradaGX],Fabricas[id][pEntradaGY],Fabricas[id][pEntradaGZ]+1.0, 20);
		}
	}
	return true;
}
stock CargarPropiedad(id)
{
	new string[350];
 	if(PropInfo[id][pEnVenta] == 0)
    {
        if(PropInfo[id][pTipo] == 2) // Oficina
        {
            format(string, sizeof(string), "{8c5c35}Oficina{FFFFFF}\n{bdbdbd}%s %d\n{FFFFFF}Propietario: {DBED16}%s{FFFFFF}\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPropietario]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pRoperoX] != 0)
            {
                if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel4])) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            }
            if(PropInfo[id][pGX] != 0)
            {
                if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel5])) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            }
        }
        else if(PropInfo[id][pTipo] == 3) // Restaurante
        {
            format(string, sizeof(string), "{99ccff}Restaurante{FFFFFF}\n{bdbdbd}%s %d\n{FFFFFF}Propietario: {DBED16}%s{FFFFFF}\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPropietario]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pAbierta] == 1) PropInfo[id][pPickup] = CreateDynamicPickup(1318,23,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
            if(PropInfo[id][pRoperoX] != 0)
            {
                if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel4])) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            }
            if(PropInfo[id][pGX] != 0)
            {
                if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel5])) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            }
        }
        else if(PropInfo[id][pTipo] == 4) // Empresa privada
        {
            format(string, sizeof(string), "{868b9e}Empresa privada{FFFFFF}\n{bdbdbd}%s %d\n{FFFFFF}Propietario: {DBED16}%s{FFFFFF}\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPropietario]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            PropInfo[id][Amater] = CreateDynamicObject(17951, 1403.85803, 601.39990, 1001.69550,   0.00000, 0.00000, 270.00000, PropInfo[id][pInterior],PropInfo[id][pVW]);
            PropInfo[id][PuertaIT] = CreateDynamicObject(19465, 1438.349976, 594.840027, 1002.510010, 0.000000, 0.000000, 90.000000,PropInfo[id][pInterior],PropInfo[id][pVW]);
            SetDynamicObjectMaterial(PropInfo[id][PuertaIT], 0, 14592, "casinoVault01", "copbtm_brown");
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0)
            {
                PropInfo[id][pLabel6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED16}/salir{FFFFFF} para salir del garaje.",COLOR_WHITE,1403.8179,601.0150,1001.0300+1,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
                PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            }
        }
        else // Casa
        {
            format(string, sizeof(string), "{FFFFFF}Casa\n{bdbdbd}%s %d\n{FFFFFF}Propietario: {DBED16}%s{FFFFFF}\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPropietario]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
        }
    }
    else
    {
        if(PropInfo[id][pTipo] == 2) // Oficina
        {
            if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{8c5c35}Oficina\n{bdbdbd}%s %d\n{FFFFFF}En venta por: {00CC00}$%d{FFFFFF}.\nNivel necesario: {00CC00}%d{FFFFFF}.\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            else format(string, sizeof(string), "{8c5c35}Oficina\n{bdbdbd}%s %d{FFFFFF}\n{FFFFFF}En venta por: {00CC00}%d "SERVER_COIN"{FFFFFF}\nNivel necesario: {00CC00}%d{FFFFFF}\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pPickup] = CreateDynamicPickup(19523,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
        }
        else if(PropInfo[id][pTipo] == 3) // Restaurante
        {
            if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{99ccff}Restaurante\n{bdbdbd}%s %d\n{FFFFFF}En venta por: {00CC00}$%d{FFFFFF}.\nNivel necesario: {00CC00}%d{FFFFFF}.\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            else format(string, sizeof(string), "{99ccff}Restaurante\n{bdbdbd}%s %d\n{FFFFFF}En venta por: {00CC00}%d "SERVER_COIN"{FFFFFF}\nNivel necesario: {00CC00}%d{FFFFFF}\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pPickup] = CreateDynamicPickup(1272,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
        }
        else if(PropInfo[id][pTipo] == 4) // Empresa privada
        {
            if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{868b9e}Empresa privada\n{bdbdbd}%s %d\n{FFFFFF}En venta por: {00CC00}$%d{FFFFFF}.\nNivel necesario: {00CC00}%d{FFFFFF}.\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            else format(string, sizeof(string), "{868b9e}Empresa privada{bdbdbd}\n{bdbdbd}%s %d{FFFFFF}\nEn venta por: {00CC00}%d "SERVER_COIN"{FFFFFF}\nNivel necesario: {00CC00}%d{FFFFFF}\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pPickup] = CreateDynamicPickup(1272,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            PropInfo[id][PuertaIT] = CreateDynamicObject(19465, 1438.349976, 594.840027, 1002.510010, 0.000000, 0.000000, 90.000000,PropInfo[id][pInterior],PropInfo[id][pVW]);
            SetDynamicObjectMaterial(PropInfo[id][PuertaIT], 0, 14592, "casinoVault01", "copbtm_brown");
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0)
            {
                PropInfo[id][pLabel6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {DBED16}/salir{FFFFFF} para salir del garaje.",COLOR_WHITE,1403.8179,601.0150,1001.0300+1,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
                PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            }
        }
        else // Casa
        {
            if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{FFFFFF}Casa\n{bdbdbd}%s %d\n{FFFFFF}En venta por: {00CC00}$%d{FFFFFF}.\nNivel necesario: {00CC00}%d{FFFFFF}.\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            else format(string, sizeof(string), "{FFFFFF}Casa\n{bdbdbd}%s %d{FFFFFF}\nEn venta por: {00CC00}%d "SERVER_COIN"{FFFFFF}\nNivel necesario: {00CC00}%d{FFFFFF}\nPulsa {DBED16}'Y'{FFFFFF} para comprarla.\n\n"ENTRADAPORF".",PropInfo[id][pLocalizacion],PropInfo[id][pID],PropInfo[id][pPrecio],PropInfo[id][pNivel]);
            PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
            PropInfo[id][pPickup] = CreateDynamicPickup(1273,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
            PropInfo[id][pLabel2] = CreateDynamic3DTextLabel(""SALIDAPORF".",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            DarPosicionHeladera(id);
            if(PropInfo[id][pRoperoX] != 0) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}"ENTRADAPORF".",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
            if(PropInfo[id][pGX] != 0) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel(""ENTRADAPORH" al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
        }
    }
    return true;
}
BorrarLabelCasa(p)
{
    if(IsValidDynamicObject(PropInfo[p][PuertaIT])) DestroyDynamicObject(PropInfo[p][PuertaIT]);
    if(IsValidDynamicPickup(PropInfo[p][pPickup])) DestroyDynamicPickup(PropInfo[p][pPickup]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel])) DestroyDynamic3DTextLabel(PropInfo[p][pLabel]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel2]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel2]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel3]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel3]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel4]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel4]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel5]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel5]);
    if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel6]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel6]);
    if(IsValidDynamicObject(PropInfo[p][Amater])) DestroyDynamicObject(PropInfo[p][Amater]);
}

BorrarPuntosFabrica(p)
{
	Fabricas[p][CantidadActores] = 0;
	if(IsValidDynamicObject(Fabricas[p][tMoney])) DestroyDynamicObject(Fabricas[p][tMoney]);
	if(IsValidDynamicObject(Fabricas[p][pPuerta])) DestroyDynamicObject(Fabricas[p][pPuerta]);
	if(IsValidDynamicPickup(Fabricas[p][pPickup])) DestroyDynamicPickup(Fabricas[p][pPickup]);
	if(IsValidDynamic3DTextLabel(Fabricas[p][pLabel])) DestroyDynamic3DTextLabel(Fabricas[p][pLabel]);
	if(IsValidDynamic3DTextLabel(Fabricas[p][pLabel2])) DestroyDynamic3DTextLabel(Fabricas[p][pLabel2]);
	if(IsValidDynamic3DTextLabel(Fabricas[p][pLabel3])) DestroyDynamic3DTextLabel(Fabricas[p][pLabel3]);
	if(IsValidDynamic3DTextLabel(Fabricas[p][pLabel4])) DestroyDynamic3DTextLabel(Fabricas[p][pLabel4]);
	if(IsValidDynamic3DTextLabel(Fabricas[p][pLabel5])) DestroyDynamic3DTextLabel(Fabricas[p][pLabel5]);
	if(IsValidDynamicMapIcon(Fabricas[p][pMapIcon])) DestroyDynamicMapIcon(Fabricas[p][pMapIcon]);
	if(IsValidDynamicActor(Fabricas[p][ActorMedico])) DestroyDynamicActor(Fabricas[p][ActorMedico]);
	if(IsValidVehicle(Fabricas[p][Auto1F])) DestroyVehicleEx(Fabricas[p][Auto1F]);
	if(IsValidVehicle(Fabricas[p][Auto2F])) DestroyVehicleEx(Fabricas[p][Auto2F]);
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(extraid == OBJETIVOPESCA)
    {
        if(response)
        {
            new string[200],nombrepez[40],tipo;
            switch(modelid)
            {
                case 1601:
                {
                    AccionesRol(playerid,"lanzó el arpón a los peces pero falló.", 20); // Peces
                    return SendClientMessage(playerid,-1,"Fallaste al lanzar el arpon, intenta nuevamente o intenta atrapar otra cosa.");
                }
                case 1607: nombrepez = "el delfín", tipo = 2; // Delfín
                case 1608: nombrepez = "el tiburón", tipo = 3; // Tiburón
                case 1609: nombrepez = "la tortúga", tipo = 1; // Tortúga
            }
            if(PlayerInfo[playerid][pSonidos] == 1) PlayAudioStreamForPlayer(playerid,"http://"AUDIO_ARPON"",0,0,0,0,0);
            SetPlayerAttachedObject(playerid, 4, 2036, 2, -0.003002, 0.819994,  0.012999, -176.2, -4.00001, -74.7001, 0.777, 0.771999, 1);
            Congelado(playerid);
            format(string, sizeof(string), "lanzó el arpón a %s.",nombrepez);
            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
            SetTimerEx("LanzarArpon",5000,false,"dd", playerid,tipo);
        }
    }
    if(extraid == OBJETIVOROCA)
	{
		if(response)
		{
			switch(modelid)
			{
				case 897: // ROCA
				{
				    new ganancias;
				    switch(PlayerInfo[playerid][pNivelMinero])
					{
						case 1: ganancias = 500;
						case 2: ganancias = 1000;
						case 3..100: ganancias = 1500;
					}
					AccionesRol(playerid,"tira una roca a la procesadora.", 20);
					MensajeEx(playerid, -1, "{00CC00}¡Buen trabajo!{FFFFFF} Tus ganancias son: {00CC00}$%d{FFFFFF}.", ganancias);
					DarDinero(playerid, ganancias);
					ExpMinero(playerid);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					RemovePlayerAttachedObject(playerid,2);
					rocajugador[playerid] = INVALID_TOY_ID;
				}
			}
		}
	}
	return 1;
}

public LlenarBalde(playerid)
{
    Descongelar(playerid);
    BaldeAgua[playerid] = 1;
    StopAudioStreamForPlayer(playerid);
    SendClientMessage(playerid, -1, "Llenaste el balde de agua, ahora puedes {DBED15}/regar{FFFFFF} tu plantación.");
    return 1;
}
public CrearPlanta(playerid,id)
{
    new Query[680], Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO marihuana (X, Y, Z) VALUES ('%f', '%f', '%f')", X, Y, Z);
    mysql_tquery(handle_db, Query,  "CrearPlanta2", "dfffi", playerid, X, Y, Z,id);
    return 1;
}
public CrearPlanta2(playerid, Float:X, Float:Y, Float:Z,id)
{
    if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel("Sembrando...", COLOR_WHITE, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
    Streamer_Update(playerid,0);
    Marihuana[id][Created] = 1;
    Marihuana[id][mID] = id;
    Marihuana[id][PosX] = X;
    Marihuana[id][PosY] = Y;
    Marihuana[id][PosZ] = Z;
    Marihuana[id][Time] = 1020;
    Marihuana[id][Status] = 1;
    format(Marihuana[id][Owner], 24, PlayerInfo[playerid][Nickname]);
    GuardarPlanta(id);
    SetTimerEx("DescongelarCBUG",3000,false,"d",playerid);
    SetTimerEx("CargarPlanta",2500,false,"d",id);
    return 1;
}

EnAcademia(playerid)
{
    if(GetPlayerInterior(playerid) == 1 && GetPlayerVirtualWorld(playerid) == 9) return 1;
    return false;
}
EnSalonEvento(playerid)
{
    if(IsPlayerInArea(playerid, -1244.693847, 2027.578979, -1139.976074, 2129.051025) && GetPlayerInterior(playerid) == 13) return 1;
    return false;
}
EnSalonEvento2(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,500,-1191.9619,2035.5724,1248.3600)) return true;
    return false;
}
IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(bloqueado[vehicleid] == 1)
    {
        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
    }
    SetVehicleParamsForPlayer(vehicleid, forplayerid, iVehicleObjective[vehicleid][0], iVehicleObjective[vehicleid][1]);
    return 0;
}
public SalonTimer()
{
	KillTimer(AlquiladoTimer);
	new string[147], id = -1;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(strcmp(Alquilador,PlayerInfo[i][Nickname],true) == 0)
			{
				id = i;
			}
		}
		if(Boleto[i] == true) Boleto[i] = false;
		if(EnSalonEvento(i) ||EnSalonEvento2(i))
		{
			if(Alquilado == true)
            {
				SendClientMessage(i,-1,"El evento acaba de terminar, por favor abandona el salón principal.");
				if(Humo1Ojb == 1)
				{
					DestroyDynamicObject(ObjHumo1[0]);
					DestroyDynamicObject(ObjHumo1[1]);
					Humo1Ojb = 0;
				}
				if(Humo2Ojb == 1)
				{
					DestroyDynamicObject(ObjHumo2[0]);
					DestroyDynamicObject(ObjHumo2[1]);
					Humo2Ojb = 0;
				}
			}
		}
		if(TipoEvento == 2)
		{
			if(BoxObj == 1)
			{
				for(new a = 0; a<33; a++)
				{
					if(IsValidDynamicObject(ObjBox[a]))
					{
						DestroyDynamicObject(ObjBox[a]);
					}
				}
				BoxObj = 0;
			}
		}
		if(TipoEvento == 3)
		{
			if(ExpObj == 1)
			{
				for(new b = 0; b<19; b++)
				{
					if(IsValidDynamicObject(ObjExp[b]))
					{
						DestroyDynamicObject(ObjExp[b]);
					}
				}
				ExpObj = 0;
			}
			SendClientMessage(i,-1,"Si llevaste un vehículo a la exposición, este fue remolcado al estacionamiento que se encuentra al costado del salón de eventos.");
			for(new k, h = GetVehiclePoolSize(); k <= h; k++)
			{
				if(GetVehicleInterior(k) == 13 && GetVehicleVirtualWorld(k) == 1)
				{
					for(new a = 0; a < MAX_PAUTOS; a++)
					{
						if(!IsValidVehicle(autos[a][i])) continue;
						if(k == autos[a][i] && AutoOcupado(k) == 0) Auto(i,a,6);
						else Respawnear(k);
					}
				}
			}
		}
		if(TipoEvento == 4)
		{
			if(ConObj == 1)
			{
				for(new c = 0; c<4; c++)
				{
					if(IsValidDynamicObject(ObjCon[c]))
					{
						DestroyDynamicObject(ObjCon[c]);
					}
				}
				ConObj = 0;
			}
		}
	}
	if(id != -1)
	{
		format(string,sizeof(string),"Ganaste {00CC00}$%d{FFFFFF} por las entradas vendidas. El dinero ya se encuentra en tu cuenta bancaria.",Personas*PrecioSalon);
		SendClientMessage(id,-1,string);
		PlayerInfo[id][pBanco] += Personas*PrecioSalon;
	}
	LimpiarSalon();
	TextoSalon = Create3DTextLabel("{FFFFFF}Puedes {F6F61D}/alquilar salon{FFFFFF} de eventos.\nCosto por hora: {00D61C}$20.000", COLOR_ROJO, -1250.3397,2093.7437,1246.6360, 5, 1, 0);
	Delete3DTextLabel(TextoSalon2);
}
NombreTrabajo(trabajo)
{
    new jobstr[64];
    if(trabajo == 0)                        jobstr = "Ninguno";
    else if(trabajo == T_Medico)            jobstr = "Médico";
    else if(trabajo == T_Taxista)           jobstr = "Taxista";
    else if(trabajo == T_Guardaespaldas)    jobstr = "Guardaespaldas";
    else if(trabajo == T_Camionero)         jobstr = "Camionero";
    else if(trabajo == T_Basurero)          jobstr = "Basurero";
    else if(trabajo == T_Armero)            jobstr = "Fabricante de armas";
    else if(trabajo == T_Mecanico)          jobstr = "Mecánico";
    else if(trabajo == T_Transportista)     jobstr = "Transportista";
    else if(trabajo == T_Minero)            jobstr = "Minero";
    else if(trabajo == T_Pescador)          jobstr = "Pescador";
    else if(trabajo == T_Prostituta)        jobstr = "Prostitucion";
    return jobstr;
}

//comandos
CMD:acentos(playerid)
{
    ShowDialog(playerid, DIALOG_ACENTO);
    return 1;
}
CMD:baneados(playerid)
{
	ShowDialog(playerid, DIALOG_MENU_DESBAN);
	return 1;
}
CMD:rac(playerid, params[])
{
    resetearcoches();
    return 1;
}
CMD:racall(playerid, params[])
{
    resetearcochesall();
    return 1;
}
CMD:raccars(playerid, params[])
{
    new radius;
    if(sscanf(params, "d", radius)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/raccars {FFFFFF}[{DBED15}Radio{FFFFFF}]");
    if(radius < 1 || radius > 100) return SendClientMessage(playerid, COLOR_GREY, "El radio debe ser de 1 a 100!");
    RespawnNearbyVehicles(playerid, radius);
    MensajeEx(playerid, COLOR_GREY, "Usted ha respawneado los vehículos dentro del radio de %d.", radius);
    return 1;
}
CMD:inscribirse(playerid,params[])
{
    if(IsPlayerInRangeOfPoint(playerid,5,-1447.7421,-313.3544,1052.0969))
    {
        if(HabilitarCarreras == 0) return SendClientMessage(playerid,-1,"Ya no puedes inscribirte, espera a la siguiente carrera.");
        if(EnCarreras[playerid] != 0) return SendClientMessage(playerid,-1,"Tu ya estas inscrito en la carrera.");
        if(PlayerInfo[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"Necesitas {00CC00}$2.000{FFFFFF} para poder inscribirte en la carrera.");
        if(EmpezoCarrera == 1) return SendClientMessage(playerid,-1,"No puedes inscribirte si la carrera ya comenzo.");
        if(ParticipantesCarrera >= 10) return SendClientMessage(playerid,-1,"No hay mas lugares libres para la carrera, espera a la siguiente.");
        if(PlayerInfo[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Necesitas nivel 4 para inscribirte.");
        QuitarDinero(playerid,2000);
        lugarcarrera ++;
        EnCarreras[playerid] = lugarcarrera;
        ParticipantesCarrera ++;
        ParticipantesCarrera2 ++;
        SendClientMessage(playerid,-1,"Te inscribiste para participar en la carrera, por favor espera unos minutos.");
        SendClientMessage(playerid,-1,"Perderás el puesto si sales del estadio.");
    }
    if(IsPlayerInRangeOfPoint(playerid,5, 415.2025,2535.5874,19.1484))
    {
    	if(PlayerInfo[playerid][pDinero] < 5000) return SendClientMessage(playerid,-1,"Necesitas {00CC00}$5.000{FFFFFF} para poder inscribirte en el curso de paracaidismo.");
        if(ViajeAvion[playerid] == 1) return SendClientMessage(playerid,-1,"Ya estás inscrito en el curso de paracaidismo.");
        SendClientMessage(playerid,-1,"Te inscribiste para participar en el curso de paracaidismo, por favor espera unos minutos.");
        SendClientMessage(playerid,-1,"Si te alejas mucho de la oficina, no podrás subirte al avión.");
        QuitarDinero(playerid, 5000);
        ViajeAvion[playerid] = 1;
        return 1;
    }
    return 1;
}
CMD:control(playerid,params[])
{
    new item[17],type;
    if(!sscanf(params, "s[17]d", item, type))
    {
       	if(!IsPlayerInRangeOfPoint(playerid,5.0,-1192.7413,2064.7136,1254.8612)) return SendClientMessage(playerid,-1,"Solo se puede controlar el escenario desde el panel de control.");
        new maquina1[50],maquina2[50],mensaje[100];
        if(Humo1Ojb == 0) maquina1="Encender maquinas de humo delanteras";
        else maquina1="Apagar maquinas de humo delanteras";
        if(Humo2Ojb == 0) maquina2="Encender maquinas de humo traseras";
        else maquina2="Apagar maquinas de humo traseras";
        format(mensaje, sizeof(mensaje), "%s\n%s",  maquina1,maquina2);
        return ShowPlayerDialog(playerid, CONTROLES, DIALOG_STYLE_LIST, "Panel de control", mensaje, "Accionar","Cancelar");
    }
    return 1;
}
CMD:skininfo(playerid, params[])
{
    new ID;
    if(sscanf(params,"u",ID)) return SendClientMessage(playerid, -1, "Utiliza {DBED15}/skininfo{ffffff} [ID].");
    MensajeEx(playerid, -1,"Skin: %d | Skin Secundario( Trabajo ): %d | Skin Actual: %d", PlayerInfo[ID][pRopa], PlayerInfo[ID][pModelo], GetPlayerSkin(ID));
    return 1;
}
CMD:infoex(playerid, params[])
{
    new ID, type,Float:X, Float:Y, Float:Z, Float:Angulo;
    if(!sscanf(params, "dd", ID, type))
    {
        if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "{FF6347}El jugador no está conectado.");
        if(PlayerInfo[ID][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, -1, "{FF6347}El rango administrativo de este jugador es superior al tuyo.");
        switch(type)
        {
            case 1: MensajeEx(playerid, -1,"{999999}%s(%d) tiene la animación: %d.",PlayerInfo[ID][Nickname], ID, GetPlayerAnimationIndex(ID));
            case 2: { GetPlayerFacingAngle(ID, Angulo); GetPlayerPos(ID, X, Y, Z); MensajeEx(playerid, -1, "{999999}[Coordenadas %s[ID: %d] actuales X: %.2f | Y: %.2f | Z: %.2 | A: %.2f | Int: %d | VW: %d].", PlayerInfo[ID][Nickname], ID, X, Y, Z, Angulo, GetPlayerInterior(ID), GetPlayerVirtualWorld(ID)); }
            case 3: MensajeEx(playerid, -1, "{999999}Salud del jugador %s [ID: %d]: (Vida: %.1f) - (Chaleco: %.1f)", PlayerInfo[ID][Nickname], ID, PlayerInfo[ID][j_HEALTH], PlayerInfo[ID][j_ARMOUR]);
        }
        return 1;
    }
    else if(!sscanf(params, "d", type))
    {
        switch(type)
        {
            case 1: MensajeEx(playerid, -1,"{999999}Tienes la animación: %d.",GetPlayerAnimationIndex(playerid));
            case 2: { GetPlayerFacingAngle(playerid, Angulo); GetPlayerPos(playerid, X, Y, Z); MensajeEx(playerid, -1, "{999999}[Tus coordenadas actuales X: %.2f | Y: %.2f | Z: %.2f | A: %.2f | Int: %d | VW: %d].", X, Y, Z, Angulo, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid)); }
            case 3: MensajeEx(playerid, -1, "{999999}Tu salud es de: (Vida: %.1f) - (Chaleco: %.1f)", PlayerInfo[playerid][j_HEALTH], PlayerInfo[playerid][j_ARMOUR]);
        }
        return 1;
    }
    else
    {
        SendClientMessage(playerid, -1, "Uso 1: {DBED15}/info{ffffff} [ID] [type: 1: animación | 2: cordenadas - 3: Vida y Chaleco");
        SendClientMessage(playerid, -1, "Uso 2: {DBED15}/info{ffffff} [type: 1: animación | 2: cordenadas - 3: Vida y Chaleco");
    }
    return 1;
}
CMD:lterris(playerid,params[])
{
	if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return SendClientMessage(playerid, -1, "Necesitas permisos especiales para este comando.");
	if(strcmp(PlayerName(playerid), "Sebas", false) != 0 && strcmp(PlayerName(playerid), "Sebas", false) != 0) return 0;
	new Query[200];
	SendClientMessage(playerid, -1, "Todas los territorios fueron limpiados");
	mysql_format(handle_db, Query, sizeof(Query),"UPDATE territorios SET Banda = '0'");
	mysql_query(handle_db, Query);
	return 1;
}
CMD:ref(playerid,params[])
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(Tiempos[playerid][p_TIME_REF] > gettime()) return MensajeEx(playerid, -1,"Debes esperar %s para volver a pedir refuerzos.", TimeConvertEx(Tiempos[playerid][p_TIME_REF]- gettime()));
	if(PlayerInfo[playerid][pFaccion] > 1)
	{
		new string[128],zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, MAX_ZONE_NAME);
		format(string,128,"{FF8C00}%s{FFFFFF} está solicitando refuerzos en {FF8C00}%s{FFFFFF}.",PlayerInfo[playerid][Nickname],zone);
		SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
        Tiempos[playerid][p_REF] = true;
		Tiempos[playerid][p_TIME_REF] = gettime() + 60;
		return 1;
	}
	if(PlayerInfo[playerid][pFaccion] == 1 && PlayerInfo[playerid][pDuty] == 1)
	{
		new string[128],zone[MAX_ZONE_NAME],pName[32];
		GetPlayerName(playerid, pName, 32);
		GetPlayer3DZone(playerid, zone, MAX_ZONE_NAME);
		format(string,128,"[Central de policía]{FFFFFF} El %s {3399FF}%s{FFFFFF} esta solicitando refuerzos en %s.",RangoPolicia(playerid),PlayerInfo[playerid][Nickname], zone);
		SendRadioPoliceMessage(TEAM_BLUE_COLOR, string, INVALID_PLAYER_ID, Frecuencia[playerid]);
		Tiempos[playerid][p_REF] = true;
		Tiempos[playerid][p_TIME_REF] = gettime() + 60;
		return 1;
	}
	return 1;
}
CMD:dameadmin(playerid, params[])
{
    new admin;
    if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return SendClientMessage(playerid, -1, "Necesitas permisos especiales para este comando.");
    if(sscanf(params,"d",admin)) return SendClientMessage(playerid,-1,"MODO DE USO: {DBED16}/dameadmin {DBED16}Cargo [1-6]");
    if(admin < 0 || admin > 6) return SendClientMessage(playerid,-1,"Ese rango es inválido. {DBED15}[1 a 6]");
    PlayerInfo[playerid][pAdmin] = admin;
    PlayerTemp[playerid][pOwnerCMD_Use] = 1;
    GuardarCuenta(playerid);
    MensajeEx(playerid,-1,"Te diste el rango de {DBED15}%s", ADMIN_RANKS(admin));
    return 1;
}
CMD:admins(playerid)
{
	new Query[150],dialog[115 * 25 + 1], line_str[115],Conexion,admin,name[24],online,count;
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Admin` > '0'");
	mysql_query(handle_db, Query, true);
	dialog = "Nombre\tRango\tÚlt. conexión\n";
 	for(new i = 0; i < cache_num_rows(); i++)
	{
	    cache_get_value_name_int(i, "ID", PlayerTemp[playerid][p_SELECT_ADMIN_ID][count]);
	    cache_get_value_name(i, "Username", name);
	    cache_get_value_name_int(i, "Admin", admin);
        cache_get_value_name_int(i, "Online",online);
        cache_get_value_name_int(i, "TiempoOffline",Conexion);
        PlayerTemp[playerid][p_SELECT_ADMIN_ID_LEVEL][count] = admin;
		PlayerTemp[playerid][p_SELECT_ADMIN_ID_ONLINE][count] = online;
        if(online == 0) format(line_str, sizeof line_str, "%s\t%s\t%s\n", name, ADMIN_RANKS(admin), FormatTimeleft(gettime() - Conexion));
        else format(line_str, sizeof line_str, "%s\t%s\t{0CFF00}Conectado{FFFFFF}\n", name, ADMIN_RANKS(admin));
		strcat(dialog, line_str);
		count ++;
	}
 	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		strcat(dialog, "{FF0000}Añadir miembro");
		PlayerTemp[playerid][p_SELECT_ADMIN_ID][count] = -1;
	}
    else return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Aceptar", "");
	ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Opciones", "Salir");
	return 1;
}
CMD:eventos(playerid, params[])
{
	new item[128];
	if(IsPlayerConnected(playerid))
	{
		if(!sscanf(params, "s[128]", item))
		{
			if(strcmp(item,"halloween",true) == 0)
			{
			    if(NidadX == true || EventoActivo == true) return SendClientMessage(playerid,-1,"No puedes otro evento, debes desactivar el que está acticado en este momento.");
				if(EventoBolo[playerid] == 0)
				{
					new string[128];
					EventoBolo[playerid] = 1;
					if(HallX == true) format(string,sizeof(string),"El evento [Halloween] se encuentra activo, vuelva a utilizar el comando para confirmar el cambio.");
					else if(HallX == false) format(string,sizeof(string),"El evento [Halloween] se encuentra desactivado, vuelva a utilizar el comando para confirmar el cambio.");
					SendClientMessage(playerid,-1,string);
					return 1;
				}
				if(HallX == false)
				{
					EventoHall(true);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Halloween` = '1'");
					SendClientMessage(playerid,-1,"Se activó el evento [Halloween]. Utilize /eventos halloween para desactivarlo.");
				}
				else if(HallX == true)
				{
					EventoHall(false);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Halloween` = '0'");
					SendClientMessage(playerid,-1,"Se desactivó el evento [Halloween]. Utilize /eventos halloween para volverlo a activar.");
				}
				EventoBolo[playerid] = 0;
			}
			if(strcmp(item,"navidad",true) == 0)
			{
			    if(HallX == true || EventoActivo == true) return SendClientMessage(playerid,-1,"No puedes otro evento, debes desactivar el que está acticado en este momento.");
				if(EventoBolo[playerid] == 0)
				{
					new string[128];
					EventoBolo[playerid] = 1;
					if(NidadX == true) format(string,sizeof(string),"El evento [Navidad] se encuentra activo, vuelva a utilizar el comando para confirmar el cambio.");
					else if(NidadX == false) format(string,sizeof(string),"El evento [Navidad] se encuentra desactivado, vuelva a utilizar el comando para confirmar el cambio.");
					SendClientMessage(playerid,-1,string);
					return 1;
				}
				if(NidadX == false)
				{
					EventoNavi(true);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Arbol` = '1'");
					SendClientMessage(playerid,-1,"Se activó el evento [Navidad]. Utilize /eventos navidad para desactivarlo.");
				}
				else if(NidadX == true)
				{
					EventoNavi(false);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Arbol` = '0'");
					SendClientMessage(playerid,-1,"Se desactivó el evento [Navidad]. Utilize /eventos navidad para volverlo a activar.");
				}
				EventoBolo[playerid] = 0;
			}
			if(strcmp(item,"cerveza",true) == 0)
			{
			    if(HallX == true || NidadX == true) return SendClientMessage(playerid,-1,"No puedes otro evento, debes desactivar el que está acticado en este momento.");
				if(EventoBolo[playerid] == 0)
				{
					new string[128];
					EventoBolo[playerid] = 1;
					if(EventoActivo == true) format(string,sizeof(string),"El evento [Fiesta de la cerveza] se encuentra activo, vuelva a utilizar el comando para confirmar el cambio.");
					else if(EventoActivo == false) format(string,sizeof(string),"El evento [Fiesta de la cerveza] se encuentra desactivado, vuelva a utilizar el comando para confirmar el cambio.");
					SendClientMessage(playerid,-1,string);
					return 1;
				}
				if(EventoActivo == false)
				{
					EventoFC(true);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Cerveza` = '1'");
					SendClientMessage(playerid,-1,"Se activó el evento [Fiesta de la cerveza]. Utilize /eventos cerveza para desactivarlo.");
				}
				else if(EventoActivo == true)
				{
					EventoFC(false);
					mysql_pquery(handle_db, "UPDATE `registros` SET `Cerveza` = '0'");
					SendClientMessage(playerid,-1,"Se desactivó el evento [Fiesta de la cerveza]. Utilize /eventos cerveza para volverlo a activar.");
				}
				EventoBolo[playerid] = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"MODO DE USO: /eventos [halloween/navidad/cerveza]");
	}
	return 1;
}
CMD:darsed(playerid,params[])
{
	new id,sed;
	if(sscanf(params,"dd",id,sed)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED16}/darsed {FFFFFF}<PlayerID> <Cantidad>");
	if(IsPlayerNPC(id)) return 1;
	PlayerInfo[id][pSed] = sed;
	if(PlayerInfo[id][pBarras] == 1) BarrasFunciones(playerid, 1);
	return 1;
}
CMD:darhambre(playerid,params[])
{
	new id,hambre;
	if(sscanf(params,"dd",id,hambre)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED16}/darhambre {FFFFFF}<PlayerID> <Cantidad>");
	if(IsPlayerNPC(id)) return 1;
	PlayerInfo[id][pHambre] = hambre;
	if(PlayerInfo[id][pBarras] == 1) BarrasFunciones(playerid, 1);
	return 1;
}
CMD:conquistar(playerid, params[])
{
    new BandaP = PlayerInfo[playerid][pFaccion], attackers_in_area = ContarMiembrosEnTerritorio(BandaP, PlayerInfo[playerid][pt_LAST_TERRITORY]);
    if(BandasInfo[PlayerInfo[playerid][pFaccion]][UltimoAtaque] > gettime()) return MensajeEx(playerid, -1,"Debes esperar %s para volver a conquistar un territorio.", TimeConvertEx(BandasInfo[PlayerInfo[playerid][pFaccion]][UltimoAtaque] - gettime()));
    if(attackers_in_area < 3) return SendClientMessage(playerid, -1, "Deben a ver al menos 3 colegas de tu banda en el territorio de la banda rival para poder conquistarlo.");
    if(BandaP > 3)
    {
        if(PlayerInfo[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID && IsPlayerInDynamicArea(playerid, TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_Area]))
        {
            if(TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_BandaID] != BandaP)
            {
                if(!TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_EnGuerra] && !BandasInfo[BandaP][B_Atacando])
                {
                    if(gettime() > TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_UltimoA] + 180)
                    {
                   		if(!TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_Usado])
             			{
                        	if(attackers_in_area >= 3) ComenzarAtaqueTerritorio(BandaP, PlayerInfo[playerid][pt_LAST_TERRITORY], 300/1);
               			}
   			   			else
          				{
      	   					if(BandasInfo[TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_BandaID]][bID] && !BandasInfo[ TerritorioInfo[PlayerInfo[playerid][pt_LAST_TERRITORY]][Territorio_BandaID2] ][B_Atacando])//Si no lo está
   	   					{
        				if(attackers_in_area >= 3) ComenzarAtaqueTerritorio(BandaP, PlayerInfo[playerid][pt_LAST_TERRITORY], 300);
    	   				}
                        }
                    }
                }
            }
        }
    }
    return 1;
}
CMD:cargos(playerid, params[])
{
    new string[148],texto[100],id,cargos;
    if(PlayerInfo[playerid][pFaccion] != 1) return 1;
    if(sscanf(params,"rd", id, cargos)) return SendClientMessage(playerid, -1, "Escribe {dbed15}/cargos [ID] {FFFFFF}[{dbed15}Cargos{FFFFFF}]");
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,COLORCARGO0,"No se encontró ningún jugador.");
    if(IsPlayerNPC(id)) return 1;
    if(PlayerInfo[id][pFaccion] == 1 && cargos != 0 && PlayerInfo[id][pDuty] != 0) return SendClientMessage(playerid,-1,"{dbed15}Le estás intentado poner nivel de búsqueda a un policía.");
    if(PlayerInfo[id][pCargos] == cargos) return SendClientMessage(playerid, -1, "Ese jugador ya tiene los mismos cargos.");
    if(cargos < 0 || cargos > 6) return SendClientMessage(playerid, -1, "Escribe {dbed15}/cargos [ID] {FFFFFF}[{dbed15}Cargos{FFFFFF}]");
    if(!EstaEnP(playerid,id,400)) return SendClientMessage(playerid,-1,"Debes estar a 400 metros de la persona para colocarle cargos.");
    PlayerInfo[id][pCargos] = cargos;
    SetPlayerWantedLevel(id, PlayerInfo[id][pCargos]);
    ReportCrimen(id, cargos);
    if(PlayerInfo[playerid][pDuty] == 0 && cargos == 0) SendClientMessage(id,-1,"Un policía de civil te quitó los cargos.");
    if(PlayerInfo[playerid][pDuty] == 0 && cargos > 0) SendClientMessage(id,-1,"Un policía de civil te puso cargos.");
    new asdf[150];
    if(cargos == 0) format(asdf,150,"Nadie"),Tiempos[id][Advertido] = 0;
    else format(asdf,150,"%s",PlayerInfo[playerid][Nickname]);
    PlayerInfo[id][QuienC] = asdf;
    switch(cargos)
    {
        case 0: format(texto,sizeof(texto),"tiene todo en orden, lo dejo continuar");
        case 1: format(texto,sizeof(texto),"parece sospechoso, lo voy a interrogar"),SendClientMessage(id, COLOR_YELLOW, "La policia quiere hablar con usted, si se da a la fuga, sera arrestado.");
        case 2: format(texto,sizeof(texto),"se da a la fuga, procedemos a su persecución");
        case 3: format(texto,sizeof(texto),"se encuentra armado, procedan con precaución");
        case 4: format(texto,sizeof(texto),"abrió fuego, necesito refuerzos");
        case 5: format(texto,sizeof(texto),"asesinó, detener vivo o muerto");
        case 6: format(texto,sizeof(texto),"es extremadamente peligroso, disparen a matar");
    }
    CagoSeguro[id] = 0;
    format(string, sizeof(string), "{3399FF}[Radio]{FFFFFF}(%s %s) dice: %s %s", RangoPolicia(playerid), PlayerInfo[playerid][Nickname], PlayerInfo[id][Nickname],texto);
    ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
    format(string, sizeof(string), "{3399FF}[Radio de policía]{FFFFFF} %s reportando: {00CCFF}%s{FFFFFF} [%d] %s. {dbed15}(%d)*", PlayerInfo[playerid][Nickname], PlayerInfo[id][Nickname],id,texto,cargos);
    SendRadioPoliceMessage(-1, string, playerid);
    return 1;
}
CMD:sembrar(playerid, params[])
{
    new contador;
    if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Para sembrar necesitas tener como mínimo nivel 2.");
    if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(4)] != 4) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas un cuchillo para sembrar y cosechar estas plantas.");
    if(PlayerInfo[playerid][pSemillas] < 5) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas 5 semillas de marihuana.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un vehículo.");
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un interior.");
    new id = PlantaLibre();
    if(id == -1) return SendClientMessage(playerid,-1,"No se puede crear mas plantas, intentalo mas tarde.");
    for(new i = 0; i < MAX_MARIHUANA; i++)
    {
        if(Marihuana[i][Created] > 0)
        {
            if(strcmp(PlayerInfo[playerid][Nickname], Marihuana[i][Owner], true) == 0) contador++;
        }
    }
    new vip[1];
    if(contador == 3) format(vip,sizeof(vip),"2");
    if(PlayerInfo[playerid][pVip] == 0 && contador == 2 || PlayerInfo[playerid][pVip] == 1 && contador == 3) return MensajeEx(playerid,-1,"No puedes tener más de %d plantas, necesitas una cuenta VIP%s para aumentar la capacidad permitida.",contador,vip);
    if(PlayerInfo[playerid][pVip] == 2 && contador == 4) return SendClientMessage(playerid,-1,"Alcanzaste la capacidad permitida para sembrar marihuana.");
    PlayerInfo[playerid][pSemillas] -= 5;
    if(PlayerInfo[playerid][pExperiencia] > 0 && PlayerInfo[playerid][pVip] > 0 && contador < 5)
	{
		PlayerInfo[playerid][pExperiencia] --;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Experiencia],PlayerInfo[playerid][pExperiencia]),UpdatePlayerProgressBar(playerid,Progressbar[playerid][Experiencia]);
		SendClientMessage(playerid,-1,"Se te ha descontado 1 punto de reputación por sembrar marihuana.");
	}
    GameTextForPlayer(playerid, "~g~Sembrando...", 2000, 5);
    LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 13000);
    CrearPlanta(playerid,id);
    AccionesRol(playerid,"remueve la tierra con un cuchillo y arroja algunas semillas.", 20);
    SendClientMessage(playerid,-1,"Luego de sembrar necesitas {009AFF}/regar {FFFFFF}la tierra para que la planta crezca.");
    return 1;
}

CMD:armar(playerid,params[])
{
    new item[32];
    if(!sscanf(params,"s[29]",item))
    {
        if(strcmp(item, "porro", true)==0)
        {
            if(Tiempos[playerid][TiempoMarihuana] - gettime() <= 0)
            {
                if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes armar un porro estando en combate");
                if(PlayerInfo[playerid][pMarihuana] <= 0) return SendClientMessage(playerid, -1, "Necesitas almenos 1g de marihuana para arma un porro");
                if(TienePorro[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes un porro en la mano.");
                SetPlayerAttachedObject(playerid, 4, 3044, 6, 0.020000, 0.114999, 0.065999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                TienePorro[playerid] = 5;
                Tiempos[playerid][TiempoMarihuana] = gettime() + 30;
                PlayerInfo[playerid][pMarihuana] -= 1;
                AccionesRol(playerid,"arma un porro.", 20);
                SendClientMessage(playerid, -1, "Pulsa {DBED15}'Y'{FFFFFF} para fumar el porro.");
                RevisarLogro(playerid,6);
            }
            else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a armar un porro.",Tiempos[playerid][TiempoMarihuana] - gettime());
        }
    }
    return 1;
}
CMD:heladera(playerid,params[])
{
    new opcion[15],opcion2[15],Query[250];
    if(!sscanf(params,"s[15]s[15]",opcion,opcion2))
    {
        if(strcmp(opcion,"guardar",true) == 0)
        {
            if(strcmp(opcion2,"objeto",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                new total = PropInfo[p][pCerveza] + PropInfo[p][pVino] + PropInfo[p][pSprunk] + PropInfo[p][pPizzas]  + PropInfo[p][pAquarius];
                                if(total < PropInfo[p][pLugarHeladera])
                                {
                                    if(Objeto[playerid] == 10000)//Aquarius x12
                                    {
                                        if(total+12 > PropInfo[p][pLugarHeladera]) PropInfo[p][pAquarius] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pAquarius] += 12;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Aquarius`='%d' WHERE `ID`='%d'",PropInfo[p][pAquarius],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas botellas de aquarius en la heladera.", 20);
                                        GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 10001)//Vino x12
                                    {
                                        if(total+12 > PropInfo[p][pLugarHeladera]) PropInfo[p][pVino] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pVino] += 12;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Vino`='%d' WHERE `ID`='%d'",PropInfo[p][pVino],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas botellas de vino en la heladera.", 20);
                                        GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 10002)//Cerveza x12
                                    {
                                        if(total+12 > PropInfo[p][pLugarHeladera]) PropInfo[p][pCerveza] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pCerveza] += 12;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Cerveza`='%d' WHERE `ID`='%d'",PropInfo[p][pCerveza],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas botellas de cerveza en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 10003)//Sprunk x12
                                    {
                                        if(total+12 > PropInfo[p][pLugarHeladera]) PropInfo[p][pSprunk] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pSprunk] += 12;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Sprunk`='%d' WHERE `ID`='%d'",PropInfo[p][pSprunk],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunos vasos de sprunk en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 10004)//Pizzas x8
                                    {
                                        if(total+8 > PropInfo[p][pLugarHeladera]) PropInfo[p][pPizzas] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pPizzas] += 8;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Pizzas`='%d' WHERE `ID`='%d'",PropInfo[p][pPizzas],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas porciones de pizza en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 1000)//Cerveza x6
                                    {
                                        if(total+6 > PropInfo[p][pLugarHeladera]) PropInfo[p][pCerveza] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pCerveza] += 6;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Cerveza`='%d' WHERE `ID`='%d'",PropInfo[p][pCerveza],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas botellas de cerveza en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 1001)//Vino x6
                                    {
                                        if(total+6 > PropInfo[p][pLugarHeladera]) PropInfo[p][pVino] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pVino] += 6;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Vino`='%d' WHERE `ID`='%d'",PropInfo[p][pVino],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunas botellas de vino en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else if(Objeto[playerid] == 1002)//Sprunk x4
                                    {
                                        if(total+4 > PropInfo[p][pLugarHeladera]) PropInfo[p][pSprunk] += PropInfo[p][pLugarHeladera]-total;
                                        else PropInfo[p][pSprunk] += 4;
                                        SacarObjeto(playerid,Objeto[playerid]);
                                        mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Sprunk`='%d' WHERE `ID`='%d'",PropInfo[p][pSprunk],PropInfo[p][pID]);
                                        mysql_tquery(handle_db,Query,"","");
                                        AccionesRol(playerid,"guardó algunos vasos de sprunk en la heladera.", 20);GuardarPropiedad(p);
                                        return 1;
                                    }
                                    else SendClientMessage(playerid,-1,"No tienes nada para guardar, puedes comprar bebidas en el Mercado Central de BlueBerry.");
                                }
                                else SendClientMessage(playerid,-1,"No hay más lugar en la heladera.");
                            }
                        }
                    }
                }
            }
        }
        else if(strcmp(opcion,"sacar",true) == 0)
        {
            if(strcmp(opcion2,"vino",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(PlayerInfo[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes sacar cosas de esta heladera.");
                                }
                                if(PropInfo[p][pVino] > 0)
                                {
                                    PropInfo[p][pVino] --;
                                    DarVino(playerid);
                                    AccionesRol(playerid,"saca una botella de vino de la heladera.", 20);
                                    GuardarPropiedad(p);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"No hay botellas de vino en esta heladera.");
                            }
                        }
                    }
                }
            }
            else if(strcmp(opcion2,"cerveza",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(PlayerInfo[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
                                }
                                if(PropInfo[p][pCerveza] > 0)
                                {
                                    PropInfo[p][pCerveza] --;
                                    DarCerveza(playerid);
                                    AccionesRol(playerid,"saca una botella de cerveza de la heladera.", 20);
                                    GuardarPropiedad(p);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"No hay botellas de cerveza en esta heladera.");
                            }
                        }
                    }
                }
            }
            else if(strcmp(opcion2,"sprunk",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(PlayerInfo[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
                                }
                                if(PropInfo[p][pSprunk] > 0)
                                {
                                    PropInfo[p][pSprunk] --;
                                    DarSprunk(playerid);
                                    AccionesRol(playerid,"saca un vaso de sprunk de la heladera.", 20);
                                    GuardarPropiedad(p);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"No hay vasos de sprunk en esta heladera.");
                            }
                        }
                    }
                }
            }
            else if(strcmp(opcion2,"aquarius",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(PlayerInfo[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
                                }
                                if(PropInfo[p][pAquarius] > 0)
                                {
                                    PropInfo[p][pAquarius] --;
                                    DarAquarius(playerid);
                                    AccionesRol(playerid,"saca una botella de aquarius de la heladera.", 20);
                                    GuardarPropiedad(p);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"No hay botellas de Aquarius en esta heladera.");
                            }
                        }
                    }
                }
            }
            else if(strcmp(opcion2,"pizza",true) == 0)
            {
                if(GetPlayerVirtualWorld(playerid) != 0)
                {
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(PlayerInfo[playerid][pID] != PropInfo[p][pIDPropietario]) return     SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
                                }
                                if(PropInfo[p][pPizzas] > 0)
                                {
                                    PropInfo[p][pPizzas] --;
                                    DarPizza(playerid);
                                    AccionesRol(playerid,"saca una porción de pizza de la heladera.", 20);
                                    GuardarPropiedad(p);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"No hay una porción de pizza en esta heladera.");
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}
CMD:transmision(playerid)
{
    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
    if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
    new string[128];
    format(string, sizeof(string),"http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
    PlayAudioStreamForPlayerEx(playerid, string);
    return 1;
}
CMD:oyentes(playerid)
{
    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
    if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
    new emisoraid, string[128];
    emisoraid = Emisoras[playerid][CabinaOcupada];
    format(string, sizeof(string), "Tienes un total de {00CC00}%d{FFFFFF} oyentes.", GetOyentesEmisora(emisoraid));
    SendClientMessage(playerid,COLOR_WHITE, string);
    return 1;
}
CMD:r(playerid, params[])
{
    new mensaje[128], string[128], emisora;
    if(sscanf(params, "s[128]", mensaje)) return SendClientMessage(playerid,COLOR_WHITE,"Por favor usa {DBED15}/r texto");
    if(IsPlayerInDynamicArea(playerid, AreaCabinas[1])) emisora = 1;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[2])) emisora = 2;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[3])) emisora = 3;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[4])) emisora = 4;
    else return SendClientMessage(playerid, COLOR_WHITE, "No estas en ninguna cabina de radio.");
    if(emisora > 0)
    {
        if(CabinasOcupadasEmisoras[emisora][1] == playerid) format(string, sizeof(string), "%s por micrófono: %s",PlayerInfo[playerid][Nickname], mensaje),ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2),MandarMensajeLocutor(playerid, emisora, mensaje);
        else if(TieneMicrofono[playerid] == emisora) format(string, sizeof(string), "%s por micrófono: %s",PlayerInfo[playerid][Nickname], mensaje),ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2),MandarMensajeInvitado(playerid, emisora, mensaje);
        else return SendClientMessage(playerid, COLOR_WHITE, "No tienes un micrófono para poder hablar por la radio.");
    }
    return 1;
}
CMD:apagar(playerid, params[])
{
    new string[50];
    if(strcmp(params,"radio",true) == 0)
    {
        if(EnRadio(playerid))
        {
            for(new p=1; p < MAX_PROPIEDADES; p++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                {
                    if(PropInfo[p][pEmisora] == 0) return SendClientMessage(playerid, -1, "La radio ya se encuentra apagada.");
                    PropInfo[p][pEmisora] = 0;
                    format(string,sizeof(string),"%s cambia de emisora.", PlayerInfo[playerid][Nickname]);
                    ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    foreach(new i : Player)
                    {
                        if(!IsPlayerConnected(i) || IsPlayerNPC(i))
                        continue;
                        if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
                        {
                            SendClientMessage(i, -1, "Ya no se escucha la radio.");
                            PararEmisora(i);
                        }
                    }
                    return 1;
                }
            }
        }
        else return SendClientMessage(playerid, -1, "Necesitas estar junto a una radio para poder apagarla.");
    }
    return 1;
}
CMD:emisoras(playerid)
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || EnRadio(playerid))
    {
        new encontroemisoras=0;
        foreach(new id : Player)
        {
            if(Emisoras[id][TransEmisora] == 1)
            {
                MensajeEx(playerid, -1, "{DBED15}/emisora %d {FFFFFF}- %s", Emisoras[id][CabinaOcupada], Emisoras[id][NombreEmisora]);
                encontroemisoras=1;
            }
        }
        if(encontroemisoras == 0) return SendClientMessage(playerid, -1, "No hay emisoras transmitiendo en este momento.");
    }
    else return SendClientMessage(playerid, -1, "Necesitas estar en un vehículo o junto a una radio para ver las emisoras disponibles.");
    return 1;
}
CMD:emisora(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || EnRadio(playerid))
    {
        new IDemisora;
        if(!sscanf(params, "d", IDemisora))
        {
            if(IDemisora < 1 || IDemisora > 4) return 1;
            if(CabinasOcupadasEmisoras[IDemisora][0] != 0)
            {
                if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
                    new autoID, string[128];
                    autoID = GetPlayerVehicleID(playerid);
                    if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] == IDemisora) return SendClientMessage(playerid,-1,"El estéreo ya se encuentra sintonizando esa emisora.");
                    if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] == 0)
                    {
                        format(string, sizeof(string), "%s enciende el estereo.",PlayerInfo[playerid][Nickname]);
                        ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    }
                    else if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] != 0)
                    {
                        format(string, sizeof(string), "%s cambia de emisora.",PlayerInfo[playerid][Nickname]);
                        ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    }
                    GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] = IDemisora;
                    foreach(new i : Player)
                    {
                        if(IsPlayerInVehicle(i, autoID))
                        {
                            CabinasOcupadasEmisoras[IDemisora][2]++;
                            format(string, sizeof(string), "Emisora: %d - {DBED15}%s", IDemisora, Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][NombreEmisora]);
                            SendClientMessage(i, -1, string);
                            format(string, sizeof(string),"http://"EMISORA_URL"/stream/%d/", Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][EmisoraID]);
                            ReproducirEmisora(i, IDemisora, string);
                        }
                    }
                }
                if(EnRadio(playerid))
                {
                    for(new p=1; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            new string[128];
                            if(PropInfo[p][pEmisora] == IDemisora) return SendClientMessage(playerid,-1,"La radio ya se encuentra sintonizando esa emisora.");
                            if(PropInfo[p][pEmisora] == 0)
                            {
                                format(string, sizeof(string), "%s enciende la radio.",PlayerInfo[playerid][Nickname]);
                                ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                            }
                            if(PropInfo[p][pEmisora] != 0)
                            {
                                format(string, sizeof(string), "%s cambia de emisora.",PlayerInfo[playerid][Nickname]);
                                ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                            }
                            format(string, sizeof(string), "Emisora: %d - {DBED15}%s", IDemisora, Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][NombreEmisora]);
                            PropInfo[p][pEmisora] = IDemisora;
                            foreach(new i : Player)
                            {
                                if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
                                {
                                    CabinasOcupadasEmisoras[IDemisora][2]++;
                                    SendClientMessage(i, -1, string);
                                    format(string, sizeof(string),""EMISORA_URL"/stream/%d/", Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][EmisoraID]);
                                    ReproducirEmisora(i, IDemisora, string);
                                }
                            }
                        }
                    }
                }
            }
            else return SendClientMessage(playerid, -1, "Esa emisora no está transmitiendo ahora mismo.");
        }
        else return SendClientMessage(playerid, -1, "Para sintonizar una emisora usa {DBED15}/emisora [numero]{FFFFFF} - Para ver la lista de emisoras {DBED15}/emisoras");
    }
    else return SendClientMessage(playerid, -1, "Necesitas conducir un vehículo o estar junto a una radio para sintonizar una emisoras.");
    return 1;
}
CMD:estereo(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas estar en un vehiculo.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "No eres el conductor de este vehiculo.");
    new vehicleid, string[128];
    vehicleid = GetPlayerVehicleID(playerid);
    if(strcmp(params,"off",true) == 0)
    {
        format(string, sizeof(string), "%s apaga el estéreo.",PlayerInfo[playerid][Nickname]);
        ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        foreach(new i : Player)
        {
            if(!IsPlayerConnected(i) || IsPlayerNPC(i))
            continue;
            if(vehicleid == GetPlayerVehicleID(i))
            {
                if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] != 0) CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID]][2]--;
                GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
                PararEmisora(i);
            }
        }
    }
    return 1;
}
CMD:transmitir(playerid)
{
    new stringa[264],emisora,trans;
    if(PlayerInfo[playerid][pVip] < 2 || Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas crear una emisora de radio para {DBED15}/transmitir");
    if(Emisoras[playerid][TransEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estas transmitiendo en otra cabina de radio.");
    if(IsPlayerInDynamicArea(playerid, AreaCabinas[1])) emisora = 1, trans = 1;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[2])) emisora = 2, trans = 1;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[3])) emisora = 3, trans = 1;
    else if(IsPlayerInDynamicArea(playerid, AreaCabinas[4])) emisora = 4, trans = 1;
    else return SendClientMessage(playerid, COLOR_WHITE, "No estas en ninguna cabina de radio.");
    if(emisora > 0)
    {
        if(CabinasOcupadasEmisoras[emisora][0] == 0)
        {
            CabinasOcupadasEmisoras[emisora][0] = 1;
            CabinasOcupadasEmisoras[emisora][1] = playerid;
            Emisoras[playerid][TransEmisora] = trans;
            Emisoras[playerid][CabinaOcupada] = emisora;
            Emisoras[playerid][EmisoraID] = PlayerInfo[playerid][pID]+8468135;
            format(stringa, sizeof(stringa), "{FFFFFF}Ocupado por {DBED15}%s", Emisoras[playerid][NombreEmisora]);
            UpdateDynamic3DTextLabelText(CabinasTextos[emisora], 0xFFFFFFFF, stringa);
            format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"?sid=%d", Emisoras[playerid][EmisoraID]);
            format(stringa, sizeof(stringa), "Ya puedes comenzar a transmitir por Stream ID: {DBED15}%d", Emisoras[playerid][EmisoraID]);
            SetPlayerAttachedObject(playerid, 4, 19610, 5, 0.108999, 0.045000, 0.000000, -105.099998, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SendClientMessage(playerid, COLOR_WHITE, stringa);
            foreach(new id : Player)
            {
                if(IsPlayerInDynamicArea(id, AreaCabinas[emisora]))
                {
                    MensajeEx(id, COLOR_WHITE, "Emisora: %d {DBED15}- %s", emisora, Emisoras[playerid][NombreEmisora]);
                    format(stringa, sizeof(stringa), "http://"EMISORA_URL"?sid=%d", Emisoras[playerid][EmisoraID]);
                    if(PlayerInfo[id][pSonidos] == 1) PlayAudioStreamForPlayer(id, stringa);
                    CabinasOcupadasEmisoras[emisora][2]++;
                }
            }
        }
        else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay alguien transmitiendo en esta cabina de radio.");
    }
    return 1;
}
CMD:entregarse(playerid,params[])
{
	new string[256];
	if(PlayerInfo[playerid][pCargos] == 0) return SendClientMessage(playerid,-1,"No te puedes entregar si no tienes cargos en tu contra.");
	if(!EnEntregarse(playerid)) return 1;
	if(Jail[playerid] == 1) return 1;
	switch(PlayerInfo[playerid][pCargos])
	{
		case 1: format(string,sizeof(string),"{FFFFFF}Tienes solamente {CA5700}1{FFFFFF} cargo en tu contra, podemos retirarlo, pero para ello tendrás que pagar una fianza de {00CC00}$500{FFFFFF}.");
		case 2: format(string,sizeof(string),"{FFFFFF}Podemos quitarte {CA5700}1{FFFFFF} de los {CA5700}2{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {00CC00}$1.000{FFFFFF} en este momento.");
		case 3: format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}2{FFFFFF} de los {CA5700}3{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {00CC00}$1.500{FFFFFF} en este momento.");
		case 4: format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}3{FFFFFF} de los {CA5700}4{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {00CC00}$2.000{FFFFFF} en este momento.");
		case 5: format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}4{FFFFFF} de los {CA5700}5{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {00CC00}$2.500{FFFFFF} en este momento.");
		default: format(string,sizeof(string),"{FFFFFF}No podemos reducir los cargos que se te imputan, pero podemos aligerar los trámites para tu detención.");
	}
	ShowPlayerDialog(playerid, ENTREGARSE, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
	return 1;
}
CMD:picar(playerid, params[])
{
    if(rocajugador[playerid] == 897) return SendClientMessage(playerid, -1, "Solo puedes cargar una roca en tu inventario.");
    if(Picando[playerid] > 0) return SendClientMessage(playerid, -1, "Ya estás picando esta roca.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -745.1193,2408.8325,1.3375) && PlayerInfo[playerid][pNivelMinero] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas nivel 2 de minero para poder picar esta roca.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -729.0903,2410.1563,7.2710) && PlayerInfo[playerid][pNivelMinero] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas nivel 3 de minero para poder picar esta roca.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, -728.3772,2422.0627,7.1895) && PlayerInfo[playerid][pNivelMinero] < 4) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas nivel 4 de minero para poder picar esta roca.");
    if(!EnPicarMinero(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás cerca de ninguna roca para poder picarla.");
    ClearAnimations(playerid);
    if(PlayerInfo[playerid][pSonidos] == 1) PlayAudioStreamForPlayer(playerid, "http://"AUDIO_MINERO"");
    TogglePlayerControllable(playerid, 0);
    SetPVarInt(playerid, "IsFrozen", 0);
    SetPlayerAttachedObject(playerid,4, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
    ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000,1);
    GameTextForPlayer(playerid, "~<~ ~G~PICANDO ROCA ~>~", 10000, 5);
    Picando[playerid]++;
    SetPlayerProgressBarValue(playerid,Progressbar[playerid][Picar], Picando[playerid]);
    UpdatePlayerProgressBar(playerid,Progressbar[playerid][Picar]);
    hands[playerid] = SetTimerEx("TimeMiner",1000,true,"i",playerid);
    SendClientMessage(playerid, -1, "Comienzas a picar la roca.");
    return 1;
}
CMD:permiso(playerid, params[])
{
    if(strcmp(params,"pesca",true) == 0)
    {
        if(PlayerInfo[playerid][pTrabajo] != T_Pescador && PlayerInfo[playerid][pTrabajo2] != T_Pescador) return SendClientMessage(playerid, -1, "Necesitas tener el trabajo de pescador.");
        if(permisopesca[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un permiso de pesca.");
        if(!IsPlayerInRangeOfPoint(playerid, 7.0, 2785.6536,-2575.7666,3.1917)) return SendClientMessage(playerid, -1, "Para solicitar el {DBED16}/permiso pesca{FFFFFF}, tienes que hablar con la mujer que está junto a la casa del muelle de Ocean Docks.");
        SendClientMessage(playerid, -1, "{00CCFF}Se marcaron en el mapa las zonas de pesca permitidas.");
        SendClientMessage(playerid, -1, "Encuentra un barco pesquero para comenzar el viaje.");
        SendClientMessage(playerid, -1, "Cuando llegues a la zona de pesca, escribe {DBED16}/lanzar arpon{FFFFFF}.");
        GangZoneShowForPlayer(playerid, mares, 0x0053FF9D);
        SetPlayerMapIcon(playerid, 99, 890.69623, -2448.19629, -3.40480, 9, 0, MAPICON_GLOBAL);
        permisopesca[playerid] = 1;
        TimerPescador[playerid] = gettime() + 300;
    }
    return 1;
}
CMD:lanzar(playerid, params[])
{
    if(strcmp(params,"arpon",true) == 0)
    {
        if(PlayerInfo[playerid][pTrabajo] != T_Pescador && PlayerInfo[playerid][pTrabajo2] != T_Pescador) return SendClientMessage(playerid, -1, "No eres pescador.");
        if(!EnPesca(playerid)) return SendClientMessage(playerid, -1, "Los arpones se pueden lanzar únicamente en zonas de pesca.");
        if(permisopesca[playerid] == 0) return SendClientMessage(playerid, -1, "No solicitaste un permiso para poder pescar en esta zona.");
        new vehch = GetPlayerNearestVehicle(playerid), Float:Pos[3];
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, -1, "No estás en la cubierta de un barco pesquero.");
        GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
        if(GetVehicleDistanceFromPoint(vehch, Pos[0], Pos[1], Pos[2]) < 4.0) MostrarPescar(playerid);
        else SendClientMessage(playerid, -1 ,"No estás en la cubierta de un barco pesquero.");
    }
    return 1;
}

CMD:bailar(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Utiliza /bailar [1-4]");
        switch(params[0]) {
            case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
            case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
            case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
            case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
            default: SendClientMessage(playerid, -1, "Utiliza /bailar [1-4]");
        }
    }
    return 1;
}
CMD:rendirse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    return 1;
}
CMD:borracho(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);
    return 1;
}
CMD:bomba(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
    return 1;
}
CMD:jorobado(playerid, params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","WALK_old",4.0,1,1,1,1,500);
    return 1;
}
CMD:reirse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
    return 1;
}
CMD:apuntar(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Utiliza /apuntar [1-2]");
        switch(params[0]) {
            case 1: ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
            case 2: ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
            default: SendClientMessage(playerid, -1, "Utiliza /bailar [1-4]");
        }
    }
    return 1;
}
CMD:paja(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para acabar usa {DBED15}/acabar");
    return 1;
}
CMD:acabar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:encender(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.000000, 0, 0, 1, 1, 0);
    return 1;
}
CMD:inhalar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.000000, 1, 0, 0, 0, -1);
    return 1;
}

CMD:vigilar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
    return 1;
}
CMD:recostarse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
    return 1;
}
CMD:pararse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:parar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "POLICE", "COPTRAF_STOP", 4.1, false, false, false, false, 0, false);
    return 1;
}
CMD:cubrirse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/depie1");
    return 1;
}
CMD:vomitar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
    if(PlayerInfo[playerid][pNivel] > 1)
	{
		PlayerInfo[playerid][pHambre] += 10;
		PlayerInfo[playerid][pSed] += 10;
		BarrasFunciones(playerid, 1);
	}
    return 1;
}
CMD:comer(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
    return 1;
}
CMD:palmada(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:agonizar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/levantarse");
    return 1;
}
CMD:levantarse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
    return 1;
}
CMD:beso(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:mear(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    SetPlayerSpecialAction(playerid, 68);
    return 1;
}
CMD:explicar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SPRAYCAN","SPRAYCAN_FIRE",4.0, 0, 0, 0, 0, -1);
    return 1;
}
CMD:sentarse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
    return 1;
}
CMD:taichi(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);
    return 1;
}
CMD:beber(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);
    return 1;
}
CMD:boxear(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);
    return 1;
}
CMD:pelea(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1);
    return 1;
}
CMD:asiento(playerid,params[]) {
    SendClientMessage(playerid,0xFC9300AA,"Usa: /asiento[1-2-3]");
    return 1;
}
CMD:putear(playerid,params[]) {
    SendClientMessage(playerid,0xaa4747FF,"Usa: /putear[1-3]");
    return 1;
}
CMD:putear1(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "PED", "FUCKU", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:putear2(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "GHANDS", "GSIGN1LH", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:putear3(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "GHANDS", "GSIGN2LH", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:asientosexi(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
    return 1;
}
CMD:asiento1(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/depie1");
    return 1;
}
CMD:asiento2(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/depie2");
    return 1;
}
CMD:asiento3(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    new Float:Angle;
    GetPlayerFacingAngle(playerid, Angle);
    SetPlayerFacingAngle(playerid, Angle+180);
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/depie1");
    return 1;
}
CMD:depie1(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
    return 1;
}
CMD:servirse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,0,0,0,0);
    return 1;
}
CMD:servir(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
    return 1;
}
CMD:depie2(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,0,0,0,0);
    return 1;
}
CMD:rodar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/levantarse");
    return 1;
}
CMD:saludo1(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,0,0,0,0);
    return 1;
}
CMD:saludo2(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0);
    return 1;
}
CMD:saludo3(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,0,0,0,0);
    return 1;
}
CMD:saludo4(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
    return 1;
}
CMD:llorar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);
    return 1;
}
CMD:dormir(playerid,params[]){
    if(CanDoAnims(playerid) == 1) return 1;
    if(PlayerInfo[playerid][pTiempoJail] == 0)
    ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
    return 1;
}
CMD:strip(playerid,params[]) {
    SendClientMessage(playerid, 0xFC9300AA, "Usa: /strip[1-20]");
    return 1;
}
CMD:strip1(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,0);
    return 1;
}
CMD:strip2(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip3(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip4(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip5(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip6(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_B",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip7(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_C",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip8(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_D",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip9(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip10(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_F",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip11(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_G",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip12(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,0);
    return 1;
}
CMD:strip13(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip14(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_B2C",4.000000, 0, 1, 1, 1, 0);
    return 1;
}
CMD:strip15(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_C1",4.000000, 0, 1, 1, 1, 0);
    return 1;
}
CMD:strip16(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_C2",4.000000, 0, 1, 1, 1, 0);
    return 1;
}
CMD:strip17(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip18(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip19(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,7,5,1,1,0);
    return 1;
}
CMD:strip20(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,7,5,1,1,0);
    return 1;
}
CMD:echarse(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.000000, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
    return 1;
}
CMD:patada(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar(playerid,params[]) {
    SendClientMessage(playerid, 0xFC9300AA, "Usa: /danzar[0-12]");
    return 1;
}
CMD:danzar0(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","bd_clap",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar1(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar2(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dance_loop",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar3(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar4(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar5(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar6(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar7(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar8(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar9(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar10(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar11(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,7,5,1,1,1);
    return 1;
}
CMD:danzar12(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,7,5,1,1,1);
    return 1;
}
CMD:asustado(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
    return 1;
}
CMD:taxi(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
    return 1;
}
CMD:adolorido(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/levantarse");
    return 1;
}
CMD:fumar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SMOKING", "M_smklean_loop",4.1,0,1,1,1,1);
    return 1;
}
CMD:fuerza(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
    return 1;
}
CMD:normal(playerid,params[]) {
	if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return SendClientMessage(playerid, -1, "Necesitas permisos especiales para este comando.");
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","WALK_gang1",4.0,1,1,1,1,500);
	return 1;
}
CMD:mirar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 1, 0);
    return 1;
}
CMD:alentar(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);
    return 1;
}
CMD:cansado(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,7,5,1,1,1);
    return 1;
}
CMD:comodo(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/depie1");
    return 1;
}
CMD:pensar(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,7,5,1,1,1);
    return 1;
}
CMD:no(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(Objeto[playerid] > 0) ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0);
    else {
        ClearAnimations(playerid);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    }
    return 1;
}
CMD:sentadosexy(playerid)
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
    return SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
}
CMD:herido(playerid)
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
    return SendClientMessage(playerid, -1, "Para ponerte de pie usa {DBED15}/levantarse");
}
CMD:saludo(playerid, params[])
{
    SendClientMessage(playerid, 0xFC9300AA, "Usa: /saludo[1-4]");
    return 1;
}
CMD:patinar(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(PlayerInfo[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{DBED15}Para poder patinar necesitas comprar unos patines.");
    SendClientMessage(playerid,0x339900FF,"Usa: /patinar[1-3]");
    return 1;
}
CMD:patinar1(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(PlayerInfo[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{DBED15}Para poder patinar necesitas comprar unos patines.");
    ApplyAnimation(playerid,"SKATE","skate_run",4.0,1,1,1,1,500);
    return 1;
}
CMD:patinar2(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(PlayerInfo[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{DBED15}Para poder patinar necesitas comprar unos patines.");
    ApplyAnimation(playerid,"SKATE","skate_sprint",4.0,1,1,1,1,500);
    return 1;
}
CMD:patinar3(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    if(PlayerInfo[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{DBED15}Para poder patinar necesitas comprar unos patines.");
    ApplyAnimation(playerid,"SKATE","skate_idle",4.0,1,1,1,1,500);
    return 1;
}
CMD:caerse(playerid,params[]) {
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {DBED15}/pararse");
    return 1;
}
CMD:reir(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
}
CMD:arrestado(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
}
CMD:chau(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
}
CMD:negarse(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
}
CMD:basta(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,0,0,0,0);
}
CMD:regay(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,500);
}
CMD:asustar(playerid) {
    if(CanDoAnims(playerid) == 1) return 1;
    return ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );
}
CMD:loro(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    for(new i = 0; i < MAX_PTOYS; i ++) {
        if(PlayerToys[playerid][i][pUsando]) {
            if(PlayerToys[playerid][i][pModelID] == 19078 || PlayerToys[playerid][i][pModelID] == 19079) return ShowPlayerDialog(playerid, DIALOGO_LORO, DIALOG_STYLE_LIST, "Loro", "{FFFFFF}Enseñar frase\n{FFFFFF}Silenciar", "Aceptar" , "Cancelar");
        }
    }
    SendClientMessage(playerid,-1,"Necesitas usar un loro para usar este comando.");
    return 1;
}
CMD:vibrar(playerid, params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    for(new i = 0; i < MAX_PTOYS; i ++) {
        if(PlayerToys[playerid][i][pUsando]) {
            if(PlayerToys[playerid][i][pUsando] == 19086) return ApplyAnimation(playerid,"CHAINSAW","csaw_part",4.0,1,1,1,1,500);
        }
    }
    SendClientMessage(playerid,-1,"Necesitas usar un vibrador gigante para usar este comando.");
    return 1;
}
CMD:acciones(playerid)
{
    SendClientMessage(playerid,COLOR_DORADO,"[--------------------------------------[Acciones]--------------------------------------]");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/apuntar[1-2],/putear[1-3],/asiento[1-3],/saludo[1-4]");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/strip[1-20],/patinar[1-3],/danzar[1-13],/fumar,/bailar [1-4]");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/rendirse,/caerse,/borracho,/bomba,/reir,/esperar,/paja,/acabar");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/arrestado,/herido,/encender,/inhalar,/vigilar,/recostarse");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/pararse,/cubrirse,/vomitar,/comer,/chau,/palmada,/agonizar");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/levantarse,/beso,/mear,/mirar,/explicar,/sentarse,/pararse");
    SendClientMessage(playerid,COLOR_DORADO,"[---------------------------[Mas acciones /acciones2]----------------------------]");
    return 1;
}
CMD:acciones2(playerid)
{
    SendClientMessage(playerid,COLOR_DORADO,"[-------------------------------------[Acciones 2]-------------------------------------]");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/recibir,/negarse,/taichi,/beber,/pelea,/servirse,/servir");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/patada,/asustado,/taxi,/adolorido,/basta,/fuerza,/jorobado,/regay");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/asco,/asustar,/alentar,/cansado,/patada,/comodo,/hablar,/refresco");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/pensar,/rodar,/llorar,/dormir,/parar,/rapear,/echarse,/sentadosexy");
    SendClientMessage(playerid,COLOR_DORADO,"{DBED15}/no (para terminar cualquier acción)");
    SendClientMessage(playerid,COLOR_DORADO,"[-------------------------------------------------------------------------------------------]");
    return 1;
}
CMD:hablar(playerid, params[])
{
    if(ProxDetectorS(2.5,playerid, Camello))
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pFaccion] == 1 && EstaEnP(playerid,i,30.00)) return SetPlayerChatBubble(Camello, "Ahora no, nos están viendo.", -1, 30.0, 5000);
        }
        if(PuntosCamello(Camello) == -1) return SetPlayerChatBubble(Camello, "Ven... Sígueme.", -1, 30.0, 5000);
        ShowPlayerDialog(playerid, COMPRARCAMELLO, DIALOG_STYLE_LIST, "Camello", "Comprar\nVender", "Aceptar" , "Cancelar");
    }
    if(Muriendo[playerid] == 1 || (Tiempos[playerid][Consumible] - gettime()) > 0 || PlayerInfo[playerid][Agonizando] != 0 || VariableCaido[playerid] == 1 || Esposando[playerid] == 2 || recogiendo[playerid] > 0) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
        ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
    }
    return 1;
}
CMD:quien(playerid,params[])
{
    new string[200],id;
    if(PlayerInfo[playerid][pDuty] != 1) return 1;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/quien {FFFFFF}[PlayerID]");
    {
        if(PlayerInfo[id][pCargos] == 0) return SendClientMessage(playerid,-1,"Este jugador no tiene cargos");
        format(string,200,"Los cargos los coloco: {DBED15}%s{FFFFFF}, el jugador tiene {FF3300}%d{FFFFFF} cargos",PlayerInfo[id][QuienC],PlayerInfo[id][pCargos]);
        SendClientMessage(playerid,-1,string);
    }
    return 1;
}
CMD:recibir(playerid,params[])
{
    new item[128];
    if(sscanf(params, "s[128]", item))
    {
        if(CanDoAnims(playerid) == 1) return 1;
        ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
        return 1;
    }
    return 1;
}
CMD:tirar(playerid,params[])
{
	new nombre[32], string[200], armatiene, Float:Pos[3];
	GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes tirar cosas estando en un vehiculo.");
	if(!sscanf(params,"s[32]",nombre))
	{
		if(strcmp(nombre,"manopla",true) == 0) armatiene = 1;
		else if(strcmp(nombre,"palo-de-golf",true) == 0) armatiene = 2;
		else if(strcmp(nombre,"palo-de-policia",true) == 0) armatiene = 3;
		else if(strcmp(nombre,"cuchillo",true) == 0) armatiene = 4;
		else if(strcmp(nombre,"bate-de-beisbol",true) == 0) armatiene = 5;
		else if(strcmp(nombre,"pala",true) == 0) armatiene = 6;
		else if(strcmp(nombre,"palo-de-billar",true) == 0) armatiene = 7;
		else if(strcmp(nombre,"katana",true) == 0) armatiene = 8;
		else if(strcmp(nombre,"Consolador-rosa",true) == 0) armatiene = 10;
		else if(strcmp(nombre,"Vibrador-blanco",true) == 0) armatiene = 11;
		else if(strcmp(nombre,"Gran-vibrador-blanco",true) == 0) armatiene = 12;
		else if(strcmp(nombre,"Vibrador-plateado",true) == 0) armatiene = 13;
		else if(strcmp(nombre,"ramo-de-flores",true) == 0) armatiene = 14;
		else if(strcmp(nombre,"baston",true) == 0) armatiene = 15;
		else if(strcmp(nombre,"granada",true) == 0) armatiene = 16;
		else if(strcmp(nombre,"9mm",true) == 0) armatiene = 22;
		else if(strcmp(nombre,"9mm-silenciada",true) == 0) armatiene = 23;
		else if(strcmp(nombre, "desert-eagle",true) == 0 || strcmp(nombre, "dk",true) == 0) armatiene = 24;
		else if(strcmp(nombre,"escopeta",true) == 0) armatiene = 25;
		else if(strcmp(nombre, "escopeta-de-combate",true) == 0 || strcmp(nombre, "edc",true) == 0) armatiene = 27;
		else if(strcmp(nombre,"mp5",true) == 0) armatiene = 29;
		else if(strcmp(nombre,"ak-47",true) == 0) armatiene = 30;
		else if(strcmp(nombre,"m4",true) == 0) armatiene = 31;
		else if(strcmp(nombre,"tec9",true) == 0) armatiene = 32;
		else if(strcmp(nombre,"rifle",true) == 0) armatiene = 33;
		else if(strcmp(nombre,"minigun",true) == 0) armatiene = 38;
		else if(strcmp(nombre,"camara",true) == 0) armatiene = 43;
		else if(strcmp(nombre,"paracaidas",true) == 0) armatiene = 46;
		else if(strcmp(nombre,"bidon",true) == 0)
		{
			if(Bidon[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
			Bidon[playerid] = 0;
			RemovePlayerAttachedObject(playerid, 7);
			AccionesRol(playerid,"tira un bidón de gasolina al suelo.", 20);
			return 1;
		}
		else if(strcmp(nombre,"objeto",true) == 0)
		{
			if(Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
			Objeto[playerid] = 0;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid,7);
			AccionesRol(playerid,"deja un objeto en el suelo.", 20);
			return 1;
		}
		else return 1;
		if(!SiTieneArma(playerid,armatiene)) return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pDuty] == 1 && i != playerid && IsPlayerInRangeOfPoint(i,40.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"No puedes tirar el arma, la policía te está viendo.");
		}
		QuitarArma(playerid,armatiene);
		format(string,200,"tira su %s al suelo.",GetWeaponNameEx(armatiene));
		AccionesRol(playerid, string, 20);
	}
	else SendClientMessage(playerid,-1,"Usa {DBED15}/tirar nombre-del-arma{FFFFFF} (Recuerda usar guiones - en lugar de espacios) o {DBED15}/tirar bidon{FFFFFF}.");
	return 1;
}
CMD:revisar(playerid,params[])
{
    new Float:Pos[3],autoid,string[256],texto[10],id;
    if(!sscanf(params,"s[10]d",texto,id))
    {
        if(strcmp(texto,"paciente", true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
            if(RopaMedi[playerid] == 1)
            {
                if(PlayerInfo[id][pEnfermedad] == 0) return 1;
                if(PlayerInfo[id][pAtendido] == 1) return SendClientMessage(playerid,-1,"El paciente ya fue atendido");
                new enfermedad[32];
                GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
                format(enfermedad,sizeof(enfermedad),"%s",Enfermedades(playerid));
                if(IsPlayerInRangeOfPoint(playerid, 2.0, Pos[0],Pos[1],Pos[2]))
                {
                    format(string,sizeof(string),"El paciente presenta %s",enfermedad);
                    SendClientMessage(playerid,-1,string);
                    AccionesRol(playerid,"observa al paciente y procede a revisarlo.", 20);
                }
            }
            else return SendClientMessage(playerid,-1,"Necesitas tener la ropa de médico para utilizar este comando");
        }
        if(strcmp(texto,"camion",   true) == 0)
        {
            new Float:VPos[3];
            if(PlayerInfo[playerid][pDuty] != 1) return 1;
            for(new i = 0;i<GetVehiclePoolSize();i++)
            {
                if(CAMION(i))
                {
                    new stringas[128];
                    GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
                    if(IsPlayerInRangeOfPoint(playerid,1.0,VPos[0],VPos[1],VPos[2]))
                    {
                        format(stringas, sizeof(stringas), "Camión de carga número: {00cc00}%d{FFFFFF} | Contenido: {00CC00}%sNinguno {FFFFFF}| Chofer: {00cc00}%s", i-28, GetContenido(i), PlayerInfo[Chofer[i]][Nickname]);
                        SendClientMessage(playerid, -1,stringas);
                    }
                }
            }
        }
    }
    else if(!sscanf(params,"s[8]d",texto))
    {
        if(strcmp(texto,"camion",   true) == 0)
        {
            new Float:VPos[3];
            if(PlayerInfo[playerid][pDuty] != 1) return 1;
            for(new i = 0;i<GetVehiclePoolSize();i++)
            {
                if(CAMION(i))
                {
                    new stringas[128];
                    GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
                    if(IsPlayerInRangeOfPoint(playerid,10.0,VPos[0],VPos[1],VPos[2]))
                    {
                        format(stringas, sizeof(stringas), "Camión de carga número: {00cc00}%d{FFFFFF} | Contenido: {00CC00}%s {FFFFFF}| Chofer: {00cc00}%s", i-28, CamionCargado[i], PlayerInfo[Chofer[i]][Nickname]);
                        SendClientMessage(playerid, -1,stringas);
                    }
                }
            }
        }
    }
    else if(sscanf(params,"s[10]d",texto,id))
    {
        if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de mecánico para revisar motores de vehículos.");
        {
            if(RopaMeca[playerid] == 0 && PlayerInfo[playerid][pVip] == 0) return SendClientMessage(playerid, -1, "Necesitar usar la ropa de mecánico para poder reparar un vehiculo.");
            foreach(new i : Player)
            {
                if(LlamadaMeca[i] == 1 && IsPlayerInAnyVehicle(i))
                {
                    GetPlayerPos(i, Pos[0],Pos[1],Pos[2]);
                    if(IsPlayerInRangeOfPoint(playerid, 7.0, Pos[0],Pos[1],Pos[2]))
                    {
                        autoid = GetPlayerVehicleID(i);
                        if(Capo[autoid] != 1) return SendClientMessage(playerid,-1,"El capo del vehículo debe estar abierto");
                        {
                            if(autoid <= AUTOS)
                            {
                                SendClientMessage(playerid,-1,"El vehículo necesita {00CC00}0{FFFFFF} repuestos.");
                                MRepuestos[playerid] = 0;
                                return 1;
                            }
                            else
                            {
                                foreach(new u : Player)
                                {
                                    for(new v = 0; v < MAX_PAUTOS; v++)
									{
										if(!IsValidVehicle(autos[v][i])) continue;
										if(autos[v][i] == autoid)
										{
											new repuestos = VehicleInfo[i][v][vPrecio]/5000;
											MensajeEx(playerid, -1, "Este vehículo necesita {EB0000}%d{FFFFFF} repuestos.",repuestos);
											MRepuestos[playerid] = repuestos;
											return 1;
										}
									}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else SendClientMessage(playerid,-1,"Necesitas el trabajo de mecánico para revisar motores de vehículos.");
    return 1;
}
CMD:reparar(playerid,params[])
{
	new Float:Pos[3],autoid,precio,string[256],pName[50], item[32];
	GetPlayerName(playerid,pName,50);
	if(!sscanf(params,"d",precio))
	{
		if(precio < 0) return SendClientMessage(playerid,-1,"Monto inválido");
		if(RopaMeca[playerid] == 0) return SendClientMessage(playerid, -1, "Necesitar usar la ropa de mecánico para poder reparar un vehiculo.");
		if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Debes ser mecánico para utilizar este comando");
		{
			foreach(new i : Player)
			{
				if(LlamadaMeca[i] == 1 && IsPlayerInAnyVehicle(i))
				{
					GetPlayerPos(i, Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInRangeOfPoint(playerid, 7.0, Pos[0],Pos[1],Pos[2]))
					{
						autoid = GetPlayerVehicleID(i);
						if(Capo[autoid] == 1)
						{
							foreach(new u : Player)
							{
							    if(PlayerInfo[playerid][Repuestos] >= MRepuestos[playerid])
								{
									format(string,256,"El mecánico {00CCFF}%s{FFFFFF} te ofrece reparar el vehículo por {00CC00}$%d{FFFFFF}.",pName,precio);
									ShowPlayerDialog(i,REPARACION,DIALOG_STYLE_MSGBOX,"Reparacion",string,"Aceptar","Cerrar");
									format(string,256,"Le ofreciste una reparación a {00CCFF}%s{FFFFFF} por {00CC00}$%d{FFFFFF}.",PlayerName(i),precio);
									SendClientMessage(playerid,-1,string);
									Mecanico[i] = playerid;
									MConductor[i] = precio;
									return 1;
								}
								else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
							}
						}
						else return SendClientMessage(playerid,-1,"El capo del vehículo debe estar abierto");
					}
				}
			}
		}
	}
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item, "embarcacion",true)==0)
		{
		    if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2745.3225,-2596.3396,-0.1532)) return SendClientMessage(playerid,-1,"Debes estar al lado de pesca para reparar tu bote.");
            if(!BOTE(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid,-1,"Debes estar en un bote para repararlo.");
			SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
			RepairVehicle(GetPlayerVehicleID(playerid));
			return SendClientMessage(playerid, COLOR_GRAD2, "Embarcación reparada.");
		}
	}
	if(sscanf(params, "s[30]", item))
	{
		if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return 1;
        if(TiempoReparar[playerid] == 0)
		{
		    if(PlayerInfo[playerid][Repuestos] > 10)
		    {
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en ningún vehículo.");
				new Float:angle;
				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				GetPlayerFacingAngle(playerid,angle);
				SetPlayerFacingAngle(playerid,angle+180);
				LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,13000);
				SetTimerEx("Reparando2",13000,false,"ddd",playerid,GetPlayerVehicleID(playerid),0);
				SetTimerEx("DescongelarCBUG",13000,false,"d",playerid);
				GameTextForPlayer(playerid, "Reparando vehiculo...", 13000, 5);
				AccionesRol(playerid,"comienza a reparar el vehículo.", 20);
				PlayerInfo[playerid][Repuestos] -= 10;
				TiempoReparar[playerid] = 14;
			}
			else return SendClientMessage(playerid,-1,"No tienes los respuestos suficientes para reparar el vehículo.");
		}
		else return 1;
  	}
	return 1;
}
CMD:ficha(playerid,params[])
{
    new monto,autoid;
    autoid = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pTrabajo] != T_Taxista && PlayerInfo[playerid][pTrabajo2] != T_Taxista) return SendClientMessage(playerid,-1,"Necesitas ser taxista para utilizar este comando");
    if(TAXI(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(!sscanf(params,"d",monto))
        {
            if(monto >= 2 && monto <= 50)
            {
                Ficha[playerid] = monto;
                foreach(new i : Player)
                {
                    if(IsPlayerInVehicle(i,autoid)) MensajeEx(i, -1, "El taxímetro de ({00cbf7}%s{FFFFFF}) fue configurado con un precio de {11FF00}$%d{FFFFFF} por ficha.",PlayerName(playerid),monto);
                }
            }
            else return SendClientMessage(playerid,-1,"El precio de la ficha tiene que ser entre {11FF00}$2{FFFFFF} a {11FF00}$50");
        }
        else
        {
            if(Ficha[playerid] == 0) return 1;
            Ficha[playerid] = 0;
            TextDrawHideForPlayer(playerid,TAXIMET); PlayerTextDrawHide(playerid,TAXIMET2[playerid]);
            TextDrawHideForPlayer(playerid,TAXIMET3); TextDrawHideForPlayer(playerid,TAXIMET4);
            foreach(new i : Player)
            {
                if(IsPlayerInVehicle(i,autoid)) MensajeEx(i, -1, "({00cbf7}%s{FFFFFF}) apagó el taxímetro.",PlayerName(playerid));
            }
        }
    }
    return 1;
}
CMD:mecanico(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico)
    {
        SendClientMessage(playerid,-1,"Para ponerte en servicio de mecánico con su respectiva ropa, necesitas conseguir el trabajo.");
        SendClientMessage(playerid,-1,"Usa {DBED15}/ayuda trabajos {FFFFFF} para obtener más información.");
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0,84.3491,-149.0520,2.6000))
    {
        if(RopaMeca[playerid] == 0)
        {
            switch(PlayerInfo[playerid][pSexo])
            {
                case 2: SetPlayerSkin(playerid, 309);
                default: SetPlayerSkin(playerid, 50);
            }
            SendClientMessage(playerid,-1,"Ahora estás en servicio de mecánico.");
            RopaMeca[playerid] = 1;
        }
        else if(RopaMeca[playerid] == 1)
        {
            SendClientMessage(playerid,-1,"Te has quitado la ropa de trabajo.");
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            RopaMeca[playerid] = 0;
        }
    }
    return 1;
}
CMD:basurero(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(PlayerInfo[playerid][pTrabajo] != T_Basurero && PlayerInfo[playerid][pTrabajo2] != T_Basurero) return SendClientMessage(playerid,-1,"Primero tienes que conseguir el trabajo de basurero.");
    if(IsPlayerInRangeOfPoint(playerid, 2.0,-170.1398,-1556.1694,5.6444))
    {
        if(RopaBasu[playerid] == 0)
        {
            switch(PlayerInfo[playerid][pSexo])
            {
                case 2: SetPlayerSkin(playerid, 131),SetPlayerAttachedObject(playerid,3,19904,1,0.103999,0.065000,-0.001998,2.099929,90.200180,174.199905,0.949001,1.222001,0.876000);
                default: SetPlayerSkin(playerid, 16);
            }
            SendClientMessage(playerid,-1,"Te has colocado la ropa de trabajo, ahora puedes comenzar a trabajar");
            RopaBasu[playerid] = 1;
            Descongelar(playerid);
        }
        else if(RopaBasu[playerid] == 1)
        {
            SendClientMessage(playerid,-1,"Te has quitado la ropa de trabajo");
            RemovePlayerAttachedObject(playerid, 3);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            RopaBasu[playerid] = 0;
            Descongelar(playerid);
        }
    }
    return 1;
}
CMD:medico(playerid,params[])
{
    new autoid = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return 1;
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en una ambulancia para colocarte el uniforme");
    if(!AMBU(autoid)) return SendClientMessage(playerid,-1,"Debes estar en una ambulancia para colocarte el uniforme");
    if(GetPlayerVehicleSeat(playerid) == 2 || GetPlayerVehicleSeat(playerid) == 3)
    {
        if(RopaMedi[playerid] == 0)
        {
            RopaMedi[playerid] = 1;
            switch(PlayerInfo[playerid][pSexo])
            {
                case 2: PlayerInfo[playerid][pModelo] =  308, SetPlayerSkin(playerid,308);
                default: PlayerInfo[playerid][pModelo] =  276, SetPlayerSkin(playerid,276);
            }
            RemovePlayerFromVehicle(playerid);
            SendClientMessage(playerid,COLOR_DORADO,"Ropa cambiada, ahora estás en servicio.");
        }
        else if(RopaMedi[playerid] == 1)
        {
            RopaMedi[playerid] = 0;
            SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
            RemovePlayerFromVehicle(playerid);
            SendClientMessage(playerid,COLOR_DORADO,"Ya no estás de servicio.");
        }
        foreach(new i : Player)RemovePlayerMapIcon(playerid, i);
    }
    else return SendClientMessage(playerid,-1,"Debes estar en la parte trasera de una ambulancia para colocarte el uniforme");
    return 1;
}
CMD:limpiarreportes(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return 1;
	ClearReports();
	return 1;
}
CMD:reportar(playerid, params[])
{
	new string[152],id,razon[250];
	if(PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en este momento, en su lugar usa {DBED15}/reglas");
	if(JustReported[playerid] > 0)
	{
		format(string, sizeof(string), "Debes esperar {00CC00}%d segundos{FFFFFF} para mandar otro reporte.", JustReported[playerid]);
		SendClientMessage(playerid, -1, string);
		return 1;
	}
	if(!sscanf(params,"ds[250]",id,razon))
	{
	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,COLOR_WHITE,"Jugador reportado no conectado.");
	    new length = strlen(razon);
	    if(length > 100) return SendClientMessage(playerid,-1,"No puedes enviar un reporte muy extenso, abrevia tus palabras por favor.");
		SendReportToQue(playerid,id, razon);
		SendClientMessage(playerid,-1,"{00CC00}El reporte fue enviado correctamente.");
		JustReported[playerid] = 60;
		return 1;
	}
	else return SendClientMessage(playerid,-1,"Por favor, para reportar usa {DBED15}/reportar [ID] [Razón]");
}
CMD:regar(playerid, params[])
{
    if(BaldeAgua[playerid] == 0 || Objeto[playerid] != 9003) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas un balde de agua para regar la tierra.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un vehículo.");
    if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un interior.");
    for(new e; e < MAX_MARIHUANA; e++)
    {
        if(Marihuana[e][Created] > 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]))
            {
                if(Marihuana[e][Status] == 1)
                {
                    PlayAudioStreamForPlayerEx(playerid, "https://"AUDIO_REGAR"");
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 1, 1, 1, 3000, 1);
                    GameTextForPlayer(playerid, "~b~Regando...", 3000, 5);
                    SetTimerEx("DescongelarRegar",3000,false,"d",playerid);
                    Marihuana[e][Status] = 2;
                    Marihuana[e][Time] = 10800;
                    Congelar(playerid);
                    CargarPlanta(e);
                    RemovePlayerAttachedObject(playerid,4);
                    BaldeAgua[playerid] = 0;
                    Objeto[playerid] = 0;
                    AccionesRol(playerid,"vacía el balde de agua en la planta.", 20);
                }
            }
        }
    }
    return 1;
}
CMD:cosechar(playerid, params[])
{
    new item[128];
    if(!sscanf(params,"s[128]",item))
    {
        if(strcmp(item,"planta",true)==0)
        {
            if(PlayerInfo[playerid][j_ARMAS][GetWeaponSlot(4)] != 4) return SendClientMessage(playerid,-1,"Necesitas un cuchillo para sembrar y cosechar estas plantas.");
            if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Para sembrar necesitas tener como mínimo nivel 2.");
            for(new e; e < MAX_MARIHUANA; e++)
            {
                if(Marihuana[e][Created] > 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid,3.0,Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]))
                    {
                        if(Marihuana[e][Status] == 3)
                        {
                            new string[128], Query[128];
                            GameTextForPlayer(playerid, "~r~Cosechando...", 3000, 5);
                            PlayerInfo[playerid][pMarihuana] += 5;
                            PlayAudioStreamForPlayerEx(playerid, "https://"AUDIO_CORTAR"");
                            AccionesRol(playerid,"corta con un cuchillo la planta de marihuana.", 20);
                            format(string, sizeof(string), "Obtienes {00CC00}5 gramos de marihuana{FFFFFF}, ahora puedes {DBED15}/armar porro");
                            SendClientMessage(playerid, -1, string);
                            Marihuana[e][Created] = 0;
                            Marihuana[e][Time] = 0;
                            if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
                            if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
                            mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM marihuana WHERE `ID` = '%d'", Marihuana[e][mID]);
                            mysql_tquery(handle_db, Query);
                            RevisarLogro(playerid, 8);
                            return 1;
                        }
                        else return SendClientMessage(playerid,-1,"La planta aún no está madura.");
                    }
                }
            }
        }
    }
    if(sscanf(params, "s[30]", item))
    {
        if(IsPlayerInRangeOfPoint(playerid,5.0,-392.1681,-1481.9919,25.6680))
        {
            if(IsPlayerInAnyVehicle(playerid)) return 1;
            if(Cosechas[playerid][CosechaLugar] == 0)
            {
                new randomly = random(8);
                switch(randomly)
                {
                    case 0: randomly = 1; case 1: randomly = 1;
                    case 2: randomly = 2; case 3: randomly = 2;
                    default: randomly = 1;
                }
                Cosechas[playerid][CosechaLugar] = 1;
                Cosechas[playerid][RutaCosecha] = randomly;
                CosechasPoints(playerid);
                SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],0);
                UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
                if(randomly == 1) SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 20.0);
                else if(randomly == 2) SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 16.0);
                SendClientMessage(playerid,-1,"Sube a una cosechadora y comienza a trabajar.");
            }
            else return SendClientMessage(playerid,-1,"Ya te dieron un campo para cosechar.");
        }
        else if(IsPlayerInRangeOfPoint(playerid,5.0,-31.3545,54.7022,3.1172))
        {
            if(IsPlayerInAnyVehicle(playerid)) return 1;
            if(Cosechas[playerid][CosechaLugar] == 0)
            {
                new randomly = random(8);
                switch(randomly)
                {
                    case 0: randomly = 1; case 1: randomly = 1;
                    case 2: randomly = 2; case 3: randomly = 2;
                    default: randomly = 2;
                }
                Cosechas[playerid][CosechaLugar] = 2;
                Cosechas[playerid][RutaCosecha] = randomly;
                CosechasPoints(playerid);
                SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 15.0);
                SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],0);
                UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
                SendClientMessage(playerid,-1,"Sube a una cosechadora y comienza a trabajar.");
            }
             else return SendClientMessage(playerid,-1,"Ya te dieron un campo para cosechar.");
        }
        else SendClientMessage(playerid,-1,"No estás donde dan el trabajo de cosechador.");
    }
    return 1;
}
CMD:canal(playerid,params[])
{
    new item[128];
    if(sscanf(params, "s[128]",item)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/canal dudas - /canal anuncios");
    if(strcmp(params,"dudas",true) == 0)
    {
        switch(CanalDudas[playerid])
        {
            case 0: SendClientMessage(playerid, 0xDBED15FF, "Activaste el canal dudas, úsalo con cuidado que puedes llegar a ser baneado."),CanalDudas[playerid] = 1;
            case 1: SendClientMessage(playerid, 0xFF9900FF, "Desactivaste el canal de dudas /n, ingresa el mismo comando para activarlo."),CanalDudas[playerid] = 0;
        }
    }
    if(strcmp(params,"anuncios",true) == 0)
    {
        switch(CanalAnuncios[playerid])
        {
            case 0: SendClientMessage(playerid, 0xDBED15FF, "Activaste el canal de anuncios, úsalo con cuidado que puedes llegar a ser baneado."),CanalAnuncios[playerid] = 1;
            case 1: SendClientMessage(playerid, 0xFF9900FF, "Desactivaste el canal de anuncios /llamar 430, ingresa el mismo comando para activarlo."),CanalAnuncios[playerid] = 0;
        }
    }
    return 1;
}
CMD:mostrar(playerid,params[])
{
    new item[128];
    if(!sscanf(params, "s[128]",item))
    {
		if(strcmp(params,"barras",true) == 0)
		{
		    if(PlayerInfo[playerid][pBarras] == 1) return SendClientMessage(playerid,-1,"Ya tienes visible la barra indicadora de sed.");
			PlayerInfo[playerid][pBarras] = 1;
			BarrasFunciones(playerid, 1);
			SendClientMessage(playerid,-1,"Ahora puedes ver las barras de sed y hambre, para ocultarla usa {DBED15}/ocultar barras{FFFFFF}.");
		}
        if(strcmp(params,"nombres",true) == 0)
        {
            if(NombresOcultos[playerid] == 0)   GameTextForPlayer(playerid, "MOSTRANDO NOMBRES", 1000, 5);
            else
            {
                NombresOcultos[playerid] = 0;
                foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, 1);
                GameTextForPlayer(playerid, "~g~MOSTRANDO ~w~NOMBRES", 1000, 5);
                SendClientMessage(playerid,-1,"Ahora puedes ver los nombres de los jugadores, para ocultarlos escribe {DBED15}/ocultar nombres");
            }
        }
    }
    return 1;
}
CMD:reglas(playerid,params[])
{
    new string[500];
    if(JugadorLogeado[playerid] == 1)
    {
        string="{FFFF00}Nombres\n{FFFFFF}A la hora de elejir un hombre hay que tener en cuenta:\n- El nombre elejido tiene que ser real, es decir, que alguien en el mundo lo tenga.\n- Se prohibe el uso de diminutivos o sobrenombres. Ejemplo: Nico_Gonzales o Nacho_Lopez.\n- Es importante el uso de mayusculas solo en la primer letra del Nombre y Apellido.\n- Se prohíbe usar nombres de personas famosas. Ejemplo: Marcelo_Tinelli. Chuck_Norris, etc.";
        ShowPlayerDialog(playerid, REGLAS, DIALOG_STYLE_MSGBOX, "Reglas del juego", string, "Siguiente","");
    }
    return 1;
}
CMD:llenar(playerid,params[])
{
    new item[128],autoid,resta,string[128],resta2;
    if(!sscanf(params,"s[128]",item))
    {
        if(strcmp(item, "tanque", true)== 0)
        {
            if(!EnGasolinera(playerid)) return 1;
            if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1," Necesitas estar manejando el vehículo para cargar combustible.");
            autoid = GetPlayerVehicleID(playerid);
            if(Tiempos[playerid][TiempoLlenar] > gettime()) return SendClientMessage(playerid,-1,"Ya estás llenando el tanque, espera un poco.");
            new modelo = GetVehicleModel(autoid);
            new vehiclefuel = CombustibleCoche(modelo);
            if(VehicleFuel[autoid] >= vehiclefuel) return SendClientMessage(playerid, -1, "El tanque de este vehiculo esta lleno");
            resta = vehiclefuel-VehicleFuel[autoid];
            resta2 = vehiclefuel;
            if(PlayerInfo[playerid][pDinero] < resta*10)
            {
                format(string,128,"No tienes suficiente dinero para llenar tu vehículo, necesitas {00CC00}$%d",resta*10);
                return SendClientMessage(playerid, -1,string);
            }
            llenado[autoid] = SetTimerEx("DarGasolina",1000,true,"ddd", playerid, autoid, resta2);
            format(string,128,"Se van a cargar %d litros de combustible.", resta);
            SendClientMessage(playerid, -1,string);
            format(string,128,"Costo total: {00CC00}$%d", resta*10);
            SendClientMessage(playerid, -1,string);
            TogglePlayerControllable(playerid, 0);
            SetPVarInt(playerid, "IsFrozen", 0);
            QuitarDinero(playerid, resta*10);
            Tiempos[playerid][TiempoLlenar] = gettime() + 500;
            new striong[20];
            format(striong,sizeof(striong),"~r~-$%d",resta*10);
            GameTextForPlayer(playerid, striong, 5000, 1);
            TimerCombustible[playerid] = 150;
        }
        if(strcmp(item, "balde", true) == 0)
        {
            if(!EnBaldes(playerid)) return 1;
            if(PlayerInfo[playerid][pBalde] == 0) return SendClientMessage(playerid,-1,"Necesitas tener un balde en tu inventario.");
            if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
            if(BaldeAgua[playerid] == 1) return SendClientMessage(playerid, -1, "Tu balde ya contiene agua.");
            TogglePlayerControllable(playerid, 0);
            Objeto[playerid] = 9003;
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            SetPlayerAttachedObject(playerid, 4, 19468, 5, 0.126999,-0.089000,0.127998,101.199981,-164.499847,82.999900,1.032001,0.972000,1.002997);
            TogglePlayerControllable(playerid, 1);
            Congelar(playerid);
            PlayAudioStreamForPlayerEx(playerid, "https://"AUDIO_BALDE"");
            SendClientMessage(playerid, COLOR_WHITE, "Se está llenando el balde de agua, espera por favor..");
            GameTextForPlayer(playerid, "~b~Llenando Balde...", 4000, 5);
            SetTimerEx("LlenarBalde", 10000, false, "u", playerid);
        }
    }
    return 1;
}
CMD:combustible(playerid,params[])
{
    new litros,autoid,string[128],petroleo;
    if(!sscanf(params,"d",litros))
    {
        autoid = GetPlayerVehicleID(playerid);
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1," Necesitas estar manejando el vehículo para cargar combustible.");
        if(!EnGasolinera(playerid)) return SendClientMessage(playerid,-1,"Necesitas llevar al vehículo a una estación de servicio.");
        if(litros < 0) return SendClientMessage(playerid, -1, "El combustible debe ser mayor a 0.");
        new modelo = GetVehicleModel(autoid);
        new vehiclefuel = CombustibleCoche(modelo);
        if(VehicleFuel[autoid] >= vehiclefuel) return SendClientMessage(playerid, -1, "El tanque de este vehiculo esta lleno.");
        {
            new nuevacantidad = litros+VehicleFuel[autoid];
            if(nuevacantidad > vehiclefuel) return SendClientMessage(playerid,-1,"No puedes recargar esa cantidad de combustible.");
            petroleo = VehicleFuel[autoid]+litros;
            if(PlayerInfo[playerid][pDinero] < litros*10)
            {
                format(string,128,"El litro de combustible cuesta {00CC00}$10{FFFFFF}, necesitas {00CC00}$%d{FFFFFF} para pagar {DBED15}%d{FFFFFF} litros.",litros*10, litros);
                SendClientMessage(playerid, -1,string);
                return 1;
            }
            llenado[autoid] = SetTimerEx("DarGasolina",1000,true,"ddd", playerid, autoid, petroleo);
            format(string,128,"Se van a cargar %d litros de combustible.", litros);
            SendClientMessage(playerid, -1,string);
            format(string,128,"Costo total: {00CC00}$%d", litros*10);
            SendClientMessage(playerid, -1,string);
            TogglePlayerControllable(playerid, 0);
            SetPVarInt(playerid, "IsFrozen", 0);
            QuitarDinero(playerid, litros*10);
            TimerCombustible[playerid] = 150;
        }
    }
    return 1;
}
CMD:telefono(playerid,params[])
{
    if(PlayerInfo[playerid][pNumero] <= 0) return SendClientMessage(playerid,-1,"No tienes un teléfono celular.");
    SendClientMessage(playerid, -1, "Recuerda que también puedes usar {DBED15}/agenda, /llamar, /sms.");
    AccionesRol(playerid, "mira su teléfono.",20);
    ShowDialog(playerid, DIALOG_PHONE);
    return 1;
}
CMD:config(playerid)
{
    ShowConfig(playerid);
    return 1;
}
CMD:regalo(playerid, params[])
{
    new day, month,year, second, minute, hour;
    getdate(day,month,year);
    gettime(hour, minute, second);
    if(NidadX == false) return 1;
    if(month == 12 && day <= 24) return SendClientMessage(playerid,-1,"A partir del día 25 de diciembre puedes recibir tu {DBED15}/regalo{FFFFFF}.");
    if(!IsPlayerInRangeOfPoint(playerid,7.0,1511.3228,-1611.9078,14.0244)) return SendClientMessage(playerid, -1, "No estás cerca del arbol de navidad frente al Hospital Central de Los Santos.");
    if(PlayerInfo[playerid][pRegalo] == 1) return SendClientMessage(playerid,-1,"Ya recibiste tu regalo de navidad, espera al proximo año.");
    PlayerInfo[playerid][pRegalo] = 1;
    AccionesRol(playerid,"abre su regalo de navidad.", 20);
    AbrirRegalo(playerid);
    return 1;
}
CMD:ver(playerid,params[])
{
    new item[32],string[385];
    if(!sscanf(params, "s[32]",item))
    {
        if(strcmp(item, "botiquin", true)==0)
        {
            if(EnBotiquin(playerid)) MostrarBotiquin(playerid);
        }
        else if(strcmp(params,"mapa",true) == 0)
        {
            if(!EnVerMapa(playerid)) return 1;
            format(string, sizeof(string),"Concesionarios\nLugares de trabajo\nTiendas de ropa\nBancos\nTienda 24/7\nEdificios Municipales\nFerreterias\nGranjas\nTienda BabyZone\nTaller Tuning");
            ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "Puntos de interés", string, "Siguiente", "Cancelar");
        }
        else if(strcmp(params,"estanteria",true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) != 14) return 1;
            MostrarEstanteria(playerid);
        }
        else if(strcmp(params,"heladera",true) == 0 || strcmp(params,"geladeira",true) == 0)
        {
            MostrarHeladera(playerid);
        }
        else if(strcmp(params,"reporte",true) == 0 || strcmp(params,"reportes",true) == 0)
		{
			if(PlayerInfo[playerid][pAdmin] < 3 && PlayerTemp[playerid][@Specteando] == 1 && IDReporte[playerid] == -1) return 1;
			MensajeEx(playerid, 0xB1F6F6F6, "ID: %d - N: %d - R: {FF3300}%s", IDReporte[playerid], GetPlayerScore(IDReporte[playerid]), IDReporteMensaje[playerid]);
		}
    }
    return 1;
}
CMD:guardar(playerid,params[])
{
    new arma[20],armaid,string[150],cantidad;
    if(!sscanf(params,"s[20]d",arma,cantidad))
    {
        if(strcmp(arma,"medicamentos",true) == 0 || strcmp(arma,"medicamento",true) == 0) armaid = 100;
        if(strcmp(arma,"crack",true) == 0) armaid = 200;
        if(strcmp(arma,"marihuana",true) == 0) armaid = 300;
    }
    else if(!sscanf(params,"s[20]",arma))
    {
        if(strcmp(arma,"manopla",true) == 0) armaid = 1;
        if(strcmp(arma,"palo-de-golf",true) == 0) armaid = 2;
        if(strcmp(arma,"cuchillo",true) == 0) armaid = 4;
        if(strcmp(arma,"bate-de-beisbol",true) == 0) armaid = 5;
        if(strcmp(arma,"pala",true) == 0) armaid = 6;
        if(strcmp(arma,"palo-de-billar",true) == 0) armaid = 7;
        if(strcmp(arma,"katana",true) == 0) armaid = 8;
        if(strcmp(arma,"consolador-rosa",true) == 0) armaid = 10;
        if(strcmp(arma,"vibrador-blanco",true) == 0) armaid = 11;
        if(strcmp(arma,"gran-vibrador-blanco",true) == 0) armaid = 12;
        if(strcmp(arma,"vibrador-plateado",true) == 0) armaid = 13;
        if(strcmp(arma,"ramo-de-flores",true) == 0) armaid = 14;
        if(strcmp(arma,"baston",true) == 0) armaid = 15;
        if(strcmp(arma,"granada",true) == 0) armaid = 16;
        if(strcmp(arma,"9mm",true) == 0) armaid = 22;
        if(strcmp(arma,"9mm-silenciada",true) == 0) armaid = 23;
        if(strcmp(arma,"desert-eagle",true) == 0 || strcmp(arma,"dk",true) == 0) armaid = 24;
        if(strcmp(arma,"escopeta-de-madera",true) == 0 || strcmp(arma,"escopeta",true) == 0) armaid = 25;
        if(strcmp(arma,"escopeta-de-combate",true) == 0 || strcmp(arma,"edc",true) == 0) armaid = 27;
        if(strcmp(arma,"MP5",true) == 0) armaid = 29;
        if(strcmp(arma,"AK-47",true) == 0) armaid = 30;
        if(strcmp(arma,"M4",true) == 0) armaid = 31;
        if(strcmp(arma,"rifle",true) == 0) armaid = 33;
        if(strcmp(arma,"camara",true) == 0) armaid = 43;
    	if(armaid != 0 && armaid == 300) // Marihuana
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PlayerInfo[playerid][pMarihuana] >= cantidad)
                    {
                        if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
                        PlayerInfo[playerid][pMarihuana] -= cantidad;
                        PropInfo[c][pMarihuana] += cantidad;
                        GuardarPropiedad(c);
                        AccionesRol(playerid,"coloca marihuana en el estante.", 20);
                    }
                    else SendClientMessage(playerid,-1,"No tienes esa cantidad de marihuana.");
                }
            }
        }
    }
    if(armaid != 0 && armaid == 100)//Medicamentos
    {
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PlayerInfo[playerid][pMedicamentos] >= cantidad)
                    {
                        if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
                        PlayerInfo[playerid][pMedicamentos] -= cantidad;
                        PropInfo[c][pMedicamentos] += cantidad;
                        GuardarPropiedad(c);
                        AccionesRol(playerid,"coloca medicamentos en el estante.", 20);
                    }
                    else SendClientMessage(playerid,-1,"No tienes esa cantidad de medicamentos.");
                }
            }
        }
    }
    else if(armaid != 0 && armaid == 200) // Tranquilizantes
    {
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PlayerInfo[playerid][pTranquilizantes] >= cantidad)
                    {
                        if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
                        PlayerInfo[playerid][pTranquilizantes] -= cantidad;
                        PropInfo[c][pTranquilizantes] += cantidad;
                        GuardarPropiedad(c);
                        AccionesRol(playerid,"coloca tranquilizantes en el estante.", 20);
                    }
                    else SendClientMessage(playerid,-1,"No tienes esa cantidad de tranquilizantes.");
                }
            }
        }
    }
    else if(armaid != 0 && armaid == 300)//Crack
    {
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PlayerInfo[playerid][pCrack] >= cantidad)
                    {
                        if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
                        PlayerInfo[playerid][pCrack] -= cantidad;
                        PropInfo[c][pCrack] += cantidad;
                        GuardarPropiedad(c);
                        AccionesRol(playerid,"coloca gramos de crack en el estante.", 20);
                    }
                    else SendClientMessage(playerid,-1,"No tienes esa cantidad de crack.");
                }
            }
        }
    }
    else if(armaid != 0 && armaid != 100 && armaid != 200)//Armas
    {
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(EspacioRopero(c) < PropInfo[c][pLugarRopero])
                    {
                        if(SiTieneArma(playerid,armaid))
                        {
                            if(armaid == 1) PropInfo[c][pManopla] ++;
                            else if(armaid == 2) PropInfo[c][pPaloDeGolf] ++;
                            else if(armaid == 4) PropInfo[c][pCuchillo] ++;
                            else if(armaid == 5) PropInfo[c][pBateDeBeisbol] ++;
                            else if(armaid == 6) PropInfo[c][pPala] ++;
                            else if(armaid == 7) PropInfo[c][pPaloDeBillar] ++;
                            else if(armaid == 8) PropInfo[c][pKatana] ++;
                            else if(armaid == 10) PropInfo[c][pConsoladorRosa] ++;
                            else if(armaid == 11) PropInfo[c][pVibradorBlanco] ++;
                            else if(armaid == 12) PropInfo[c][pGranVibradorBlanco] ++;
                            else if(armaid == 13) PropInfo[c][pVibradorPlateado] ++;
                            else if(armaid == 14) PropInfo[c][pFlores] ++;
                            else if(armaid == 15) PropInfo[c][pBaston] ++;
                            else if(armaid == 16) PropInfo[c][pGranada] ++;
                            else if(armaid == 22) PropInfo[c][p9mm] ++;
                            else if(armaid == 23) PropInfo[c][p9mmSilenciada] ++;
                            else if(armaid == 24) PropInfo[c][pDesertEagle] ++;
                            else if(armaid == 25) PropInfo[c][pEscopetaNormal] ++;
                            else if(armaid == 27) PropInfo[c][pEscopetaDeCombate] ++;
                            else if(armaid == 29) PropInfo[c][pMP5] ++;
                            else if(armaid == 30) PropInfo[c][pAK47] ++;
                            else if(armaid == 31) PropInfo[c][pM4] ++;
                            else if(armaid == 33) PropInfo[c][pRifle] ++;
                            else if(armaid == 43) PropInfo[c][pCamara] ++;
                            QuitarArma(playerid,armaid);
                            format(string,sizeof(string),"%s coloca su %s en el estante.",PlayerInfo[playerid][Nickname],ArmaNombre2[armaid]);
                            ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                            GuardarPropiedad(c);
                        }
                        else SendClientMessage(playerid,-1,"No tienes esa arma en tus manos.");
                    }
                    else SendClientMessage(playerid,-1,"No hay espacios libres en el estante.");
                }
            }
        }
    }
    return true;
}
CMD:sacar(playerid,params[])
{
    new arma[128],armaid,string[150],cantidad;
    if(!sscanf(params,"s[128]d",arma,cantidad))
    {
        if(strcmp(arma,"medicamentos",true) == 0 || strcmp(arma,"medicamento",true) == 0 || strcmp(arma,"remedio",true) == 0 || strcmp(arma,"remedios",true) == 0) armaid = 100;
        if(strcmp(arma,"crack",true) == 0) armaid = 200;
        if(strcmp(arma,"crack",true) == 0) armaid = 300;
    }
    else if(!sscanf(params,"s[128]",arma))
    {
        if(strcmp(arma,"manopla",true) == 0) armaid = 1;
        if(strcmp(arma,"palo-de-golf",true) == 0) armaid = 2;
        if(strcmp(arma,"cuchillo",true) == 0) armaid = 4;
        if(strcmp(arma,"bate-de-beisbol",true) == 0) armaid = 5;
        if(strcmp(arma,"pala",true) == 0) armaid = 6;
        if(strcmp(arma,"palo-de-billar",true) == 0) armaid = 7;
        if(strcmp(arma,"katana",true) == 0) armaid = 8;
        if(strcmp(arma,"consolador-rosa",true) == 0) armaid = 10;
        if(strcmp(arma,"vibrador-blanco",true) == 0) armaid = 11;
        if(strcmp(arma,"gran-vibrador-blanco",true) == 0) armaid = 12;
        if(strcmp(arma,"vibrador-plateado",true) == 0) armaid = 13;
        if(strcmp(arma,"ramo-de-flores",true) == 0) armaid = 14;
        if(strcmp(arma,"baston",true) == 0) armaid = 15;
        if(strcmp(arma,"granada",true) == 0) armaid = 16;
        if(strcmp(arma,"9mm",true) == 0) armaid = 22;
        if(strcmp(arma,"9mm-silenciada",true) == 0) armaid = 23;
        if(strcmp(arma,"desert-eagle",true) == 0 || strcmp(arma,"dk",true) == 0) armaid = 24;
        if(strcmp(arma,"escopeta-de-madera",true) == 0 || strcmp(arma,"escopeta",true) == 0) armaid = 25;
        if(strcmp(arma,"escopeta-de-combate",true) == 0 || strcmp(arma,"edc",true) == 0) armaid = 27;
        if(strcmp(arma,"MP5",true) == 0) armaid = 29;
        if(strcmp(arma,"AK-47",true) == 0) armaid = 30;
        if(strcmp(arma,"M4",true) == 0) armaid = 31;
        if(strcmp(arma,"rifle",true) == 0) armaid = 33;
        if(strcmp(arma,"camara",true) == 0) armaid = 43;
        if(strcmp(arma,"caramelos",true) == 0 || strcmp(arma,"caramelo",true) == 0) armaid = 666;
    	if(armaid == 300)
        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PropInfo[c][pMarihuana] >= cantidad)
                    {
                        PropInfo[c][pMarihuana] -= cantidad;
                        PlayerInfo[playerid][pMarihuana] += cantidad;
                        AccionesRol(playerid,"toma marihuana del estante.", 20);
                        GuardarPropiedad(c);
                    }
                    else SendClientMessage(playerid,-1,"No hay esa cantidad de marihuana en el estante.");
                }
            }
        }
    }
    if(armaid == 666)
    {
        if(HallX == true)
        {
            new hora, minuto, segundo,anio, mes, dia;
            getdate(anio, mes, dia);
            gettime(hora, minuto, segundo);
            if(IsPlayerInRangeOfPoint(playerid, 2.0,1692.5258, -1974.1092, 8.7722))
            {
                if(Halloween[playerid][P1Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P1Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-1715.1521, -40.6276, 3.4822))
            {
                if(Halloween[playerid][P2Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P2Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, 155.1109, -288.0634, 1.5656))
            {
                if(Halloween[playerid][P3Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P3Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2672.5023, 1372.1165, 7.1026))
            {
                if(Halloween[playerid][P4Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P4Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2545.7396, 1214.4541, 37.3694))
            {
                if(Halloween[playerid][P5Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P5Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2354.7189, -644.4589, 128.0773))
            {
                if(Halloween[playerid][P6Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P6Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2671.1478, 229.4940, 4.2891))
            {
                if(Halloween[playerid][P7Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P7Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2748.5333, 197.2070, 7.0754))
            {
                if(Halloween[playerid][P8Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P8Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,2185.3937, -1344.2394, 23.9319))
            {
                if(Halloween[playerid][P9Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P9Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2488.6890, -717.7959, 139.2878))
            {
                if(Halloween[playerid][P10Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P10Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2488.7308, 2357.1545, 10.2017))
            {
                if(Halloween[playerid][P11Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P11Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1315.2464, 2509.3848, 87.0095))
            {
                if(Halloween[playerid][P12Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P12Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,2108.2594, 2204.7161, 10.7878))
            {
                if(Halloween[playerid][P13Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P13Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,1034.1938, 2096.8608, 10.7878))
            {
                if(Halloween[playerid][P14Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P14Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1099.9021, 1400.0367, 6.6603))
            {
                if(Halloween[playerid][P15Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P15Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,964.6849, -1543.4922, 13.6514))
            {
                if(Halloween[playerid][P16Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P16Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,324.9424, -1756.0784, 4.5136))
            {
                if(Halloween[playerid][P17Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P17Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-345.8416, -1034.4823, 59.2600))
            {
                if(Halloween[playerid][P18Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P18Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2814.3001, -1529.5759, 140.7513))
            {
                if(Halloween[playerid][P19Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P19Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2624.9660, 2417.4382, 10.7278))//
            {
                if(Halloween[playerid][P20Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P20Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,2112.8735, 2737.5784, 10.7278))//
            {
                if(Halloween[playerid][P21Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P21Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,420.8861, 2543.9834, 16.3283))//
            {
                if(Halloween[playerid][P22Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P22Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-277.8821, 2655.0178, 62.6441))//
            {
                if(Halloween[playerid][P23Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P23Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1477.1939, 2613.2195, 58.6888))//
            {
                if(Halloween[playerid][P24Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P24Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-1846.1910, 1280.7598, 22.4700))//
            {
                if(Halloween[playerid][P25Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P25Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2107.0678, -1940.3813, 13.4744))//
            {
                if(Halloween[playerid][P26Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P26Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2128.0990, 260.6922, 35.7667))//
            {
                if(Halloween[playerid][P27Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P27Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-1360.2823, 16.2454, 6.2434))//
            {
                if(Halloween[playerid][P28Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P28Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2219.8267, -145.8122, 35.2278))//
            {
                if(Halloween[playerid][P29Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P29Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,-50.6244, -1397.8488, 2.2814))//
            {
                if(Halloween[playerid][P30Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P30Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,1703.4247, -1870.5588, 13.7403))//
            {
                if(Halloween[playerid][P31Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P31Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0,2025.7420, -1780.4427, 13.4544))//
            {
                if(Halloween[playerid][P32Hora]> gettime()) return SendClientMessage(playerid,-1,"Ya recibiste tus dulces diarios de este puesto, regresa mañana.");
                Halloween[playerid][P32Hora] = gettime() + 86400; DarCaramelos(playerid);
            }
            else return SendClientMessage(playerid,-1,"Los caramelos se consiguen únicamente en los puestos de Halloween.");
            return 1;
        }
        else SendClientMessage(playerid,-1,"El evento de Halloween comienza en la noche del 31 de octubre.");
    }
    if(armaid == 100)
    {
        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PropInfo[c][pMedicamentos] >= cantidad)
                    {
                        PropInfo[c][pMedicamentos] -= cantidad;
                        PlayerInfo[playerid][pMedicamentos] += cantidad;
                        AccionesRol(playerid,"toma medicamentos del estante.", 20);
                        GuardarPropiedad(c);
                    }
                    else SendClientMessage(playerid,-1,"No hay esa cantidad de medicamentos en el estante.");
                }
            }
        }
    }
    else if(armaid == 200)
    {
        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PropInfo[c][pTranquilizantes] >= cantidad)
                    {
                        PropInfo[c][pTranquilizantes] -= cantidad;
                        PlayerInfo[playerid][pTranquilizantes] += cantidad;
                        AccionesRol(playerid,"toma tranquilizantes del estante.", 20);
                        GuardarPropiedad(c);
                    }
                    else SendClientMessage(playerid,-1,"No hay esa cantidad de tranquilizantes en el estante.");
                }
            }
        }
    }
    else if(armaid == 300)
    {
        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(PropInfo[c][pCrack] >= cantidad)
                    {
                        PropInfo[c][pCrack] -= cantidad;
                        PlayerInfo[playerid][pCrack] += cantidad;
                        AccionesRol(playerid,"toma gramos de crack del estante.", 20);
                        GuardarPropiedad(c);
                    }
                    else SendClientMessage(playerid,-1,"No hay esa cantidad de crack en el estante.");
                }
            }
        }
    }
    else if(armaid != 0 && armaid != 200 && armaid != 100)
    {
        if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
        if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
        {
            for(new c; c < MAX_PROPIEDADES; c++)
            {
                if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
                {
                    if(SiRoperoTiene(c,armaid))
                    {
                        if(armaid == 1) PropInfo[c][pManopla] --;
                        else if(armaid == 2) PropInfo[c][pPaloDeGolf] --;
                        else if(armaid == 4) PropInfo[c][pCuchillo] --;
                        else if(armaid == 5) PropInfo[c][pBateDeBeisbol] --;
                        else if(armaid == 6) PropInfo[c][pPala] --;
                        else if(armaid == 7) PropInfo[c][pPaloDeBillar] --;
                        else if(armaid == 8) PropInfo[c][pKatana] --;
                        else if(armaid == 10) PropInfo[c][pConsoladorRosa] --;
                        else if(armaid == 11) PropInfo[c][pVibradorBlanco] --;
                        else if(armaid == 12) PropInfo[c][pGranVibradorBlanco] --;
                        else if(armaid == 13) PropInfo[c][pVibradorPlateado] --;
                        else if(armaid == 14) PropInfo[c][pFlores] --;
                        else if(armaid == 15) PropInfo[c][pBaston] --;
                        else if(armaid == 16) PropInfo[c][pGranada] --;
                        else if(armaid == 22) PropInfo[c][p9mm] --;
                        else if(armaid == 23) PropInfo[c][p9mmSilenciada] --;
                        else if(armaid == 24) PropInfo[c][pDesertEagle] --;
                        else if(armaid == 25) PropInfo[c][pEscopetaNormal] --;
                        else if(armaid == 27) PropInfo[c][pEscopetaDeCombate] --;
                        else if(armaid == 29) PropInfo[c][pMP5] --;
                        else if(armaid == 30) PropInfo[c][pAK47] --;
                        else if(armaid == 31) PropInfo[c][pM4] --;
                        else if(armaid == 33) PropInfo[c][pRifle] --;
                        else if(armaid == 43) PropInfo[c][pCamara] --;
                        DarArma(playerid,armaid);
                        format(string,sizeof(string),"%s toma un/una %s del estante.",PlayerInfo[playerid][Nickname],ArmaNombre2[armaid]);
                        ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        GuardarPropiedad(c);
                    }
                    else SendClientMessage(playerid,-1,"No hay esa arma en el estante.");
                }
            }
        }
    }
    return true;
}
CMD:garaje(playerid,params[])
{
    for(new p=1; p < MAX_PROPIEDADES; p++)
    {
        if(PropInfo[p][pEnUso] == 1 && GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
        {
            if(PropInfo[p][pInterior] == 43) return 1;
            if(PropInfo[p][pGX] != 0) SetPosEx(playerid, 300.3367,311.7175,999.1484,0.0, 4, PropInfo[p][pVW], 0);
            else SendClientMessage(playerid,-1,"Esta propiedad no tiene garaje.");
        }
    }
    return true;
}
CMD:retirar(playerid,params[])
{
    new item[32],id,string[250];
    if(!sscanf(params,"s[32]d",item,id))
    {
        if(strcmp(item,"vehiculo", true)==0)
        {
            if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
            {
                new inte = GetVehicleInterior(id), vw = GetVehicleVirtualWorld(id);
                if(inte == 13 && vw == 1)
                {
                    format(string,sizeof(string),"Retiraste el vehiculo %d del salón de eventos.", id);
                    SendClientMessage(playerid,-1, string);
                    format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} retiro el vehiculo {DBED15}%s{FFFFFF} del salón de eventos.", PlayerInfo[playerid][Nickname], id);
                    MandarMensajeSalon(string, playerid);
                    SetVehiclePassengersInteriorEx(id, 0);
                    SetVehiclePassengersVWEx(id, 0);
                    SetVehiclePosEx(id, 1410.2614,-1237.0621,13.3828);
                    SetVehicleZAngle(id,177.9267);
                }
                else return SendClientMessage(playerid,-1,"Ese vehiculo no se encuentra en el salón de eventos.");
            }
        }
    }
    else return SendClientMessage(playerid,-1,"Escribe {DBED15}/retirar vehiculo [{DBED15}ID{FFFFFF}]");
    return 1;
}
CMD:dar(playerid,params[])
{
    new id,cantidad,acount=0,Float:x,Float:y,Float:z,string[256],item[15],item2[15];
    if(Tiempos[playerid][TiempoDarDinero] > gettime())
    {
        if(Tiempos[playerid][TiempoDarDinero] - gettime() > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(Tiempos[playerid][TiempoDarDinero] - gettime())/60, (Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
        else if(Tiempos[playerid][TiempoDarDinero] - gettime() < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos",(Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
        return SendClientMessage(playerid, -1,string);
    }
    if(!sscanf(params,"s[15]dd",item,id,cantidad))
    {
        if(strcmp(item,"microfono", true)==0)
        {
            if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
            if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
            if(IsPlayerConnected(id))
            {
                if(ProxDetectorS(5.0, playerid, id))
                {
                    if(TieneMicrofono[id] == Emisoras[playerid][CabinaOcupada]) return SendClientMessage(playerid, COLOR_WHITE, "Ya le habias prestado un micrófono a ese jugador.");
                    format(string, sizeof(string), "%s le presta un micrófono a %s.",PlayerInfo[playerid][Nickname], PlayerInfo[id][Nickname]);
                    ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    TieneMicrofono[id] = Emisoras[playerid][CabinaOcupada];
                }   else SendClientMessage(playerid, -1, "Ese jugador esta lejos.");
            }   else SendClientMessage(playerid, -1, "Ese jugador esta desconectado.");
        }
        if(strcmp(item,"dinero", true)==0)
        {
			if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Necesitas ser nivel 6 para dar dinero.");
            if(IsPlayerConnected(id)) GetPlayerPos(id, x,y,z);
            if(PlayerInfo[playerid][pDinero] < cantidad) return SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero en tu billetera.");
            if(id == playerid) return 1;
            if(cantidad > 0 && cantidad < 5000000)
            {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
                {
                    new day,month,year,Query[200];
                    getdate(year,month,day);
                    DarDinero(id, cantidad);
                    QuitarDinero(playerid, cantidad);
                    AccionesRol(playerid,"saca dinero de su billetera.", 20);
                    format(string, sizeof(string), "%s{FFFFFF} te acaba de dar {00CC00}$%d",PlayerInfo[playerid][Nickname],cantidad);
                    SendClientMessage(id,COLOR_AZUL,string);
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, comprador,fecha) VALUES ('%e','Dinero', '%d','%e','%02d/%02d/%02d')",PlayerInfo[playerid][Nickname],cantidad,PlayerInfo[id][Nickname],day,month,year);
                    mysql_tquery(handle_db, Query);
                    return 1;
                }
                else return SendClientMessage(playerid,-1,"No estas cerca de ese jugador.");
            }
            else return SendClientMessage(playerid,-1,"Cantidad invalida.");
        }
    }
    if(!sscanf(params,"s[15]d",item,id))
    {
        if(strcmp(item,"acceso",true) == 0)
        {
            if(Alquilado == false) return 1;
            if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 0)
            {
                if(IsPlayerConnected(id))
                {
                    if(EnSalonEvento(id) || EnSalonEvento2(id))
                    {
                        if(PermisoSalon[id] == false)
                        {
                            PermisoSalon[id] = true;
                            format(string,sizeof(string),"Le diste acceso al salón a {F6F61D}%s{FFFFFF}, escribe {F6F61D}/quitar acceso{FFFFFF} [id] para quitarle el acceso.",PlayerInfo[id][Nickname]);
                            SendClientMessage(playerid,-1,string);
                            format(string,sizeof(string),"Recibiste una tarjeta de acceso al salón, escribe {F6F61D}/ayuda salon{FFFFFF} para recibir información.");
                            SendClientMessage(id,-1,string);
                            return 1;
                        }
                        else SendClientMessage(playerid,-1,"Ya le diste el acceso a esa persona.");
                    }
                    else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
                }
                else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
            }
            else SendClientMessage(playerid,-1,"Para darle acceso a otra persona, tienes que ser el responsable del alquiler del salón.");
        }
        if(strcmp(item,"sprunk",true) == 0)
        {
            if(ProxDetectorS(5.0, playerid, id))
            {
                if(TieneSprunk[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes un vaso de sprunk.");
                if(IsPlayerNPC(id)) return 1;
                new cantidadd[10];
                switch(TieneSprunk[playerid])
                {
                    case 5: cantidadd = "500"; case 4: cantidadd = "400";
                    case 3: cantidadd = "300"; case 2: cantidadd = "200";
                    case 1: cantidadd = "100";
                }
                new stringas[128],string2[128];
                format(stringas, sizeof(stringas), "Le ofreciste un vaso de Sprunk con %s ml a {00CCFF}%s",cantidadd, PlayerInfo[playerid][Nickname]);
                SendClientMessage(playerid,-1,stringas);
                format(string2, sizeof(string2), "{00CCFF}%s{FFFFFF} te ofrece un vaso de sprunk con %s ml, para aceptar usa {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname], cantidadd);
                SendClientMessage(id,-1,string2);
                SprunkOfrecido[id] = TieneSprunk[playerid];
                TipoOferta[id] = 4;
                Ofertante[id] = playerid;
            }
            else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
        }
        if(strcmp(item,"vino",true) == 0)
        {
            if(ProxDetectorS(5.0, playerid, id))
            {
                if(TieneVino[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes un vaso de sprunk.");
                if(IsPlayerNPC(id)) return 1;
                new cantidadd[10];
                switch(TieneVino[playerid])
                {
                    case 5: cantidadd = "500"; case 4: cantidadd = "400";
                    case 3: cantidadd = "300"; case 2: cantidadd = "200";
                    case 1: cantidadd = "100";
                }
                new stringas[128],string2[128];
                format(stringas, sizeof(stringas), "Le ofreciste una copa de vino con %s ml a {00CCFF}%s",cantidadd, PlayerInfo[playerid][Nickname]);
                SendClientMessage(playerid,-1,stringas);
                format(string2, sizeof(string2), "{00CCFF}%s{FFFFFF} te ofrece una copa de vino con %s ml, para aceptar usa {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname], cantidadd);
                SendClientMessage(id,-1,string2);
                SprunkOfrecido[id] = TieneVino[playerid];
                TipoOferta[id] = 5;
                Ofertante[id] = playerid;
            }
            else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
        }
        if(strcmp(item,"cerveza",true) == 0)
        {
            if(ProxDetectorS(5.0, playerid, id))
            {
                if(TieneCerveza[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes una cerveza.");
                if(IsPlayerNPC(id)) return 1;
                new cantidadd[10];
                switch(TieneCerveza[playerid])
                {
                    case 5: cantidadd = "500"; case 4: cantidadd = "400";
                    case 3: cantidadd = "300"; case 2: cantidadd = "200";
                    case 1: cantidadd = "100";
                }
                new stringas[128],string2[128];
                format(stringas, sizeof(stringas), "Le ofreciste una cerveza con %s ml a {00CCFF}%s",cantidadd, PlayerInfo[playerid][Nickname]);
                SendClientMessage(playerid,-1,stringas);
                format(string2, sizeof(string2), "{00CCFF}%s{FFFFFF} te ofrece una cerveza con %s ml, para aceptar usa {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname], cantidadd);
                SendClientMessage(id,-1,string2);
                SprunkOfrecido[id] = TieneCerveza[playerid];
                TipoOferta[id] = 6;
                Ofertante[id] = playerid;
            }
            else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
        }
    }
    if(!sscanf(params,"s[15]s[15]",item,item2))
    {
        if(strcmp(item,"acceso",true) == 0)
        {
            if(Alquilado == false) return 1;
            if(strcmp(Alquilador,PlayerInfo[playerid][Nickname],true) == 0)
            {
                foreach(new i : Player)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(strcmp(item2,PlayerInfo[i][Nickname],true) == 0)
                        {
                            if(EnSalonEvento(i) || EnSalonEvento2(i))
                            {
                                if(PermisoSalon[i] == false)
                                {
                                    PermisoSalon[i] = true;
                                    acount++;
                                    format(string,sizeof(string),"Le diste acceso al salón a {F6F61D}%s{FFFFFF}, escribe {F6F61D}/quitar acceso{FFFFFF} [id] para quitarle el acceso.",PlayerInfo[id][Nickname]);
                                    SendClientMessage(playerid,-1,string);
                                    format(string,sizeof(string),"Recibiste una tarjeta de acceso al salón, escribe {F6F61D}/ayuda salon{FFFFFF} para recibir información.");
                                    SendClientMessage(i,-1,string);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"Ya le diste el acceso a esa persona.");
                            }
                            else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
                        }
                    }
                }
                if(acount == 0) return SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
            }
            else SendClientMessage(playerid,-1,"No tienes permiso para dar acceso.");
        }
    }
    return 1;
}
CMD:quitar(playerid,params[])
{
    new opcion[15],id,string[147],naame[MAX_PLAYER_NAME],opcion2[40],naame2[MAX_PLAYER_NAME],acount=0;
    new jugadorid, seleccion[32];
    if(!sscanf(params,"s[15]d",opcion,id))
    {
        if(strcmp(opcion,"acceso",true) == 0)
        {
            if(Alquilado == false) return 1;
            if(strcmp(Alquilador,naame,true) == 0 || PermisoSalon[playerid] == true)
            {
                if(IsPlayerConnected(id))
                {
                    if(EnSalonEvento(id) || EnSalonEvento2(id))
                    {
                        if(PermisoSalon[id] == true)
                        {
                            GetPlayerName(id,naame2,sizeof(naame2));
                            if(strcmp(naame2,Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes quitarle el acceso a esa persona.");
                            PermisoSalon[id] = false;
                            format(string,sizeof(string),"Le quitaste el acceso al salón a {F6F61D}%s [%d]{F6F61D}.",PlayerInfo[playerid][Nickname],id);
                            SendClientMessage(playerid,-1,string);
                            format(string,sizeof(string),"Te quitaron tu acceso, ya no tendras los beneficios de la tarjeta.");
                            SendClientMessage(id,-1,string);
                            return 1;
                        }
                        else SendClientMessage(playerid,-1,"Ese jugador no tiene acceso al salón.");
                    }
                    else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
                }
                else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
            }
            else SendClientMessage(playerid,-1,"No tienes permiso para quitar acceso.");
        }
    }
    if(!sscanf(params,"s[15]s[40]",opcion,opcion2))
    {
        if(strcmp(opcion,"acceso",true) == 0)
        {
            if(Alquilado == false) return 1;
            if(strcmp(Alquilador,naame,true) == 0)
            {
                foreach(new i : Player)
                {
                    if(IsPlayerConnected(i))
                    {
                        GetPlayerName(i,naame2,sizeof(naame2));
                        if(strcmp(opcion2,naame2,true) == 0 || PermisoSalon[playerid] == true)
                        {
                            if(EnSalonEvento(i) || EnSalonEvento2(i))
                            {
                                if(PermisoSalon[i] == true)
                                {
                                    if(strcmp(naame2,Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes quitarle el acceso a esa persona.");
                                    PermisoSalon[i] = false;
                                    acount++;
                                    format(string,sizeof(string),"Le quitaste el acceso al salón a {F6F61D}%s [%d]{F6F61D}.",PlayerInfo[playerid][Nickname],i);
                                    SendClientMessage(playerid,-1,string);
                                    format(string,sizeof(string),"Te quitaron tu acceso, ya no tendras los beneficios de la tarjeta.");
                                    SendClientMessage(id,-1,string);
                                    return 1;
                                }
                                else SendClientMessage(playerid,-1,"Ese jugador no tiene acceso al salón.");
                            }
                            else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
                        }
                    }
                }
                if(acount == 0) return SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
            }
            else SendClientMessage(playerid,-1,"No tienes permiso para quitar acceso.");
        }
    }
    else if(!sscanf(params, "s[32]u", seleccion, jugadorid))
    {
        if(strcmp(seleccion,"microfono",true) == 0)
        {
            if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
            if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
            if(IsPlayerConnected(jugadorid))
            {
                if(ProxDetectorS(5.0, playerid, jugadorid))
                {
                    if(TieneMicrofono[jugadorid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no tiene micrófono.");
                    format(string, sizeof(string), "%s le quito el micrófono a %s.", PlayerInfo[playerid][Nickname], PlayerInfo[jugadorid][Nickname]);
                    ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    TieneMicrofono[jugadorid] = -1;
                }
                else SendClientMessage(playerid, COLOR_WHITE, "Ese jugador esta lejos.");
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Ese jugador esta desconectado.");
        }
    }
    return true;
}
CMD:cubrir(playerid,params[])
{
    new id,precio,Float:x,Float:y,Float:z,string[256];
    if(PlayerInfo[playerid][pTrabajo] != T_Guardaespaldas && PlayerInfo[playerid][pTrabajo2] != T_Guardaespaldas) return SendClientMessage(playerid,-1,"Solamente los guardaespaldas pueden vender protección. Usa {DBED15}/ayuda trabajos {FFFFFF} para más información.");
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0 || VariableCaido[playerid] == 1) return 1;
    if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes hacer esto en combate, espera unos segundos y reintenta.");
    if(!sscanf(params, "dd", id,precio))
    {
        if(IsPlayerConnected(id))
        GetPlayerPos(id, x,y,z);
        if(id == playerid) return 1;
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, -1, "No estas cerca de este jugador.");
        if(EnCombate[id] == 1) return SendClientMessage(playerid,-1,"No puedes ofrecer chaleco a un jugador que esta en combate.");
        if(precio >=400 && precio <= 1000)
        {
            if(Tiempos[playerid][TiempoCubrir] > gettime())
            {
                SendClientMessage(playerid,-1,"Solamente puedes cubrir a alguien una vez por minuto.");
                MensajeEx(playerid,-1,"Por favor espera {FF0000}%d{FFFFFF} segundos.",Tiempos[playerid][TiempoCubrir] - gettime());
                return 1;
            }
            format(string, 256, "{03C5DF}%s{FFFFFF} te ofrece un chaleco de protección por {2BFF00}$%d{FFFFFF}, para aceptarlo utiliza {DBED15}/aceptar proteccion", PlayerInfo[playerid][Nickname], precio);
            SendClientMessage(id,-1,string);
            Tiempos[playerid][TiempoCubrir] = gettime() + 60;
            GuardaEspalda[id] = playerid;
            SetTimerEx("OfertaPerdida",60000,false,"d",id);
            dineropedido[id] = precio;
        }
        else SendClientMessage(playerid, -1, "No puedes cobrar más de $1000 por cubrir a una persona con tu blindaje.");
    }
    else return SendClientMessage(playerid, -1, "Escribe {DBED15}/cubrir {FFFFFF}<PlayerID> <Precio>");
    return 1;
}
CMD:consumir(playerid,params[])
{
    new item[32];
    if(!sscanf(params, "s[32]", item))
    {
        if(strcmp(item, "crack", true) == 0)
        {
            new Float:resta,Float:Chaleco;
			GetPlayerArmour(playerid, Chaleco);
			resta = 100-Chaleco;
            if(PlayerInfo[playerid][pCrack] <= 0) return SendClientMessage(playerid, -1, "No tienes gramos de crack.");
            if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
            if(Tiempos[playerid][TiempoCrack] - gettime() <= 0)
            {
                if(resta >= 10) SetPlayerArmourEx(playerid, Chaleco+10.0);
				else if(resta < 10) SetPlayerArmourEx(playerid, Chaleco+resta);
                PlayerInfo[playerid][pCrack]--;
                Tiempos[playerid][TiempoCrack] = gettime() + 30;
                LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
                AccionesRol(playerid,"consume un poco de crack.", 20);
                Tiempos[playerid][Consumible] = gettime() + 6;
                RevisarLogro(playerid,4);
            }
            else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir crack.",Tiempos[playerid][TiempoCrack] - gettime());
        }
        else if(strcmp(item, "caramelo", true) == 0 || strcmp(item, "caramelos", true) == 0 || strcmp(item, "dulces", true) == 0)
        {
            if(PlayerInfo[playerid][pCaramelos] <= 0) return SendClientMessage(playerid, -1, "No tienes caramelos para consumir.");
            if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir caramelos en combate.");
            if(Tiempos[playerid][TiempoCaramelos] - gettime() <= 0)
            {
                PlayerInfo[playerid][pCaramelos]--;
                Tiempos[playerid][TiempoCaramelos] = gettime() + 30;
				PlayerInfo[playerid][pHambre] -= 10;
				if(PlayerInfo[playerid][pHambre] < 1) PlayerInfo[playerid][pHambre] = 0;
				if(PlayerInfo[playerid][pBarras] == 1) BarrasFunciones(playerid, 1);
                LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
                AccionesRol(playerid,"come un caramelo.", 20);
                Tiempos[playerid][Consumible] = gettime() + 6;
            }
            else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir un caramelo.",Tiempos[playerid][TiempoCaramelos] - gettime());
        }
        else if(strcmp(item, "medicamento", true) == 0 || strcmp(item, "medicamentos", true) == 0 || strcmp(item, "remedio", true) == 0)
        {
            new Float:resta2,Float:Vida;
			GetPlayerHealth(playerid, Vida);
			resta2 = 100-Vida;
            if(PlayerInfo[playerid][pMedicamentos] < 1) return SendClientMessage(playerid, -1, "Ya no te quedan medicamentos.");
            if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
            if(Tiempos[playerid][TiempoMedicamentos] - gettime() <= 0)
            {
                if(resta2 >= 10) SetPlayerHealthEx(playerid, Vida+10.0);
				else if(resta2 < 10) SetPlayerHealthEx(playerid, Vida+resta2);
                PlayerInfo[playerid][pMedicamentos]--;
                Tiempos[playerid][TiempoMedicamentos] = gettime() + 30;
                LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
                AccionesRol(playerid,"consume un medicamento.", 20);
                Tiempos[playerid][Consumible] = gettime() + 6;
                RevisarLogro(playerid,3);
            }
            else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir medicamentos.",Tiempos[playerid][TiempoMedicamentos] - gettime());
        }
        else if(strcmp(item, "tranquilizante", true) == 0 || strcmp(item, "tranquilizantes", true) == 0)
        {
            new Float:resta2,Float:Vida,Float:resta,Float:Chaleco;
			GetPlayerHealth(playerid, Vida);
			GetPlayerArmour(playerid, Chaleco);
			resta2 = 100-Vida;
			resta = 100-Chaleco;
            if(PlayerInfo[playerid][pTranquilizantes] < 1) return SendClientMessage(playerid, -1, "Ya no te quedan tranquilizantes.");
            if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
            if(Tiempos[playerid][TiempoTranquilizantes] - gettime() <= 0)
            {
                if(resta2 >= 15) SetPlayerHealthEx(playerid, Vida+15.0);
				else if(resta2 < 15) SetPlayerHealthEx(playerid, Vida+resta2);
    			if(resta >= 15) SetPlayerArmourEx(playerid, Chaleco+15.0);
				else if(resta < 15) SetPlayerArmourEx(playerid, Chaleco+resta);
                PlayerInfo[playerid][pTranquilizantes]--;
                Tiempos[playerid][TiempoTranquilizantes] = gettime() + 30;
                LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
                AccionesRol(playerid,"consume un tranquilizante.", 20);
                Tiempos[playerid][Consumible] = gettime() + 6;
                RevisarLogro(playerid,3);
            }
            else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir tranquilizantes.",Tiempos[playerid][TiempoTranquilizantes] - gettime());
        }
        else SendClientMessage(playerid,-1,"Escribe {DBED15}/consumir {FFFFFF}<Nombre>");
    }
    return 1;
}
CMD:banda(playerid)
{
    if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid, -1,"No perteneces a una banda.");
    if(PlayerInfo[playerid][pRango] == 8) return ShowDialog(playerid, CONFIG_BANDA);
    else ShowDialog(playerid, CREW_VIEW_MEMBERS);
    return 1;
}
CMD:invitaciones(playerid)
{
    new Query[150],dialog[115 * 15 + 1], line_str[115], count = -1;
    if(PlayerInfo[playerid][pFaccion] != 0) return SendClientMessage(playerid,-1,"No puedes ver tus invitaciones si eres miembro de una organización.");
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s'",PlayerInfo[playerid][Nickname]);
    mysql_query(handle_db, Query, true);
    dialog = "ID\tLider\tNombre\n";
    for(new i = 0; i < cache_num_rows(); i++)
    {
        if(count == 14) break;
        new content[20],BANDA_ID,ID;
        cache_get_value_name(i, "BandaID", content);    BANDA_ID = strval(content);
        cache_get_value_name(i, "ID", content);         ID = strval(content);
        PlayerTemp[playerid][p_INVITACIONES][i] = BANDA_ID;
        PlayerTemp[playerid][p_INVITACIONES_ID][i] = ID;
        format(line_str, sizeof line_str, "%d.\t%s\t%s\n", i + 1, BandasInfo[BANDA_ID][BLider],BandasInfo[BANDA_ID][BNombre]);
        strcat(dialog, line_str);
        count = i;
    }
    if(count == -1) return SendClientMessage(playerid,-1,"No tienes invitaciones pendientes.");
    else
    {
        strcat(dialog, "{c4290d}Eliminar todo\n");
        PlayerTemp[playerid][p_INVITACIONES][count+1] = -1;
    }
    ShowPlayerDialog(playerid, MENU_INVITACIONES, DIALOG_STYLE_TABLIST_HEADERS, "Menu Invitaciones", dialog, "Seleccionar", "Salir");
    return 1;
}
CMD:invitar(playerid, params[])
{
    if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No eres miembro de ninguna banda.");
    if(PuedeInvitar(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para invitar personas a la banda.");
    new ID;
    if(sscanf(params, "u", ID)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/invitar {FFFFFF}<PlayerID>");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,-1,"El jugador está desconectado.");
    if(ID == playerid) return SendClientMessage(playerid,-1,"No te puedes hacer esto.");
    new Float:pos[3]; GetPlayerPos(ID, pos[0], pos[1], pos[2]);
    if(!IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid,-1,"Este jugador no está cerca tuyo.");
    if(PlayerInfo[ID][pFaccion] > 0) return SendClientMessage(playerid,-1,"Este jugador ya se encuentra en una Banda.");
    new banda = PlayerInfo[playerid][pFaccion];
    if(BandasInfo[banda][BIntegrantes] >= 40) return SendClientMessage(playerid,-1,"La banda ya tiene el maximo de integrantes {EE0000}(40)");
    new Query[250];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s' AND `BandaID`='%d'",PlayerInfo[ID][Nickname],banda);
    new Cache:result = mysql_query(handle_db, Query, true);
    if(cache_num_rows())
    {
        cache_delete(result);
        return SendClientMessage(playerid,-1,"El usuario ya ha sido invitado para esta banda.");
    }
    else
    {
        mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `invitaciones`(`Invitador`, `Invitado`, `BandaID`) VALUES ('%s', '%s', '%d');",PlayerInfo[playerid][Nickname], PlayerInfo[ID][Nickname], PlayerInfo[playerid][pFaccion]);
        mysql_query(handle_db, Query, false);
        cache_delete(result);
        MensajeEx(playerid,-1,"Invitaste a {33CCFF}%s {FFFFFF}a la banda, espera a que acepte.", PlayerInfo[ID][Nickname]);
        MensajeEx(ID,-1,"Te han ofrecido unirte a {33CCFF}%s{FFFFFF}, Para unirte utiliza {DBED15}/invitaciones", BandasInfo[banda][BNombre]);
    }
    return 1;
}
CMD:ascender(playerid,params[])
{
    if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda");
    new pName[32],pSub[32];
    GetPlayerName(playerid, pName, 32);
    if(PlayerInfo[playerid][pFaccion] > 0)
    {
        new id,rango,string[256];
        if(PuedeAscDes(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para ascender/desender personas a la banda.");
        if(sscanf(params, "dd",id,rango)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/ascender {FFFFFF}<PlayerID> <Rango 1-8>");
        if(PlayerInfo[id][pFaccion] != PlayerInfo[playerid][pFaccion]) return SendClientMessage(playerid,-1,"Este jugador no es miembro de tu facción");
        if(id == playerid) return SendClientMessage(playerid,-1,"No puedes modificar tu propio rango.");
        if(rango <= 0 || rango >= 9) return SendClientMessage(playerid, -1, "Escribe {DBED15}/ascender {FFFFFF}<PlayerID> <Rango 1-8>");
        else if(rango == 8)
        {
            PlayerInfo[id][pFaccion] = PlayerInfo[playerid][pFaccion];
            PlayerInfo[id][pRango] = 8;
            PlayerInfo[playerid][pRango] = 1;
        }
        else
        {
            GetPlayerName(id, pSub, 32);
            if(PlayerInfo[id][pRango] == 8) return SendClientMessage(playerid,-1,"A este jugador no le puedes cambiar el rango.");
            if(PlayerInfo[playerid][pFaccion] == 1)
            {
                format(string,256,"{009BE4}%s{FFFFFF} cambió el rango de {009BE4}%s{FFFFFF} a {DBED15}%s",pName,pSub,RangoBanda(PlayerInfo[playerid][pFaccion], rango));
                SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
                PlayerInfo[id][pRango] = rango;
            }
            else
            {
                format(string,256,"{%06x}%s{FFFFFF} cambió el rango de {%06x}%s{FFFFFF} a {%06x}%s",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, pName,BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, pSub, BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, RangoBanda(PlayerInfo[playerid][pFaccion], rango));
                SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
                PlayerInfo[id][pRango] = rango;
            }
        }
    }
    return 1;
}
CMD:despediroff(playerid,params[])
{
    if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda.");
    if(PlayerInfo[playerid][pRango] != 8) return SendClientMessage(playerid,-1,"Solo el dueño puede ocupar este comando.");
    new ID[32],string[256],Query[200],pName[32];
    GetPlayerName(playerid, pName, 32);
    if(!sscanf(params,"s[32]",ID))
    {
        mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username`='%s' AND `Faccion`='%d'",ID,PlayerInfo[playerid][pFaccion]);
        mysql_query(handle_db, Query, true);
        if(cache_num_rows())
        {
            if(PlayerInfo[playerid][pFaccion] == 1)
            {
                format(string, 200, "{009BE4}%s {FFFFFF}fué expulsado de la banda por {009BE4}%s",ID,PlayerInfo[playerid][Nickname]);
                SendRadioPoliceMessage(-1, string);
            }
            else
            {
                format(string, 200, "{%06x}%s{FFFFFF} fué expulsado de la banda por {%06x}%s",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, ID, BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, PlayerInfo[playerid][Nickname]);
                SendRadioMessage(PlayerInfo[playerid][pFaccion], 0xff9c00FF, string);
            }
            mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Faccion`='0',`Rango`='0',`Duty`='0' WHERE `Username`='%s'",ID);
            mysql_query(handle_db, Query, true);
        }
        else SendClientMessage(playerid,-1,"Este usuario no se encuentra en tu faccion.");
    }
    else return SendClientMessage(playerid,-1,"Escribe {DBED15}/despediroff {FFFFFF}<Nombre_Apellido>");
    return 1;
}

CMD:despedir(playerid,params[])
{
    if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda");
    if(PuedeExpulsar(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para sacar personas a la banda.");
    new id,string[128],pName[32],pSub[32];
    GetPlayerName(playerid, pName, 32);
    if(!sscanf(params,"d",id))
    {
        if(id == playerid) return 1;
        if(PlayerInfo[id][pFaccion] != PlayerInfo[playerid][pFaccion]) return SendClientMessage(playerid,-1,"Este jugador no pertenece a tu facción");
        if(PlayerInfo[id][pRango] == 8) return SendClientMessage(playerid,-1,"No puedes despedir a este jugador.");
        GetPlayerName(id, pSub, 32);
        if(PlayerInfo[id][pFaccion] == 1)
        {
            format(string, 200, "{009BE4}%s {FFFFFF}fué expulsado de la faccion por {009BE4}%s",PlayerInfo[id][Nickname],PlayerInfo[playerid][Nickname]);
            SendRadioPoliceMessage(-1, string);
        }
        else
        {
            format(string, 200, "{%06x}%s{FFFFFF} fué expulsado de la banda por {%06x}%s",BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, PlayerInfo[id][Nickname], BandasInfo[PlayerInfo[playerid][pFaccion]][BColor] >>> 8, PlayerInfo[playerid][Nickname]);
            SendRadioMessage(PlayerInfo[playerid][pFaccion], -1, string);
        }
        if(PlayerInfo[id][pFaccion] == 1)
        {
            SetPlayerSkin(id, PlayerInfo[id][pRopa]);
            ClearAnimations(id);
        }
        PlayerInfo[id][pFaccion] = 0;
        PlayerInfo[id][pRango] = 0;
        PlayerInfo[id][pDuty] = 0;
        HidePlayerGangZones(id);
    }
    else return SendClientMessage(playerid,-1,"Escribe {DBED15}/despedir {FFFFFF}<PlayerID>");
    return 1;
}
CMD:forzar(playerid, params[])
{
    new item[32];
    if(sscanf(params,"s[32]",item)) return 1;
    if(strcmp(item, "cerradura", true)==0)
    {
        if(PlayerInfo[playerid][pNivel] < 5 && PlayerInfo[playerid][pVip] < 2) return SendClientMessage(playerid,-1,"Necesitas ser nivel 5 o VIP2 para forzar una cerradura.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes hacer esto en un vehículo.");
        if(PlayerInfo[playerid][pNivelLadron] == 1 && PlayerInfo[playerid][pMartillo] == 0) return SendClientMessage(playerid,-1,"Necesitas un martillo.");
        else if(PlayerInfo[playerid][pNivelLadron] == 2 && PlayerInfo[playerid][pBarreta] == 0) return SendClientMessage(playerid,-1,"Necesitas una Barreta.");
        else if(PlayerInfo[playerid][pNivelLadron] >= 3 && PlayerInfo[playerid][pDestornillador] == 0) return SendClientMessage(playerid,-1,"Necesitas un Destornillador.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-2277.1763,-9.9763,38.2523)) if(Forzada1 == 0) MostrarForzarCerradura(playerid,1); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,932.2239,1973.6547,11.6083)) if(Forzada2 == 0) MostrarForzarCerradura(playerid,2); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-2394.6099,-14.3616,35.9529)) if(Forzada3 == 0) MostrarForzarCerradura(playerid,3); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,2373.8467,-1139.5442,30.0510)) if(Forzada4 == 0) MostrarForzarCerradura(playerid,4); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-2727.5435,-50.9449,7.0301)) if(Forzada5 == 0) MostrarForzarCerradura(playerid,5); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-2727.5054,-155.6168,7.2009)) if(Forzada6 == 0) MostrarForzarCerradura(playerid,6); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,1762.8772,-2101.1462,13.9916)) if(Forzada7 == 0) MostrarForzarCerradura(playerid,7); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,2485.1733,-1997.1724,13.9166)) if(Forzada8 == 0) MostrarForzarCerradura(playerid,8); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,1844.5101,770.9579,11.4838)) if(Forzada9 == 0) MostrarForzarCerradura(playerid,9); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,-1448.9193,2647.9514,56.4912)) if(Forzada10 == 0) MostrarForzarCerradura(playerid,10); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,1344.6938,2610.3264,11.5494)) if(Forzada11 == 0) MostrarForzarCerradura(playerid,11); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
        if(IsPlayerInRangeOfPoint(playerid, 2.0,1666.2400, 2610.7400, 10.4000)) if(Forzada12 == 0) MostrarForzarCerradura(playerid,12); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
    }
    return 1;
}
CMD:escapar(playerid,params[])
{
    new escapar = 0;
    if(IsPlayerInRangeOfPoint(playerid,2.5,-2278.8904,-10.3138,38.2993)) escapar = 1;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 932.2437,1975.8787,11.6227)) escapar = 2;
    if(IsPlayerInRangeOfPoint(playerid,2.5, -2396.0010,-13.0565,35.3486)) escapar = 3;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 2373.7302,-1136.8610,30.0583)) escapar = 4;
    if(IsPlayerInRangeOfPoint(playerid,2.5, -2730.4609,-155.6674,7.2174)) escapar = 5;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 2485.0527,-1995.0458,14.0434)) escapar = 7;
    if(IsPlayerInRangeOfPoint(playerid,2.5, -1449.7598,2647.9287,56.5345)) escapar = 8;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 1762.7701,-2098.9631,13.9989)) escapar = 9;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 1841.8738,770.7863,11.5959)) escapar = 10;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 1344.4647,2612.5925,11.5559)) escapar = 11;
    if(IsPlayerInRangeOfPoint(playerid,2.5, 1666.9180,2612.6965,11.5559)) escapar = 12;
    if(IsPlayerInRangeOfPoint(playerid,2.5, -2729.9800,-50.8513,7.0453)) escapar = 13;
    if(escapar > 0)
    {
        NoTeleportHack(playerid);
        if(Objeto[playerid] > 0)
        {
            AccionesRol(playerid,"dejó un objeto en el suelo.", 20);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            RemovePlayerAttachedObject(playerid,4);
            Objeto[playerid] = 0;
        }
        switch(escapar)
        {
            case 1: SetPlayerPosEx(playerid,-2277.1763,-9.9763,38.2523);
            case 2: SetPlayerPosEx(playerid,931.9277,1973.0038,11.3073);
            case 3: SetPlayerPosEx(playerid,-2393.9712,-13.1641,35.3125);
            case 4: SetPlayerPosEx(playerid,2373.8467,-1139.5442,30.0510);
            case 5: SetPlayerPosEx(playerid,-2727.5054,-155.6168,7.2009);
            case 7: SetPlayerPosEx(playerid,2485.1733,-1997.1724,13.9166);
            case 8: SetPlayerPosEx(playerid,-1448.9193,2647.9514,56.4912);
            case 9: SetPlayerPosEx(playerid,1762.8772,-2101.1462,13.9916);
            case 10: SetPlayerPosEx(playerid,1844.5101,770.9579,11.4838);
            case 11: SetPlayerPosEx(playerid,1344.6938,2610.3264,11.5494);
            case 12: SetPlayerPosEx(playerid,1667.0402,2610.3267,11.5494);
            case 13: SetPlayerPosEx(playerid,-2727.9619,-51.2697,7.0297);
        }
        SendClientMessage(playerid,-1,"{00CC00}Lograste salir{FFFFFF} de la casa, escapa de la zona.");
    }
    return 1;
}
CMD:abandonar(playerid,params[])
{
    new item[32];
    if(!sscanf(params, "s[32]", item))
    {
        if(strcmp(item, "carga", true) == 0)
        {
            new autoid = GetPlayerVehicleID(playerid);
            if(PlayerInfo[playerid][pTrabajo] != T_Camionero && PlayerInfo[playerid][pTrabajo2] != T_Camionero) return SendClientMessage(playerid, -1, "No eres camionero");
            if(IsPlayerInAnyVehicle(playerid))
            if(!CAMION(autoid)) return SendClientMessage(playerid, -1, "No estas en un camión");
            if(CamionCargado[autoid] < 1) return SendClientMessage(playerid, -1, "Este camión no esta cargado.");
            Chofer[autoid] = INVALID_PLAYER_ID;
            CamionCargado[autoid]= 0;
            DisablePlayerCheckpoint(playerid);
            TimerCamionero[playerid] = 0;
            Respawnear(autoid);
            SendClientMessage(playerid, -1, "Fallaste en tu trabajo de camionero, no se te pagará nada.");
        }
        if(strcmp(item, "banda",true)==0)
        {
            new string[128], query[200];
            if(PlayerInfo[playerid][pFaccion] != 0 && PlayerInfo[playerid][pRango] == 8) return SendClientMessage(playerid,-1,"No puedes abandonar una banda donde eres el lider.");
            if(PlayerInfo[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No estás en ninguna banda.");
            format(string,128,"{00E1FF}%s{FFFFFF} ha salido de la banda.", PlayerInfo[playerid][Nickname]);
            BandasInfo[PlayerInfo[playerid][pFaccion]-1][BIntegrantes]--;
            mysql_format(handle_db, query, sizeof(query), "UPDATE `facciones` SET `Integrantes`='%d' WHERE `id`='%d'", BandasInfo[PlayerInfo[playerid][pFaccion]-1][BIntegrantes],PlayerInfo[playerid][pFaccion]);
            mysql_pquery(handle_db, query);
            if(PlayerInfo[playerid][pFaccion] == 1)
            {
                SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
                ClearAnimations(playerid);
            }
            PlayerInfo[playerid][pFaccion] = 0;
            PlayerInfo[playerid][pRango] = 0;
            PlayerInfo[playerid][pDuty] = 0;
            HidePlayerGangZones(playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Haz abandonado tu banda correctamente.");
            return 1;
        }
    }
    return 1;
}
CMD:chaleco(playerid, params[])
{
    if(PlayerInfo[playerid][pDuty] != 1) return 1;
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 249.1478,74.3152,1003.6406))
    {
        if(PlayerInfo[playerid][pSexo] == 2) SetPlayerAttachedObject(playerid, 3,19142,1,0.109797,0.053399,-0.002000,0.000000,-2.299998,0.299997,1.046000,0.986998,0.893000);
        SetPlayerArmourEx(playerid, 100);
    }
    return 1;
}
CMD:armas(playerid, params[])
{
	if(PlayerInfo[playerid][pDuty] != 1) return 1;
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 250.4184,73.3132,1003.6406))
	{
	    if(PlayerInfo[playerid][pRango] > 0) DarArma(playerid, 3),DarArma(playerid, 25),DarArma(playerid, 24),DarArma(playerid, 31),DarArma(playerid, 29);
	    if(PlayerInfo[playerid][pRango] > 1) DarArma(playerid, 3),DarArma(playerid, 24),DarArma(playerid, 27),DarArma(playerid, 31),DarArma(playerid, 29);
	}
	return 1;
}
CMD:cargar(playerid,params[])
{
    new item[128];
    if(!sscanf(params,"s[128]", item))
    {
        if(strcmp(item, "camion", true) == 0)
        {
            new autoid;
            if(IsPlayerInAnyVehicle(playerid))
            autoid = GetPlayerVehicleID(playerid);
            if(PlayerInfo[playerid][pTrabajo] != T_Camionero && PlayerInfo[playerid][pTrabajo2] != T_Camionero) return SendClientMessage(playerid,-1,"Necesitas ser camionero para cargar el camión. Para más información, usa {DBED15}/ayuda trabajos");
            {
                if(!IsPlayerInAnyVehicle(playerid)) return 1;
                if(!CAMION(autoid)) return 1;
                {
                    for(new i=0;i<GetVehiclePoolSize();i++)
                    {
                        if(Chofer[i] == playerid && Chofer[i] != INVALID_PLAYER_ID)
                        {
                            Chofer[i] = INVALID_PLAYER_ID;
                            CamionCargado[i] = 0;
                        }
                    }
                    if(CamionCargado[autoid] == 0)
                    {
                        if(CargandoC[playerid] == 0)
                        {
                            SendClientMessage(playerid, -1, "Se ha marcado en el mapa la ubicación donde van a cargar el camión.");
                            MarcadoCamioneroGPS(playerid,-1711.7150,62.1237,3.5495,19.0);
                            Localizando[playerid] = 0;
                        }
                    }
                }
            }
        }
        if(strcmp(item, "tanque", true)==0)
        {
            if(Bidon[playerid] == 0) return SendClientMessage(playerid, -1, "Tu no tienes un bidon de gasolina");
            if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en un vehículo para utilizar el bidon");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar manejando el vehiculo para usar el bidon");
            {

                new autoid = GetPlayerVehicleID(playerid), lleno, resta;
                new modelo = GetVehicleModel(autoid);
                new vehiclefuel = CombustibleCoche(modelo);
                resta = vehiclefuel-VehicleFuel[autoid];
                lleno = vehiclefuel;
                if(VehicleFuel[autoid] == lleno) return SendClientMessage(playerid,-1,"El tanque de combustible está lleno");
                if(resta >= 5)
                {
                    VehicleFuel[autoid] += 5;
                    Bidon[playerid] = 0;
                    SendClientMessage(playerid, -1,"El tanque de combustible fue cargado con el bidón de 5 litros.");
                    RemovePlayerAttachedObject(playerid, 4);
                }
                else if(resta < 5)
                {
                    VehicleFuel[autoid] += resta;
                    Bidon[playerid] = 0;
                    SendClientMessage(playerid, -1,"El tanque de combustible fue cargado con el bidón de 5 litros."); // No hay nada
                    RemovePlayerAttachedObject(playerid, 4);
                }
                SetPlayerProgressBarValue(playerid,Progressbar[playerid][Combustible],VehicleFuel[autoid]);
				UpdatePlayerProgressBar(playerid,Progressbar[playerid][Combustible]);
            }
        }
    }
    return 1;
}
CMD:ofrecer(playerid,params[])
{
    new item[128],string2[200], ID, precio, vehicleid = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0 || VariableCaido[playerid] == 1) return SendClientMessage(playerid,COLOR_WHITE,"No puedes usar este comando en este momento");
    if(Tiempos[playerid][TiempoSexoOfrecido] > gettime()) return MensajeEx(playerid, -1, "Debes esperar %d segundos para volver a ofrecer sexo.",Tiempos[playerid][TiempoSexoOfrecido] - gettime());
    else
    {
        new tipo;
        if(!sscanf(params, "s[128]dd", item,ID,precio)) tipo = 1;
        else if(!sscanf(params, "s[128]d", item,ID)) precio = 0,tipo = 2;
        else return SendClientMessage(playerid, -1, "Usa el comando {DBED15}/ofrecer sexo {FFFFFF}<PlayerID>");
        if(tipo > 0)
        {
            if(strcmp(item, "sexo", true) == 0)
            {
                if(tipo == 1 && precio < 0) return 1;
                if(tipo == 1 && precio > 10000) return SendClientMessage(playerid,-1,"El precio máximo que puedes cobrar es de {00CC00}$10000");
                if(ID == playerid) return 1;
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "El jugador no está conectado");
                if(tipo == 1 && precio > 0 && (PlayerInfo[playerid][pTrabajo] != T_Prostituta && PlayerInfo[playerid][pTrabajo2] != T_Prostituta)) return SendClientMessage(playerid,-1,"Para cobrar tienes que tener el trabajo de prostitución.");
                if(!IsPlayerInVehicle(ID, vehicleid)) return 1;
                if(GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid,-1,"Tienes que estar en el asiento del lado derecho del vehículo.");
                if(GetPlayerVehicleSeat(ID) != 0) return SendClientMessage(playerid,-1,"El otro tiene que estar en el asiento del lado izquierdo del vehículo.");
                if(AVION(vehicleid) || MOTO(vehicleid)) return SendClientMessage(playerid,-1,"Busca un vehículo más discreto.");
                if(tipo == 1) precioofertax[ID] = precio;
                SexoOral[ID] = playerid;
                Tiempos[playerid][TiempoSexoOfrecido] = gettime() + 60;
                MensajeEx(playerid, -1, "Ofreciste practicarle sexo oral a {00CCFF}%s {FFFFFF}por {00CC00}$%d", PlayerInfo[ID][Nickname], precio);
                format(string2, sizeof(string2), "{00CCFF}%s {FFFFFF}quiere practicarte sexo oral por {00CC00}$%d\n¿Quieres aceptar?", PlayerInfo[playerid][Nickname], precio);
                ShowPlayerDialog(ID, DSEXOO, DIALOG_STYLE_MSGBOX,"Oferta de sexo oral", string2, "Si", "No");
                return 1;
            }
        }
    }
    return true;
}
CMD:vender(playerid, params[])
{
    new item[32],ID,precio, stringas[128],cantidad,Float:x,Float:y,Float:z;
    if(Tiempos[playerid][TiempoDarDinero] > gettime())
    {
        if(Tiempos[playerid][TiempoDarDinero] - gettime() > 60) format(stringas,sizeof(stringas),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(Tiempos[playerid][TiempoDarDinero] - gettime())/60, (Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
        else if(Tiempos[playerid][TiempoDarDinero] - gettime()< 60) format(stringas,sizeof(stringas),"Por favor espera {FF0000}%d segundos",(Tiempos[playerid][TiempoDarDinero] - gettime())%(60));
        return SendClientMessage(playerid, -1,stringas);
    }
    if(Tiempos[playerid][TiempoVenta] - gettime() <= 0)
    {
        if(!sscanf(params, "s[32]dd", item,ID,precio))
        {
            new string[256];
            if(strcmp(item, ""SERVER_COIN"", true) == 0)
            {
                GetPlayerPos(ID,x,y,z);
                if(!sscanf(params, "s[29]ddd", item,ID,cantidad,precio))
                if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
				if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Tienes que ser nivel 6 para poder vender");
                if(precio < 125000*cantidad && PlayerInfo[playerid][pNivel] < 5) return SendClientMessage(playerid,-1,"Tendrás que llegar a nivel 5 para vender "SERVER_COIN" por menos de $125.000 c/u");
                if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Persona no encontrada.");
                if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
                if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
                if(PlayerInfo[playerid][Moneda] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de "SERVER_COIN" que quieres vender.");
                if(precio > cantidad*130000) return SendClientMessage(playerid,-1,"No puedes vender a más de $130.000 cada "SERVER_COIN".");
                if(IsPlayerConnected(ID))
                {
                    EVOfrecidos[ID] = cantidad, dineropedido[ID] = precio,  ofertador[ID] = playerid, LeOfreci[playerid] = ID,  Deposito[playerid] = ID;
                    new stringg[512];
                    format(stringg,sizeof(stringg),"{FFFFFF}Estás por ofrecerle {89746A}%d "SERVER_COIN"{FFFFFF} a {00CCFF}%s{FFFFFF} por {00CC00}$%d\n\nCada "SERVER_COIN" lo estarías cobrando a {00CC00}$%d{FFFFFF}\n\n¿Estás seguro de realizar esta transacción?",EVOfrecidos[ID],PlayerInfo[ID][Nickname],dineropedido[ID],dineropedido[ID]/EVOfrecidos[ID]);
                    ShowPlayerDialog(playerid, VENDERBZ, DIALOG_STYLE_MSGBOX, "{DBED15}!ATENCIÓN!", stringg, "Si","No");
                    YaOfrecio[playerid] = 0;
                    if(idTimerOfertaPerdida[ID] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[ID]);
                        idTimerOfertaPerdida[ID] = -1;
                    }
                    if(idTimerTiempoVenta[playerid] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
                    if(precio <= 100)
                    {
                        format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d "SERVER_COIN" por $%d a %s(ID: %d | Nivel: %d)", PlayerInfo[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PlayerInfo[ID][Nickname],ID,GetPlayerScore(ID));
                        MensajeAdmin(COLOR_YELLOW, string, 3);
                    }
                    return 1;
                }
            }
            else if(strcmp(item, "piezas", true) == 0)
            {
                if(!sscanf(params, "s[32]ddd", item,ID,cantidad,precio))
                GetPlayerPos(ID,x,y,z);
                if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
                if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Tienes que ser nivel 6 para poder vender");
                if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
                if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
                if(PlayerInfo[playerid][pMateriales] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de piezas que quieres vender.");
                if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada pieza.");
                if(IsPlayerConnected(ID))
                {
                    format(string, 256, "Le ofreciste %d piezas de armas a {00CCFF}%s{FFFFFF} por {00CC00}$%d",cantidad,PlayerInfo[ID][Nickname],precio);
                    SendClientMessage(playerid, -1,string);
                    PiezasOfrecidas[ID] = cantidad;
                    dineropedido[ID] = precio;
                    ofertador[ID] = playerid;
                    format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece %d piezas de armas por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar piezas", PlayerInfo[playerid][Nickname],cantidad,precio);
                    SendClientMessage(ID, -1, string);
                    Tiempos[playerid][TiempoVenta] = gettime() + 60;
                    if(idTimerOfertaPerdida[ID] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[ID]);
                        idTimerOfertaPerdida[ID] = -1;
                    }
                    idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
                    if(idTimerTiempoVenta[playerid] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
                    if(precio <= 100)
                    {
                        format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d piezas por $%d a %s(ID: %d | Nivel: %d)", PlayerInfo[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PlayerInfo[ID][Nickname],ID,GetPlayerScore(ID));
                        MensajeAdmin(COLOR_YELLOW, string, 3);
                    }
                }
            }
            else if(strcmp(item, "crack", true) == 0)
            {
                if(!sscanf(params, "s[32]ddd", item,ID,cantidad,precio))
                {
                    GetPlayerPos(ID,x,y,z);
                    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
                    if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Tienes que ser nivel 6 para poder vender");
                    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
                    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
                    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
                    if(PlayerInfo[playerid][pCrack] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de crack que quieres vender.");
                    if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada gramo de crack.");
                    if(IsPlayerConnected(ID))
                    {
                        format(string, 256, "Le ofreciste %dg de crack a {00CCFF}%s{FFFFFF} por {00CC00}$%d",cantidad,PlayerInfo[ID][Nickname],precio);
                        SendClientMessage(playerid, -1,string);
                        CrackOfrecidos[ID] = cantidad;
                        dineropedido[ID] = precio;
                        ofertador[ID] = playerid;
                        TipoOferta[ID] = 1;
                        format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece %dg de crack por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname],cantidad,precio);
                        SendClientMessage(ID, -1, string);
                        Tiempos[playerid][TiempoVenta] = gettime() + 60;
                        if(idTimerOfertaPerdida[ID] != -1)
                        {
                            KillTimer(idTimerOfertaPerdida[ID]);
                            idTimerOfertaPerdida[ID] = -1;
                        }
                        idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
                        if(idTimerTiempoVenta[playerid] != -1)
                        {
                            KillTimer(idTimerTiempoVenta[playerid]);
                            idTimerOfertaPerdida[playerid] = -1;
                        }
                        idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
                        if(precio <= 100)
                        {
                            format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d crack por $%d a %s(ID: %d | Nivel: %d)", PlayerInfo[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PlayerInfo[ID][Nickname],ID,GetPlayerScore(ID));
                            MensajeAdmin(COLOR_YELLOW, string, 3);
                        }
                    }
                }
            }
            else if(strcmp(item, "medicamentos", true) == 0 || strcmp(item, "remedio", true) == 0 || strcmp(item, "remedios", true) == 0)
            {
                if(!sscanf(params, "s[32]ddd", item,ID,cantidad,precio))
                {
                    GetPlayerPos(ID,x,y,z);
                    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
                    if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Tienes que ser nivel 6 para poder vender");
                    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
                    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
                    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
                    if(PlayerInfo[playerid][pMedicamentos] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de medicamentos que quieres vender.");
                    if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada medicamento.");
                    if(IsPlayerConnected(ID))
                    {
                        format(string, 256, "Le ofreciste %d medicamentos a {00CCFF}%s{FFFFFF} por {00CC00}$%d",cantidad,PlayerInfo[ID][Nickname],precio);
                        SendClientMessage(playerid, -1,string);
                        MedicamentosOfrecidos[ID] = cantidad;
                        dineropedido[ID] = precio;
                        ofertador[ID] = playerid;
                        TipoOferta[ID] = 2;
                        format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece %d medicamentos por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname],cantidad,precio);
                        SendClientMessage(ID, -1, string);
                        Tiempos[playerid][TiempoVenta] = gettime() + 60;
                        if(idTimerOfertaPerdida[ID] != -1)
                        {
                            KillTimer(idTimerOfertaPerdida[ID]);
                            idTimerOfertaPerdida[ID] = -1;
                        }
                        idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
                        if(idTimerTiempoVenta[playerid] != -1)
                        {
                            KillTimer(idTimerTiempoVenta[playerid]);
                            idTimerOfertaPerdida[playerid] = -1;
                        }
                        idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
                        if(precio <= 100)
                        {
                            format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d medicamentos por $%d a %s(ID: %d | Nivel: %d)", PlayerInfo[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PlayerInfo[ID][Nickname],ID,GetPlayerScore(ID));
                            MensajeAdmin(COLOR_YELLOW, string, 3);
                        }
                    }
                }
            }
            else if(strcmp(item, "marihuana", true) == 0)
            {
                if(!sscanf(params, "s[32]ddd", item,ID,cantidad,precio))
                GetPlayerPos(ID,x,y,z);
                if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
                if(PlayerInfo[playerid][pNivel] < 6) return SendClientMessage(playerid,-1,"Tienes que ser nivel 6 para poder vender");
                if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
                if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
                if(PlayerInfo[playerid][pMarihuana] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de marihuana que quieres vender.");
                if(precio > cantidad*500) return SendClientMessage(playerid,-1,"No puedes vender a más de $500 cada gramo de marihuana.");
                if(IsPlayerConnected(ID))
                {
                    format(string, 256, "Le ofreciste %dg de marihuana a {00CCFF}%s{FFFFFF} por {00CC00}$%d",cantidad,PlayerInfo[ID][Nickname],precio);
                    SendClientMessage(playerid, -1,string);
                    MarihuanaOfrecida[ID] = cantidad;
                    dineropedido[ID] = precio;
                    ofertador[ID] = playerid;
                    TipoOferta[ID] = 3;
                    format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece %d marihuana por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar consumible", PlayerInfo[playerid][Nickname],cantidad,precio);
                    SendClientMessage(ID, -1, string);
                    Tiempos[playerid][TiempoVenta] = gettime() + 60;
                    if(idTimerOfertaPerdida[ID] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[ID]);
                        idTimerOfertaPerdida[ID] = -1;
                    }
                    idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
                    if(idTimerTiempoVenta[playerid] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
                    if(precio <= 100)
                    {
                        format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d marihuana por $%d a %s(ID: %d | Nivel: %d)", PlayerInfo[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PlayerInfo[ID][Nickname],ID,GetPlayerScore(ID));
                        MensajeAdmin(COLOR_YELLOW, string, 3);
                    }
                    return 1;
                }
            }
            else
            {
                new arma;
                if(strcmp(item, "manopla", true) == 0) arma = 1;
                else if(strcmp(item, "palo-de-golf", true) == 0) arma = 2;
                else if(strcmp(item, "cuchillo", true) == 0) arma = 4;
                else if(strcmp(item, "bate-de-beisbol", true) == 0) arma = 5;
                else if(strcmp(item, "pala", true) == 0) arma = 6;
                else if(strcmp(item, "palo-de-billar", true) == 0) arma = 7;
                else if(strcmp(item, "katana", true) == 0) arma = 8;
                else if(strcmp(item, "9mm", true) == 0) arma = 22;
                else if(strcmp(item, "9mm-silenciada", true) == 0) arma = 23;
                else if(strcmp(item, "desert-eagle", true) == 0) arma = 24;
                else if(strcmp(item, "escopeta", true) == 0) arma = 25;
                else if(strcmp(item, "Escopeta-de-combate", true) == 0) arma = 27;
                else if(strcmp(item, "mp5", true) == 0) arma = 29;
                else if(strcmp(item, "granada", true) == 0) arma = 16;
                else if(strcmp(item, "ak-47", true) == 0) arma = 30;
                else if(strcmp(item, "M4", true) == 0) arma = 31;
                else if(strcmp(item, "rifle", true) == 0) arma = 33;
                else if(strcmp(item, "camara", true) == 0) arma = 43;
                else return SendClientMessage(playerid,-1,"SERVER: Unknown Command");
                if(HasWeapon(playerid,arma) == 0) return SendClientMessage(playerid, -1, "No puedes vender un arma que no tienes.");
                GetPlayerPos(ID,x,y,z);
                if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
                if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte un arma tu mismo.");
                if(!procesoOferta(arma, precio, playerid, ID))  return 1;
                format(string, 256, "Le ofrecistes a {00CCFF}%s{FFFFFF} una %s por {00CC00}$%d",PlayerInfo[ID][Nickname],ArmaNombre2[arma],precio);
                SendClientMessage(playerid, -1,string);
                format(string, 256, "{00CCFF}%s{FFFFFF} te ofrece una %s por {00CC00}$%d{FFFFFF}, para aceptar escribe {DBED15}/aceptar arma", PlayerInfo[playerid][Nickname],ArmaNombre2[arma],precio);
                SendClientMessage(ID, -1, string);
            }
        }
        else
        {
            if(!sscanf(params,"s[32]",item))
            {
				if(strcmp(item,"vehiculo",true)==0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 8.0,1802.7854,-1303.8938,93.0391))
					{
						new pvehicle = 0;
						for(new a = 0; a < MAX_PAUTOS; a++) if(autos[a][playerid] > 0) pvehicle++;
						if(pvehicle != 0) ShowPlayerDialog(playerid, AUTOVENDER, DIALOG_STYLE_LIST, "¿A quien deseas vender tu vehículo?", "Vender a la municipalidad.\nVender a otra persona.", "Siguiente","Cancelar");
						else return 1;
					}
					else SendClientMessage(playerid, -1, "Para vender tu vehículo, necesitas estar en el Edificio Municipal General de LS."),SendClientMessage(playerid, -1, "La oficina se encuentra en el piso número 14.");
				}
                else if(strcmp(item, "propiedad", true) == 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 7.0,1809.5894,-1299.8063,65.8125)) {
                        if(PlayerInfo[playerid][CasaID] > 0 || PlayerInfo[playerid][CasaID2] > 0) return ShowPlayerDialog(playerid, VENDERCASA, DIALOG_STYLE_MSGBOX,"Advertencia","Por vender tu propiedad en este lugar se te pagara la mitad de su precio original, ¿Quieres continuar?","Aceptar","Cancelar");
                        else return SendClientMessage(playerid,-1,"No tienes ninguna propiedad para vender.");
                    } else {
                        SendClientMessage(playerid, -1, "Para vender tu propiedad, necesitas estar en el Edificio Municipal General de LS.");
                        SendClientMessage(playerid, -1, "La oficina se encuentra en el piso número 9.");
                    }
                }
                else if(strcmp(item,"objeto",true)==0 || strcmp(item,"objetos",true)==0)
                {
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0,196.3872,-231.1294,1.7786) && !IsPlayerInRangeOfPoint(playerid, 5.0,216.8291,-232.7234,1.7786)) return SendClientMessage(playerid,-1,"No estas en la tienda de objetos");
                    {
                        if(Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes ningun objeto para vender");
                        new price;
                        switch(Objeto[playerid])
                        {
                            case 1429:  price = 1500; case 1518:  price = 2000;
                            case 2912:  price = 1300; case 2190:  price = 2000;
                            case 1788:  price = 2100; case 1790:  price = 3200;
                            case 2028:  price = 2750; case 2226:  price = 1500;
                            case 19317: price = 3000; case 2404:  price = 1500;
                            case 2405:  price = 1500; case 2406:  price = 1500;
                            case 19318: price = 3000; case 1210:  price = 1500;
                        }
                        if(price == 0) return 1;
                        MensajeEx(playerid,-1,"Vendiste un objeto a{00CC00} $%d",price);
                        DarDinero(playerid, price);
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                        RemovePlayerAttachedObject(playerid,4);
                        Objeto[playerid] = 0;
                    }
                }
            }
        }
    }
    else MensajeEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a hacer una venta.",Tiempos[playerid][TiempoVenta] - gettime());
    if(sscanf(params, "s[30]", item)) SendClientMessage(playerid,-1,"VENTAS: {DBED15}/vender vehiculo {FFFFFF}- {DBED15}/vender propiedad {FFFFFF}- {DBED15}/vender [medicamentos/crack/"SERVER_COIN"/nombre-de-arma/piezas]");
    return 1;
}
CMD:cp(playerid, params[])
{
    new item[128];
    if(!sscanf(params,"s[128]", item))
    {
        if(strcmp(item, "armero", true) == 0)
        {
            if(PlayerInfo[playerid][piezas] > 0)
            {
                PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
                SendClientMessage(playerid, -1,"Se ha marcado en el mapa la posicion.");
            }
        }
        if(strcmp(item, "camionero", true) == 0)
        {
            if(PlayerTemp[playerid][pt_Camionero]) SetPlayerCheckpoint(playerid,PuntoCX[playerid],PuntoCY[playerid],PuntoCZ[playerid], 7.0);
        }
        if(strcmp(item, "transportista", true) == 0)
        {
            if(PlayerTemp[playerid][pt_Transportista]) SetPlayerCheckpoint(playerid,PuntoTraX[playerid],PuntoTraY[playerid],PuntoTraZ[playerid], 7.0);
        }
        if(strcmp(item, "basurero", true) == 0)
        {
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
            if(PBasura[playerid] > 0 && PuntoBaX[playerid] != 0) SetPlayerCheckpoint(playerid,PuntoBaX[playerid],PuntoBaY[playerid],PuntoBaZ[playerid], PuntoBaA[playerid]);
        }
        if(strcmp(item, "medico", true) == 0)
        {
            if(MedicoCP2[playerid] == 1)
            {
                HospitalCercano(playerid);
                SendClientMessage(playerid, -1,"Se ha marcado en el mapa la posicion.");
            }
        }
        if(strcmp(item, "pescador", true) == 0)
        {
            if(RecorridoPescador[playerid] == 1) SetPlayerCheckpoint(playerid, 2786.7866,-2594.8406,-1.0248, 7.0);
            else return SendClientMessage(playerid, -1,"No tienes un recorrido de pescador activo.");
        }
        if(strcmp(item, "borrar", true) == 0)
        {
            Localizando[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
    }
    return 1;
}
CMD:tienda(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0,-1053.5027,-2568.4131,2876.4106)) ShowPlayerDialog(playerid, MENU_TIENDA, DIALOG_STYLE_TABLIST_HEADERS, "Catalogo","Nombre\tPrecio\n- Catalogo de Ropa \t5 "SERVER_COIN"\n- Catalogo de Botes\t30 "SERVER_COIN"\n- Catalogo de Motos\t35 "SERVER_COIN"\n- Catalogo de Vehiculos\t40 "SERVER_COIN"\n- Catalogo de Helicopteros\t80 "SERVER_COIN"\n- Creación de banda\n- Comprar VIP","Seleccionar", "Salir");
    else SendClientMessage(playerid, -1, "No estás en el lugar correcto.");
    return 1;
}
CMD:ayuda(playerid, params[])
{
	new item[32];
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,"casas",true) ==0) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda sobre las casas, todo lo que necesitas saber:","{DBED15}Casas sin garaje\n\n{FFFFFF}Para comprar una casa es simple, acercace al icono de la casa verde, disponer del dinero para\ncomprarla y complir el requisito de nivel que tenga la casa a comprar.\nParar comprar la casa se usa: {DBED15}/comprar propiedad{FFFFFF} para en la puerta de la misma.\nLuego, dentro de la casa, tenemos un ropero, el cual se abre y cierra con {DBED15}/abrir ropero{FFFFFF} y {DBED15}/cerrar ropero{FFFFFF}.\nDentro del ropero hay una estanteria, donde se pueden guardar objetos.\nPara ver la estanteria se usa {DBED15}/ver estanteria{FFFFFF},\nPara guardar y sacar armas se usa: {DBED15}/guardar [nombre-del-arma{FFFFFF}] y {DBED15}/sacar [nombre-del-arma{FFFFFF}] (Siempre usando guiones en lugar de espacios)\nPara guardar Crack y/o Medicamentos se usa el comando {DBED15}/guardar crack {FFFFFF}[{DBED15}cantidad{FFFFFF}] o {DBED15}/guardar medicamentos {FFFFFF}[{DBED15}cantidad{FFFFFF}]\nPara sacarlos se usa {DBED15}/sacar crack {FFFFFF}[{DBED15}cantidad{FFFFFF}] y {DBED15}/sacar medicamentos {FFFFFF}[{DBED15}cantidad{FFFFFF}]\nLas casas también se pueden cerrar para que nadie pueda ingresar,\nparar cerrarlas {DBED15}/cerrar puerta{FFFFFF} y para volverla a abrir {DBED15}/abrir puerta{FFFFFF} (Siempre estando adentro)\n\n{DBED15}Casas con garaje\n\n{FFFFFF}Las casas con garaje disponen de un garaje exclusivo, donde pueden guardar sus vehículos.\nPara entrar al garaje con el auto, te acercas al portón de la casas y pones {DBED15}/entrar{FFFFFF} (estando dentro del\nvehículo), para sacar el auto se usa {DBED15}/salir{FFFFFF} (estando dentro del vehículo).\nPara entrar al garaje, sin auto, solo se puede hacerlo desde dentro de la casa con {DBED15}/garaje{FFFFFF}\nPara salir del garaje sin auto, debemos volver a la casa poniendo {DBED15}/entrar{FFFFFF} en la puerta.\n\n{DBED15}Un auto que este en un garaje, no puede ser robado ni por un cheater.","Cerrar","");
		else if(strcmp(item,"sed",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Sed:","{FFFFFF}La sed puede verse en la barra superario azul, mientras\nmás llena esté la barra, más sed tendrás.\n\nSi la barra se llena, comenzarás a perder vida con el paso del tiempo\ny morirás si no te hidratas.\n\nPara hidratarte necesitas ir a un supermercado 24/7 o restaurante\ny comprar un {00CC00}vaso de Sprunk{FFFFFF}.\n\nPara ocultar la barra de sed, usa {DBED15}/ocultar sed{FFFFFF} y para mostrarla {DBED15}/mostrar sed","Cerrar","");
		else if(strcmp(item,"nivel",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Nivel:","{FFFFFF}Para subir de nivel necesitas llenar la barra de reputación\nque se ve en la parte inferior de la pantalla.\n\nPor cada hora de juego se gana 1 punto de reputación\n(Necesitas estar activo en el servidor obligatoriamente mas de 30 minutos para recibir la reputación)\n\nCon el comando /est se pueden ver esas estadisticas.\n\nAl llenar la barra de reputación tienes que /comprar nivel","Cerrar","");
		else if(strcmp(item,"hambre",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Hambre:","{FFFFFF}La hambre puede verse en la barra superario naranja, mientras\nmás llena esté la barra, más hambre tendrás.\n\nSi la barra se llena, comenzarás a perder vida con el paso del tiempo\ny morirás si no comes.\n\nPara comer necesitas ir a una pizzeria\ny comprar un {00CC00}una porción de pizza{FFFFFF}.\n\nPara ocultar la barra de hambre, usa {DBED15}/ocultar hambre{FFFFFF} y para mostrarla {DBED15}/mostrar hambre","Cerrar","");
		else if(strcmp(item,"totem",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda sobre los totems","{FFFFFF}Los {89746A}totems{FFFFFF} se ganan como recompenza al invitar amigos al juego\nPara obtener los {89746A}totems{FFFFFF} tienen que ingresar a la web, iniciar sesión e ir a {6CACFF}Invitar a un amigo{FFFFFF},\nluego copiar el enlace y enviarselo a sus amigos.","Cerrar","");
		else if(strcmp(item,"salon",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Salón de eventos","{FFFFFF}El salón de eventos puede ser alquilado para realizar conciertos, presentaciones, fiestas y espectáculos.\nPara alquilar el salón necesitas nivel 6 y pagar {00CC00}$20.000{FFFFFF} por cada hora de alquiler.\nEl costo de la entrada lo decide el propietario(locatario) del salón.\n\nComandos para el propietario:\n{DBED15}/dar acceso [id-o-nombre]{FFFFFF} (Comando para dar permiso al control del escenario y expulsar personas del salón).\n{DBED15}/quitar acceso [id-o-nombre]{FFFFFF} (Comando para quitar permisos).\n{DBED15}/expulsar [id-o-nombre]{FFFFFF} (Le quita la entrada y lo expulsa del salón)\n{DBED15}/sincronizar{FFFFFF} (Reconecta a la radio a todos los jugadores en caso de bug)\n\nComandos para personas con tarjeta de acceso:\n{DBED15}/expulsar [id-o-nombre]{FFFFFF} (Le quita la entrada y lo expulsa del salón)\n{DBED15}/sincronizar\n/retirar vehiculo [id]{FFFFFF} (El ID se puede ver usando /dl)","Cerrar","");
		else if(strcmp(item,"trabajos",true) ==0) ShowPlayerDialog(playerid,TRABAJOS, DIALOG_STYLE_LIST,"Trabajos:","{FFFFFF}Información general\nMédico\nTaxista\nGuardaespaldas\nCamionero\nPolicía\nFabricante de armas\nMecánico\nCosechador (Sin habilidad)\nBasurero (2 jugadores)\nTransportista\nLadrón\nMinero\nPescador\nProstitución\nLocutor de Radio","Aceptar","Salir");
		else if(strcmp(item,"vehiculos",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda sobre vehículos, todo lo que necesitas saber:","{FFFFFF}Existen varios concesionarias, las cuales tienen una gran variedad de vehículos a la venta.\nLos vehículos más económicos se encuentran a la vuelta de Unity Station.\nCuando quieras cambiar de vehículo, puedes vender el usado, solamente tienes que ir al Edificio Municipal General de LS e iniciar el trámite.\nLa oficina se encuentra en el piso número 17.\n\nPara que no usen tu vehículo te recomendamos {DBED15}/estacionar{FFFFFF} dentro de un estacionamiento. El costo es de {00CC00}$150{FFFFFF} por día.\nO sino también puedes comprar un sistema de traba en cualquier 24/7.\nSi tienes el sistema de traba, usa {DBED15}/cerrar{FFFFFF} para trabar las puertas del vehículo.\nPara abrirlo {DBED15}/abrir{FFFFFF}, tienes que estar cerca o dentro del vehículo.\nSi no encuentrsa tu vehículo usa {DBED15}/localizar{FFFFFF}.\nSi tu vehículo fue robado, llama a la policía, ellos te van a pedir la patente para poder localizarlo.\n\nPara enceender o apagar las luces, usa {DBED15}/luces{FFFFFF}\nPara detener el motor, usa {DBED15}/detener{FFFFFF}\nPara encender el motor, usa {DBED15}/arrancar{FFFFFF}\nPara activar o desactivar la alarma, usa {DBED15}/alarma{FFFFFF}\n\nPara guardar o sacar cosas del maletero de tu vehículo necesitas abrirlo, acercate al maletero y usa {DBED15}/abrir maletero{FFFFFF}\nDespués de abrirlo, tienes que mirar el interior usando {DBED15}/maletero{FFFFFF} o en caso de que no sea tu vehículo usa {DBED15}/maletero [id o nombre del dueño]{FFFFFF}\nPara sacar algo del maletero usa {DBED15}/maletero sacar [numero de lugar].{FFFFFF}\nPara guardar armas usa {DBED15}/maletero guardar nombre-de-arma{FFFFFF}.\nRecuerda siempre {DBED15}/cerrar maletero{FFFFFF} para evitar robos.","Cerrar","");
		else if(strcmp(item,"club",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda relacionada al club de striptease:","{FFFFFF}Encontrarás el {ef5bff}club de striptease{FFFFFF} en el mapa de tu {dbed15}GPS{ffffff} marcado con un {ff0000}corazón{ffffff}.\n\nDentro del club podrás beber e interactuar con las bailarias.\nSi le arojas dinero, ganarás afinidad con ellas. Actualmente hay 3 niveles de afinidad: {f0e02f}Baja{FFFFFF},{ff7c1d}Media {FFFFFF}y {ff0000}Alta{FFFFFF}.\n\nSi quieres algo más íntimo, hay un cuarto privado en el cual tu afinidad con la bailarina cobrará importancia.\n\n{8ab9e6}Sala privada según afinidad{FFFFFF}:\n\n- {f0e02f}Afinidad baja{FFFFFF}: Baile.\n- {ff7c1d}Afinidad media{FFFFFF}: Baile seguido de sexo oral.\n- {ff0000}Afinidad alta{FFFFFF}: Baile y sexo oral.(Con descuento monetario)\n\nPerderás un leve porcentaje de afinidad con la bailarina cuando ingreses al cuarto privado, si es que\ntienes afinidad media o alta. Será recuperada si luego le arrojas más dinero.\n\nPara {00cc00}lanzarles dinero{ffffff} a las bailarinas pulsa {dbe715}'Y'{FFFFFF} cerca de ellas.","Cerrar","");
		else if(strcmp(item,"territorios",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda relacionada a los territorios","{FFFFFF}Las bandas pueden conquistar territorios a lo largo de todo el mapa de {EB0000}San Andreas\n{FFFFFF}para imponer su dominio frente a todas las otras bandas y tener cierta ganancia por los territorios dominados\n\n{FFFFFF}Para conquistar un territorio tendrás que pertenecer a una banda y usar el comando {DBED15}/conquistar\n{FFFFFF}Para poder conquistar debes contar con 4 integrantes de tu banda, el tiempo para conquistar durará {00CC00}5 minutos\n{FFFFFF}durante ese periodo de tiempo deben permanecer miembros de la banda que esta atacando el territorio\n{FFFFFF}Si todos los atacantes abandonan el territorio se cancerá el ataque y no ganaran nada\n\n{FFFFFF}Al finalizar la conquista, los atacantes recibiran unas bonificaciones aleatorias.","Cerrar","");
		else if(strcmp(item,"tuning",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda relacionada a el taller tuning","{FFFFFF}Para tunear tu vehículo tienes que dirigirte hasta {DBED15}Las Venturas\n{FFFFFF}Ahí se encuentra el taller tuning que fácilmente puedes localizarlo con {DBED15}/gps\n\n{FF0000}Taller Tuning\n{FFFFFF}* Personas que utilicen los objetos para matar a los usuarios será {FF0000}baneado {FFFFFF}inmediatamente\n{FFFFFF}* Los objetos personalizables que le pongas a tu vehículo tendra un costo de dinero dentro del juego.","Cerrar","");
		else if(strcmp(item,"mochila banda",true) ==0) ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Ayuda relacionada a la mochila de banda","{FFFFFF}La mochila de banda es el sistema, que usaran las bandas para poder guardar - sacar\nMedicamentos - Crack -Armas\ny tambien usar armas que la administracion le asigne para todos, no todas las bandas tendran esto\nLa mochila de banda puede ser en cualquier parte del mapa.","Cerrar","");
	}
	if(sscanf(params, "s[30]", item))
	{
		SendClientMessage(playerid, COLOR_WHITE, "AYUDA DETALLADA: {DBED15}/ayuda vehiculos | /ayuda trabajos | /ayuda nivel | /ayuda casas | /ayuda sed");
		SendClientMessage(playerid, COLOR_WHITE, "PERSONAJE: {DBED15}/est{FFFFFF}adisticas | {DBED15}/y{FFFFFF} (/me) {FFFFFF}|{DBED15} /p | /g | /b | /inventario | /consumir | /gps | /acciones");
		SendClientMessage(playerid, COLOR_WHITE, "TRABAJOS: {DBED15}/ayuda trabajos {FFFFFF}|{DBED15} /habilidad {FFFFFF}|{DBED15} /dejar trabajo");
		SendClientMessage(playerid, COLOR_WHITE, "SERVICIOS: {DBED15}/servicio taxi {FFFFFF}|{DBED15} /servicio grua {FFFFFF}|{DBED15} /servicio medico | /servicio mecanico");
		SendClientMessage(playerid, COLOR_WHITE, "VEHICULOS: {DBED15}/arrancar {FFFFFF}|{DBED15} /detener {FFFFFF}|{DBED15} /estacionar {FFFFFF}|{DBED15} /localizar | /luces");
		SendClientMessage(playerid, COLOR_WHITE, "TELEFONO: {DBED15}/minumero | /sms | /llamar | /colgar | /telefono [{FFFFFF}on/off{DBED15}]");
		SendClientMessage(playerid, COLOR_WHITE, "VENTAS: {DBED15}/vender vehiculo | /vender [nombre-del-arma] [id o nombre] [precio] | /vender [crack/medicamento]");
		SendClientMessage(playerid, COLOR_WHITE, "JUEGO: {DBED15}/hora {FFFFFF} | {DBED15}/canal dudas | /canal anuncios{FFFFFF} (para activar y desactivar) | {DBED15}/configuracion");
		SendClientMessage(playerid, COLOR_WHITE, "GENERAL: Para recibir ayuda de otros jugadores usa {DBED15}/n {FFFFFF}({DBED15}pregunta{FFFFFF}).");
 		SendClientMessage(playerid, COLOR_WHITE, "TERRITORIOS: {DBED15}/ayuda territorios {FFFFFF}|{DBED15} /conquistar");
        SendClientMessage(playerid, COLOR_WHITE, "TUNING: {DBED15}/ayuda tuning");
        SendClientMessage(playerid, COLOR_WHITE, "DESBUG: {FFFFFF}Si aun tienes problemas, por favor usa el comando {DBED15}/reportar [Tu ID] [Descripción del problema]");
	}
	return 1;
}
CMD:crear(playerid,params[])
{
    new item[32];
    if(!sscanf(params, "s[32]", item))
    {
        if(strcmp(item, "radio", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid,5,391.1343,183.0587,1040.1156)) return SendClientMessage(playerid,-1,"Necesitas estar en la oficina principal del estudio de radio y televisión.");
            {
                if(PlayerInfo[playerid][pVip] != 2) return SendClientMessage(playerid, COLOR_WHITE, "Solamente los jugadores con cuenta VIP2 pueden crear su propia emisora de radio.");
                if(Emisoras[playerid][TieneEmisora] == 1) return SendClientMessage(playerid,-1,"Ya tienes una emisora de radio");
                {
                    if(Emisoras[playerid][TieneEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes una emisora de radio.");
                    if(PlayerInfo[playerid][pDinero] < 15000) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas {00CC00}$15000{FFFFFF} para crear una estación de radio");
                    ShowPlayerDialog(playerid, COMPRARRADIO, DIALOG_STYLE_INPUT,"Crear estación de radio","Ingresa el nombre de tu nueva estación de radio:","Crear","Cancelar");
                    return 1;
                }
            }
        }
        if(PlayerInfo[playerid][pTrabajo] != T_Armero && PlayerInfo[playerid][pTrabajo2] != T_Armero) return 1;
        if(VariableCaido[playerid] == 1 || PlayerInfo[playerid][Agonizando] == 1) return SendClientMessage(playerid,-1,"No puedes crear armas en este momento.");
        if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes crear un arma si estas en un vehiculo.");
        if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No puedes crear un arma en este momento.");
        if(puedeCrearArmas(playerid) == 0) return SendClientMessage(playerid,-1,"No puedes crear armas en este momento.");
        if(EstaHospital(playerid)) return 1;
        new nombre_arma[64],string[128],Piezas,armaid,lvlid;
        if(strcmp(item, "9mm",	 true) == 0) { armaid = 22; lvlid = 1; format(nombre_arma,sizeof(nombre_arma),"una 9mm"); Piezas = 10;}
		else if(strcmp(item, "9mm-silenciada",	true) == 0) { armaid = 23; lvlid = 2; format(nombre_arma,sizeof(nombre_arma),"una 9mm silenciada"); Piezas = 12; }
		else if(strcmp(item, "escopeta",	true) == 0) { armaid = 25; lvlid = 2; format(nombre_arma,sizeof(nombre_arma),"una Escopeta"); Piezas = 20;}
		else if(strcmp(item, "desert-eagle",true) == 0 || strcmp(item, "dk",true) == 0) { armaid = 24; lvlid = 3; format(nombre_arma,sizeof(nombre_arma),"una Desert Eagle"); Piezas = 36;}
		else if(strcmp(item, "mp5",	true) == 0) { armaid = 29; lvlid = 4; format(nombre_arma,sizeof(nombre_arma),"una MP5"); Piezas = 58;}
		else if(strcmp(item, "ak-47",	true) == 0) { armaid = 30; lvlid = 5; format(nombre_arma,sizeof(nombre_arma),"una AK-47"); Piezas = 82;}
		else if(strcmp(item, "m4",	true) == 0) { armaid = 31; lvlid = 5; format(nombre_arma,sizeof(nombre_arma),"una M4"); Piezas = 96; }
		else if(strcmp(item, "rifle",	true) == 0) { armaid = 33; lvlid = 6; format(nombre_arma,sizeof(nombre_arma),"un Rifle"); Piezas = 52;}
		else if(strcmp(item, "escopeta-de-combate",true) == 0 || strcmp(item, "edc",true) == 0) { armaid = 27; lvlid = 7; format(nombre_arma,sizeof(nombre_arma),"una Escopeta de combate"); Piezas = 136;}
        else return 1;
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes crear armas en vehículos.");
        if(PlayerInfo[playerid][pNivelArmero] < lvlid) return SendClientMessage(playerid, -1, "No tienes el nivel necesario para crear esta arma");
        if(PlayerInfo[playerid][pMateriales] >= Piezas)
        {
            PlayerInfo[playerid][pMateriales] -= Piezas;
            DarArma(playerid, armaid);
            format(string,sizeof(string),"%s saca piezas de su mochila y crea una %s.",PlayerInfo[playerid][Nickname], nombre_arma);
            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
            SetHabilityWeaponJob(playerid,lvlid);
        }
        else return SendClientMessage(playerid, -1, "No tienes los materiales necesarios");
    }
    return 1;
}
CMD:hacer(playerid, params[])
{
	new item[32];
	if(!sscanf(params, "s[32]", item))
	{
    	if(strcmp(item, "pedido", true) == 0 || strcmp(item,"pedidos",true) == 0)
		{
			if(Tiempos[playerid][pTIME_PEDIDO] > gettime()) return MensajeEx(playerid, -1, "Tienes que esperar %s para poder enviar otro pedido.", TimeConvertEx(Tiempos[playerid][pTIME_PEDIDO] - gettime()));
  			new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\nesto no es para reportar jugadores o para insultar a la administración\nen caso de hacerlo, vas a ser {FF0000}sancionado.";
    		return ShowPlayerDialog(playerid, DIALOG_PEDIDO, DIALOG_STYLE_MSGBOX, "Información importante",dialog,"Siguiente","Salir");
	  	}
	}
	return 1;
}
CMD:minumero(playerid,params[])
{
    new string[256];
    if(PlayerInfo[playerid][pNumero] == 0) return SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para tener un número. Puedes comprar un teléfono en cualquier supermercado {DBED15}24/7");
    format(string, 256,"Tu número de teléfono es: {DBED15}%d",PlayerInfo[playerid][pNumero]);
    SendClientMessage(playerid, -1, string);
    return 1;
}
CMD:numero(playerid,params[])
{
    new ID;
    if(PlayerInfo[playerid][pAgenda] != 1) return SendClientMessage(playerid, -1, "Necesitas una guía telefónica para encontrar un número.");
    if(sscanf(params,"r", ID)) return SendClientMessage(playerid, -1, "Modo de uso: {DBED15}/numero {FFFFFF}<PlayerID>");
    if(ID == playerid) return SendClientMessage(playerid,-1,"Para ver tu número de teléfono, usa: {DBED15}/minumero");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,COLOR_WHITE,"Esa persona no aparece en la guía telefónica, probablemente no tenga teléfono.");
    if(PlayerInfo[ID][pNumero] == 0) return SendClientMessage(playerid, -1, "Esa persona no aparece en la guía telefónica, probablemente no tenga teléfono.");
    if(PlayerInfo[ID][pGuia] == 0) return SendClientMessage(playerid, -1, "El número de teléfono de esa persona no está registrado en la guía.");
    MensajeEx(playerid, -1, "{DBED15}Guía telefónica: {FFFFFF}El numero de {00ccff}%s{FFFFFF} es {DBED15}%d",PlayerInfo[ID][Nickname],PlayerInfo[ID][pNumero]);
    return 1;
}
CMD:prendas(playerid, params[])
{
    if(ContarPrendas(playerid) == 0) return SendClientMessage(playerid, -1, "Tienes que tener al menos una prenda para poder usar este comando.");
    ShowDialog(playerid, DIALOG_PLAYER_TOYS);
    return 1;
}
CMD:dardinerofabrica(playerid,params[])
{
    new cantidad,f,id = FabricaDesocupada();
    if(PlayerInfo[playerid][pAdmin] != 6) return 0;
    if(sscanf(params, "dd", f,cantidad)) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /dardinerofabrica [fabrica_id] [Cantidad_Dinero]");
    if(id == 0) return SendClientMessage(playerid,-1,"No se puedes darle dinero a una fabrica que no existe.");
    DarDineroFabrica(f,cantidad);
    return 1;
}
CMD:desocuparfabrica(playerid,params[])
{
	new f,Query[520];
	if(PlayerInfo[playerid][pAdmin] != 6) return 0;
    if(sscanf(params, "d", f)) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /desocuparfabrica [FABRICAID]");
	if(Fabricas[f][pEnUso] == 0) return SendClientMessage(playerid,-1,"No puedes desocupar una fabrica que no existe.");
	if(Fabricas[f][pBanda] == 0) return SendClientMessage(playerid,-1,"Esta fabrica no tiene dueño.");
    Fabricas[f][pBanda] = 0;
    Fabricas[f][pSoborno] = gettime();
	BorrarStatsFabrica(f);
	CargarFabricass(f);
	MensajeEx(playerid,-1,"La fabrica {00CC00}%d{FFFFFF} fue desocupada",f);
	mysql_format(handle_db, Query,sizeof(Query),"UPDATE `fabricas` SET `EnVenta`='1', `EnUso`='1', `BandaID`='0' WHERE `ID`='%d'",Fabricas[f][pID]);
	mysql_tquery(handle_db,Query,"","");
    return 1;
}
CMD:agenda(playerid, params[])
{
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el teléfono antes de meterte en la celda.");
    if(PlayerInfo[playerid][pNumero] == 0) return SendClientMessage(playerid, -1,"No tienes ningún teléfono, puedes ir a cualquier {DBED15}24/7{FFFFFF} para comprar uno.");
    if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /telefono.");
    if(EnLlamada[playerid] == 1) return SendClientMessage(playerid, -1, "Estás en una llamada.");
    ShowDialog(playerid, DIALOG_PHONE_BOOK);
    return 1;
}
CMD:trabajo(playerid, params[])
{
    new item[128];
    if(!sscanf(params, "s[128]", item))
    {
        if(IsPlayerInAnyVehicle(playerid)) return 1;
        if(PlayerInfo[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(strcmp(item, "medico", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1178.1359,-1361.3021,14.2302)) return 1;
            if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas ser al menos nivel 2 para aprender el trabajo de médico.");
            if(PlayerInfo[playerid][pDinero] < 4000) return SendClientMessage(playerid,-1,"Necesitas tener {00CC00}$4000{FFFFFF} para pertenecer al equipo médico.");
            if(PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000{FFFFFF}.\n","Aceptar","Cancelar");
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000{FFFFFF}.\n","Aceptar","Cancelar");
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "armero", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2122.9236,-2275.1238,20.6719)) return 1;
            if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Para trabajar de armero necesitas nivel 3 como mínimo.");
            if(PlayerInfo[playerid][pTrabajo] == T_Armero || PlayerInfo[playerid][pTrabajo2] == T_Armero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Armero,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Armero,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "camionero", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, -1715.0378,-63.1466,3.6340)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Camionero || PlayerInfo[playerid][pTrabajo2] == T_Camionero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Camionero,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Camionero,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "guardaespaldas", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2226.2988,-1718.7993,13.5236)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Guardaespaldas || PlayerInfo[playerid][pTrabajo2] == T_Guardaespaldas) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Guardaespaldas,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Guardaespaldas,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "transportista", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2583.8274,1644.3837,1087.5602)) return 1;
            if(PlayerInfo[playerid][pNivelCamionero] < 3) return SendClientMessage(playerid,-1,"Para conseguir este trabajo necesitas habilidad de camionero. (nivel 3 o más)");
            if(PlayerInfo[playerid][pTrabajo] == T_Transportista || PlayerInfo[playerid][pTrabajo2] == T_Transportista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Transportista,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Transportista,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "basurero", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0,-177.6093,-1549.4420,6.3284)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Basurero || PlayerInfo[playerid][pTrabajo2] == T_Basurero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Basurero,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Basurero,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "taxi", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0,-2024.7489,-113.9102,1038.8187)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Taxista || PlayerInfo[playerid][pTrabajo2] == T_Taxista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Taxista,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Taxista,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "mecanico", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0,114.7220,-151.4292,1.5781)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Mecanico || PlayerInfo[playerid][pTrabajo2] == T_Mecanico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Mecanico,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Mecanico,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        else if(strcmp(item, "pescador", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2789.3672,-2574.6675,3.1683)) return 1;
            if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas como mínimo nivel 2 para conseguir este trabajo.");
            if(PlayerInfo[playerid][pTrabajo] == T_Pescador || PlayerInfo[playerid][pTrabajo2] == T_Pescador) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Pescador,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Pescador,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "minero", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, -382.5980,2199.3918,25.4105)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Minero || PlayerInfo[playerid][pTrabajo2] == T_Minero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Minero,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Minero,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        if(strcmp(item, "prostitucion", true) == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, 958.2482,-54.3517,1001.1172)) return 1;
            if(PlayerInfo[playerid][pTrabajo] == T_Prostituta || PlayerInfo[playerid][pTrabajo2] == T_Prostituta) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
            if(PlayerInfo[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Prostituta,0);
            else if(PlayerInfo[playerid][pTrabajo] != T_Ninguno && PlayerInfo[playerid][pTrabajo2] == T_Ninguno && PlayerInfo[playerid][pVip] == 2) return AsignarTrabajo(playerid,T_Prostituta,1);
            else if(PlayerInfo[playerid][pTrabajo2] == T_Ninguno) return NoPuedeTrabajo(playerid);
            else if(PlayerInfo[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
        }
        else SendClientMessage(playerid, COLOR_WHITE, "Por favor pulsa {DBED16}'Y'{FFFFFF} para conseguir un trabajo");
    }
    return 1;
}
CMD:llamar(playerid, params[])
{
    if(PlayerInfo[playerid][pNumero] == 0)
    {
        SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para hacer llamadas.");
        SendClientMessage(playerid,-1,"Puedes comprar un teléfono en cualquier {DBED15}24/7");
        return 1;
    }
    new string[250], phonenumb, tmp_number, tmp_contact[24], bool:found;
    if(!sscanf(params, "d", tmp_number))
    {
        found = true;
        phonenumb = tmp_number;
    }
    else if(!sscanf(params, "s[24]", tmp_contact))
    {
        for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
        {
            if(!strcmp(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], tmp_contact, true))
            {
                found = true;
                phonenumb = PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER];
                break;
            }
        }
    }
    else return SendClientMessage(playerid, -1, "Utiliza {DBED15}/llamar{FFFFFF} [Número o contacto de /agenda]");
    if(!found) return MensajeEx(playerid, -1, "No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
    if(phonenumb <= 0) return SendClientMessage(playerid, -1, "El número destino no es válido.");
    if(GetPlayerMoney(playerid) < 25) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para realizar una llamada, necesitas {00CC00}$15{FFFFFF} cada 30 segundos.");
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el teléfono antes de meterte en la celda.");
    if(phonenumb == 911 && PlayerInfo[playerid][pDuty] == 1) return SendClientMessage(playerid, -1, "No puedes llamar al 911 si eres un policía en actividad, usa tu radio.");
    if(PlayerInfo[playerid][pNumero] == phonenumb) return SendClientMessage(playerid,-1,"Número inválido");
    if(EnLlamada[playerid] == 1) return SendClientMessage(playerid,-1,"Ya estas en una llamada, escribe /colgar para terminarla");
    if(TelefonoEstado[playerid] == 1)
    {
        TelefonoEstado[playerid] = 0;
        if(PlayerTemp[playerid][@Specteando] == 0) AccionesRol(playerid,"encendió su teléfono móvil.", 20);
    }
    PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
    foreach(new i : Player)
    {
        if(phonenumb == 911)
        {
            PlayerInfo[playerid][MobileSub] = 911;
            if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 18871, 6, 0.104,0.018,0.000999,102.5,163.2,-0.1,1,1,1);
            SetTimerEx("LlamadaCops",2000,false,"d",playerid);
            LlamadaTipo[playerid] = 1;
            SendClientMessage(playerid, -1, "Llamando a la policía... Escribe {DBED15}/colgar{FFFFFF} para cancelar la llamada.");
            return 1;
        }
        if(phonenumb == 815)
        {
            PlayerInfo[playerid][MobileSub] = 815;
            if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 18871, 6, 0.104,0.018,0.000999,102.5,163.2,-0.1,1,1,1);
            SetTimerEx("LlamadaGrua",3000,false,"d",playerid);
            LlamadaTipo[playerid] = 1;
            SendClientMessage(playerid, -1, "Llamando al servicio de grúa. Escribe {DBED15}/colgar{FFFFFF} para cancelar la llamada.");
            return 1;
        }
        if(phonenumb == 430)
        {
            if(Tiempos[playerid][TiempoAnuncio] > 0)
            {
                if(Tiempos[playerid][TiempoAnuncio] < 60) return MensajeEx(playerid, 0xff9a00FF, "Debes esperar %d segundos para volver a enviar un anuncio.",Tiempos[playerid][TiempoAnuncio]);
                else if(Tiempos[playerid][TiempoAnuncio] >= 60) return MensajeEx(playerid, 0xff9a00FF, "Debes esperar %dm %ds para volver a enviar un anuncio.",Tiempos[playerid][TiempoAnuncio]/60, Tiempos[playerid][TiempoAnuncio]%(60));
            }
            if(CanalAnuncios[playerid] == 0) return SendClientMessage(playerid,-1,"Tienes el canal de anuncios desactivado.");
            PlayerInfo[playerid][MobileSub] = 430;
            if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 18871, 6, 0.104,0.018,0.000999,102.5,163.2,-0.1,1,1,1);
            SetTimerEx("LlamadaAnuncios",2000,false,"d",playerid);
            LlamadaTipo[playerid] = 1;
            SendClientMessage(playerid, -1, "Llamando al servicio de anuncios... Escribe {DBED16}/colgar{FFFFFF} para cancelar la llamada.");
            return 1;
        }
        if(phonenumb == 71) return callcmd::servicio(playerid,"medico");
        if(phonenumb == 80) return callcmd::servicio(playerid,"mecanico");
        if(phonenumb == 82) return callcmd::servicio(playerid,"taxi");
        if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        if(PlayerInfo[i][pNumero] == phonenumb && phonenumb != 0)
        {
            if(PlayerInfo[i][pTiempoCarcel] > 0 || PlayerInfo[i][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"El numero que usted marco no esta disponible en este momento.");
            if(EnLlamada[i] == 1) return SendClientMessage(playerid,-1,"El numero que usted marco se encuentra ocupado");
            if(TelefonoEstado[i] == 1) return SendClientMessage(playerid,-1,"El numero que marco esta fuera de linea");
            {
                if(IsPlayerConnected(i)){
                    if(i != INVALID_PLAYER_ID){
                        if(PlayerInfo[i][MobileSub] == INVALID_PLAYER_ID)
                        {
                            if(PlayerTemp[i][@Specteando] == 1) return 1;
                            MensajeEx(playerid,-1,"Llamando a %s... usa {DBED15}/colgar{FFFFFF} para cancelar la llamada.", convertPhoneNumber(playerid, PlayerInfo[i][pNumero]));
                            format(string, sizeof(string), "El teléfono de %s está sonando.", PlayerInfo[i][Nickname]);
                            ProxDetector(30.0, i, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                            format(string, sizeof(string), "Te están llamando por teléfono: {DBED15}%s{FFFFFF}, escribe {DBED15}/atender{FFFFFF} o {DBED15}/colgar", convertPhoneNumber(i, PlayerInfo[playerid][pNumero]));
                            CLlamada[playerid] = SetTimerEx("finllamadax", 30000, false, "ii", playerid,i);
                            SendClientMessage(i, -1, string);
                            YoLlame[playerid] = 1;
                            PlayerInfo[playerid][MobileSub] = i;
                            PlayerInfo[i][MobileSub] = playerid;
                            llamada(i);
                            return 1;
                        }
                    }
                }
            }
        }
    }
    SendClientMessage(playerid, -1, "Su llamada no puede darse por el numero marcado, por favor, compruebe el número e inténtelo nuevamente.");
    SetTimerEx("StopCell",3000,false,"d",playerid);
    return 1;
}
CMD:sms(playerid, params[])
{
    if(PlayerInfo[playerid][pNumero] == 0)
    {
        SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para enviar mensajes de texto.");
        SendClientMessage(playerid,-1,"Puedes comprar un teléfono en cualquier {DBED15}24/7");
        return 1;
    }
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el telefono antes de entrar a la celda.");
    if(PlayerInfo[playerid][pDinero] <= 15) return SendClientMessage(playerid, COLOR_WHITE, "No tienes suficiente dinero para enviar un SMS, necesitas {FF4202}$15");
    new to_number, message[145];
    new tmp_number, tmp_contact[24], bool:found;
    if(!sscanf(params, "ds[145]", tmp_number, message))
    {
        found = true;
        to_number = tmp_number;
    }
    else if(!sscanf(params, "s[24]s[145]", tmp_contact, message))
    {
        for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
        {
            if(!strcmp(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], tmp_contact, true))
            {
                found = true;
                to_number = PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER];
                break;
            }
        }
    }
    else return SendClientMessage(playerid, -1, "Utiliza {DBED15}/sms{FFFFFF} [Número o contacto de /agenda] [Mensaje]");
    if(PlayerInfo[playerid][pNumero] == to_number) return SendClientMessage(playerid,-1,"No puedes autoenviarte un SMS.");
    if(!found) return MensajeEx(playerid, -1, "No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
    if(to_number <= 0) return SendClientMessage(playerid, -1, "El número destino no es válido.");
    EnviarSMS(playerid, to_number, message);
    return 1;
}
CMD:atender(playerid, params[])
{
    new string[150],texto[10],id,Float:Pos[3];
    if(!sscanf(params,"s[10]d",texto,id))
    {
        if(strcmp(texto, "paciente", true)==0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
            if(GetPlayerSkin(playerid) == 274 || GetPlayerSkin(playerid) == 275 || GetPlayerSkin(playerid) == 276 || GetPlayerSkin(playerid) == 308)
            {
                if(PlayerInfo[playerid][pMedicina] == 0) return SendClientMessage(playerid,-1,"No tienes ninguna medicina para aplicar");
                GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
                if(!IsPlayerInRangeOfPoint(playerid, 2.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"Tu no estas cerca de este paciente");
                if(PlayerInfo[id][pAtendido] == 1) return SendClientMessage(playerid,-1,"Este paciente ya fue atendido por otro médico");
                if(PlayerInfo[id][pEnfermedad] == PlayerInfo[playerid][pMedicina])
                {
                    if(PlayerInfo[id][j_HEALTH] < 90) SetPlayerHealthEx(id, 90);
                    AccionesRol(playerid,"aplica el tratamiento necesario con el paciente.", 20);
                    format(string,sizeof(string),"%s comienza a curar las heridas de %s ",PlayerInfo[playerid][Nickname],PlayerInfo[id][Nickname]);
                    ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    format(string,sizeof(string),"El tratamiento parece ir correctamente");
                    ProxDetector(5.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    PlayerInfo[id][pAtendido] = 1;
                    PlayerInfo[playerid][pMedicina] = 0;
                    if(PlayerInfo[id][pDinero] >= 600)
                    {
                        QuitarDinero(id,600);
                        DarDinero(playerid,600);
                        SendClientMessage(playerid,-1,"El paciente te ha pagado {00CC00}$600{FFFFFF} por tu gran trabajo");
                        SendClientMessage(id,-1,"Has pagado {00CC00}$600{FFFFFF} de tu billetera al médico por su trabajo");
                    }
                    else if(PlayerInfo[id][pBanco] >= 600)
                    {
                        PlayerInfo[id][pBanco] -= 600;
                        DarDinero(playerid,600);
                        SendClientMessage(playerid,-1,"El paciente te ha pagado {00CC00}$600{FFFFFF} por tu gran trabajo");
                        SendClientMessage(id,-1,"Has pagado {00CC00}$600{FFFFFF} del banco al médico por su trabajo");
                    }
                    else
                    {
                        DarDinero(playerid,250);
                        SendClientMessage(playerid,-1,"El paciente no tiene suficiente dinero para pagar los servicios, el hospital te ha pagado $250");
                        SendClientMessage(id,-1,"No has tenido dinero para pagarle al médico, el hospital cubrio tu cuota");
                    }
                }
                else
                {
                    if(PlayerInfo[id][j_HEALTH] > 10) SetPlayerHealthEx(id, 10);
                    AccionesRol(playerid,"aplica el tratamiento erroneo con el paciente.", 20);
                    SendClientMessage(playerid,COLOR_RED,"Haz aplicado un tratamiento erroneo con el paciente, tu reputacion como medico ha disminuido");
                }
            }
            else return SendClientMessage(playerid,-1,"Necesitas tener la ropa de médico para utilizar este comando");
        }
        return 1;
    }
    if(sscanf(params, "s[30]", texto))
    {
        foreach(new i : Player)
        {
            if(PlayerInfo[i][MobileSub] == 911)
            {
                if(PlayerInfo[playerid][pDuty] == 1)
                {
                    EnLlamada[playerid] = 1;
                    PlayerInfo[i][Mobile] = playerid;
                    PlayerInfo[i][MobileSub] = INVALID_PLAYER_ID;
                    EnLlamada911[i] = 911;
                    PlayerInfo[playerid][Mobile] = i;
                    PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
                    EnLlamada911[playerid] = 911;
                    format(string,sizeof(string),"{3399FF}[Central de policía]{FFFFFF} %s %s contesta la llamada de %s.",RangoPolicia(playerid),PlayerInfo[playerid][Nickname],PlayerInfo[i][Nickname]);
                    SendRadioPoliceMessage(-1,string);
                    format(string,sizeof(string),"{3399FF}[Central de policía]{FFFFFF} %s %s ha contestado su llamada",RangoPolicia(playerid),PlayerInfo[playerid][Nickname]);
                    SendClientMessage(i, -1, string);
                    if(PlayerInfo[i][Agonizando] != 1) SetPlayerSpecialAction(i, SPECIAL_ACTION_USECELLPHONE);
                    if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
                    return 1;
                }
            }
        }
        if(Mobile2[playerid] == 2540)
        {
            finllamada(playerid);
            EnLlamada[playerid] = 1;
            Mobile2[playerid] = 0;
            PlayerInfo[playerid][MobileSub] = 2540;
            SendClientMessage(playerid,-1,"Atiendes la llamada.");
            SetTimerEx("MandarMensajeTransportistas",2000,false,"d",playerid);
        }
        else if(PlayerInfo[playerid][MobileSub] != INVALID_PLAYER_ID)
        {
            foreach(new u : Player)
            {
                if(PlayerInfo[u][MobileSub] == playerid)
                {
                    KillTimer(CLlamada[playerid]);
                    KillTimer(CLlamada[u]);
                    finllamada(playerid);
                    EnLlamada[playerid] = 1;
                    EnLlamada[u] = 1;
                    PlayerInfo[playerid][Mobile] = u;
                    PlayerInfo[u][Mobile] = playerid;
                    PlayerInfo[u][MobileSub] = INVALID_PLAYER_ID;
                    PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
                    SendClientMessage(playerid,-1,"Atiendes la llamada.");
                    SendClientMessage(u,  -1, "Contestaron la llamada.");
                    AccionesRol(playerid,"contesta su teléfono.", 20);
                    if(PlayerInfo[playerid][Agonizando] != 1) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
                    if(PlayerInfo[u][Agonizando] != 1) SetPlayerSpecialAction(u, SPECIAL_ACTION_USECELLPHONE);
                    return 1;
                }
            }
        }
        else return SendClientMessage(playerid,-1,"No hay ninguna llamada para atender.");
    }
    return 1;
}
CMD:colgar(playerid)
{
    if(PlayerInfo[playerid][pNumero] > 0)
    {
        if(PlayerInfo[playerid][MobileSub] == 911 || PlayerInfo[playerid][MobileSub] == 2540 || Mobile2[playerid] == 2540 || PlayerInfo[playerid][MobileSub] == 815)
        {
            PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
            PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
            EnLlamada[playerid] = 0;
            Mobile2[playerid] = 0;
            ColgarLaLlamada(playerid);
            finllamada(playerid);
            return 1;
        }
        else if(PlayerInfo[playerid][MobileSub] != INVALID_PLAYER_ID)
        {
            PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
            PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
            EnLlamada[playerid] = 0;
 			ColgarLaLlamada(playerid);
            finllamada(playerid);
            return 1;
        }
        else if(PlayerInfo[playerid][Mobile] != INVALID_PLAYER_ID)
        {
            if(YoLlame[PlayerInfo[playerid][Mobile]] == 1)
            {
                new striing[128],striong[20];
                SendClientMessage(PlayerInfo[playerid][Mobile],-1,"Guardaste el teléfono móvil, llamada finalizada");
                format(striing,sizeof(striing),"Costo total de la llamada que acabas de realizar:{00CC00} $%d",MinutoLlamada[PlayerInfo[playerid][Mobile]]/2);
                SendClientMessage(PlayerInfo[playerid][Mobile],-1,striing);
                SendClientMessage(playerid,  -1, "Cortaron la comunicación.");
     			ColgarLaLlamada(playerid);
                QuitarDinero(playerid, MinutoLlamada[PlayerInfo[playerid][Mobile]]/2);
                format(striong,sizeof(striong),"~r~-$%d",MinutoLlamada[PlayerInfo[playerid][Mobile]]/2);
                GameTextForPlayer(PlayerInfo[playerid][Mobile], striong, 5000, 1);
                MinutoLlamada[PlayerInfo[playerid][Mobile]] = 0;
            }
            else if(YoLlame[playerid] == 1)
            {
                new striing[128],striong[20];
                SendClientMessage(playerid,-1,"Guardaste el teléfono móvil, llamada finalizada");
                format(striing,sizeof(striing),"Costo total de la llamada que acabas de realizar:{00CC00} $%d",MinutoLlamada[playerid]/2);
                SendClientMessage(playerid,-1,striing);
                SendClientMessage(PlayerInfo[playerid][Mobile],  -1, "Cortaron la comunicación.");
     			ColgarLaLlamada(playerid);
                QuitarDinero(playerid, MinutoLlamada[playerid]/2);
                format(striong,sizeof(striong),"~r~-$%d",MinutoLlamada[playerid]/2);
                GameTextForPlayer(playerid, striong, 5000, 1);
                MinutoLlamada[playerid] = 0;
            }
            EnLlamada911[playerid] = 0;
            EnLlamada911[PlayerInfo[playerid][Mobile]] = 0;
            PlayerInfo[PlayerInfo[playerid][Mobile]][MobileSub] = INVALID_PLAYER_ID;
            PlayerInfo[PlayerInfo[playerid][Mobile]][Mobile] = INVALID_PLAYER_ID;
            EnLlamada[PlayerInfo[playerid][Mobile]] = 0;
			ColgarLaLlamada(playerid);
            PlayerInfo[playerid][MobileSub] = INVALID_PLAYER_ID;
            PlayerInfo[playerid][Mobile] = INVALID_PLAYER_ID;
            EnLlamada[playerid] = 0;
            finllamada(playerid);
            return 1;
        }
        else return SendClientMessage(playerid,  -1, "No puedes colgar el teléfono si no lo estás usando.");
    }
    else SendClientMessage(playerid,  -1, "No puedes colgar el teléfono si no lo estás usando.");
    return 1;
}
CMD:reanimar(playerid,params[])
{
    new ID,Float:x,Float:y,Float:z;
    if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return 1;
    if(RopaMedi[playerid] == 0) return 1;
    if(sscanf(params,"d",ID)) return SendClientMessage(playerid, -1,"Escribe {DBED15}/reanimar [ID]");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1,"Jugador desconectado");
    if(MarcadoMedicos[ID] != 1) return SendClientMessage(playerid, COLOR_DORADO,"Este jugador no llamó al servicio médico.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo");
    if(ID == playerid) return SendClientMessage(playerid,COLOR_DORADO,"No puedes reanimarte tu mismo.");
    GetPlayerPos(ID,x,y,z);
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, x,y,z)) return SendClientMessage(playerid, -1,"Debes estar cerca de un paciente para reanimarlo");
    if(MedicoReanimo[ID] == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Ya reanimaste esta persona.");
    SendClientMessage(playerid, COLOR_DORADO,"Reanimando...");
    LoopingAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
    SetTimerEx("ReanimarMedico",8000,false,"dd",playerid,ID);
    return 1;
}
CMD:estacionar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:Health,veh = GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(veh != -1)
		{
			if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehículo esta muy dañado, arreglalo primero.");
			else AccionesRol(playerid,"está apagando el motor de su vehículo.", 20),SetTimerEx("EstacionarCoche",1200, false, "dd",playerid,1);
		}
	}
	return 1;
}
CMD:ocultar(playerid, params[])
{
    new item[128];
    if(!sscanf(params, "s[32]", item))
    {
  		if(strcmp(item,"barras",true) == 0)
		{
		    if(PlayerInfo[playerid][pBarras] == 0) return SendClientMessage(playerid,-1,"Ya tienes oculta la barra indicadora de sed.");
            PlayerInfo[playerid][pBarras] = 0;
			BarrasFunciones(playerid, 2);
			SendClientMessage(playerid,-1,"Ocultaste las barra de sed y hambre, para volver a mostrarla usa {DBED15}/mostrar barras{FFFFFF}.");
		}
        if(strcmp(item,"nombres",true) == 0)
        {
            if(NombresOcultos[playerid] == 1) GameTextForPlayer(playerid, "OCULTANDO ~r~NOMBRES", 1000, 5);
            else
            {
                NombresOcultos[playerid] = 1;
                foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, 0);
                GameTextForPlayer(playerid, "~r~OCULTANDO ~w~NOMBRES", 1000, 5);
                SendClientMessage(playerid,-1,"Ocultaste los nombres de los jugadores, para volver a mostrarlo escribe {DBED15}/mostrar nombres");
            }
        }
    }
    return 1;
}
CMD:recibirdatos(playerid, params[])
{
    new interior = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
    MensajeEx(playerid, -1, "Interior: %d - VW: %d",interior,vw);
    return 1;
}
CMD:est(playerid, params[])
{
    new id;
    if(PlayerInfo[playerid][pAdmin] < CMD_MOD_JUEGO) return ShowStats(playerid,playerid);
    if(sscanf(params,"d",id)) return ShowStats(playerid,playerid);
    if(!IsPlayerConnected(id)) return 1;
    MensajeEx(playerid,COLOR_ROJO,"Estadísticas de %s",PlayerName(id));
    ShowStats(playerid,id);
    return 1;
}
CMD:gps(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);
    if(PlayerInfo[playerid][pGPS] != 1 || GetVehicleModel(carid) != 416 && PlayerInfo[playerid][pGPS] != 1 || GetVehicleModel(carid) != 420 && PlayerInfo[playerid][pGPS] != 1  || GetVehicleModel(carid) != 438 && PlayerInfo[playerid][pGPS] != 1) return SendClientMessage(playerid, -1, "No tienes un {DBED15}GPS {FFFFFF}Puedes comprar uno en cualquier 24/7");
    ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "GPS: Puntos de interés", "Concesionarios\nLugares de trabajo\nTiendas de ropa\nBancos\nTienda 24/7\nEdificios Municipales\nFerreterias\nGranjas\nIglesias\nTienda BabyZone\nTaller Tuning", "Siguiente", "Cerrar");
    AccionesRol(playerid,"mira su GPS.", 20);
    return 1;
}
CMD:tiempo(playerid,params[])
{
    new id;
    if(PlayerInfo[playerid][pAdmin] < 3) return VerTiempos(playerid,playerid);
    if(sscanf(params,"d",id)) return VerTiempos(playerid,playerid);
    MensajeEx(playerid, COLOR_ROJO, "TIEMPO DE %s",PlayerInfo[id][Nickname]);
    VerTiempos(playerid,id);
    return 1;
}
CMD:check(playerid, params[])
{
    new ID;
    if(!sscanf(params, "d", ID)) return ShowStats(ID, playerid);
    return 1;
}
CMD:inventario(playerid,params[])
{
    new ID;
    if(sscanf(params, "d", ID)) return Inventario(playerid, playerid);
    if(PlayerInfo[playerid][pAdmin] < 3) return Inventario(playerid, playerid);
    else
    {
        if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
        MensajeEx(playerid, COLOR_MEGAPHONE, "Inventario del jugador %s", PlayerInfo[ID][Nickname]);
        Inventario(ID,playerid);
    }
    return 1;
}
CMD:localizar(playerid, params[])
{
    new item[30],ID;
    if(!sscanf(params,"s[32]",item))
    {
        if(strcmp(item, "propiedad", true) == 0) LocalizarPropiedad(playerid);
    }
    if(!sscanf(params,"d",ID))
	{
		if(PlayerInfo[playerid][pAdmin] < CMD_MOD_DUDAS) return 1;
		if(!IsPlayerConnected(ID) || ID == INVALID_PLAYER_ID) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
		if(VehicleInfo[ID][0][vModelo] > 0 || VehicleInfo[ID][1][vModelo] > 0 || VehicleInfo[ID][2][vModelo] > 0 || VehicleInfo[ID][3][vModelo] > 0 || VehicleInfo[ID][4][vModelo] > 0 || VehicleInfo[ID][5][vModelo] > 0 || VehicleInfo[ID][6][vModelo] > 0 || VehicleInfo[ID][7][vModelo] > 0)
		{
			MensajeEx(playerid,COLOR_MEGAPHONE,"Listado de vehículos de %s",PlayerName(ID));
			if(VehicleInfo[ID][0][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[0][ID])-400], Patente[ID][0],autos[0][ID]);
			if(VehicleInfo[ID][1][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[1][ID])-400], Patente[ID][1],autos[1][ID]);
			if(VehicleInfo[ID][2][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[2][ID])-400], Patente[ID][2],autos[2][ID]);
			if(VehicleInfo[ID][3][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[3][ID])-400], Patente[ID][3],autos[3][ID]);
			if(VehicleInfo[ID][4][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[4][ID])-400], Patente[ID][4],autos[4][ID]);
			if(VehicleInfo[ID][5][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[5][ID])-400], Patente[ID][5],autos[5][ID]);
			if(VehicleInfo[ID][6][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[6][ID])-400], Patente[ID][6],autos[6][ID]);
			if(VehicleInfo[ID][7][vModelo] > 0) MensajeEx(playerid,-1,"- Vehículo: {F6E200}%s{FFFFFF} | Patente: {00CCFF}%s{FFFFFF} | ID: %d", NombreAuto[GetVehicleModel(autos[7][ID])-400], Patente[ID][7],autos[7][ID]);
		}
		else SendClientMessage(playerid,-1,"Este jugador no tiene ningún vehiculo a su nombre.");
	}
	if(sscanf(params, "s[30]", item))
	{
		new string[100*MAX_PAUTOS];
		for(new i = 0; i < MAX_PAUTOS; i++)
		{
			if(VehicleInfo[playerid][i][vModelo] < 400) continue;
			format(string, sizeof(string), "%s Vehículo: {F6E200}%s{FFFFFF} | %s\n",string,GetVehicleName(autos[i][playerid]));
		}
		ShowPlayerDialog(playerid, GeoLocalization, DIALOG_STYLE_LIST, "Selecciona el vehículo que deseas localizar", string, "Localizar","Cancelar");
	}
    return 1;
}
CMD:habilidad(playerid,params[])
{
    new ID;
    if(sscanf(params, "d", ID)) return Habilidad(playerid,playerid);
    if(PlayerInfo[playerid][pAdmin] < 2) return Habilidad(playerid,playerid);
    MensajeEx(playerid, COLOR_MEGAPHONE, "Listado de Habilidades de %s", PlayerInfo[ID][Nickname]);
    Habilidad(ID,playerid);
    return 1;
}
CMD:frecuencias(playerid,params[])
{
    if(PlayerInfo[playerid][pDuty] != 1) return 1;
    MostrarFrecuencias(playerid);
    return 1;
}
CMD:miranda(playerid,params[])
{
    new string[128];
    if(PlayerInfo[playerid][pFaccion] != 1) return SendClientMessage(playerid, COLOR_BLANCO, "No eres policía.");
    format(string, sizeof(string), "%s dice: Tiene el derecho a guardar silencio.",PlayerInfo[playerid][Nickname]);
    if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    format(string, sizeof(string), "%s dice: Cualquier cosa que diga puede y será usada en su contra en un tribunal de justicia.",PlayerInfo[playerid][Nickname]);
    if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    format(string, sizeof(string), "%s dice: Tiene el derecho de hablar con un abogado y que un abogado esté presente durante cualquier interrogatorio.",PlayerInfo[playerid][Nickname]);
    if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    format(string, sizeof(string), "%s dice: Si no puede pagar un abogado, se le asignará uno pagado por el gobierno.",PlayerInfo[playerid][Nickname]);
    if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    format(string, sizeof(string), "%s pregunta: ¿Le han quedado claro los derechos previamente mencionados?",PlayerInfo[playerid][Nickname]);
    if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    return 1;
}
CMD:esposar(playerid, params[])
{
    new data[144], Float:pos[3], id;
    if(sscanf(params, "d", id) )return SendClientMessage(playerid,COLOR_WHITE,"Usa: {DBED15}/esposar [id o nombre]");
    GetPlayerPos(id, pos[0], pos[1], pos[2]);
    if(IsPlayerNPC(id)) return 1;
    if(!IsPlayerConnected(id)) return 1;
    if(PlayerInfo[id][pCargos] == 0) return SendClientMessage(playerid,-1,"Esa persona no tiene nivel de búsqueda.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid,-1,"Está demasiado lejos, distancia máxima {DBED15}5m");
    {
        if(PlayerInfo[playerid][pDuty] != 1) return 1;
        Esposando[id] = 1;
        Oficial[id] = playerid;
        TogglePlayerControllable(id,0);
        SetPVarInt(id, "IsFrozen", 0);
        TimerEsposar[id] = SetTimerEx("TiempoArresto", 10000, false, "d", id);
        EnPatrulla[id] = 0;
        SetPlayerSpecialAction(id,SPECIAL_ACTION_HANDSUP);
        format(data, sizeof(data), "Oficial %s intenta esposar a %s",PlayerInfo[playerid][Nickname], PlayerInfo[id][Nickname]);
        ProxDetector(20.0, playerid, data, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        SendClientMessage(id,-1,"Estas siendo esposado, para resitirte escribe {DBED15}/resistirse");
    }
    return true;
}
CMD:resistirse(playerid, params[])
{
    new string[126],chatadmin[256];
    if(Esposando[playerid] == 1)
    {
        if(PlayerInfo[playerid][pCargos] == 1)
        {
            SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pCargos] = 2);
            foreach(new i : Player)
            {
                if(PlayerInfo[i][pDuty] == 1)   SetPlayerMarkerForPlayer(i, params[0], COLORCARGO2);
            }
        }
        TogglePlayerControllable(playerid,1);
        SetPVarInt(playerid, "IsFrozen", 1);
        Esposando[playerid] = 0;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        KillTimer(TimerEsposar[playerid]);
        format(chatadmin,sizeof(chatadmin),"[Radio] {FFFFFF}%s %s: {00CCFF}%s{FFFFFF} se resistió al arresto, inicio persecución.",RangoPolicia(Oficial[playerid]),PlayerName(Oficial[playerid]), PlayerInfo[playerid][Nickname]);
        SendRadioPoliceMessage(TEAM_BLUE_COLOR, chatadmin, playerid);
        format(string,sizeof(string),"[Radio de policía] (%s %s) dice: %s se resistió al arresto, inicio persecución.",RangoPolicia(Oficial[playerid]),PlayerName(Oficial[playerid]), PlayerInfo[playerid][Nickname]);
        ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
    }
    return 1;
}
CMD:entregar(playerid,params[])
{
    new string[158],patrulla;
    patrulla = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid))
    if(PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
    if(!SAPD(patrulla) && !HELISAPD(patrulla)) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial");
    if(!EnComisaria(playerid)) return SendClientMessage(playerid,-1,"No estás en el área de entrega de ninguna comisaria");
    foreach(new i : Player)
    {
        if(EnAuto[i] == patrulla && PlayerInfo[i][pCargos] > 0)
        {
            RemovePlayerFromVehicle(i);
            format(string, sizeof(string), "%s baja a %s de su vehículo.", PlayerInfo[playerid][Nickname],PlayerInfo[i][Nickname]);
            ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
            SetTimerEx("EncerrandoNombre",4000,false,"dd",playerid,i);
            SetTimerEx("Encerrando",4800,false,"d",i);
        }
    }
    return 1;
}
CMD:liberar(playerid,params[])
{
    new id,Float:x,Float:y,Float:z,string[128];
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1, "Usa: {DBED15}/liberar id");
    if(PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pFaccion] == 1)
    {
        GetPlayerPos(id, x,y,z);
        if(PlayerInfo[id][pCargos] > 1) return 1;
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, -1, "No estas cerca de este jugador");
        if(VariableCaido[id] == 1 || Esposando[id] == 2 || EnPatrulla[id] == 1)
        {
            if(IsPlayerInAnyVehicle(id)) RemovePlayerFromVehicle(id);
            VariableCaido[id] = 0;
            Esposando[id] = 0;
            SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
            PlayerInfo[id][pCargos] = 0;
            SetPlayerWantedLevel(id,PlayerInfo[id][pCargos]);
            TogglePlayerControllable(id, 1);
            SetPVarInt(id, "IsFrozen", 1);
            format(string, sizeof(string), "%s %s libera al sospechoso",RangoPolicia(playerid),PlayerInfo[playerid][Nickname]);
            ProxDetector(15.0,playerid,string,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        }
        else return SendClientMessage(playerid, -1, "El jugador debe estar abatido o esposado");
    }
    return 1;
}
CMD:arrestar(playerid, params[])
{
    new ID, Lugar, patrulla, Float:x, Float:y, Float:z;
    patrulla = GetPlayerVehicleID(playerid);
    if(sscanf(params, "dd", ID, Lugar))return SendClientMessage(playerid,COLOR_WHITE,"Usa: {DBED15}/arrestar id {FFFFFF}[{DBED15}1{FFFFFF} para subirlo en el asiento izquierdo o {DBED15}2{FFFFFF} en el derecho]");
    if(PlayerInfo[playerid][pDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "No estás con el uniforme de policía.");
    if(IsPlayerNPC(ID)) return 1;
    if(!IsPlayerConnected(ID)) return 1;
    if(VariableCaido[ID] != 1 && Esposando[ID] != 2) return SendClientMessage(playerid,COLOR_WHITE,"El sospechoso no esta esposado o abatido.");
    if(PlayerInfo[ID][pCargos] == 0) return SendClientMessage(playerid,-1,"Este jugador no tiene nivel de busqueda.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial.");
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 528 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 601) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial.");
    if(!SAPD(patrulla) && !HELISAPD(patrulla)) return SendClientMessage(playerid,-1,"Necesitas estar conduciendo un patrullero para arrestar a alguien.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar conduciendo la patrulla.");
    GetPlayerPos(ID, x,y,z);
    if(IsPlayerInRangeOfPoint(playerid, 40.0,  x, y,z))
    {
        switch(Lugar)
        {
            case 1: PutPlayerInVehicle(ID, patrulla, 2);
            case 2: PutPlayerInVehicle(ID, patrulla, 3);
            default: return 1;
        }
        QuitarArmas(ID);
        SetPlayerArmedWeapon(ID, 0);
        BajandoV[ID] = 0;
        EnAuto[ID] = patrulla;
        EnPatrulla[ID] = 1;
        VariableCaido[ID] = 0;
        PlayerInfo[ID][Agonizando] = 0;
        TogglePlayerControllable(ID, 0);
        SetPVarInt(ID, "IsFrozen", 0);
        AccionesRol(playerid,"sube al detenido en su patrullero.", 20);
    }
    else SendClientMessage(playerid, -1, "Acerca el patrullero para subir al prisionero.");
    return 1;
}
CMD:domiciliaria(playerid)
{
    new string[128];
    if(Jail[playerid] == 0) return 1;
    if(PlayerInfo[playerid][CasaID2] == 0 && PlayerInfo[playerid][CasaID] == 0) return SendClientMessage(playerid,-1,"Necesitas tener al menos una propiedad para cumplir tu arresto en el domicilio.");
    if(EstaDomiciliaria[playerid] == 1) return SendClientMessage(playerid,-1,"Ya te encuentras cumpliendo condena domiciliaria.");
    format(string, sizeof(string), "El costo para cumplir la condena en tu domicilio es de {04D616}3800$");
    ShowPlayerDialog(playerid, DOMICILIARIA, DIALOG_STYLE_MSGBOX, "Cumplimiento de condena en domicilio", string, "Aceptar","Rechazar");
    return 1;
}
CMD:entrar(playerid, params[])
{
    if(Tiempos[playerid][Entrando] > gettime()) return 1;
    EntrarInterior(playerid);
    return 1;
}
CMD:salir(playerid, params[])
{
    if(Tiempos[playerid][Entrando] > gettime()) return 1;
    SalirInterior(playerid);
    return true;
}
CMD:uniforme(playerid, params[])
{
    new texto[128];
    if(!sscanf(params,"s[128]",texto))
    {
        if(strcmp(texto,"medico",true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico)
            {
                if(IsPlayerInRangeOfPoint(playerid,5.0,1159.4829,-356.8820,-10.7922)) PonerRopaMedico(playerid,1);
                if(IsPlayerInRangeOfPoint(playerid,5.0,1234.4447,-830.0233,1164.2759)) PonerRopaMedico(playerid,2);
                if(IsPlayerInRangeOfPoint(playerid,5.0,-2729.9434,614.0607,1385.6534)) PonerRopaMedico(playerid,3);
            }
            else return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
        }
        if(strcmp(texto,    "minero",   true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] == T_Minero || PlayerInfo[playerid][pTrabajo2] == T_Minero)
            {
                if(IsPlayerInRangeOfPoint(playerid,3.0,269.1445,295.4604,999.8400))
                {
                    if(RopaMine[playerid] == 0)
                    {
                        switch(PlayerInfo[playerid][pSexo])
                        {
                            case 2: SetPlayerSkin(playerid, 131);
                            default: SetPlayerSkin(playerid, 27);
                        }
                        RopaMine[playerid] = 1;
                        SendClientMessage(playerid,-1,"Te has colocado el uniforme correctamente");
                    }
                    else if(RopaMine[playerid] == 1)
                    {
                        RopaMine[playerid] = 0; RopaMedi[playerid] = 0; RopaBasu[playerid] = 0;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]);
                        SendClientMessage(playerid,-1,"Te has quitado el uniforme correctamente.");
                    }
                }
            }
            else return SendClientMessage(playerid,-1,"Necesitas el trabajo de minero para utilizar este comando");
        }
    }
    return 1;
}
CMD:dejar(playerid,params[])
{
    new item[32],ID,rocas[5];
    if(!sscanf(params,"s[32]", item))
    {
        if(strcmp(item, "roca",true)==0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 10.0, -548.2949,2336.7649,83.4777)) return SendClientMessage(playerid, -1, "No estas en el lugar adecuado.");
            rocas[0] = rocajugador[playerid];
            rocas[1] = INVALID_TOY_ID;
            rocas[2] = INVALID_TOY_ID;
            rocas[3] = INVALID_TOY_ID;
            ShowModelSelectionMenuEx2(playerid, rocas, 4, "Selecciona la roca", OBJETIVOROCA, 16.0, 0.0, -55.0, 1.0, 0x000000FF, 0x08090AFF, 1);
        }
        if(strcmp(item, "trabajo",true)==0)
        {
            if(PlayerInfo[playerid][pTrabajo] > T_Ninguno) MensajeEx(playerid,-1,"Escribe {DBED16}/dejar trabajo %d{FFFFFF} para abandonar el trabajo de %s.", PlayerInfo[playerid][pTrabajo], NombreTrabajo(PlayerInfo[playerid][pTrabajo]));
            if(PlayerInfo[playerid][pTrabajo2] > T_Ninguno) MensajeEx(playerid,-1,"Escribe {DBED16}/dejar trabajo %d{FFFFFF} para abandonar el trabajo de %s.", PlayerInfo[playerid][pTrabajo2], NombreTrabajo(PlayerInfo[playerid][pTrabajo2]));
        }
    }
    if(!sscanf(params,"s[32]d", item, ID))
    {
        if(strcmp(item, "trabajo",true)==0)
        {
            if(PlayerInfo[playerid][pTrabajo] == ID)
            {
                MensajeEx(playerid,-1,"Has abandonado el trabajo de {DBED16}%s{FFFFFF}.", NombreTrabajo(PlayerInfo[playerid][pTrabajo]));
                if(PlayerInfo[playerid][pTrabajo] == T_Medico) { if(RopaMedi[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMedi[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo] == T_Basurero) { if(RopaBasu[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaBasu[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo] == T_Mecanico) { if(RopaMeca[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMeca[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo] == T_Minero) { if(RopaMine[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMine[playerid] = 0; }
                if(permisopesca[playerid] == 1) { RemovePlayerMapIcon(playerid, 99); permisopesca[playerid] = 0; }
                PlayerInfo[playerid][pTrabajo] = T_Ninguno;
            }
            else if(PlayerInfo[playerid][pTrabajo2] == ID)
            {
                MensajeEx(playerid,-1,"Has abandonado el trabajo de {DBED16}%s{FFFFFF}.", NombreTrabajo(PlayerInfo[playerid][pTrabajo2]));
                if(PlayerInfo[playerid][pTrabajo2] == T_Medico) { if(RopaMedi[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMedi[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo2] == T_Basurero) { if(RopaBasu[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaBasu[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo2] == T_Mecanico) { if(RopaMeca[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMeca[playerid] = 0; }
                if(PlayerInfo[playerid][pTrabajo2] == T_Minero) { if(RopaMine[playerid] != 0) SetPlayerSkin(playerid, PlayerInfo[playerid][pRopa]); RopaMine[playerid] = 0; }
                if(permisopesca[playerid] == 1) { RemovePlayerMapIcon(playerid, 99); permisopesca[playerid] = 0; }
                PlayerInfo[playerid][pTrabajo2] = T_Ninguno;
            }
        }
    }
    return 1;
}
CMD:aceptar(playerid, params[])
{
    new item[128],Float:X,Float:Y,Float:Z,day,month,year;
    getdate(year,month,day);
    if(!IsPlayerConnected(playerid)) return 1;
    if(!sscanf(params, "s[128]", item))
    {
        if(strcmp(item, "arma", true) == 0)
        {
            if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes recibir un arma si estás en un vehículo.");
            if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un arma.");
            if(IsPlayerInAnyVehicle(ofertador[playerid])) return SendClientMessage(playerid,-1,"La persona que te ha ofrecido el arma se encuentra en un vehículo");
            if(PlayerInfo[playerid][pDinero] >= dineropedido[playerid])
            {
                GetPlayerPos(ofertador[playerid], X,Y,Z);
                if(!IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
                {
                    if(!CheckArma(ofertador[playerid],armaofertada[playerid])) return SendClientMessage(playerid,-1,"El jugador ya no tiene el arma que te ha ofrecido");
                    new string[256],Query[200];
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, arma, precio, comprador,fecha) VALUES ('%e','Arma', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],armaofertada[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                    mysql_tquery(handle_db, Query);
                    QuitarDinero(playerid, dineropedido[playerid]);
                    DarArma(playerid,armaofertada[playerid]);
                    QuitarArma(ofertador[playerid],armaofertada[playerid]);
                    DarDinero(ofertador[playerid],dineropedido[playerid]);
                    format(string, 256, " %s recibe el arma de %s",PlayerInfo[playerid][Nickname],PlayerInfo[ofertador[playerid]][Nickname]);
                    ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    if(idTimerOfertaPerdida[playerid] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                        idTimerTiempoVenta[ofertador[playerid]] = -1;
                    }
                    armaofertada[playerid] = 0;
                    dineropedido[playerid] = 0;
                    ofertador[playerid] = INVALID_PLAYER_ID;
                }
            }
            else SendClientMessage(playerid,-1,"No tienes suficiente dinero");
        }
        if(strcmp(item,"muerte", true) == 0)
        {
            if(PlayerInfo[playerid][Agonizando] == 1 && Muriendo[playerid] == 1)
            {
                PlayerTemp[playerid][@pHospital] = 1;
                ApareceHospital(playerid),      Muriendo[playerid] = 0;
                MarcadoMedicos[playerid] = 0,   LlamadaMedicos[playerid] = 0;
                TimerMalherido[playerid] = 0,   suicidio[playerid] = 0;
            }
        }
		if(strcmp(item,"reparacion", true) == 0)
		{
			GetPlayerPos(Mecanico[playerid], X,Y,Z);
			if(Mecanico[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Ningun mecánico te ha ofrecido reparar tu vehículo");
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar conduciendo tu vehículo para utilizar este comando");
			if(PlayerInfo[playerid][pDinero] < MConductor[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
			if(PlayerInfo[playerid][pNivel] == 1 && PlayerInfo[playerid][pExperiencia] < 4) return SendClientMessage(playerid,-1,"Necesitas tener por lo menos 4 horas de juego para aceptar una reparación");
			if(IsPlayerInRangeOfPoint(playerid, 6.0, X,Y,Z))
			{
				new pName[24],Float:angle,autoid = GetPlayerVehicleID(playerid);
				GetPlayerName(Mecanico[playerid],pName,24);
				GetPlayerFacingAngle(Mecanico[playerid],angle);
				SetPlayerFacingAngle(Mecanico[playerid],angle+180);
				LoopingAnim(Mecanico[playerid],"CAR","Fixn_Car_Loop",1,4,0,0,1,15000);
				switch(PlayerInfo[Mecanico[playerid]][pNivelMecanico])
				{
				    case 1: SetTimerEx("Reparando2",15000,false,"ddd",Mecanico[playerid],autoid,1),GameTextForPlayer(Mecanico[playerid], "~w~REPARANDO VEHICULO", 15000, 5);
					case 2: SetTimerEx("Reparando2",13000,false,"ddd",Mecanico[playerid],autoid,1),GameTextForPlayer(Mecanico[playerid], "~w~REPARANDO VEHICULO", 13000, 5);
					case 3: SetTimerEx("Reparando2",9000,false,"ddd",Mecanico[playerid],autoid,1),GameTextForPlayer(Mecanico[playerid], "~w~REPARANDO VEHICULO", 9000, 5);
					case 4: SetTimerEx("Reparando2",6000,false,"ddd",Mecanico[playerid],autoid,1),GameTextForPlayer(Mecanico[playerid], "~w~REPARANDO VEHICULO", 6000, 5);
					default: SetTimerEx("Reparando2",3000,false,"ddd",Mecanico[playerid],autoid,1),GameTextForPlayer(Mecanico[playerid], "~w~REPARANDO VEHICULO", 3000, 5);
				}
				new repuestos = MRepuestos[Mecanico[playerid]];
				LlamadaMeca[playerid] = 0;
				SetPlayerColor(playerid, COLOR_WHITE);
				QuitarDinero(playerid, MConductor[playerid]);
				DarDinero(Mecanico[playerid], MConductor[playerid]);
				PlayerInfo[Mecanico[playerid]][Repuestos] -= repuestos;
				Mecanico[playerid] = INVALID_PLAYER_ID;
				AccionesRol(Mecanico[playerid],"comienza a reparar el vehículo.", 20);
				new string99[128];
				foreach(new z : Player)
				{
					if(PlayerInfo[z][pAdmin] > 2)
					{
						format(string99,128,"%s (ID: %d | Nivel: %d) recibe $%d por reparar el vehiculo de %s (ID:%d - Nivel:%d - 2hs)",PlayerName(Mecanico[playerid]),Mecanico[playerid],PlayerInfo[Mecanico[playerid]][pNivel],MConductor[playerid],PlayerName(playerid),playerid,PlayerInfo[playerid][pNivel]);
						SendClientMessage(z,0xFFDBED15FF,string99);
					}
				}
			}
			else return SendClientMessage(playerid,-1,"Debes estar cerca del mecánico para aceptar la reparación");
		}
        if(strcmp(item,"consumible", true) == 0)
        {
            if(TipoOferta[playerid] == 1)
            {
                GetPlayerPos(ofertador[playerid], X,Y,Z);
                if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
                if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
                if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
                if(PlayerInfo[ofertador[playerid]][pCrack] < CrackOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de crack que te ha ofrecido");
                if(CrackOfrecidos[playerid] > 0)
                {
                    new string[256],Query[200];
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','crack', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],CrackOfrecidos[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                    mysql_tquery(handle_db, Query);
                    QuitarDinero(playerid,dineropedido[playerid]);
                    DarDinero(ofertador[playerid],dineropedido[playerid]);
                    PlayerInfo[playerid][pCrack] += CrackOfrecidos[playerid];
                    TipoOferta[playerid] = 0;
                    PlayerInfo[ofertador[playerid]][pCrack] -= CrackOfrecidos[playerid];
                    format(string, 256, " %s recibió algo de %s",PlayerInfo[playerid][Nickname],PlayerInfo[ofertador[playerid]][Nickname]);
                    ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    if(idTimerOfertaPerdida[playerid] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                        idTimerTiempoVenta[ofertador[playerid]] = -1;
                    }
                    ofertador[playerid] = INVALID_PLAYER_ID;
                    CrackOfrecidos[playerid] = 0;
                }
            }
            else if(TipoOferta[playerid] == 2)
            {
                if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
                GetPlayerPos(ofertador[playerid], X,Y,Z);
                if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
                if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
                if(PlayerInfo[ofertador[playerid]][pMedicamentos] < MedicamentosOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de medicamentos que te ha ofrecido");
                if(MedicamentosOfrecidos[playerid] > 0)
                {
                    new string[256],Query[200];
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Medicamentos', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],MedicamentosOfrecidos[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                    mysql_tquery(handle_db, Query);
                    QuitarDinero(playerid,dineropedido[playerid]);
                    DarDinero(ofertador[playerid],dineropedido[playerid]);
                    TipoOferta[playerid] = 0;
                    PlayerInfo[playerid][pMedicamentos] += MedicamentosOfrecidos[playerid];
                    PlayerInfo[ofertador[playerid]][pMedicamentos] -= MedicamentosOfrecidos[playerid];
                    format(string, 256, " %s recibió algo de %s",PlayerInfo[playerid][Nickname],PlayerInfo[ofertador[playerid]][Nickname]);
                    ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    if(idTimerOfertaPerdida[playerid] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                        idTimerTiempoVenta[ofertador[playerid]] = -1;
                    }
                    ofertador[playerid] = INVALID_PLAYER_ID;
                    MedicamentosOfrecidos[playerid] = 0;
                }
            }
            else if(TipoOferta[playerid] == 3)
            {
                if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
                GetPlayerPos(ofertador[playerid], X,Y,Z);
                if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
                if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
                if(PlayerInfo[ofertador[playerid]][pMarihuana] < MarihuanaOfrecida[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de marihuana que te ha ofrecido");
                if(MarihuanaOfrecida[playerid] > 0)
                {
                    new string[256],Query[200];
                    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Marihuana', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],MarihuanaOfrecida[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                    mysql_tquery(handle_db, Query);
                    QuitarDinero(playerid,dineropedido[playerid]);
                    TipoOferta[playerid] = 0;
                    DarDinero(ofertador[playerid],dineropedido[playerid]);
                    PlayerInfo[playerid][pMarihuana] += MarihuanaOfrecida[playerid];
                    PlayerInfo[ofertador[playerid]][pMarihuana] -= MarihuanaOfrecida[playerid];
                    format(string, 256, " %s recibió algo de %s",PlayerInfo[playerid][Nickname],PlayerInfo[ofertador[playerid]][Nickname]);
                    ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                    if(idTimerOfertaPerdida[playerid] != -1)
                    {
                        KillTimer(idTimerOfertaPerdida[playerid]);
                        idTimerOfertaPerdida[playerid] = -1;
                    }
                    if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                    {
                        KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                        idTimerTiempoVenta[ofertador[playerid]] = -1;
                    }
                    ofertador[playerid] = INVALID_PLAYER_ID;
                    MarihuanaOfrecida[playerid] = 0;
                }
            }
            else
            {
                if(TipoOferta[playerid] == 4 && TieneSprunk[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene Sprunk.");
                if(TipoOferta[playerid] == 5 && TieneVino[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene una copa de vino.");
                if(TipoOferta[playerid] == 6 && TieneCerveza[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene cerveza.");
                if(TipoOferta[playerid] == 4)   {   TieneSprunk[playerid] = SprunkOfrecido[playerid];   }
                if(TipoOferta[playerid] == 5)   {   TieneVino[playerid] = SprunkOfrecido[playerid];   }
                if(TipoOferta[playerid] == 6)   {   TieneCerveza[playerid] = SprunkOfrecido[playerid];   }
                new string[128];
                ClearAnimations(Ofertante[playerid]);
                new str[128];
                switch(TipoOferta[playerid])
                {
                    case 4: str = "sprunk", DarSprunk(playerid, SprunkOfrecido[playerid]);
                    case 5: str = "copa de vino", DarVino(playerid, SprunkOfrecido[playerid]);
                    case 6: str = "cerveza",    DarCerveza(playerid, SprunkOfrecido[playerid]);
                    default: return 1;
                }
                SprunkOfrecido[playerid] = 0,   TipoOferta[playerid] = 0;
                SetPlayerSpecialAction(Ofertante[playerid], SPECIAL_ACTION_NONE);
                format(string, sizeof(string), "%s recibió un vaso de %s de %s", PlayerInfo[playerid][Nickname],str, PlayerInfo[Ofertante[playerid]][Nickname]);
                ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                Ofertante[playerid] = -1;
            }
        }
        if(strcmp(item,"piezas", true) == 0)
        {
            GetPlayerPos(ofertador[playerid], X,Y,Z);
            if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció piezas de armas");
            if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
            if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
            if(PlayerInfo[ofertador[playerid]][pMateriales] < PiezasOfrecidas[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de piezas de armas que te ha ofrecido");
            if(PiezasOfrecidas[playerid] > 0)
            {
                new string[256],Query[200];
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','piezas', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],PiezasOfrecidas[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                mysql_tquery(handle_db, Query);
                QuitarDinero(playerid,dineropedido[playerid]);
                DarDinero(ofertador[playerid],dineropedido[playerid]);
                PlayerInfo[playerid][pMateriales] += PiezasOfrecidas[playerid];
                PlayerInfo[ofertador[playerid]][pMateriales] -= PiezasOfrecidas[playerid];
                format(string, 256, " %s recibió algo de %s",PlayerInfo[playerid][Nickname],PlayerInfo[playerid][Nickname]);
                ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                if(idTimerOfertaPerdida[playerid] != -1)
                {
                    KillTimer(idTimerOfertaPerdida[playerid]);
                    idTimerOfertaPerdida[playerid] = -1;
                }
                if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                {
                    KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                    idTimerTiempoVenta[ofertador[playerid]] = -1;
                }
                ofertador[playerid] = INVALID_PLAYER_ID;
                PiezasOfrecidas[playerid] = 0;
            }
        }
        if(strcmp(item,""SERVER_COIN2"", true) == 0)
        {
            GetPlayerPos(ofertador[playerid], X,Y,Z);
            if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ha ofrecido "SERVER_COIN"");
            if(LeOfreci[ofertador[playerid]] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Esta oferta ya ha caducado.");
            if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
            if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
            if(PlayerInfo[ofertador[playerid]][Moneda] < EVOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de "SERVER_COIN" que te ha ofrecido");
            if(EVOfrecidos[playerid] > 0)
            {
                new string[256],Query[200];
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','"SERVER_COIN"', '%d','%d','%e','%02d/%02d/%02d')",PlayerInfo[ofertador[playerid]][Nickname],EVOfrecidos[playerid],dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                mysql_tquery(handle_db, Query);
                QuitarDinero(playerid,dineropedido[playerid]);
                DarDinero(ofertador[playerid],dineropedido[playerid]);
                PlayerInfo[playerid][Moneda] += EVOfrecidos[playerid];
                PlayerInfo[ofertador[playerid]][Moneda] -= EVOfrecidos[playerid];
                format(string, 256, "%s recibió algo de %s",PlayerInfo[playerid][Nickname],PlayerInfo[ofertador[playerid]][Nickname]);
                ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                if(idTimerOfertaPerdida[playerid] != -1)
                {
                    KillTimer(idTimerOfertaPerdida[playerid]);
                    idTimerOfertaPerdida[playerid] = -1;
                }
                if(idTimerTiempoVenta[ofertador[playerid]] != -1)
                {
                    KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
                    idTimerTiempoVenta[ofertador[playerid]] = -1;
                }
                ofertador[playerid] = INVALID_PLAYER_ID;
                EVOfrecidos[playerid] = 0;
            }
        }
        if(strcmp(item,"proteccion", true) == 0)
        {
            if(GuardaEspalda[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"No te han ofrecido ninguna protección");
            GetPlayerPos(GuardaEspalda[playerid], X,Y,Z);
            if(PlayerInfo[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
            if(IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z))
            {
                new string[256],Query[200];
                mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Proteccion', '50','%d','%e','%02d/%02d/%02d')",PlayerName(GuardaEspalda[playerid]),dineropedido[playerid],PlayerInfo[playerid][Nickname],day,month,year);
                mysql_pquery(handle_db, Query);
                QuitarDinero(playerid,dineropedido[playerid]);
                DarDinero(GuardaEspalda[playerid],dineropedido[playerid]);
                GivePlayerArmour(playerid, 50);
                format(string, sizeof(string), "%s recibe la protección de %s",PlayerInfo[playerid][Nickname],PlayerInfo[GuardaEspalda[playerid]][Nickname]);
                ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                GuardaEspalda[playerid] = INVALID_PLAYER_ID;
                return 1;
            }
            else return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
        }
        return 1;
    }
    return 1;
}
CMD:usar(playerid,params[])
{
    new item[32];
    if(!sscanf(params,"s[32]",item))
    {
        if(strcmp(item, "bidon", true)==0)
        {
            if(Bidon[playerid] == 0) return SendClientMessage(playerid, -1, "Tu no tienes un bidon de gasolina");
            if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en un vehículo para utilizar el bidon");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar manejando el vehiculo para usar el bidon");
            {
                new autoid = GetPlayerVehicleID(playerid);
                new resta = 100-VehicleFuel[autoid];
                if(resta > 5)
                {
                    VehicleFuel[autoid] += 5;
                    Bidon[playerid] = 0;
                    SendClientMessage(playerid, -1,"{DBED15}El tanque de combustible fue cargado con el bidón de 5 litros.");
                    RemovePlayerAttachedObject(playerid, 4);
                }
                else if(resta < 5)
                {
                    VehicleFuel[autoid] += resta;
                    Bidon[playerid] = 0;
                    SendClientMessage(playerid, -1,"{DBED15}El tanque de combustible fue cargado con el bidón de 5 litros.");
                    RemovePlayerAttachedObject(playerid, 4);
               }
            }
        }
    }
    return 1;
}
CMD:comprar(playerid, params[])
{
    new item[128],day,month,year;
    getdate(year,month,day);
    if(IsPlayerConnected(playerid))
    if(!sscanf(params, "s[128]", item))
    {
        if(strcmp(item,"entrada",true) == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid,4.5,-1253.2917,2116.7095,1246.5457))
            {
                if(Alquilado == false) return SendClientMessage(playerid,-1,"No hay un evento en este momento.");
                {
                    if(PlayerInfo[playerid][pNivel] <= NivelSalon) return SendClientMessage(playerid,-1,"No tienes el nivel necesario para entrar al salón.");
                    {
                        if(Boleto[playerid] == true) return SendClientMessage(playerid,-1,"Ya tienes una entrada.");
                        {
                            if(PlayerInfo[playerid][pDinero] < PrecioSalon) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar una entrada."); //Cambiar GetPlayerMoney
                            Boleto[playerid] = true;
                            SendClientMessage(playerid,-1,"Compraste una entrada, ya puedes ingresar al estadio");
                            QuitarDinero(playerid,PrecioSalon);
                            Personas ++;
                        }
                    }
                }
            }
			else if(IsPlayerInRangeOfPoint(playerid,7,1101.2697,1613.1414,12.5469))
			{
				if(HabilitarCarreras == 0) return SendClientMessage(playerid,-1,"La boletería está cerrada.");
				if(EntradaCarrera[playerid] == true) return SendClientMessage(playerid,-1,"Ya tienes una entrada.");
				if(PlayerInfo[playerid][pDinero] < 600) return SendClientMessage(playerid,-1,"Necesitas {00CC00}$600{FFFFFF} parar comprar una entrada.");
				QuitarDinero(playerid,600);
				EntradaCarrera[playerid] = true;
				SendClientMessage(playerid,-1,"{00CC00}Compraste una entrada{FFFFFF}, ya puedes ingresar al estadio.");
				return 1;
			}
			else SendClientMessage(playerid,-1,"Las entradas se compran en la boletería.");
        }
        else if(strcmp(item, "objetos",true)==0)
        {
            if(IsPlayerInRangeOfPoint(playerid,5.0,196.3872,-231.1294,1.7786))
            {
                new string[250];
                format(string, 250, "{FFFFFF}Guitarra - {00CC00}$4600{FFFFFF}\n{FFFFFF}Tabla de Surf T1 - {00CC00}$2400{FFFFFF}\n{FFFFFF}Maletin - {00CC00}$4800{FFFFFF}\n{FFFFFF}Tabla de Surf T2 - {00CC00}$2400{FFFFFF}\n{FFFFFF}Bajo (Instrumento Musical) - {00CC00}$4200");
                ShowPlayerDialog(playerid,CCCOBJETOS, DIALOG_STYLE_LIST,"Listado de Objetos En Venta",string,"Comprar","Cancelar");
            }
            else SendClientMessage(playerid, -1, "Tienes que ir a un negocio donde puedas {DBED15}/comprar objetos");
        }
        else if(strcmp(item,"semillas",true) == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid,3.0,-1072.1710,-1202.1224,129.2188))
            {
                if(PlayerInfo[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
               	PlayerInfo[playerid][pSemillas] += 50;
                QuitarDinero(playerid, 1500);
                SendClientMessage(playerid, -1, "Compraste 50 semillas de marihuana, ahora puedes {DBED15}/sembrar{FFFFFF}.");
                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid,3.0,-1103.5033,-1620.6311,76.3672))
            {
                if(PlayerInfo[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
                PlayerInfo[playerid][pSemillas] += 50;
                QuitarDinero(playerid, 1500);
                SendClientMessage(playerid, -1, "Compraste {FF0000}50{FFFFFF} semillas de marihuana, ahora puedes {DBED15}/sembrar{FFFFFF}.");
                return 1;
            }
        }
        else if(strcmp(item,"caja",true) == 0)
        {
            new puede, titulo[36], string[256], objeto, dinero;
			if(IsPlayerInRangeOfPoint(playerid,3.0,93.7855,-305.2337,1.5781)) puede = 1;
			else if(IsPlayerInRangeOfPoint(playerid,3.0,93.7853,-309.5841,1.5781)) puede = 2;
			else if(IsPlayerInRangeOfPoint(playerid,3.0,93.7853,-313.7030,1.5781)) puede = 3;
			else if(IsPlayerInRangeOfPoint(playerid,3.0,86.0509,-315.2853,1.8494)) puede = 4;
			if(puede > 0)
			{
				switch(puede)
				{
					case 1: objeto = 10000, dinero = 1560, titulo = "una caja de aquarius de 12 unidades";
					case 2: objeto = 10001, dinero = 600, titulo = "una caja de vino de 12 unidades";
					case 3: objeto = 10002, dinero = 480, titulo = "una caja de cerveza de 12 unidades";
					case 4: objeto = 10003, dinero = 480, titulo = "una caja de sprunk de 12 unidades";
				}
				if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
				if(PlayerInfo[playerid][pDinero] < dinero)
				{
					format(string,sizeof(string),"No tienes el dinero suficiente {00CC00}$%d{FFFFFF}.",dinero);
					SendClientMessage(playerid, -1, string);
					return 1;
				}
				SetPlayerAttachedObject(playerid, 2, 2969, 6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
				Objeto[playerid] = objeto;
				QuitarDinero(playerid, dinero);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				format(string,sizeof(string),"Compraste %s por {00CC00}$%d{FFFFFF}.",titulo,dinero);
				SendClientMessage(playerid, -1, string);
				SendClientMessage(playerid, -1, "Puedes guardarla usando {DBED16}/baul guardar objeto{FFFFFF} o tirarla con {DBED16}/tirar objeto{FFFFFF}.");
				return 1;
			}
        }
        else if(strcmp(item,"nivel",true)==0)
        {
            if(PlayerInfo[playerid][pNivel] > 0)
            {
                new infostring[128];
                if(PlayerInfo[playerid][pExperiencia] < PlayerInfo[playerid][ExperienciaTotal])
                {
                    SendClientMessage(playerid, -1, "Necesitas aumentar reputación para comprar el siguiente nivel.");
                    SendClientMessage(playerid, -1, "Escribe {DBED15}/est{FFFFFF}adisticas para ver tu reputación.");
                }
                else
                {
                    if(PlayerInfo[playerid][pDinero] < PlayerInfo[playerid][PrecioNivel])
                    {
                        format(infostring,sizeof(infostring),"Necesitas {00CC00}$%d{FFFFFF} para comprar este nivel.",PlayerInfo[playerid][PrecioNivel]);
                        return SendClientMessage(playerid,-1,infostring);
                    }
                    SendClientMessage(playerid, 0xFFFF00FF,"Felicidades, aumentaste un nivel. Ahora tu pago diario será mayor.");
                    PlayerInfo[playerid][pNivel]++;
                    SetPlayerScore(playerid, PlayerInfo[playerid][pNivel]);
                    PlayerInfo[playerid][pExperiencia] = 1;
                    QuitarDinero(playerid, PlayerInfo[playerid][PrecioNivel]);
                    CalcularNivel(playerid);
   					SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Experiencia], PlayerInfo[playerid][ExperienciaTotal]);
					SetPlayerProgressBarValue(playerid,Progressbar[playerid][Experiencia], PlayerInfo[playerid][pExperiencia]);
					UpdatePlayerProgressBar(playerid,Progressbar[playerid][Experiencia]);
                    Actualizar(playerid);
                    SetPlayerStats(playerid);
                    RevisarLogro(playerid,1);
                    return 1;
                }
            }
            return 1;
        }
        else if(strcmp(item, "herramienta",true) == 0 || strcmp(item, "herramientas",true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,5.0,-1072.1169,354.2132,1180.5259))
			{
			    if(GetPlayerVirtualWorld(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 1 || GetPlayerVirtualWorld(playerid) == 2 || GetPlayerVirtualWorld(playerid) == 3)
				{
					new string[520];
					format(string, sizeof(string), "{FFFFFF}Martillo - {00CC00}$20{FFFFFF}\n{FFFFFF}Destornillador - {00CC00}$25{FFFFFF}\n{FFFFFF}Barreta - {00CC00}$60{FFFFFF}\n{FFFFFF}Balde - {00CC00}$120");
					return ShowPlayerDialog(playerid,HERRAMIENTAS, DIALOG_STYLE_LIST,"Herramientas",string,"Comprar","Cancelar");
				}
			}
			else return SendClientMessage(playerid,-1,"Solo se pueden {DBED16}/comprar herramientas{FFFFFF} en las ferreterías.");
		}
        else if(strcmp(item, "licencia",true)==0)
        {
            if(IsPlayerInRangeOfPoint(playerid,2.0,1163.9730,-2.7876,1020.6459)) return ShowPlayerDialog(playerid, COMPRARLICENCIA, DIALOG_STYLE_MSGBOX, "Licencia de piloto", "El costo de la licencia de piloto es de 20"SERVER_COIN" y su vigencia es de 2 meses.\n{AFAFAF}(( Si usan los helicopteros de forma indebida, se les quitará la licencia y no se les regresará el dinero invertido))", "Comprar","Cancelar");
            else SendClientMessage(playerid,-1,"Para comprar una licencia de avion{FFFFFF} necesitas ir a la escuela de aviación.");
            return 1;
        }
        else if(strcmp(item, "boleto",true)==0)
        {
            if(!IsAtTrenStation(playerid)) return SendClientMessage(playerid, -1, "No puedes comprar boletos en este lugar.");
            new mensajeBoleto[512];
            EnEstacion[playerid] = IsAtTrenStation(playerid);
            switch(IsAtTrenStation(playerid))
            {
                case 1: format(mensajeBoleto,sizeof(mensajeBoleto),"{FFFFFF}San Fierro, Cranberry Station - Costo: {EB0000}$300{FFFFFF}\nLas Venturas, Yellow Bell Station - Costo:{EB0000} $650{FFFFFF}\nLas Venturas, Linden Station - Costo: {EB0000}$800{FFFFFF}\nLos Santos, Unity Station - Costo: {EB0000}$1100{FFFFFF}");
                case 2: format(mensajeBoleto,sizeof(mensajeBoleto),"{FFFFFF}Los Santos, Market Station - Costo: {EB0000}$150{FFFFFF}\nSan Fierro, Cranberry Station - Costo:{EB0000} $450{FFFFFF}\nLas Venturas, Yellow Bell Station - Costo: {EB0000}$800{FFFFFF}\nLas Venturas Linden Station - Costo: {EB0000}$950{FFFFFF}");
                case 3: format(mensajeBoleto,sizeof(mensajeBoleto),"{FFFFFF}Las Venturas, Linden Station - Costo: {EB0000}$150{FFFFFF}\nLos Santos, Unity Station - Costo:{EB0000} $450{FFFFFF}\nLos Santos, Market Station - Costo: {EB0000}$600{FFFFFF}\nSan Fierro Cranbery Station - Costo: {EB0000}$900{FFFFFF}");
                case 4: format(mensajeBoleto,sizeof(mensajeBoleto),"{FFFFFF}Las Venturas, Yellow Bell Station - Costo: {EB0000}$350{FFFFFF}\nLas Venturas, Linden Station - Costo:{EB0000} $500{FFFFFF}\nLos Santos, Unity Station - Costo: {EB0000}$800{FFFFFF}\nLos Santos, Market Station - Costo: {EB0000}$950{FFFFFF}");
                case 5: format(mensajeBoleto,sizeof(mensajeBoleto),"{FFFFFF}Los Santos, Unity Station - Costo: {EB0000}$300{FFFFFF}\nLos Santos, Market Station - Costo:{EB0000} $450{FFFFFF}\nSan Fierro, Cranberry Station - Costo: {EB0000}$750{FFFFFF}\nLas Venturas, Yellow Bell Station - Costo: {EB0000}$1100{FFFFFF}");
            }
            ShowPlayerDialog(playerid, C_BOLETO, DIALOG_STYLE_LIST, "{DBED16}Selecciona tu destino", mensajeBoleto, "Comprar", "Salir");
            return 1;
        }
        else if(strcmp(item, "sombrero",true)==0)
        {
            if(HallX == true) DarSombrero(playerid);
            else SendClientMessage(playerid,-1,"El evento de Halloween comienza en la noche del 31 de octubre.");
        }
        else if(strcmp(item, "sprunk",true)==0)
        {
            if(IsPlayerInRangeOfPoint(playerid,5.0,-21.0096,-74.3110,1003.5542) || IsPlayerInRangeOfPoint(playerid,5.0,498.6868,-76.0385,998.7578) || IsPlayerInRangeOfPoint(playerid,5.0,-225.1540,1404.1327,27.7734))
            {
                if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
                DarSprunk(playerid);
                QuitarDinero(playerid, 65);
                SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {00CC00}$65 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid,5.0,-19.4871,-180.4452,1007.7656) ||    IsPlayerInRangeOfPoint(playerid,5.0,-404.43790, -1433.28833, 25.81980) || IsPlayerInRangeOfPoint(playerid,5.0,-392.41141, 2244.42090, 42.52640) || IsPlayerInRangeOfPoint(playerid,5.0,172.1788,1431.5389,10.5912) || IsPlayerInRangeOfPoint(playerid,5.0,1163.6838,1269.1755,10.8203) || IsPlayerInRangeOfPoint(playerid,5.0,-1066.6627,-2581.2568,2876.4009))
            {
                if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
                QuitarDinero(playerid, 65);
                DarSprunk(playerid);
                SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {00CC00}$65 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                return 1;
            }
            else SendClientMessage(playerid,-1,"Los vasos de Sprunk se consiguen en algunos de los 24/7 y restaurantes.");
        }
        else if(strcmp(item, "vino",true)==0)
        {
            if(IsPlayerInRangeOfPoint(playerid,5.0,498.6868,-76.0385,998.7578) || IsPlayerInRangeOfPoint(playerid,5.0,-225.1540,1404.1327,27.7734))
            {
                if(PlayerInfo[playerid][pDinero] < 100) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($100)");
                QuitarDinero(playerid, 100);
                DarVino(playerid);
                SendClientMessage(playerid, -1, "Compraste una botella de vino por {00CC00}$100 {FFFFFF}Presiona {DBED15}'Y'{FFFFFF} para beber.");
                return 1;
            }
        }
        else if(strcmp(item, "cerveza",true)==0)
        {
            if(EstaCerveza(playerid))
            {
                if(EventoActivo == false) return 1;
                if(PlayerInfo[playerid][pDinero] < 10) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                QuitarDinero(playerid, 10);
                AccionesRol(playerid,"compró una botella de cerveza.", 20);
                SendClientMessage(playerid, -1, "Presiona {DBED15}'Y'{FFFFFF} para beber.");
                RevisarLogro(playerid, 14);
                DarCerveza(playerid);
                return 1;
            }
            return 1;
        }
        else if(strcmp(item, "Bidon",true)==0)
        {
			if(!EnGasolinera(playerid)) return SendClientMessage(playerid, -1, "El bidón de combustible se vende en las estaciones de servicio.");
			if(Bidon[playerid] == 1) return SendClientMessage(playerid, -1, "Tu ya tienes un bidon de gasolina.");
			if(PlayerInfo[playerid][pDinero] < 65) return SendClientMessage(playerid, -1, "No tienes el dinero suficiente para comprar un bidon ($65).");
			QuitarDinero(playerid, 65);
            SetPlayerAttachedObject(playerid,4,1650,5,0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000);
			Bidon[playerid] = 1;
			SendClientMessage(playerid, -1,"Compraste un bidón con 5 litros de combustible por {00CC00}$65{FFFFFF}. Para usarlo ingresa {DBED16}/cargar tanque");
			return 1;
        }
        else if(strcmp(item,    "vehiculo", true) == 0)
        {
            ComproVehiculo(playerid);
			return 1;
        }
        else if(strcmp(item,"estacionamiento",true) == 0)
        {
            for(new e = 0; e < MAX_GARAGES; e++)
            {
                if(Estacionamientos[e][eEnUso] > 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[e][PosX], Estacionamientos[e][PosY], Estacionamientos[e][PosZ]))
                    {
                        if(Estacionamientos[e][Dueno] == PlayerInfo[playerid][pID]) return SendClientMessage(playerid, -1, "No puedes comprar un estacionamiento que ya es tuyo.");
                        if(ObtenerEstacionamientos(playerid) > 1) return SendClientMessage(playerid, -1, "Ya no puedes comprar mas estacionamientos.");
                        if(Estacionamientos[e][Nivel] > PlayerInfo[playerid][pNivel]) return SendClientMessage(playerid, -1, "Necesitas un nivel superior para comprar el estacionamiento.");
                        if(Estacionamientos[e][ePrecio] > PlayerInfo[playerid][pBanco]) return SendClientMessage(playerid, -1, "No tienes el dinero necesario para comprar el estacionamiento.");
                        SendClientMessage(playerid, -1, "¡Felicitaciones! Compraste el estacionamiento, para mas información visita nuestro foro.");
                        new paga = Estacionamientos[e][ePrecio]/2;
                        new newpaga = paga*90/100;
                        new iddueno = GetPlayerID(Estacionamientos[e][DuenoName]);
                        if(iddueno == -1)
                        {
                            if(strcmp(Estacionamientos[e][DuenoName], "Nadie", true) != 0)
                            {
                                new query[128];
                                mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Banco`=Banco+'%d'  WHERE `ID`='%d'", newpaga, Estacionamientos[e][Dueno]);
                                mysql_tquery(handle_db, query);
                            }
                        }
                        else
                        {
                            PlayerInfo[iddueno][pBanco] = PlayerInfo[iddueno][pBanco]+newpaga;
                            SendClientMessage(iddueno, -1, "Acaban de comprar tu estacionamiento, se ha hecho una transferencia a tu cuenta bancaria.");
                            SendClientMessage(iddueno, -1, "El banco cobró el 10 porciento de la venta por la transacción ");
                        }
                        Estacionamientos[e][Dueno] = PlayerInfo[playerid][pID];
                        format(Estacionamientos[e][DuenoName],MAX_PLAYER_NAME,"%s",PlayerInfo[playerid][Nickname]);
                        PlayerInfo[playerid][pBanco] -= Estacionamientos[e][ePrecio];
                        Estacionamientos[e][ePrecio] = Estacionamientos[e][ePrecio]/2*3;
                        Estacionamientos[e][Nivel] += 1;
                        SaveParking(e);
                        CargarParking(e);
                    }
                }
            }
        }
        else if(strcmp(item,"fabrica",true) == 0)
        {
			for(new f = 0; f<MAX_FABRICAS; f++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1.5,Fabricas[f][pEntradaX],Fabricas[f][pEntradaY],Fabricas[f][pEntradaZ]))
		    	{
		        	if(Fabricas[f][pEnUso] == 1)
		        	{
		            	if(PlayerInfo[playerid][pFaccion] <= 1) return SendClientMessage(playerid,-1,"{3399FF}Bandas civiles{FFFFFF} no pueden adquirir {EB0000}fabricas de metanfetamina{FFFFFF}.");
						if(TieneFabrica(PlayerInfo[playerid][pFaccion])) return SendClientMessage(playerid,-1,"Tu banda ya controla una {EB0000}fabrica de metanfetamina{FFFFFF}.");
						if(PlayerInfo[playerid][pRango] == 8)
						{
	              			if(PlayerInfo[playerid][pBanco] >= Fabricas[f][pValor])
							{
			    	      		new Query[500];
								mysql_format(handle_db, Query,sizeof(Query),"UPDATE `fabricas` SET `BandaID`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pFaccion],Fabricas[f][pID]);
								mysql_tquery(handle_db,Query,"","");
								PlayerInfo[playerid][pBanco] -= Fabricas[f][pValor];
								Fabricas[f][pBanda] = PlayerInfo[playerid][pFaccion];
								Fabricas[f][pSoborno] = gettime()+604800;
								Fabricas[f][pEnVenta] = 0;
								BorrarPuntosFabrica(f);
								CargarFabricass(f);
								mysql_format(handle_db, Query,sizeof(Query),"UPDATE `fabricas` SET `EnVenta`='0', `EnUso`='1' WHERE `ID`='%d'",Fabricas[f][pID]);
								mysql_tquery(handle_db,Query,"","");
								SendClientMessage(playerid,-1,"Tu banda ahora controla una {EB0000}fabrica de metanfetamina{FFFFFF}.");
								DarDineroFabrica(f,3000000);
								return 1;
							}
							else
							{
								new textoplano[128];
								format(textoplano,sizeof(textoplano),"Necesitas tener {00CC00}%s{FFFFFF} en tu cuenta bancaria.",Numeros(Fabricas[f][pValor]));
								SendClientMessage(playerid,-1,textoplano);
     						}
		     			}
		     			return 1;
		     		}
			    }
			}
 			return 1;
        }
        else if(strcmp(item,"repuestos", true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Para {DBED15}/comprar repuestos{FFFFFF} necesitas ir al taller donde te dieron el empleo.");
            if(!IsPlayerInRangeOfPoint(playerid, 2.0, 93.3250,-161.6600,2.5938)) return SendClientMessage(playerid,-1,"No estás en el lugar indicado.");
            ShowPlayerDialog(playerid, CREPUESTOS, DIALOG_STYLE_INPUT, "Repuestos", "Ingresa la cantidad de repuestos que deseas comprar\nRecuerda que cada repuesto cuesta $100 y solo puedes llevar 100 encima.", "Comprar", "Cancelar");
        }
        else if(strcmp(item,"productos", true) == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 1.5, -23.2806,-55.6424,1003.5469) || IsPlayerInRangeOfPoint(playerid, 1.5, -30.5101,-28.9864,1003.5573) || IsPlayerInRangeOfPoint(playerid, 1.5, -28.0060,-89.9514,1003.5469))  // 24/7
            {
                if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
                {
                    new str[344+1];
                    format(str, sizeof(str), "%sTeléfono móvil ($1500)\nGuía telefónica ($35)\nTraba de seguridad para vehículos\nAlarma para vehículos.\nRadio comunicador ($2000)\nGPS ($1500)\nBebida par", str);
                    format(str, sizeof(str), "%sa guardar en heladera: Cerveza x6 unidades ($470)\nBebida para guardar en heladera: Vino x6 unidades ($590)\nBebida para guardar en heladera: Sprunk x4 unidades ($200)\nBebida: Sprunk ($65)", str);
                    ShowPlayerDialog(playerid, PRODUCTOS, DIALOG_STYLE_LIST, "{DBED15}Productos y servicios (24/7).", str, "Comprar", "Salir");
                    return 1;
                }
            }
            if(IsPlayerInRangeOfPoint(playerid, 1.5, -784.2098,500.1945,1371.7422)) // Restaurante
            {
                if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
                {
                    new cervezas[30],vino[30],sprunk[30],aquarius[30];
                    for(new p; p < MAX_PROPIEDADES; p++)
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                        {
                            switch(PropInfo[p][pCerveza])
                            {
                                case 0: format(cervezas,sizeof(vino),"{EB0000}Cerveza");
                                default: format(cervezas,sizeof(vino),"{FFFFFF}Cerveza");
                            }
                            switch(PropInfo[p][pVino])
                            {
                                case 0: format(vino,sizeof(vino),"{EB0000}Vino");
                                default: format(vino,sizeof(vino),"{FFFFFF}Vino");
                            }
                            switch( PropInfo[p][pSprunk])
                            {
                                case 0: format(sprunk,sizeof(sprunk),"{EB0000}Vaso de sprunk");
                                default: format(sprunk,sizeof(sprunk),"{FFFFFF}Vaso de sprunk");
                            }
                            switch( PropInfo[p][pAquarius])
                            {
                                case 0: format(aquarius,sizeof(aquarius),"{EB0000}Aquarius");
                                default: format(aquarius,sizeof(aquarius),"{FFFFFF}Aquarius");
                            }
                        }
                    }
                    new string[256];
                    format(string,sizeof(string),"Producto\tPrecio\n%s\t{00CC00}$80{FFFFFF}\n%s\t{00CC00}$100\n%s\t{00CC00}$60{FFFFFF}\n%s\t{00CC00}$160{FFFFFF}",cervezas,vino,sprunk,aquarius);
                    ShowPlayerDialog(playerid, PRODUCTOS2, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos",string,"Comprar", "Salir");
                    return 1;
                }
            }
            if(IsPlayerInRangeOfPoint(playerid, 1.5, 373.7276,-118.8039,1001.4922)) // Pizzeria
            {
                if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0) return ShowPlayerDialog(playerid, DIALOG_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos","Producto\tPrecio\nPorción de pizza\t{00CC00}$40{FFFFFF}\nPizza completa {232621}- (Para llevar)\t{00CC00}$300{FFFFFF}\nSprunk\t{00CC00}$70{FFFFFF}\nAquarius\t{00CC00}$170{FFFFFF}","Comprar", "Salir");
            }
            if(IsPlayerInRangeOfPoint(playerid, 1.5, 1214.8492,-13.3533,1000.9219) || IsPlayerInRangeOfPoint(playerid, 2.0, 969.3793,-44.8069,1001.1172) ||IsPlayerInRangeOfPoint(playerid, 2.0, 214.9070,-13.3532,1000.9219) ||IsPlayerInRangeOfPoint(playerid, 2.0, -1262.6428,2119.9490,1246.5457) || IsPlayerInRangeOfPoint(playerid, 2.0, -1396.3044,-320.4939,1052.0834) || IsPlayerInRangeOfPoint(playerid, 2.0, 499.9690,-20.6826,1000.6797)) // Salón de eventos
            {
                if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0) return ShowPlayerDialog(playerid, DIALOG_SALON, DIALOG_STYLE_TABLIST_HEADERS, "{DBED15}Lista de productos","Producto\tPrecio\nVino\t{00CC00}$110{FFFFFF}\nCerveza\t{00CC00}$80{FFFFFF}\nVaso de sprunk\t{00CC00}$70{FFFFFF}\nAquarius\t{00CC00}$170{FFFFFF}","Comprar", "Salir");
            }
            return 1;
        }
        else if(strcmp(item,"juguetes", true) == 0)
        {
            if(EnSexShop(playerid))
            {
                if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas nivel 2 como mínimo para hacer eso.");
                new string[400];
                format(string, sizeof(string),"Vibrador blanco ({00CC00}$1000{FFFFFF})\n");
                format(string, sizeof(string),"%sVibrador plateado ({00CC00}$1200{FFFFFF})\n",string);
                format(string, sizeof(string),"%sGran vibrador blanco ({00CC00}$1600{FFFFFF})\nConsolador rosa ({00CC00}$2500{FFFFFF})",string);
                ShowPlayerDialog(playerid, JUGUETES, DIALOG_STYLE_LIST, "Juguetes eróticos", string, "Comprar", "Cancelar");
            }
            else SendClientMessage(playerid,-1,"Solo se puede {DBED15}/comprar juguetes{FFFFFF} en algunos negocios.");
            return 1;
        }
        else if(strcmp(item,"materiales", true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Armero && PlayerInfo[playerid][pTrabajo2] != T_Armero) return SendClientMessage(playerid,-1,"Necesitas tener el trabajo de fabricante de armas para comprar materiales.");
            if(IsPlayerInRangeOfPoint(playerid, 5.0,1422.6765,-1319.3438,13.5547) && Mats1[playerid] == 0)
            {
                if(PlayerInfo[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
                PlayerInfo[playerid][piezas] += 50;
                QuitarDinero(playerid, 1250);
                SendClientMessage(playerid,-1,"Compraste {DBED15}50 materiales{FFFFFF} de armas por {00CC00}$1250");
                SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
                PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
                Mats1[playerid] = 1;
                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid, 5.0,2823.3486,-1420.3571,16.2562) && Mats2[playerid] == 0)
            {
                if(PlayerInfo[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
                PlayerInfo[playerid][piezas] += 50;
                QuitarDinero(playerid, 1250);
                SendClientMessage(playerid,-1,"Compraste {DBED15}50 materiales{FFFFFF} de armas por {00CC00}$1250");
                SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
                PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
                Mats2[playerid] = 1;
                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid, 5.0,-1735.7610,1244.9299,7.5469) && Mats3[playerid] == 0)
            {
                if(PlayerInfo[playerid][pDinero] < 7500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
               	PlayerInfo[playerid][piezas] += 250;
               	QuitarDinero(playerid, 6250);
               	SendClientMessage(playerid,-1,"Compraste {DBED15}250 materiales{FFFFFF} de armas por {00CC00}$6250");
               	SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
               	PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
               	Mats3[playerid] = 1;
                return 1;
           	}
       	}
   	}
	return 1;
}

CMD:cancelar(playerid, params[])
{
	new item[32];
	new vw = GetPlayerVirtualWorld(playerid);
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,"mutual",true) ==0 || strcmp(item,"socio",true) ==0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.9966,-1322.4128,-10.7922) || IsPlayerInRangeOfPoint(playerid, 5.0, -2713.9946,636.8887,1385.6547) || IsPlayerInRangeOfPoint(playerid, 5.0, 1242.1232,-809.9145,1164.2759))
		    {
			    switch(PlayerInfo[playerid][pSocioHP])
				{
				    case 0: return SendClientMessage(playerid,-1,"{FFFFFF}No eres socio de este hospital.");
                    case 1: if(vw != 6) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital."); case 2: if(vw != 9) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				    case 3: if(vw != 7) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital."); case 4: if(vw != 8) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				}
    			PlayerInfo[playerid][pSocioHP] = 0;
				SendClientMessage(playerid,-1,"{c04306}Dejaste de ser socio de este hospital.");
			}
			else SendClientMessage(playerid, -1, "{FFFFFF}Tienes que ir al hospital para cancelar la mutual.");
			return 1;
		}
	}
	return 1;
}
CMD:socio(playerid, params[])
{
    new item[32];
    if(IsPlayerConnected(playerid))
    if(!sscanf(params, "s[32]", item))
    {
        if(strcmp(item,"ayuda",true) ==0)
        {
            new mensaje[800];
            mensaje="{FFFFFF}Haciendote socio de este hospital, serás atendido a un menor costo.\nEl precio de la atención, pasará de {00CC00}$450{FFFFFF} a {00CC00}$400{FFFFFF}.\nSiempre que tengas un problema, serás atendido en este hospital.\nPuedes hacerte {DBED15}/socio{FFFFFF} por un único pago de {00CC00}$500{FFFFFF}.\nPuedes usar en cualquier momento {DBED15}/cancelar mutual{FFFFFF} para dejar de ser socio.";
            ShowPlayerDialog(playerid, DRECARGA, DIALOG_STYLE_MSGBOX, "{FFFFFF}Socio Ayuda", mensaje, "Aceptar","");
        }
    }
    if(sscanf(params, "s[30]", item))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.9966,-1322.4128,-10.7922) || IsPlayerInRangeOfPoint(playerid, 5.0, -2713.9946,636.8887,1385.6547) || IsPlayerInRangeOfPoint(playerid, 5.0, 1242.1232,-809.9145,1164.2759))
		{
  			if(PlayerInfo[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"Necesitas {00CC00}$500{FFFFFF} para poder asociarte a este hospital.");
			switch(GetPlayerVirtualWorld(playerid))
			{
                case 6: PlayerInfo[playerid][pSocioHP] = 1; case 7: PlayerInfo[playerid][pSocioHP] = 3;
                case 9: PlayerInfo[playerid][pSocioHP] = 2; case 8: PlayerInfo[playerid][pSocioHP] = 4;
			}
   			SendClientMessage(playerid,-1,"{FFFFFF}Muchas gracias por hacerte socio de nuestro hospital.");
      		QuitarDinero(playerid,500);
		}
	}
	return 1;
}
CMD:expulsar(playerid,params[])
{
    new id,string[250];
    if(PlayerInfo[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
    if(PlayerInfo[playerid][pTiempoCarcel] > 0 || PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
    if(!sscanf(params,"d",id))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
            if(Alquilado == false) return SendClientMessage(playerid,-1,"El salón debe estar alquilado.");
            if(strcmp(PlayerInfo[playerid][Nickname],Alquilador,true) == 0 || PermisoSalon[playerid] == true)
            {
                if(IsPlayerConnected(id))
                {
                    if(EnSalonEvento(id) || EnSalonEvento2(id))
                    {
                        if(strcmp(PlayerInfo[id][Nickname],Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes expulsar a esa persona del salón.");
                        NoTeleportHack(playerid);
                        SetPlayerPosEx(id,1423.4301,-1180.1801,25.9922);
                        SetPlayerVirtualWorld(id,0);
                        SetPlayerInterior(id,0);
                        format(string,sizeof(string),"Los guardias agarran a %s del brazo y lo expulsan del salón.",PlayerInfo[id][Nickname]);
                        ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        SendClientMessage(id,-1,"Los guardias de seguridad de sacaron del salón de evento.");
                        format(string,sizeof(string),"El jugador {DBED15}%s{FFFFFF} expulso a {DBED15}%s{FFFFFF} del salón de eventos.", PlayerInfo[playerid][Nickname], PlayerInfo[id][Nickname]);
                        MandarMensajeSalon(string, playerid);
                        Boleto[id] = false;
                        if(strcmp(PlayerInfo[playerid][Nickname],Alquilador,true) == 0) PermisoSalon[id] = false;
                    }
                    else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
                }
                else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
            }
            else SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
        }
        else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Tiempos[playerid][TiempoExpulsar] > gettime())
            {
                new tmpString[64];
                format(tmpString, sizeof(tmpString), "Debes de esperar {00CC00}%d segundos", Tiempos[playerid][TiempoExpulsar] - gettime());
                return SendClientMessage(playerid, COLOR_WHITE, tmpString);
            }
            if(IsPlayerConnected(id))
            {
                if(id == playerid) return SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
                if(IsPlayerInAnyVehicle(id))
                {
                    if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id))
                    {
                        new resulT = random(2);
						format(string, sizeof(string), "%s intenta bajar a %s de su vehículo %s", PlayerName(playerid), PlayerName(id), (resulT) ? ("y lo logra.") : ("y no lo logra."));
						ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
						if(resulT == 0) RemovePlayerFromVehicle(id);
						Tiempos[playerid][TiempoExpulsar] = gettime() + 59;
                    }
                    else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
                }
                else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
            }
            else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
        }
        else SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
    }
    else return SendClientMessage(playerid,-1,"Usa {DBED15}/expulsar {FFFFFF}[{DBED15}id o nombre{FFFFFF}]");
    return true;
}
CMD:servicio(playerid, params[])
{
    new item[128];
    if(IsPlayerConnected(playerid))
    if(!sscanf(params, "s[128]", item))
    {
        if(strcmp(item, "medico",true) == 0)
        {
            new cual = 0;
            if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) cual = 1;
            if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) cual = 1;
            if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759)) cual = 1;
            if(cual == 1)
            {
                if(PlayerInfo[playerid][pCama] > 0) return 1;
                new Float:calculo,string[256];
                if(PlayerInfo[playerid][j_HEALTH] > 99) return 1;
                calculo = 100 - PlayerInfo[playerid][j_HEALTH];
                ObtenerEstadoSalud(playerid);
                HCalculo[playerid] = floatround(calculo, floatround_round);
                format(string,256,"{FFFFFF}Necesitas ser internado con urgencia por {a9c4e4}%s\nCosto de internación {00CC00}$%d",Enfermedades(playerid),HCalculo[playerid]*10);
                ShowPlayerDialog(playerid,DHOSPITAL,DIALOG_STYLE_MSGBOX,"Diagnóstico médico",string,"Aceptar","Cancelar");
            }
            else if(PlayerInfo[playerid][Agonizando] == 1)
            {
                if(LlamadaMedicos[playerid] == 0)
                {
                    foreach(new i : Player)
                    {
                        if(PlayerInfo[i][pTrabajo] == T_Medico || PlayerInfo[i][pTrabajo2] == T_Medico)
                        {
                            if(RopaMedi[i] == 1)
                            {
                                if(GetPlayerVirtualWorld(playerid) == 0) SetPlayerMarkerForPlayer(i, playerid, COLOR_AMARILLO);
                                new string[256];
                                format(string, sizeof(string), "{FFFFFF}Hay un nuevo paciente solicitando {DBED15}/servicio medico{FFFFFF}, para avisarle que vas a atenderlo escribe {DBED15}/responder medico", PlayerInfo[playerid][Nickname], playerid);
                                SendClientMessage(i, 0x00CC00FF, string);
                                TimerMedico[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,2);
                                ResponderMedi[i] = 1;
                            }
                        }
                    }
                    SendClientMessage(playerid, -1,"Llamaste al servicio medico, por favor espera un momento.");
                    TimerMalherido[playerid] = 100;
                    MarcadoMedicos[playerid] = 1;
                    LlamadaMedicos[playerid] = 1;
                }
            }
            else SendClientMessage(playerid, -1,"{FFFFFF}Para escribir {DBED15}/servicio medico{FFFFFF}, tienes que estar herido o dentro de un hospital.");
        }
        else if(strcmp(item,"grua",true) ==0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5, 1821.7529,-1280.6038,109.3594)) ShowPlayerDialog(playerid,SERVICIOGRUA1 , DIALOG_STYLE_MSGBOX, "Información sobre el servicio de grúa", "El Servicio de grua sirve para recuperar el vehiculo, en caso de que haya\nquedao en un lugar inaccesible.\nPor ejemplo: En el agua, dentro del estacionamiento de una propiedad, en una pileta, etc.\n\n¿Quieres utilizar el servicio?", "Si","No");
            else
            {
                SendClientMessage(playerid, -1, "Puedes solicitar este servicio en el {00CCFF}piso 17{FFFFFF} del {00CCFF}Edificio Municipal General de LS{FFFFFF}.");
                SendClientMessage(playerid, -1, "O bien llamando al {DBED15}número 815{FFFFFF} desde tu teléfono móvil.");
            }
        }
        else if(strcmp(item, "taxi",true) == 0)
        {
            if(LlamadaTaxi[playerid] == 0)
            {
                foreach(new i : Player)
                {
                    if(PlayerInfo[i][pTrabajo] == T_Taxista || PlayerInfo[i][pTrabajo2] == T_Taxista)
                    {
                        if(TAXI(GetPlayerVehicleID(i)))
                        {
                            SetPlayerMarkerForPlayer(i, playerid, COLOR_AMARILLO);
                            SendClientMessage(i, 0xDBED15FF, "Hay un nuevo cliente {FFFFFF}llamando al {DBED15}/servicio taxi{FFFFFF}, para avisarle que vas a buscarlo usa {DBED15}/responder taxi");
                            ResponderTaxi[i] = 1;
                        }
                    }
                }
                TimerTaxista[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,3);
                SendClientMessage(playerid, -1,"Llamaste al servicio de taxi, por favor espera un momento.");
                LlamadaTaxi[playerid] = 1;
            }
            else return SendClientMessage(playerid,-1,"Ya has solicitado un taxi");
        }
        else if(strcmp(item, "mecanico",true) == 0)
        {
            new Float:vida, autoid = GetPlayerVehicleID(playerid);
            GetVehicleHealth(autoid, vida);
            if(PlayerInfo[playerid][pNivel] == 1 && PlayerInfo[playerid][pExperiencia] < 3)
            {
                SendClientMessage(playerid,-1,"Para llamar al servicio mecánico, necesitas tener como mínimo 3 puntos de reputación.");
                SendClientMessage(playerid,-1,"Se gana 1 punto de reputación por cada hora de juego.");
                SendClientMessage(playerid,-1,"Puedes consultar en cualquier momento tu reputación usando el comando /estadisticas o /est.");
                SendClientMessage(playerid,-1,"O sino también puedes ver la barra gris en la parte inferior de la pantalla.");
                return 1;
            }
            if(AceptoRepara[playerid] == 1) return SendClientMessage(playerid,-1,"Ya aceptaste una reparación.");
            GetVehicleHealth(autoid, vida);
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(vida > 375.0) return SendClientMessage(playerid,-1,"El motor del vehículo no está averiado.");
                if(Capo[autoid] == 0) return SendClientMessage(playerid,-1,"Primero necesitas {FFFF00}/abrir capo");
                if(LlamadaMeca[playerid] == 0)
                {
                    foreach(new i : Player)
                    {
                        if(RopaMeca[i] == 1 && (PlayerInfo[i][pTrabajo] == T_Mecanico || PlayerInfo[i][pTrabajo2] == T_Mecanico))
                        {
                            SetPlayerMarkerForPlayer(i, playerid, COLOR_AZUL);
                            SendClientMessage(i, 0x33CCFFAA, "{FFFFFF}Hay un nuevo cliente llamando al {FFFF00}/servicio mecanico{FFFFFF}, para confimar usa {FFFF00}/responder mecanico");
                            ResponderMeca[i] = 1;
                            TimerMeca[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,1);
                        }
                    }
                    SendClientMessage(playerid, -1,"Has solicitado un mecanico, espera que venga a tu posición.");
                    LlamadaMeca[playerid] = 1;
                }
                else return SendClientMessage(playerid,-1,"Ya has solicitado un mecánico.");
            }
            else return SendClientMessage(playerid,-1,"Debes estar en un vehículo para solicitar un mecanico.");
        }
        else if(sscanf(params, "s[30]", item)) SendClientMessage(playerid,-1,"SERVICIOS: {DBED15}/servicio medico {FFFFFF}- {DBED15}/servicio taxi {FFFFFF}- {DBED15}/servicio grua {FFFFFF}- {DBED15}/servicio mecanico");
    }
    return 1;
}
CMD:subir(playerid,params[])
{
	new Float:X, Float:Y, Float:Z, carid = GetPlayerVehicleID(playerid), item[128],Float:X2,Float:Y2,Float:Z2;
	if(!sscanf(params, "s[128]", item))
	{
		if(strcmp(item, "paciente", true) ==0)
		{
			new Value = 1,Value2 = 1, tipo;
			if(PlayerInfo[playerid][pTrabajo] != T_Medico && PlayerInfo[playerid][pTrabajo2] != T_Medico) return 1;
			if(Paciente[playerid] == INVALID_PLAYER_ID && Paciente2[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1,"No has reanimado a ningun paciente para subirlo.");
			if(!AMBU(carid) || !IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1,"Debes estar en una ambulancia.");
			if(Paciente[playerid] != INVALID_PLAYER_ID)
			{
				if(GetPlayerInterior(Paciente[playerid]) == 0) GetPlayerPos(Paciente[playerid], X,Y,Z);
				else Value = 2,ObtenerCoordenadasPaciente(Paciente[playerid],X,Y,Z);
			}
			if(Paciente2[playerid] != INVALID_PLAYER_ID)
			{
				if(GetPlayerInterior(Paciente2[playerid]) == 0)	GetPlayerPos(Paciente2[playerid], X2,Y2,Z2);
				else Value2 = 2,ObtenerCoordenadasPaciente(Paciente2[playerid],X2,Y2,Z2);
			}
			if(GetPlayerInterior(playerid) == 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z))
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z))
					{
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),1)) tipo = 1;
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),2)) tipo = 2;
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),3)) tipo = 3;
						if(tipo > 0)
						{
							NoTeleportHack(Paciente[playerid]);
							SetPlayerVirtualWorld(Paciente[playerid], 0);
							SetPlayerInterior(Paciente[playerid], 0);
							EnAuto[Paciente[playerid]] = carid;
							MarcadoMedicos[Paciente[playerid]] = 0;
							SetPlayerColor(Paciente[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente[playerid], carid, tipo);
							CongelarPlayerID(Paciente[playerid]);
							Reanimado[Paciente[playerid]] = 0;
							PacienteAmbu[Paciente[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
					}
					else if(Value == 2) SendClientMessage(playerid,-1,"Acerca la ambulancia a la puerta de la propiedad.");
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, X2,Y2,Z2))
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, X2,Y2,Z2))
					{
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),1)) tipo = 1;
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),2)) tipo = 2;
						if(!IsSeatTaken(GetPlayerVehicleID(playerid),3)) tipo = 3;
						if(tipo > 0)
						{
							NoTeleportHack(Paciente2[playerid]);
							SetPlayerVirtualWorld(Paciente2[playerid], 0);
							SetPlayerInterior(Paciente2[playerid], 0);
							EnAuto[Paciente2[playerid]] = carid;
							MarcadoMedicos[Paciente2[playerid]] = 0;
							SetPlayerColor(Paciente2[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente2[playerid], carid, 2);
							CongelarPlayerID(Paciente2[playerid]);
							Reanimado[Paciente2[playerid]] = 0;
							PacienteAmbu[Paciente2[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
					}
				    else if(Value2 == 2) SendClientMessage(playerid,-1,"Acerca la ambulancia a la puerta de la propiedad.");
				}
			}
		}
	}
	if(sscanf(params, "s[128]d", item))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,905.4720,-3021.9995,7.5059)) return SetPosEx(playerid,909.7603,-3016.5725,49.9987,307.7599,0,0); // Faro ISLA Salida
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,154.1846,-1946.6228,5.3903)) return SetPosEx(playerid,154.4787,-1953.9596,47.8722,151.6741,0,0); // Faro Verona Beach Salida
	}
	return 1;
}
CMD:bajar(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0,154.4787,-1953.9596,47.8722)) SetPosEx(playerid,154.1846,-1946.6228,5.3903,359.0472,0,0); // Faro Verona Beach
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,909.7603,-3016.5725,49.9987)) SetPosEx(playerid,905.4720,-3021.9995,7.5059,132.8333,0,0); // Faro ISLA
    return 1;
}
CMD:responder(playerid, params[])
{
    new item[32];
    if(IsPlayerConnected(playerid))
    if(!sscanf(params, "s[32]", item))
    {
        if(strcmp(item, "medico",true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] == T_Medico || PlayerInfo[playerid][pTrabajo2] == T_Medico)
            {
                if(ResponderMedi[playerid] == 1)
                {
                    if(RopaMedi[playerid] == 1)
                    {
                        foreach(new i : Player)
                        {
                            if(LlamadaMedicos[i] == 1)
                            {
                                LlamadaMedicos[i] = 0;
                                SendClientMessage(i,-1,"{00CC00}Un médico respondió a tu llamado y va en camino.");
                                if(GetPlayerInterior(i) != 0)
                                {
                                    new Float:X,Float:Y,Float:Z;
                                    SendClientMessage(playerid,-1,"El paciente que solicito médico se encuentra en un interior, se marcó la entrada de la puerta en tu {DBED15}GPS");
                                    for(new p = 0; p < MAX_PROPIEDADES; p++)
                                    {
                                        if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
                                        {
                                            X = PropInfo[p][pPosX];
                                            Y = PropInfo[p][pPosY];
                                            Z = PropInfo[p][pPosZ];
                                        }
                                    }
                                    SetPlayerMapIcon(playerid, i, X, Y, Z, 0, HexToInt("00CC00FF"), MAPICON_GLOBAL);
                                }
                                SendClientMessage(playerid, -1,"{00CC00}Le acabas de avisar al paciente que vas a buscarlo.");
                                ResponderMedi[playerid] = 0;
                                break;
                            }
                        }
                    }
                }
                else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
            }
        }
        if(strcmp(item, "taxi",true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Taxista && PlayerInfo[playerid][pTrabajo2] != T_Taxista) return 1;
            if(ResponderTaxi[playerid] == 1)
            {
                foreach(new i : Player)
                {
                    if(LlamadaTaxi[i] == 1) SendClientMessage(i,-1,"{00CC00}Un taxista respondió a tu llamado y va en camino.");
                }
                SendClientMessage(playerid, -1,"{00CC00}Acabas de avisarle al cliente que vas a buscarlo.");
                ResponderTaxi[playerid] = 0;
            }
            else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
        }
        if(strcmp(item, "mecanico",true) == 0)
        {
            if(PlayerInfo[playerid][pTrabajo] != T_Mecanico && PlayerInfo[playerid][pTrabajo2] != T_Mecanico) return 1;
            if(ResponderMeca[playerid] == 1)
            {
                foreach(new i : Player)
                {
                    if(LlamadaMeca[i] == 1) SendClientMessage(i,-1,"{00CC00}Un mecánico respondió a tu llamado y va en camino.");
                }
                SendClientMessage(playerid, -1,"{00CC00}Acabas de avisarle al cliente que vas a reparar su vehículo.");
                ResponderMeca[playerid] = 0;
            }
            else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
        }
    }
    return 1;
}
CMD:arrancar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    if(VehiculosInfo[vehicleid][vcomprable] == 1) return 1;
    if(BICI(vehicleid)) return 1;
    if(MotorAuto[vehicleid] == 0)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Arrancando vehículo...");
        SetTimerEx("EncenderMotor",1200, false, "d",playerid);
    }
    return 1;
}
CMD:luces(playerid,params[])
{
    new autoid = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    if(EnCarreras[playerid] > 0) return 1;
    switch(Luces[autoid])
    {
        case 0: Luces[autoid] = 1,SendClientMessage(playerid, COLOR_WHITE, "Encendiendo luces..."),AccionesRol(playerid,"enciende las luces de su vehículo.", 20);
        case 1: Luces[autoid] = 0,SendClientMessage(playerid, COLOR_WHITE, "Apagando luces..."),AccionesRol(playerid,"apaga las luces de su vehículo.", 20);
    }
    GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(autoid, engine, Luces[autoid], alarm, doors, bonnet, boot, objective);
    return 1;
}
CMD:cerrar(playerid,params[])
{
    new item[10];
    if(!sscanf(params,"s[10]",item))
    {
        if(strcmp(item,"patrulla",true)==0)
        {
            if(PlayerInfo[playerid][pDuty] != 1) return 1;
            new Float:VPos[3];
            for(new i = 0;i<GetVehiclePoolSize();i++)
            {
                if(SAPD(i))
                {
                    GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
                    if(IsPlayerInRangeOfPoint(playerid,2.0,VPos[0],VPos[1],VPos[2]))
                    {
                        if(bloqueado[i] == 1) return SendClientMessage(playerid,-1,"Esta patrulla ya esta cerrada");
                        AccionesRol(playerid,"trabó las puertas de la patrulla.", 20);
                        GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
                        PlayerPlaySoundEx(playerid, 1145, VPos[0], VPos[1], VPos[2]);
                        SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
                        bloqueado[i] = 1;
                    }
                }
            }
        }
        if(strcmp(item,"baul",true)==0 || strcmp(item,"maletero",true)==0 || strcmp(item,"portamalas",true)==0)
        {
            new Float:Pos[3],contador = 0;
			for(new i = 0; i < MAX_PAUTOS; i++)
			{
				if(!IsValidVehicle(autos[i][playerid])) continue;
				GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
				{
					if(Baul[autos[i][playerid]] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado.");
					GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, 0, objective);
					Baul[autos[i][playerid]] = 0;
					GameTextForPlayer(playerid, "Maletero ~r~Cerrado", 1000, 5);
					AccionesRol(playerid,"cierra el maletero de su vehículo.", 20);
					contador ++;
				}
			}
			if(contador == 0) SendClientMessage(playerid, -1,"Debes estar cerca de tu vehículo para cerrar su baul.");
        }
        if(strcmp(item,"capo",true)==0)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new autoid = GetPlayerVehicleID(playerid);
                GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(autoid, engine, lights, alarm, doors, 0, boot, objective);
                Capo[autoid] = 0;
                AccionesRol(playerid,"cierra el capó de su vehículo.", 20);
                return 1;
            }
            else return SendClientMessage(playerid,-1,"Necesitas estar en el asiento del chofer para cerrar el capó.");
        }
        if(strcmp(item,"casa",true) == 0 || strcmp(item,"puerta",true) == 0)
        {
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(PlayerInfo[playerid][pID] == PropInfo[p][pIDPropietario])
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
                        {
                            if(PropInfo[p][pAbierta] == 1)
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(IsValidDynamicPickup(PropInfo[p][pPickup])) DestroyDynamicPickup(PropInfo[p][pPickup]);
                                    if(IsValidDynamicMapIcon(PropInfo[p][pMapIcon])) DestroyDynamicMapIcon(PropInfo[p][pMapIcon]);
                                }
                                PropInfo[p][pAbierta] = 0;
                                AccionesRol(playerid,"cierra la puerta de su propiedad.", 20);
                                GuardarPropiedad(p);
                            }
                            else SendClientMessage(playerid,-1,"Esta propiedad ya está cerrada, escribe {DBED15}/abrir puerta{FFFFFF} para abrirla.");
                        }
                    }
                }
            }
        }
        if(strcmp(item,"ropero",true) == 0 || strcmp(item,"roupeiro",true) == 0)
        {
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                    {
                        if(PlayerInfo[playerid][pID] == PropInfo[p][pIDPropietario])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,1.5,254.2685,-41.5420,1002.0308) || IsPlayerInRangeOfPoint(playerid,5,PropInfo[p][pRoperoX],PropInfo[p][pRoperoY],PropInfo[p][pRoperoZ]))
                            {
                                if(PropInfo[p][pRoperoAbierto] == 1)
                                {
                                    PropInfo[p][pRoperoAbierto] = 0;
                                    AccionesRol(playerid,"cierra el ropero.", 20);
                                    GuardarPropiedad(p);
                                }
                                else SendClientMessage(playerid,-1,"El ropero ya está cerrado, escribe {DBED15}/abrir ropero{FFFFFF} para abrirlo.");
                            }
                        }
                    }
                }
            }
        }
    }
    if(sscanf(params, "s[10]", item))
    {
        new Float:Pos[3],contador = 0;
        for(new i = 0; i < MAX_PAUTOS; i++)
        {
            if(!IsValidVehicle(autos[i][playerid])) continue;
            GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
            if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
            {
                if(VehicleInfo[playerid][i][vTraba] == 0) return SendClientMessage(playerid, -1, "Para poder cerrar el vehículo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
                if(bloqueado[autos[i][playerid]] == 0)
                {
                    GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
                    SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, 1, bonnet, boot, objective);
					AccionesRol(playerid,"trabó las puertas de su vehículo.", 20);
					GameTextForPlayer(playerid, "~r~Cerrado", 1000, 5);
					SendClientMessage(playerid,-1,"{FFFFFF}Escribe {DBED16}/abrir {FFFFFF}para destrabar las puertas de tu vehículo.");
                    PlayerPlaySoundEx(playerid, 1145, Pos[0], Pos[1], Pos[2]);
                    bloqueado[autos[i][playerid]] = 1;
                    VehicleInfo[playerid][i][vSeguro] = 1;
                }
                else SendClientMessage(playerid,-1, "Este vehículo ya está cerrado."),SendClientMessage(playerid,-1, "{FFFFFF}Escribe {DBED16}/abrir {FFFFFF}para destrabar las puertas de tu vehículo.");
                contador ++;
            }
        }
        if(contador == 0) SendClientMessage(playerid, -1, "Necesitas estar al lado de un vehículo para poder cerrarlo.");
    }
    return 1;
}
CMD:alarma(playerid,params[])
{
	new Float:Pos[3];
	for(new i = 0; i < MAX_PAUTOS; i++)
 	{
  		if(!IsValidVehicle(autos[i][playerid])) continue;
    	GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
     	if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
      	{
		    if(VehicleInfo[playerid][i][vAlarm] == 0) return SendClientMessage(playerid, COLOR_BLANCO, "Tu vehículo no tiene instalado el sistema de alarma. Puedes comprar uno en cualquier {DBED15}24/7");
			if(VehicleInfo[playerid][i][vAlarma] == 0) AccionesRol(playerid,"activa la alarma de su vehículo.", 15),VehicleInfo[playerid][i][vAlarma] = 1,alarma[autos[i][playerid]] = 1;
			else { AccionesRol(playerid,"desactiva la alarma de su vehículo.", 15),VehicleInfo[playerid][i][vAlarma] = 0,alarma[autos[i][playerid]] = 0; if(alarmaon[autos[i][playerid]] == 1) DesactivarAlarma(autos[i][playerid]); }
        }
	}
	return 1;
}
CMD:abrir(playerid, params[])
{
    new item[128];
    if(!sscanf(params,"s[128]",item))
    {
        if(strcmp(item,"patrulla",true)==0)
        {
            if(PlayerInfo[playerid][pDuty] != 1) return 1;
            new Float:VPos[3];
            for(new i = 0;i<GetVehiclePoolSize();i++)
            {
                if(SAPD(i))
                {
                    GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
                    if(IsPlayerInRangeOfPoint(playerid,2.0,VPos[0],VPos[1],VPos[2]))
                    {
                        if(bloqueado[i] == 0) return SendClientMessage(playerid,-1,"Esta patrulla ya esta abierta");
                        AccionesRol(playerid,"destrabó las puertas de la patrulla.", 20);
                        GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
                        PlayerPlaySoundEx(playerid, 1145, VPos[0], VPos[1], VPos[2]);
                        SetVehicleParamsEx(i, engine, lights, alarm, 0, bonnet, boot, objective);
                        bloqueado[i] = 0;
                    }
                }
            }
        }
        else if(strcmp(item,"capo",true)==0)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new autoid = GetPlayerVehicleID(playerid);
                GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(autoid, engine, lights, alarm, doors, 1, boot, objective);
                Capo[autoid] = 1;
                AccionesRol(playerid,"abre el capó de su vehículo.", 20);
                return 1;
            }
            else return SendClientMessage(playerid,-1,"Necesitas estar en el asiento del chofer para abrir el capó.");
        }
        else if(strcmp(item,"baul",true)==0 || strcmp(item,"maletero",true)==0)
        {
            new Float:Pos[3],contador = 0;
	        for(new i = 0; i < MAX_PAUTOS; i++)
	        {
	            if(!IsValidVehicle(autos[i][playerid])) continue;
	            GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
				{
					if(Baul[autos[i][playerid]] == 1) return SendClientMessage(playerid,-1,"El baul ya esta abierto.");
					GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, 1, objective);
					Baul[autos[i][playerid]] = 1;
					GameTextForPlayer(playerid, "Maletero ~g~Abierto", 1000, 5);
					AccionesRol(playerid,"abre el maletero de su vehículo.", 20);
				}
				contador ++;
			}
			if(contador == 0) SendClientMessage(playerid, -1,"Debes estar cerca de tu vehículo para abrir su baul.");
        }
        else if(strcmp(item,"ropero",true) == 0)
        {
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
                    {
                        if(PlayerInfo[playerid][pID] == PropInfo[p][pIDPropietario])
                        {
                            if(IsPlayerInRangeOfPoint(playerid,1.5,254.2685,-41.5420,1002.0308) || IsPlayerInRangeOfPoint(playerid,5,PropInfo[p][pRoperoX],PropInfo[p][pRoperoY],PropInfo[p][pRoperoZ]))
                            {
                                if(PropInfo[p][pRoperoAbierto] == 0)
                                {
                                    PropInfo[p][pRoperoAbierto] = 1;
                                    AccionesRol(playerid,"abre el ropero.", 20);
                                    GuardarPropiedad(p);
                                }
                                else SendClientMessage(playerid,-1,"El ropero ya está abierto, escribe {DBED15}/cerrar ropero{FFFFFF} para cerrarlo.");
                            }
                        }
                    }
                }
            }
        }
        else if(strcmp(item,"casa",true) == 0 || strcmp(item,"puerta",true) == 0)
        {
            for(new p = 0; p < MAX_PROPIEDADES; p++)
            {
                if(PropInfo[p][pEnUso] == 1)
                {
                    if(PlayerInfo[playerid][pID] == PropInfo[p][pIDPropietario])
                    {
                        if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
                        {
                            if(PropInfo[p][pAbierta] == 0)
                            {
                                if(PropInfo[p][pTipo] == 3)
                                {
                                    if(!IsValidDynamicPickup(PropInfo[p][pPickup])) PropInfo[p][pPickup] = CreateDynamicPickup(1318,23,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],0);
                                    if(!IsValidDynamicMapIcon(PropInfo[p][pMapIcon])) PropInfo[p][pMapIcon] = CreateDynamicMapIcon(PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ], 50, 0, 0, 0, -1, 600.0);
                                }
                                PropInfo[p][pAbierta] = 1;
                                AccionesRol(playerid,"abre la puerta de su propiedad.", 20);
                                GuardarPropiedad(p);
                            }
                            else SendClientMessage(playerid,-1,"Esta propiedad ya está abierta, escribe {DBED15}/cerrar puerta{FFFFFF} para cerrarla.");
                            return 1;
                        }
                    }
                }
            }
        }
        else SendClientMessage(playerid,-1,"Comando desconocido, usa {DBED15}/ayuda {FFFFFF}para más información.");
    }
    if(sscanf(params, "s[128]", item))
    {
        new Float:Pos[3],contador = 0;
        for(new i = 0; i < MAX_PAUTOS; i++)
        {
            if(!IsValidVehicle(autos[i][playerid])) continue;
            GetVehiclePos(autos[i][playerid], Pos[0], Pos[1], Pos[2]);
            if(IsPlayerInRangeOfPoint(playerid, 5.0, Pos[0], Pos[1], Pos[2]))
            {
                if(VehicleInfo[playerid][i][vTraba] == 0) return SendClientMessage(playerid, COLOR_BLANCO, "Para poder abrir el vehículo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
                if(bloqueado[autos[i][playerid]] == 1)
                {
                    GetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, doors, bonnet, boot, objective);
                    SetVehicleParamsEx(autos[i][playerid], engine, lights, alarm, 0, bonnet, boot, objective);
                    AccionesRol(playerid,"destrabó las puertas de su vehículo.", 20);
                    GameTextForPlayer(playerid, "~g~Abierto", 1000, 5);
                    SendClientMessage(playerid,-1,"{FFFFFF}Escribe {DBED16}/cerrar {FFFFFF}para trabar las puertas de tu vehículo.");
                    PlayerPlaySoundEx(playerid, 1145, Pos[0], Pos[1], Pos[2]);
                    bloqueado[autos[i][playerid]] = 0;
                    VehicleInfo[playerid][i][vSeguro] = 0;
                }
                else SendClientMessage(playerid,-1, "Este vehículo ya está abierto."),SendClientMessage(playerid,-1,"{FFFFFF}Escribe {DBED16}/cerrar {FFFFFF}para trabar las puertas de tu vehículo.");
                contador ++;
            }
        }
        if(contador == 0) SendClientMessage(playerid, -1, "Necesitas estar al lado de un vehículo para poder abrirlo.");
    }
    return 1;
}
CMD:detener(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    ApagarMotor(playerid);
    return 1;
}
CMD:kill(playerid, params[])
{
    if(Jail[playerid] == 1 || PlayerInfo[playerid][pTiempoJail] > 0 || PlayerInfo[playerid][Agonizando] > 0 || VariableCaido[playerid] == 1) return 1;
    SetPlayerHealthEx(playerid, 0.0);
    TiempoVida[playerid] = gettime() + 5;
    suicidio[playerid] = 1;
    return 1;
}
CMD:m(playerid, params[])
{
    new text[128],string[128];
    if(PlayerInfo[playerid][pDuty] != 1) return 1;
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(SAPD(GetPlayerVehicleID(playerid)))
        {
            if(!sscanf(params, "s[128]",text))
            {
                format(string, sizeof(string), "(Megáfono) %s: {3399FF}¡¡ {FFFFFF}%s{3399FF} !!",PlayerInfo[playerid][Nickname], text);
                ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
            }
        }
        else if(HELISAPD(GetPlayerVehicleID(playerid)))
        {
            if(!sscanf(params, "s[128]",text))
            {
                format(string, sizeof(string), "(Megáfono) %s: {3399FF}¡¡ {FFFFFF}%s{3399FF} !!",PlayerInfo[playerid][Nickname], text);
                ProxDetector(90.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
            }
        }
        else SendClientMessage(playerid,-1,"Solamente los vehículos de la policía cuentan con megáfonos.");
    }
    else
    {
        new Float:VPos[3];
        for(new i = 0;i<GetVehiclePoolSize();i++)
        {
            if(SAPD(i) || HELISAPD(i))
            {
                GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
                if(IsPlayerInRangeOfPoint(playerid,4.0,VPos[0],VPos[1],VPos[2]))
                {
                    if(PlayerInfo[playerid][pDuty] == 1)
                    {
                        if(!sscanf(params, "s[128]",text))
                        {
                            format(string, sizeof(string), "(Megáfono) %s: {3399FF}¡¡ {FFFFFF}%s{3399FF} !!",PlayerInfo[playerid][Nickname], text);
                            ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
                        }
                    }
                    else SendClientMessage(playerid,-1,"Solamente los vehículos de la policía cuentan con megáfonos.");
                }
            }
        }
    }
    return 1;
}
CMD:radio(playerid, params[])
{
    new item[138];
    if(PlayerInfo[playerid][pRadio] != 1) return SendClientMessage(playerid, -1,"Tu no tienes un radio comunicador, puedes comprar uno en un 24/7");
    if(sscanf(params, "s[138]", item)) return SendClientMessage(playerid, -1,"Escribe {DBED15}/radio {FFFFFF}[{DBED15}on/off{FFFFFF}]");
    {
        if(strcmp(item, "on",true) == 0)
        {
            if(EstadoRadio[playerid] == 1) return SendClientMessage(playerid,-1,"Tu radio comunicador ya se encuentra encendido.");
            EstadoRadio[playerid] = 1;
            if(PlayerTemp[playerid][@Specteando] == 0) AccionesRol(playerid,"encendió su radio comunicador.", 20);
        }
        if(strcmp(item, "off", true) == 0)
        {
            if(EstadoRadio[playerid] == 0) return SendClientMessage(playerid,-1,"Tu radio comunicador ya se encuentra apagado.");
            EstadoRadio[playerid] = 0;
            if(PlayerTemp[playerid][@Specteando] == 0) AccionesRol(playerid,"apagó su radio comunicador.", 20);
        }
    }
    return 1;
}
CMD:n(playerid, params[])
{
    new texto[128],string[400];
    if(GetPlayerScore(playerid) == 0) return 1;
    if(CanalDudas[playerid] == 0) return SendClientMessage(playerid,-1,"Tienes el canal de dudas desactivado");
    if(sscanf(params,"s[128]",texto)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/n {FFFFFF}<Pregunta>");
    if(PlayerInfo[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, 0x3AA000FF, "No puedes usar el canal de dudas mientras estás sancionado.");
    if(Tiempos[playerid][TiempoDuda] > 0 && RecienDuda[playerid] == 1)
    {
        if(Tiempos[playerid][TiempoDuda] < 60) format(string,sizeof(string),"Debes esperar %d segundos para volver a utilizar el canal de dudas.",Tiempos[playerid][TiempoDuda]);
        else if(Tiempos[playerid][TiempoDuda] >= 60) format(string,sizeof(string),"Debes esperar %dm %ds para volver a utilizar el canal de dudas.",Tiempos[playerid][TiempoDuda]/60, Tiempos[playerid][TiempoDuda]%(60));
        SendClientMessage(playerid, 0xff9a00FF,string);
        return 1;
    }
    if(Tiempos[playerid][TiempoDuda] > 0 && RecienDuda[playerid] == 0)
    {
        if(Tiempos[playerid][TiempoDuda] < 60) format(string, sizeof(string), "No se te permite hablar por el chat de ayuda. Espera {00CC00}%ds{FFFFFF} para enviar otra consulta al canal de ayuda.",Tiempos[playerid][TiempoDuda]);
        else if(Tiempos[playerid][TiempoDuda] >= 60) format(string, sizeof(string), "No se te permite hablar por el chat de ayuda. Espera {00CC00}%dm %ds{FFFFFF} para enviar otra consulta al canal de ayuda.", Tiempos[playerid][TiempoDuda]/60, Tiempos[playerid][TiempoDuda]%(60));
        SendClientMessage(playerid, -1,string);
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] == 0)
    {
        format(string,sizeof(string),"{FFFFFF}El canal de dudas /n es únicamente para dudas.\n\nNO USES el canal de dudas para comunicarte con tus amigos, para vender cosas o para insultar.\nEn caso de hacerlo, vas a ser sancionado con descuento de dinero.\nTambién tu cuenta puede ser baneada permanentemente.\n\n¿Quieres enviar la duda o respuesta a la duda?");
        ShowPlayerDialog(playerid, DAYUDA, DIALOG_STYLE_MSGBOX, "{DBED15}¡ATENCIÓN!",string,"Si","No");
        DudaTexto[playerid] = texto;
    }
    if(PlayerInfo[playerid][pAdmin] > 0) return DudaAdmin(playerid, params);
    return 1;
}
CMD:hora(playerid,params[])
{
    new hour, minute, second, string[180];
    new day,month,year;
    gettime(hour,minute,second);
    getdate(day,month,year);
    format(string, sizeof(string),"{FFFFFF}Fecha y hora actual del servidor: {DBED16}%02d/%02d/%02d %02d:%02d:%02d.", day,month,year,hour,minute,second);
    SendClientMessage(playerid,-1,string);
    return 1;
}
CMD:intentar(playerid, params[])
{
    if(Tiempos[playerid][TiempoIntentar] > gettime())
    {
        new tmpString[64];
        format(tmpString, sizeof(tmpString), "El comando {DBED15}/intentar{FFFFFF} solo se puede usar una vez por minuto. Por favor espera {DBED15}%d {FFFFFF}segundos.", Tiempos[playerid][TiempoIntentar] - gettime());
        return SendClientMessage(playerid, COLOR_WHITE, tmpString);
    }
    if(!isnull(params))
    {
        new string[128];
        format(string, sizeof(string), "%s intenta %s %s", PlayerInfo[playerid][Nickname], params, ((random(2)) ? ("y lo logra.") : ("y no puede.")));
        if(strlen(string) < 128) ProxDetector(30.0, playerid, string,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        Tiempos[playerid][TiempoIntentar] = gettime() + 59;
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/intentar acción{FFFFFF}, por ejemplo: {DBED15}/intentar encestar el balón en el aro");
    return 1;
}
CMD:p(playerid, params[])
{
    if(!isnull(params))
    {
        new string[128];
        format(string, sizeof(string), "* %s (( %s ))", params, PlayerInfo[playerid][Nickname]);
        if(strlen(string) < 128) ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/p entorno{FFFFFF}, por ejemplo: {DBED15}/p se cae una roca por la montaña");
    DetectarSPAM(playerid,params);
    return 1;
}
CMD:d(playerid,params[])
{
    new text[128],string[128];
    if(sscanf(params,"s[128]",text)) return SendClientMessage(playerid,-1,"Por favor escribe {DBED15}/d texto{FFFFFF}, por ejemplo: {DBED15}/d Hola, buen día.{FFFFFF}.");
    if(GetPlayerDrunkLevel(playerid) > 5000)
    {
        format(string, sizeof(string), "%s alcoholizado dice: %s",PlayerInfo[playerid][Nickname], text);
        if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    }
    else
    {
        format(string, sizeof(string), "%s dice: %s",PlayerInfo[playerid][Nickname], text);
        if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
    }
    DetectarSPAM(playerid,text);
    return 1;
}
CMD:b(playerid, params[])
{
    if(!isnull(params))
    {
        new string[128];
        format(string, sizeof(string), "%s: (( %s ))", PlayerInfo[playerid][Nickname], params);
        if(strlen(string) < 128) ProxDetector(15.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/b texto{FFFFFF}, por ejemplo: {DBED15}/b ¿qué comando era para entrar en las propiedades?");
    DetectarSPAM(playerid,params);
    return 1;
}
CMD:g(playerid, params[])
{
    if(!isnull(params))
    {
        if(GetPlayerDrunkLevel(playerid) > 5000)
        {
            new string[128];
            format(string, sizeof(string), "%s grita alcoholizado: ¡%s!", PlayerInfo[playerid][Nickname], params);
            if(strlen(string) < 128) ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
            format(string, sizeof(string), "¡%s!", params);
            if(strlen(string) < 128) SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
        }
        else
        {
            new string[128];
            format(string, sizeof(string), "%s grita: ¡%s!", PlayerInfo[playerid][Nickname], params);
            if(strlen(string) < 128)ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
            format(string, sizeof(string), "¡%s!", params);
            if(strlen(string) < 128)SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
        }
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/g texto{FFFFFF}, por ejemplo: {DBED15}/g Espérame.");
    DetectarSPAM(playerid,params);
    return 1;
}
CMD:s(playerid, params[])
{
    new string[128];
    if(!isnull(params))
    {
        if(GetPlayerDrunkLevel(playerid) > 5000)
        {
            format(string, sizeof(string), "%s susurra alcoholizado: %s",PlayerInfo[playerid][Nickname], params);
            if(strlen(string) < 128) ProxDetector(5.0, playerid, string,CHAT,CHAT2,CHAT3,CHAT4,CHAT5);
        }
        else
        {
            format(string, sizeof(string), "%s susurra: %s", PlayerInfo[playerid][Nickname], params);
            if(strlen(string) < 128) ProxDetector(5.0, playerid, string,CHAT,CHAT2,CHAT3,CHAT4,CHAT5);
        }
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/s texto{FFFFFF}, por ejemplo: {DBED15}/s ¿Dónde robamos?");
    DetectarSPAM(playerid,params);
    return 1;
}
CMD:y(playerid, params[])
{
    if(!isnull(params))
    {
        new string[128];
        format(string, sizeof(string), "* %s %s", PlayerInfo[playerid][Nickname], params);
        if(strlen(string) < 128) ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {DBED15}/y texto{FFFFFF}, por ejemplo: {DBED15}/y se rie");
    DetectarSPAM(playerid,params);
    return 1;
}
CMD:me(playerid, params[])
{
	if(!isnull(params))
	{
		if(strlen(params) <= 128) AccionesRol2(playerid, params, 15);
		SendClientMessage(playerid,-1,"Por favor acostúmbrate a usar {DBED15}/y{FFFFFF} en lugar de {DBED15}/me{FFFFFF}, ya que en futuras versiones el comando dejará de existir.");
		DetectarSPAM(playerid,params);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Usa {DBED15}/me [Texto]");
	return 1;
}
CMD:alquilar(playerid,params[])
{
    if(PlayerInfo[playerid][pNivel] <= 3) return SendClientMessage(playerid,-1,"Necesitas nivel 4 o más para poder alquilar este salón.");
    if(strcmp(params[0],"salon",true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,5,-1250.3397,2093.7437,1246.6360)) return SendClientMessage(playerid,-1,"No estás en donde se alquila el salón.");
        if(Alquilado == true) return SendClientMessage(playerid,-1,"El salón ya se encuentra alquilado.");
        if(Boleto[playerid] == true) return SendClientMessage(playerid,-1,"Ya compraste una entrada.");
        ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
    }
    return 1;
}
CMD:buscar(playerid, params[])
{
    if(PlayerInfo[playerid][pDuty] != 1) return 1;
    ShowPlayerDialog(playerid, BUSCARCOCHE, DIALOG_STYLE_LIST, "Buscar información", "Vehículo", "Siguiente", "Cancelar");
    return 1;
}
CMD:id(playerid, params[])
{
    new id, day,month,year, hour, minute, second;
    gettime(hour,minute,second);
    getdate(year,month,day);
    if(sscanf(params, "r", id)) return SendClientMessage(playerid, -1, "Para ver el ID de una persona, escribe /id [nombre_apellido]");
    else if (!IsPlayerConnected(id)) SendClientMessage(playerid,COLOR_WHITE,"No se encontró ningún jugador.");
    else
    {
        new score = GetPlayerScore(id);
        if(score == 0 || IsPlayerNPC(id)) SendClientMessage(playerid, -1, "El jugador está conectado pero aún no ha ingresado al juego.");
        else
        {
            if(id == playerid) {
                MensajeEx(playerid, -1, "El jugador {00CCFF}%s{FFFFFF} tiene el ID: {FF0000}%d{FFFFFF}. (Nivel: {e77d31}%d{FFFFFF})", PlayerInfo[id][Nickname], id , PlayerInfo[id][pNivel]);
                MensajeEx(playerid, -1, "Detalles (Ping: %s | P: %.2f)", StringPing(playerid),NetStats_PacketLossPercent(playerid));
            }
            else if(id != playerid) {
                SendClientMessage(playerid,-1," ");
                MensajeEx(playerid, -1, "{FFFFFF}Fecha y Hora Actual del Servidor: {DBED15}%02d/%02d/%02d %02d:%02d:%02d.", day,month,year,hour,minute,second);
                MensajeEx(playerid, -1, "El jugador {00CCFF}%s{FFFFFF} tiene el ID: {FF0000}%d{FFFFFF}. (Nivel: {e77d31}%d{FFFFFF})", PlayerInfo[id][Nickname], id , PlayerInfo[id][pNivel]);
                MensajeEx(playerid, -1, "Detalles (Ping: %s | P: %.2f | Cod: {AFAFAF}#%d{FFFFFF} | Ping propio: %s)", StringPing(id),NetStats_PacketLossPercent(id),PlayerInfo[id][pID]+245100,StringPing(playerid));
            }
            new country[30],city[30],plrIP[32];
            GetPlayerCountry(id, country, sizeof(country));
            GetPlayerCity(id, city, sizeof(city));
            GetPlayerIp(playerid, plrIP, sizeof(plrIP));
            if(strcmp("127.0.0.1", plrIP, true) == 0) format(country, sizeof(country), "Colombia");
            if(PlayerInfo[playerid][pAdmin] >= 3) MensajeEx(playerid, -1, "País Registrado: {46e800}%s{FFFFFF} | Conectado desde: {46e800}%s - %s{FFFFFF}",PlayerInfo[id][pPaisRegistro],country, city);
        }
    }
    return 1;
}
CMD:iniciar(playerid, params[])
{
    if(PlayerInfo[playerid][pDuty] == 1 && PlayerInfo[playerid][pFaccion] == 1)
    {
        new id;
        if(PlayerInfo[playerid][pRango] < 3) return SendClientMessage(playerid, -1, "Necesitas ser mayor de rango 3.");
        if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/iniciar [id]");
        if(!IsPlayerConnected(id)) return SendClientMessage(playerid,-1,"No se encontró ningún jugador.");
        if(!EnAcademia(id)) return SendClientMessage(playerid, -1, "Ese jugador no se encuentra en la academia.");
        else
        {
            SendClientMessage(playerid, -1, "Iniciaste el recorrido para ese jugador.");
            SendClientMessage(id, -1, "Para iniciar el recorrido, ingresa al primer {FF3300}punto de control{FFFFFF} y continua a los siguientes.");
            DisablePlayerCheckpoint(id);
            SetPlayerCheckpoint(id, 635.3787,-222.2007,1276.7941, 3.0);
            EnPrueba[id] = true;
            return 1;
        }
    }
    return 1;
}
CMD:baul(playerid,params[])
{
	new item[8], item2[22], query[256], string[128], id, Float:CPos[3], Float:Pos[3];
	if(!sscanf(params,"s[8]s[22]",item,item2))
	{
	    if(strcmp(item,	"guardar",	true) == 0)
		{
		    if(VariableCaido[playerid] == 1 || PlayerInfo[playerid][Agonizando] == 1) return SendClientMessage(playerid,-1,"No puedes utilizar este comando en este momento.");
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
			if(VerBaul[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");
            new t_o, veh_c,autoid_slot = -1;
			for(new a = 0; a < MAX_PAUTOS; a++)
		 	{
		  		if(!IsValidVehicle(autos[a][VerBaul[playerid]])) continue;
				GetVehiclePos(autos[a][VerBaul[playerid]], CPos[0], CPos[1], CPos[2]);
		  		if(IsPlayerInRangeOfPoint(playerid, 5.0, CPos[0], CPos[1], CPos[2])) veh_c = autos[a][VerBaul[playerid]],autoid_slot = a;
			}
			if(autoid_slot == -1) return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");
			if(strcmp(item2, "bidon", true) == 0) t_o = 1650;
			else if(strcmp(item2, "objeto", true) == 0) t_o = Objeto[playerid];
			else if(strcmp(item2, "manopla", true) == 0) t_o = 1;
			else if(strcmp(item2, "palo-de-golf", true) == 0) t_o = 2;
			else if(strcmp(item2, "cuchillo", true) == 0) t_o = 4;
			else if(strcmp(item2, "bate-de-beisbol", true) == 0) t_o = 5;
			else if(strcmp(item2, "palo-de-billar",	true) == 0) t_o = 7;
			else if(strcmp(item2, "katana",	true) == 0) t_o = 8;
			else if(strcmp(item2, "consolador-rosa", true) == 0) t_o = 10;
			else if(strcmp(item2, "vibrador-blanco", true) == 0) t_o = 11;
			else if(strcmp(item2, "gran-vibrador-blanco", true) == 0) t_o = 12;
			else if(strcmp(item2, "vibrador-plateado", true) == 0) 	t_o = 13;
			else if(strcmp(item2, "ramo-de-flores", true) == 0) t_o = 14;
			else if(strcmp(item2, "baston",	true) == 0) t_o = 15;
			else if(strcmp(item2, "camara",	true) == 0) t_o = 43;
			else if(strcmp(item2, "desert-eagle", true) == 0) t_o = 24;
			else if(strcmp(item2, "escopeta", true) == 0) t_o = 25;
			else if(strcmp(item2, "escopeta-de-combate", true) == 0) t_o = 27;
			else if(strcmp(item2, "pala", true) == 0) t_o = 6;
			else if(strcmp(item2, "mp5", true) == 0) t_o = 29;
			else if(strcmp(item2, "granada", true) == 0) t_o = 16;
			else if(strcmp(item2, "9mm", true) == 0) t_o = 22;
			else if(strcmp(item2, "9mm-silenciada",	true) == 0) t_o = 23;
			else if(strcmp(item2, "ak-47", true) == 0) t_o = 30;
			else if(strcmp(item2, "m4",	true) == 0) t_o = 31;
			else if(strcmp(item2, "rifle",	true) == 0) t_o = 33;
			else return SendClientMessage(playerid,-1,"SERVER: Unknown Command");
			if(Baul[veh_c] == 1)
			{
			    if(t_o == 1650 || t_o == Objeto[playerid])
			    {
					if(t_o == 1650 && Bidon[playerid] == 0) return SendClientMessage(playerid,-1,"Tu no tienes un bidón de gasolina");
					if(t_o == Objeto[playerid] && Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes ningún objeto para guardar");
			    }
	            else
				{
					if(!SiTieneArma(playerid,t_o)) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
					if(PlayerInfo[playerid][pCargos] > 2)
					{
						foreach(new i : Player)
						{
							if(PlayerInfo[i][pDuty] == 1 && IsPlayerInRangeOfPoint(i,50.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"La policía esta muy cerca.");
						}
	     			}
				}
	            new counter = 4;
	            if(BAUL6(veh_c)) counter = 6;
				else if(BAUL8(veh_c)) counter = 8;
				if(MOTO(veh_c)) counter = 0;
				if(PlayerInfo[VerBaul[playerid]][pVip] == 1 && !MOTO(veh_c)) counter += 1;
				if(PlayerInfo[VerBaul[playerid]][pVip] == 2 && !MOTO(veh_c)) counter += 2;
	            for(new i = 1; i <= counter; i++)
	            {
					if(EspacioBaul[VerBaul[playerid]][autoid_slot][i] == 0)
					{
					    EspacioBaul[VerBaul[playerid]][autoid_slot][i] = t_o;
						if(t_o > 0 && t_o <= 43)
						{
							format(string, sizeof(string), "%s guarda un/a %s en el maletero del vehículo.", PlayerName(playerid),GetWeaponNameEx(t_o));
							ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
							QuitarArma(playerid,t_o);
					    }
						else
						{
					    	if(t_o == 1650) AccionesRol(playerid, "guarda un Bidon de gasolina en el maletero del vehículo.", 20),Bidon[playerid] = 0;
					    	else AccionesRol(playerid, "guarda un objeto en el maletero del vehículo.", 20),ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
							RemovePlayerAttachedObject(playerid,4);
			    		}
						Objeto[playerid] = 0;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						mysql_format(handle_db, query, sizeof(query), "UPDATE `p_vehicles` SET `%s`='%d' WHERE `ID`='%d'", BaulSlot(i),t_o,VehicleInfo[VerBaul[playerid]][autoid_slot][v_DBID]);
						mysql_tquery(handle_db, query);
						break;
					}
				}
			}
			else SendClientMessage(playerid,-1,"El maletero está cerrado.");
			return 1;
		}
	}
	if(!sscanf(params,"s[8]d",item,id))
	{
		if(strcmp(item,	"sacar",true) == 0)
		{
		    if(id == 0) return 1;
            if(PlayerInfo[playerid][horasjugadas] < 3) return SendClientMessage(playerid, -1, "Necesitas por lo menos haber jugador 3 horas para poder sacar cosas del baul.");
			if(PlayerInfo[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos del baul.");
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
		    if(VerBaul[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Primero mira el {DBED15}/maletero{FFFFFF} o si no es tuyo {DBED15}/maletero [id o nombre del dueño].");
			new veh_c = -1, auto_slot;
			for(new a = 0; a < MAX_PAUTOS; a++)
		 	{
		  		if(!IsValidVehicle(autos[a][VerBaul[playerid]])) continue;
				GetVehiclePos(autos[a][VerBaul[playerid]], CPos[0], CPos[1], CPos[2]);
		  		if(IsPlayerInRangeOfPoint(playerid, 5.0, CPos[0], CPos[1], CPos[2])) veh_c = autos[a][VerBaul[playerid]];
			}
			if(veh_c == -1) return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");
   			auto_slot = GetPlayerVehicle(VerBaul[playerid],veh_c);
			if(auto_slot != -1)
			{
			    if(Baul[veh_c] == 1)
				{
				    new cont;
				    if(BAUL6(veh_c)) cont = 6;
					else if(BAUL8(veh_c)) cont = 8;
					else cont = 4;
					if(MOTO(veh_c)) cont = 0;
					if(PlayerInfo[VerBaul[playerid]][pVip] == 1 && !MOTO(veh_c)) cont ++;
					if(PlayerInfo[VerBaul[playerid]][pVip] == 2 && !MOTO(veh_c)) cont += 2;
					if(id > cont) return 1;
					if(EspacioBaul[VerBaul[playerid]][auto_slot][id] == 0) return SendClientMessage(playerid,-1,"Este espacio esta vacío");
					if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Tienes un objeto en tus manos.");
					if(EspacioBaul[VerBaul[playerid]][auto_slot][id] > 46) AccionesRol(playerid, "toma un objeto de su maletero.", 20),DarObjetoBaul(playerid,EspacioBaul[VerBaul[playerid]][auto_slot][id]);
					else
					{
						format(string, 256, "%s saca un/a %s del maletero del vehículo.", PlayerName(playerid), GetWeaponNameEx(EspacioBaul[VerBaul[playerid]][auto_slot][id]));
					    ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				        DarArma(playerid,EspacioBaul[VerBaul[playerid]][auto_slot][id]);
					}
		            EspacioBaul[VerBaul[playerid]][auto_slot][id] = 0;
					mysql_format(handle_db, query, sizeof(query), "UPDATE `p_vehicles` SET `%s`='0' WHERE `ID`='%d'", BaulSlot(id),VehicleInfo[VerBaul[playerid]][auto_slot][v_DBID]);
					mysql_tquery(handle_db, query);
					return 1;
				}
				else return SendClientMessage(playerid,-1,"El maletero está cerrado.");
			}
		}
	}
	else if(!sscanf(params,"d",id))
	{
	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,-1,"Jugador desconectado.");
		if(PlayerInfo[playerid][horasjugadas] < 3) return SendClientMessage(playerid, -1, "Necesitas por lo menos haber jugado 3 horas para poder mirar el baul de otro jugador.");
		if(PlayerInfo[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Necesitas ser nivel 4 para revisar el baul de otro jugador.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
		if(PlayerInfo[id][pNivel] < 5) return SendClientMessage(playerid, -1, "El jugador al cual le deseas revisar el baúl es menos de nivel 5.");
		new var = -1;
		for(new a = 0; a < MAX_PAUTOS; a++)
	 	{
	  		if(!IsValidVehicle(autos[a][id])) continue;
			GetVehiclePos(autos[a][id], CPos[0], CPos[1], CPos[2]);
	  		if(IsPlayerInRangeOfPoint(playerid, 5.0, CPos[0], CPos[1], CPos[2])) var = autos[a][id];
		}
		if(var == -1) return 1;
		if(Baul[var] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
		    AccionesRol(playerid,"comienza a revisar el interior del baúl.", 20);
			Revisado(playerid,id);
		    TimerRevisar[playerid] = 10;
		}
		else return SendClientMessage(playerid,-1,"El baul del vehículo esta cerrado.");
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
		TimerRevisar[playerid] = 6;
		Revisado(playerid,playerid);
	}
	return 1;
}
CMD:mute(playerid,params[])
{
    new id,tiempo,razon[200],day,month,year, hora, minuto,segundo;
    getdate(year,month,day);
    gettime(hora, minuto, segundo);
    if(sscanf(params,"dds[200]",id,tiempo,razon)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/mute {FFFFFF}<PlayerID> <Tiempo> <Razón>");
    if(IsPlayerNPC(id)) return 1;
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    if(tiempo <= 0) return 1;
    if(Tiempos[id][TiempoDuda] > 240) return SendClientMessage(playerid,-1,"Ese jugador ya esta muteado.");
    foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
        {
            if(PlayerInfo[i][pMuteos] == 1) MensajeEx(i, -1, "El jugador {FF3300}%s {FFFFFF}fue muteado del canal de dudas por %s, razón: {FF3300}%s",PlayerInfo[id][Nickname],PlayerInfo[playerid][Nickname], razon);
        }
    }
    RecienDuda[id] = 0;
    Tiempos[id][TiempoDuda] = tiempo*60;
    MensajeEx(id, -1, "{FFFFFF}Ahora tendrás que esperar {00CC00}%d minutos {FFFFFF}para volver utilizar el canal dudas.", tiempo);
    return 1;
}
CMD:unmute(playerid,params[])
{
    new id,razon[200];
    if(sscanf(params,"ds[200]",id,razon)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/unmute {FFFFFF}<PlayerID> <Razón>");
    if(IsPlayerNPC(id)) return 1;
    foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
        {
            if(PlayerInfo[i][pMuteos] == 1) MensajeEx(i,-1, "El jugador {FF3300}%s {FFFFFF}fue desmuteado del canal de dudas por %s, razón: {FF3300}%s",PlayerInfo[id][Nickname],PlayerInfo[playerid][Nickname], razon);
        }
    }
    Tiempos[id][TiempoDuda] = 0;
    RecienDuda[id] = 1;
    SendClientMessage(id,-1,"{FFFFFF}Se te quito la restricción del canal de dudas.");
    return 1;
}
CMD:mutead(playerid,params[])
{
    new id,tiempo,string[128],razon[200],day,month,year, hora, minuto,segundo;
    getdate(year,month,day);
    gettime(hora, minuto, segundo);
    if(sscanf(params,"dds[200]",id,tiempo,razon)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/mutead {FFFFFF}<PlayerID> <Tiempo> <Razón>");
    if(IsPlayerNPC(id)) return 1;
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    if(tiempo <= 0) return 1;
    if(Tiempos[id][TiempoAnuncio] > 240) return SendClientMessage(playerid,-1,"Ese jugador ya esta muteado.");
    format(string, sizeof(string), "El jugador {FF3300}%s{FFFFFF} fue muteado del canal de anuncios por %s, razón: {FF3300}%s",PlayerInfo[id][Nickname],PlayerInfo[playerid][Nickname], razon);
    MandarMensajeTodos(string);
    Tiempos[id][TiempoAnuncio] = tiempo*60;
    MensajeEx(id, -1, "{FFFFFF}Ahora tendrás que esperar {00CC00}%d minutos {FFFFFF}para volver utilizar el canal de anuncios.", tiempo);
    return 1;
}
CMD:unmutead(playerid,params[])
{
    new id,razon[200];
    if(sscanf(params,"ds[200]",id,razon)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/unmutead {FFFFFF}<PlayerID> <Razón>");
    if(IsPlayerNPC(id)) return 1;
    foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
        {
            if(PlayerInfo[i][pMuteos] == 1) MensajeEx(i,-1, "El jugador {FF3300}%s {FFFFFF}fue desmuteado del canal de anuncios por %s, razón: {FF3300}%s",PlayerInfo[id][Nickname],PlayerInfo[playerid][Nickname], razon);
        }
    }
    Tiempos[id][TiempoAnuncio] = 0;
    SendClientMessage(id,-1,"{FFFFFF}Se te quito la restricción del canal de anuncios.");
    return 1;
}
CMD:recargarcamello(playerid)
{
    CrackCamello = 15000; MarihuanaCamello = 15000; MedicamentosCamello = 15000; TranquilizantesCamello = 15000; DineroCamello = 1000000;
    return 1;
}
CMD:san(playerid, params[])
{
    new string[126],string2[126],day,month,year,hora,minuto,segundo;
    gettime(hora,minuto,segundo);
    getdate(year,month,day);
    new ID,ADMIN[256],tiempo;
    if(sscanf(params, "dds[256]", ID,tiempo,ADMIN)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/sancionar {FFFFFF}<PlayerID> <Tiempo> <Razón>");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    if(San[ID] == 1) return SendClientMessage(playerid,COLORCARGO0,"Ese jugador ya esta sancionado.");
    if(PlayerInfo[ID][pAdmin] >= PlayerInfo[playerid][pAdmin] && ID != playerid)
    {
        format(string, sizeof(string), "%s intentó sancionar a un administrador %s",PlayerInfo[playerid][Nickname], PlayerInfo[ID][Nickname]);
        MensajeAdmin(COLOR_YELLOW, string, 3);
        return 1;
    }
    QuitarArmas(ID);
    PlayerInfo[ID][pCargos] = 0;
    ActualizarRadar();
    PlayerInfo[ID][pTiempoCarcel] = 0;
    CeldaJugador[ID] = 0;
    SetPlayerWantedLevel(ID, PlayerInfo[ID][pCargos]);
    SetPlayerColor(ID,COLORCARGO0);
    SetPlayerInterior(ID, 6);
    SetPlayerVirtualWorld(ID, ID);
    PlayerInfo[ID][pTiempoJail] = tiempo*60;
    foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
        {
            if(PlayerInfo[i][pMuteos] == 1) MensajeEx(i, -1, "El jugador {FF3300}%s {FFFFFF}fue sancionado por %s, razón: {FF3300}%s",PlayerInfo[ID][Nickname],PlayerInfo[playerid][Nickname], ADMIN);
        }
    }
    PlayerInfo[ID][sancionado] ++;
    format(string2,sizeof(string2),"Fuiste sancionado por un tiempo de {00CC00}%d minutos", tiempo);
    SendClientMessage(ID,-1,string2);
    San[ID] = 1;
    Revivir(ID);
    mysql_format(handle_db, string, sizeof(string), "UPDATE `usuarios` SET `RazonSan`='%e' WHERE `ID`='%d'", ADMIN, PlayerInfo[ID][pID]);
    mysql_tquery(handle_db, string);
    NoTeleportHack(ID);
    SetPlayerPos(ID, 346.870025,309.259033,999.155700);
    return 1;
}
CMD:sanoff(playerid, params[])
{
    new tiempo, JugadorSancionado[25], RazonSan[128];
    if(sscanf(params, "ds[25]s[128]", tiempo, JugadorSancionado, RazonSan)) return SendClientMessage(playerid, -1, "Modo de uso: /sanoff [Tiempo] [Nombre_Apellido] [Razón]");
    new DB_Query[128];
    format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `usuarios` WHERE `Username`='%s';", JugadorSancionado);
    mysql_pquery(handle_db, DB_Query, "SelectJugadorASan", "ddss", playerid, tiempo, JugadorSancionado, RazonSan);
    return 1;
}
CMD:spec(playerid, params[])
{
	new id, string99[128];
    if(sscanf(params,"u", id)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/spec {FFFFFF}<PlayerID>");
	if(GetPlayerScore(id) == 0) return SendClientMessage(playerid, -1, "El jugador que quieres spectear esta conectado pero aun no ha ingresado al juego.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return 1;
	if(id == playerid) return 1;
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PlayerTemp[playerid][@Specteando] == 0)
	{
		GetPlayerPos(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
		SpecInt[playerid] = GetPlayerInterior(playerid);
		SpecVW[playerid] = GetPlayerVirtualWorld(playerid);
	}
	PlayerTemp[playerid][@Specteando] = 1;
	SpecJugador[playerid] = id;
	Specteado[id] = 1;
	TogglePlayerSpectating(playerid, true);
	if(!IsPlayerInAnyVehicle(id))
	{
	    SetPlayerInterior(playerid,GetPlayerInterior(id));
	 	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));
	    PlayerSpectatePlayer(playerid,id);
	}
	else
	{
     	SetPlayerInterior(playerid,GetPlayerInterior(id));
		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));
	    PlayerSpectateVehicle(playerid,GetPlayerVehicleID(id));
	}
	format(string99,128,"{DBED16}%s (ID: %d | Nivel %d) ahora es el specteador de %s (ID: %d | Nivel: %d)",PlayerInfo[playerid][Nickname],playerid,PlayerInfo[playerid][pNivel],PlayerInfo[id][Nickname],id,PlayerInfo[id][pNivel]);
	MensajeAdmin(0xFFDBED15FF,string99,3);
 	return 1;
}
CMD:listo(playerid, params[])
{
	if(PlayerTemp[playerid][@Specteando] == 0) return 1;
	TogglePlayerSpectating(playerid, false);
	SetPlayerArmourEx(playerid, PlayerInfo[playerid][j_ARMOUR]); 
    SetPlayerHealthEx(playerid, PlayerInfo[playerid][j_HEALTH]);
	SpecJugador[playerid] = INVALID_PLAYER_ID;
	return 1;
}
CMD:kick(playerid, params[])
{
    new string[256],ID,ADMIN[128];
    if(sscanf(params, "ds[128]", ID,ADMIN)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/kick {FFFFFF}<PlayerID> <Razón>");
    if(PlayerInfo[ID][pAdmin] >= PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pAdmin] <= 3) return 1;
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    format(string, sizeof(string), "{FFFFFF}El jugador {FF3300}%s {FFFFFF}fue expulsado por %s, razón: {FF3300}%s",PlayerInfo[ID][Nickname],PlayerInfo[playerid][Nickname], ADMIN);
    MandarMensajeTodos(string);
    ExpulsarJugador(ID,"Fuiste expulsado por un admin.");
    return 1;
}
CMD:pedidos(playerid, params[])
{
    new dialog[128 * 15], line_str[256], count = 0;
    format(dialog, sizeof dialog, "ID\tEstado\tNombre\tPedido\n");
    for(new i = 0; i < MAX_PEDIDOS; i++)
    {
        if(PEDIDO_INFO[i][pi_ID] != 0)
        {
            PlayerTemp[playerid][p_PLAYER_LISTITEM][count] = PEDIDO_INFO[i][pi_ID];
            format(line_str, sizeof line_str, "%d.\t%s\t%s\t%s\n", i, (PEDIDO_INFO[i][pi_ESTADO]) ? ("{FF0000}Sin revisar") : ("{07C400}Revisado"), PEDIDO_INFO[i][pt_NAME],PEDIDO_INFO[i][pi_TEXT]);
            strcat(dialog, line_str);
            count ++;
        }
    }
    if(count == 0) return SendClientMessage(playerid,-1,"No hay pedidos de usuarios pendientes.");
    ShowPlayerDialog(playerid, MENU_PEDIDOS, DIALOG_STYLE_TABLIST_HEADERS, "Menu Pedidos", dialog, "Seleccionar", "Salir");
    return 1;
}
CMD:resetearcarreras(playerid, params[])
{
    ResetearCarrera();
    Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{FF3300}Boleteria cerrada\n{DBED16}Horarios de los eventos: {FFFFFF}5hs,11hs,17hs,23hs");
    return 1;
}
CMD:ccarrera(playerid,params[])
{
    if(sscanf(params,"d",params[0])) return SendClientMessage(playerid,-1,"Escribe {DBED16}/ccarrera {FFFFFF}<Minutos>");
    if(HabilitarCarreras == 1) return SendClientMessage(playerid,-1,"Ya hay una carrera en curso.");
    if(params[0] < 1 || params[0] > 11) return SendClientMessage(playerid,-1,"El valor debe ser mayor a 1 y menor a 0 ");
    ResetearCarrera();
    HabilitarCarreras = 1;
    Update3DTextLabelText(TextoCarrera,COLOR_WHITE,"{00CC00}Boleteria abierta\n{FFFFFF}Costo de la entrada: {00CC00}$600\n{DBED16}/comprar entrada");
    ConteoCarrera = params[0]*60;
    SetTimer("EmpezarCarrera",segundos(10),0);
    return true;
}
CMD:resetearpuntos(playerid,params[])
{
    new Query[128];
    mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `PuntosCarrera`='0' WHERE `PuntosCarrera`");
    mysql_tquery(handle_db, Query);
    foreach(new u : Player) PlayerInfo[u][pPuntosCarrera] = 0;
    return 1;
}
CMD:traer(playerid,params[])
{
    new Float:Pos[3],id;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1,"Escribe {DBED15}/traer {FFFFFF}<PlayerID");
    {
        if(IsPlayerConnected(id))
        {
            if(IsPlayerNPC(id)) return 1;
            if(IsPlayerPaused(id)) return SendClientMessage(playerid, -1,"No se puede traer este jugador a tu posición ya que se encuentra AFK");
            if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return 1;
            if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            {
                PlayerInfo[id][jPosE_x] = PlayerInfo[playerid][jPosE_x];
                PlayerInfo[id][jPosE_y] = PlayerInfo[playerid][jPosE_y];
                PlayerInfo[id][jPosE_z] = PlayerInfo[playerid][jPosE_z];
            }
            GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
            SetPlayerPosEx(id, Pos[0],Pos[1],Pos[2]+1);
            SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
            SetPlayerInterior(id,GetPlayerInterior(playerid));
            NoTeleportHack(id);
        }
    }
    return 1;
}
CMD:ir(playerid, params[])
{
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1,"Escribe {DBED15}/ir {FFFFFF}<PlayerID>");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa id es inválida.");
    if(PlayerInfo[params[0]][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
    new Float:p_x,Float:p_y,Float:p_z,vw = GetPlayerVirtualWorld(params[0]),interior = GetPlayerInterior(params[0]);
    GetPlayerPos(params[0], p_x,p_y,p_z);
    NoTeleportHack(playerid);
    SetPlayerPosEx(playerid, p_x,p_y,p_z);
    SetPlayerInterior(playerid, interior);
    SetPlayerVirtualWorld(playerid, vw);
    if(GetPlayerInterior(params[0]) > 0 || GetPlayerVirtualWorld(params[0]) > 0)
    {
        PlayerInfo[playerid][jPosE_x] = PlayerInfo[params[0]][jPosE_x];
        PlayerInfo[playerid][jPosE_y] = PlayerInfo[params[0]][jPosE_y];
        PlayerInfo[playerid][jPosE_z] = PlayerInfo[params[0]][jPosE_z];
    }
    DarPrendas(playerid);
    return 1;
}
CMD:traercoche(playerid,params[])
{
    new id,Float:Pos[3];
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1,"Escribe {dbed15}/traercoche{FFFFFF} <VehicleID>");
    if(!IsValidVehicle(id)) return SendClientMessage(playerid,-1,"Vehículo inválido.");
    EnAuto[playerid] = id;
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
    SetVehicleInterior(id,GetPlayerInterior(playerid));
    SetVehicleVirtualWorldEx(id,GetPlayerVirtualWorld(playerid));
    SetVehiclePosEx(id,Pos[0],Pos[1],Pos[2]);
    PutPlayerInVehicle(playerid, id, 0);
    if(PlayerInfo[playerid][pVelocimetro] == 1) MostrarVelocimetro(playerid);
    return 1;
}
CMD:objetos(playerid, params[])
{
 	if(PlayerInfo[playerid][pFaccion] != 1) return SendClientMessage(playerid, COLOR_BLANCO, "No eres policía.");
 	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_BLANCO, "No puedes usar este comando en un vehículo.");
 	ShowPlayerDialog(playerid, COPOBJECTS_DIALOG, DIALOG_STYLE_LIST, "Elige una categoría", "Barricadas\nSignos\nLíneas policiales\nPinchos", ">>", "Cancelar");
	return 1;
}
CMD:editarobjeto(playerid, params[])
{
    if(PlayerInfo[playerid][pFaccion] != 1) return SendClientMessage(playerid, COLOR_BLANCO, "No eres policía.");
	if(EditingCopObjectID[playerid] != -1) return SendClientMessage(playerid, COLOR_BLANCO, "Ya estás editando un objeto.");
	if(isnull(params)) return SendClientMessage(playerid, COLOR_BLANCO, "Usa: {FFFF00}/editarobjeto [Id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, COLOR_BLANCO, "Id de objeto inválida.");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, COLOR_BLANCO, "Ese objeto no existe.");
	if(!IsPlayerInRangeOfPoint(playerid, 16.0, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ])) return SendClientMessage(playerid, COLOR_BLANCO, "No estás cerca del objeto que quieres editar.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	if(!IsPlayerAdmin(playerid) && strcmp(CopObjectData[id][Owner], name)) return SendClientMessage(playerid, COLOR_BLANCO, "Este objeto no es tuyo, no puedes editarlo.");
    EditingCopObjectID[playerid] = id;
	EditDynamicObject(playerid, CopObjectData[id][ObjID]);
	return 1;
}
CMD:irobjeto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return 0;
	if(isnull(params)) return SendClientMessage(playerid, COLOR_BLANCO, "Usa: {FFFF00}/irobjeto [Id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, COLOR_BLANCO, "Id de objeto inválida.");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, COLOR_BLANCO, "Ese objeto no existe.");
	SetPlayerPos(playerid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ] + 1.75);
	SetPlayerInterior(playerid, CopObjectData[id][ObjInterior]);
	SetPlayerVirtualWorld(playerid, CopObjectData[id][ObjVirtualWorld]);
	SendClientMessage(playerid, COLOR_WHITE, "Teleportado.");
	return 1;
}
CMD:quitarobjeto(playerid, params[])
{
    if(PlayerInfo[playerid][pFaccion] != 1) return SendClientMessage(playerid, COLOR_BLANCO, "No eres policía.");
	if(isnull(params)) return SendClientMessage(playerid, COLOR_BLANCO, "Usa: {FFFF00}/quitarobjeto [Id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, COLOR_BLANCO, "Id de objeto inválida.");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, COLOR_BLANCO, "Ese objeto no existe.");
	if(EditingCopObjectID[playerid] == id) return SendClientMessage(playerid, COLOR_BLANCO, "No puedes quitar un objeto que estás editando.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	if(PlayerInfo[playerid][pAdmin] < 3 && strcmp(CopObjectData[id][Owner], name)) return SendClientMessage(playerid, COLOR_BLANCO, "Este objeto no es tuyo, no puedes quitarlo.");
	CopObjectData[id][ObjCreated] = false;
	DestroyDynamicObject(CopObjectData[id][ObjID]);
	DestroyDynamic3DTextLabel(CopObjectData[id][ObjLabel]);
	if(IsValidDynamicArea(CopObjectData[id][ObjArea])) DestroyDynamicArea(CopObjectData[id][ObjArea]);
	CopObjectData[id][ObjID] = -1;
	CopObjectData[id][ObjLabel] = Text3D: -1;
	CopObjectData[id][ObjArea] = -1;
	SendClientMessage(playerid, COLOR_WHITE, "El objeto fue removido.");
	return 1;
}
CMD:slap(playerid,params[])
{
    new szMessage[128],id,Float:x,Float:y,Float:z;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/slap {FFFFFF}<PlayerID>");
    if(IsPlayerNPC(id)) return 1;
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    format(szMessage, sizeof(szMessage), "Jugador {00CC00}%s{FFFFFF} antes del slap: {00CC00}%f", PlayerInfo[id][Nickname], PlayerInfo[id][j_HEALTH]);
    SendClientMessage(playerid, -1, szMessage);
    Slapeo[playerid] = id;
    GetPlayerPos(id,x,y,z);
    SetPlayerPosEx(id,x,y,z+8);
    KillTimer(TimerSlap[playerid]);
    TimerSlap[playerid] = SetTimerEx("DarSlap",2000,false,"d",playerid);
    return 1;
}
CMD:revivir(playerid,params[])
{
    new id;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/revivir {FFFFFF}<PlayerID>");
    if(IsPlayerNPC(id)) return 1;
    Revivir(id);
    return 1;
}
CMD:banip(playerid, params[])
{
    new type[128],string[128];
    if(sscanf(params, "s[128]", type)) SendClientMessage(playerid, -1, "Usage: /banip [IP]");
    else
    {
        format(string, sizeof(string),"banip %s", type);
        SendRconCommand(string);
        SendRconCommand("reloadbans");
    }
    return true;
}
CMD:desbanearip(playerid, params[])
{
    new string[150];
    if(sscanf(params, "s[128]", params[0])) return SendClientMessage(playerid, -1, "Escribe {DBED15}/desbanearip {FFFFFF}<IP>");
    format(string,sizeof(string),"desbanearip %s",params[0]);
    SendRconCommand(string);
    SendRconCommand("reloadbans");
    MensajeEx(playerid, -1, "IP desbaneada por %s (%s)", PlayerInfo[playerid][Nickname], params[0]);
    format(string, sizeof(string), "%s[%d] desbaneó la IP: %s", PlayerInfo[playerid][Nickname],playerid,params[0]);
    MensajeAdmin(COLOR_YELLOW,string,3);
    return 1;
}
CMD:setarmor(playerid,params[])
{
    new id,chaleco;
    if(sscanf(params,"dd",id,chaleco)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/setarmor {FFFFFF}<PlayerID> <Cantidad>");
    if(IsPlayerNPC(id)) return 1;
    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
    if(chaleco > 100) chaleco = 100;
    SetPlayerArmourEx(id, chaleco);
    MensajeEx(playerid, -1, "Seteaste el blindaje de %s(%d) a %d", PlayerInfo[id][Nickname],id,chaleco);
    return 1;
}
CMD:sethp(playerid,params[])
{
    new id,vida;
    if(sscanf(params,"dd",id,vida)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/sethp {FFFFFF}<PlayerID> <Cantidad>");
    if(IsPlayerNPC(id)) return 1;
    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
    if(vida > 100) vida = 100;
    SetPlayerHealthEx(id, vida);
    MensajeEx(playerid, -1, "Seteaste la vida de %s(%d) a %d", PlayerInfo[id][Nickname],id,vida);
    return 1;
}
CMD:cord(playerid,params[])
{
    new int, vw;
    static Float:pos[3];
    if(sscanf(params, "cord", pos[0], pos[1], pos[2], int, vw)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/cord {FFFFFF}<Coordenada X> <Coordenada Y> <Coordenada Z> <Interior> <VirtualWorld>");
    NoTeleportHack(playerid);
    SetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
    SetPlayerInterior(playerid, int);
    SetPlayerVirtualWorld(playerid, vw);
    return 1;
}
CMD:congelar(playerid,params[])
{
    new id;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/congelar {FFFFFF}<PlayerID>");
    if(IsPlayerNPC(id)) return 1;
    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
    Congelar(id);
    return 1;
}
CMD:descongelar(playerid,params[])
{
    new id;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/descongelar {FFFFFF}<PlayerID>");
    if(IsPlayerNPC(id)) return 1;
    if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
    Descongelar(id);
    return 1;
}
CMD:darvip(playerid,params[])
{
    new id,dia,mes,ano,memb,Query[200];
    getdate(ano,mes,dia);
    if(!sscanf(params,"dd",id, memb))
    {
        if(IsPlayerNPC(id)) return 1;
        if(memb < 0 || memb > 4) return SendClientMessage(playerid,-1,"Solo puedes asignar membresía VIP1 hasta el VIP4");
        PlayerInfo[id][pVip] = memb;
        mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `FinDia`='%d',`FinMes`='%d',`FinAno`='%d' WHERE `Username`='%s'",dia,mes+1,ano,PlayerInfo[id][Nickname]);
        mysql_tquery(handle_db, Query);
        MensajeEx(id, -1, "El administrador %s te dio una membresía VIP%d",PlayerInfo[playerid][Nickname], memb);
        MensajeEx(playerid, -1, "Le diste a %s una membresia VIP%d hasta el %02d/%02d/%02d",PlayerInfo[id][Nickname],memb,dia,mes+1,ano);
        PlayerInfo[id][findia] = dia;
        PlayerInfo[id][finmes] = mes+1;
        PlayerInfo[id][finano] = ano;
    }
    return 1;
}
CMD:darskin(playerid,params[])
{
    new Query[200],id,skin;
    if(sscanf(params,"dd",id,skin)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/darskin {FFFFFF}<PlayerID> <RopaID>");
    if(IsPlayerNPC(id)) return 1;
    if(skin <= 0 || skin >= 300 || skin == 167) return SendClientMessage(playerid,-1,"No puedes asignar esa skin.");
    PlayerInfo[id][pRopa] = skin;
    SetPlayerSkin(id, PlayerInfo[id][pRopa]);
    mysql_format(handle_db, Query, 200, "UPDATE usuarios SET Skin='%d' WHERE Username='%e'",skin,PlayerInfo[id][Nickname]);
    mysql_tquery(handle_db, Query);
    return 1;
}
CMD:aka(playerid,params[])
{
    new giveplayerid,string[128],AkaString[500];
    if(sscanf(params,"r", giveplayerid)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/aka {FFFFFF}<PlayerID>");
    if(!IsPlayerConnected(giveplayerid) || IsPlayerNPC(giveplayerid)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    if(PlayerTemp[giveplayerid][pCuentasIP] < 2) format(string,sizeof(string),"El jugador %s tiene %d cuenta registrada con la misma ip: %s",PlayerInfo[giveplayerid][Nickname], PlayerTemp[giveplayerid][pCuentasIP],PlayerIP(giveplayerid));
    else format(string,sizeof(string),"El jugador %s tiene %d cuentas registradas con la misma ip: %s",PlayerInfo[giveplayerid][Nickname], PlayerTemp[giveplayerid][pCuentasIP],PlayerIP(giveplayerid));
    SendClientMessage(playerid,-1,string);
    format(AkaString, sizeof(AkaString), "{FF4444}%s(%d) - IP: %s\n\n{FFFFFF}Nicks:\n\n{FF8000}%s",PlayerInfo[giveplayerid][Nickname], giveplayerid, PlayerIP(giveplayerid),PlayerTemp[giveplayerid][NAMES]);
    ShowPlayerDialog(playerid, INMIGRACION, DIALOG_STYLE_MSGBOX, "{AFAFAF}Historial", AkaString, "Ok", ""), PlayerPlaySoundEx(playerid,1139,0.0,0.0,0.0);
    return 1;
}
CMD:daka(playerid, params[])
{
    new query[100+24],name[24];
    if(sscanf(params,"s[24]", name)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/daka {FFFFFF}<Nombre_Jugador>");
    mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `aka` WHERE `NAMES`='%s' LIMIT 1;", name);
    mysql_query(handle_db, query, true);
    if(cache_num_rows() == 0) return MensajeEx(playerid,-1,"El nombre {FF0000}%s{ffffff} no se encuentra en el AKA.",name);
    mysql_format(handle_db, query, sizeof(query), "DELETE FROM `aka` WHERE `aka`.`NAMES`='%s' LIMIT 1;", name);
    mysql_query(handle_db, query, true);
    MensajeEx(playerid,-1,"El nombre {00ffff}%s{ffffff} fue borrado del AKA.",name);
    return 1;
}
CMD:unsan(playerid, params[])
{
    new id, razon[50];
    if(PlayerInfo[playerid][pAdmin] < 4) return 0;
    if(sscanf(params,"ds[50]",id,razon)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED16}/unsan {FFFFFF}<PlayerID> <Razón>");
    SetPlayerInterior(id, 0);
    SetPlayerVirtualWorld(id, 0);
    PlayerInfo[id][pTiempoCarcel] = 0;
    PlayerInfo[id][pTiempoCarcel] = 0;
    San[id] = 0;
    PlayerInfo[id][pTiempoJail] = 0;
    PlayerInfo[playerid][pCargos] = 0;
    SetPlayerPos(id, 1510.23,-1672.60,14.05);
    return 1;
}
CMD:crearcasa(playerid,params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
    new precio,nivel,moneda,Float:Pos[4],query[600],interior;
    if(sscanf(params,"dddd",precio,nivel,moneda,interior)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/crearcasa {FFFFFF}<Precio> <Nivel> <Moneda> <Interior>");
    new zone[MAX_ZONE_NAME];
    GetPlayer3DZone(playerid, zone, sizeof(zone));
    if(interior <= 0 || interior > 43 || interior == 39) return SendClientMessage(playerid,-1,"Ese interior es inválido.");
    new id = CasaDesocupada();
    if(id == -1) return SendClientMessage(playerid,-1,"No se puede crear mas propiedades.");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
    GetPlayerFacingAngle(playerid,Pos[3]);
    if(IsPlayerInRangeOfPoint(playerid,700.0,727.1412,-3320.2461,5.8700)) format(zone, sizeof(zone), "Isla Santa Carolina");
    mysql_format(handle_db, query,sizeof(query),"INSERT INTO `propiedades` (`ID`,`Localizacion`,`PosX`,`PosY`,`PosZ`,`PosA`,`Interior`,`VW`,`Propietario`,`EnUso`) VALUES ('%d','%e','%f','%f','%f','%f','%d','%d','Nadie','1')", id, zone, Pos[0], Pos[1], Pos[2], Pos[3]+180, interior, id+1);
    mysql_tquery(handle_db,query,"","");
    PropInfo[id][pEnUso] = 1;
    DarInteriorCasa(id,interior);
    PropInfo[id][pPrecio] = precio;
    PropInfo[id][pNivel] = nivel;
    PropInfo[id][pEnVentaPor] = moneda;
    if(interior == 40) PropInfo[id][pTipo] = 2;
    else if(interior == 41) PropInfo[id][pTipo] = 3;
    else if(interior == 43) PropInfo[id][pTipo] = 4;
    else PropInfo[id][pTipo] = 1;
    PropInfo[id][pPosX] = Pos[0];
    PropInfo[id][pPosY] = Pos[1];
    PropInfo[id][pPosZ] = Pos[2];
    PropInfo[id][pPosA] = Pos[3];
    PropInfo[id][pAbierta] = 1;
    PropInfo[id][pRoperoAbierto] = 0;
    PropInfo[id][pID] = id;
    PropInfo[id][pVW] = id+1;
    format(PropInfo[id][pPropietario],40,"Nadie");
    format(PropInfo[id][pLocalizacion],80,zone);
    PropInfo[id][pInterior] = interior;
    PropInfo[id][pEnVenta] = 1;
    BorrarLabelCasa(id);
    GuardarPropiedad(id);
    CargarPropiedad(id);
    if(moneda == 0) mysql_format(handle_db, query,sizeof(query),"Creaste la casa ID: {DBED15}%d {FFFFFF}(Precio: {00CC00}$%s {FFFFFF}- Interior: %d)",id,Numeros(precio),interior);
    else mysql_format(handle_db, query,sizeof(query),"Creaste la casa ID: {DBED15}%d {FFFFFF}(Precio: {00CC00}%d "SERVER_COIN" {FFFFFF}- Interior: %d).",id,precio,interior);
    SendClientMessage(playerid,-1,query);
    mysql_format(handle_db, query,sizeof(query),"Escribe {DBED15}/creargarajecasa %d{FFFFFF} para crear el garaje. Recuerda mirar para el lado del portón.", id);
    SendClientMessage(playerid,-1,query);
    return true;
}
CMD:ircasa(playerid,params[])
{
    new id, string[150];
    if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Usa {DBED15}/ircasa [ID]");
    if(PropInfo[id][pEnUso] == 0) return SendClientMessage(playerid,-1,"ID de casa inválido.");
    format(string,sizeof(string),"Fuiste a la posición de la casa ID {DBED15}%d",id);
    SendClientMessage(playerid,-1,string);
    SetPlayerPosEx(playerid,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]);
    return true;
}
CMD:irgaraje(playerid,params[])
{
    new id, string[150];
    if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Usa {DBED15}/irgaraje [ID]");
    if(PropInfo[id][pEnUso] == 0) return SendClientMessage(playerid,-1,"ID de casa inválido.");
    if(PropInfo[id][pGX] == 0) return SendClientMessage(playerid,-1,"Esa propiedad no tiene garaje.");
    format(string,sizeof(string),"Fuiste a la posición del garaje de la casa ID {DBED15}%d",id);
    SendClientMessage(playerid,-1,string);
    SetPlayerPosEx(playerid,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]);
    return true;
}
CMD:editarentrada(playerid,params[])
{
    new casa,string[70];
    if(sscanf(params, "d", casa))return SendClientMessage(playerid,COLOR_GRAD2,"Escribe {DBED15}/editarentrada {FFFFFF}<CasaID>");
    {
        if(PropInfo[casa][pEnUso] == 1)
        {
            new Float:X,Float:Y,Float:Z,Float:A;
            GetPlayerPos(playerid, X,Y,Z);
            GetPlayerFacingAngle(playerid,A);
            PropInfo[casa][pPosX] = X;
            PropInfo[casa][pPosY] = Y;
            PropInfo[casa][pPosZ] = Z;
            PropInfo[casa][pPosA] = A;
            BorrarLabelCasa(casa);
            GuardarPropiedad(casa);
            CargarPropiedad(casa);
            format(string,sizeof(string),"Editaste la entrada de la casa con id: {DBED15}%d", casa);
            SendClientMessage(playerid,-1,string);
        }
        else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
    }
    return 1;
}
CMD:eliminarcasa(playerid,params[])
{
    new Query[200], casa;
    if(sscanf(params, "d", casa)) return SendClientMessage(playerid,COLOR_GRAD2,"Escribe {DBED15}/eliminarcasa{FFFFFF} [ID]");
    if(GetPlayerID(PropInfo[casa][pPropietario]) != -1)
    {
        new pid = GetPlayerID(PropInfo[casa][pPropietario]);
        if(PlayerInfo[pid][CasaID] == casa) PlayerInfo[pid][CasaID] = 0;
        if(PlayerInfo[pid][CasaID2] == casa) PlayerInfo[pid][CasaID2] = 0;
    }
    mysql_format(handle_db,Query,sizeof(Query),"UPDATE usuarios SET CasaID = '0' WHERE CasaID = '%d'",casa);
    mysql_tquery(handle_db,Query);
    mysql_format(handle_db,Query,sizeof(Query),"UPDATE usuarios SET CasaID2 = '0' WHERE CasaID2 = '%d'", casa);
    mysql_tquery(handle_db,Query);
    if(PropInfo[casa][pEnUso] == 1)
    {
        format(Query,sizeof(Query),"DELETE FROM propiedades WHERE ID = '%d'",casa);
        mysql_tquery(handle_db, Query, "", "");
        PropInfo[casa][pEnVenta] = 0;
        PropInfo[casa][pEnUso] = 0;
        BorrarLabelCasa(casa);
        MensajeEx(playerid, -1, "La casa (ID:%d) fue eliminada.",casa);
    }
    return 1;
}
CMD:desocuparcasa(playerid,params[])
{
    new Query[520], casa, string[128];
    if(sscanf(params, "i", casa)) return SendClientMessage(playerid,COLOR_GRAD2,"Uso /desocuparcasa [ID]");
    {
        if(GetPlayerID(PropInfo[casa][pPropietario]) != -1)
        {
            new pid = GetPlayerID(PropInfo[casa][pPropietario]);
            if(PlayerInfo[pid][CasaID] == casa) PlayerInfo[pid][CasaID] = 0;
            if(PlayerInfo[pid][CasaID2] == casa) PlayerInfo[pid][CasaID2] = 0;
        }
        mysql_format(handle_db,Query,sizeof(Query),"UPDATE usuarios SET CasaID = '0' WHERE CasaID = '%d'",casa);
        mysql_tquery(handle_db,Query);
        mysql_format(handle_db,Query,sizeof(Query),"UPDATE usuarios SET CasaID2 = '0' WHERE CasaID2 = '%d'", casa);
        mysql_tquery(handle_db,Query);
        PropInfo[casa][pEnVenta] = 1;
        format(PropInfo[casa][pPropietario],40,"Nadie");
        PropInfo[casa][pAbierta] = 1;
        PropInfo[casa][pRoperoAbierto] = 0;
        PropInfo[casa][pIDPropietario] = 0;
        format(Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1',`EnUso`='1' WHERE `ID`='%d'",casa);
        mysql_tquery(handle_db,Query,"","");
        BorrarLabelCasa(casa);
        GuardarPropiedad(casa);
        CargarPropiedad(casa);
        format(string,128,"La casa (ID:%d) fue desocupada",casa);
        SendClientMessage(playerid,-1,string);
    }
    return 1;
}
CMD:editarcasa(playerid,params[])
{
	new id,precio,nivel,moneda,comprable,string[70];
	if(!sscanf(params,"ddddd",id,precio,nivel,moneda,comprable))
	{
        if(PropInfo[id][pEnUso] == 1)
        {
            if(moneda < 0 || moneda > 1) return SendClientMessage(playerid,-1,"Esa moneda es inválida.");
            if(comprable < 0 || comprable > 1) return SendClientMessage(playerid,-1,"Ese comprable es inválido.");
            PropInfo[id][pPrecio] = precio;
            PropInfo[id][pNivel] = nivel;
            PropInfo[id][pEnVentaPor] = moneda;
            PropInfo[id][pEnVenta] = comprable;
            BorrarLabelCasa(id);
            GuardarPropiedad(id);
            CargarPropiedad(id);
            format(string,sizeof(string),"Editaste el estado de la casa con id: {DBED15}%d", id);
            SendClientMessage(playerid,-1,string);
        }
        else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
    }
    else SendClientMessage(playerid,-1,"Escribe {DBED15}/editarcasa {FFFFFF}<CasaID> <Precio> <Nivel> <Moneda> <Comprable>");
    return true;
}
CMD:creargarajefabrica(playerid,params[])
{
    if(!sscanf(params,"d",params[0]))
    {
		new Float:Pos[4],p = params[0],string[500];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPlayerFacingAngle(playerid,Pos[3]);
        if(Fabricas[p][pEnUso] == 1)
		{
		    if(Fabricas[p][pEntradaGX] == 0)
		    {
				Fabricas[p][pEntradaGX] = Pos[0],Fabricas[p][pEntradaGY] = Pos[1],Fabricas[p][pEntradaGZ] = Pos[2],Fabricas[p][pEntradaGA] = Pos[3];
				MensajeEx(playerid,-1,"Creaste un garaje a la fabrica ID: {DBED16}%d",p);
				format(string,sizeof(string),"UPDATE `fabricas` SET `GarajeE_X`='%f',`GarajeE_Y`='%f',`GarajeE_Z`='%f',`GarajeE_A`='%f' WHERE `ID`='%d'",Fabricas[p][pEntradaGX],Fabricas[p][pEntradaGY],Fabricas[p][pEntradaGZ],Fabricas[p][pEntradaGA],Fabricas[p][pID]);
				mysql_tquery(handle_db,string,"","");
				BorrarPuntosFabrica(p);
				CargarFabricass(p);
			}
			else SendClientMessage(playerid,-1,"Esa fabrica ya tiene un garage.");
        }
        else return 1;
    }
    else SendClientMessage(playerid,-1,"Escribe {DBED16}/creargarajefabrica {FFFFFF}<FabricaID>");
	return true;
}
CMD:crearfabrica(playerid,params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
	new precio,moneda,Float:Pos[4],Query[600];
	if(!sscanf(params,"dd",precio,moneda))
	{
	    new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
	    new id = FabricaDesocupada();
	    if(id == 0) return SendClientMessage(playerid,-1,"No se puede crear mas fabricas.");
        new interior = id+1;
	    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	    GetPlayerFacingAngle(playerid,Pos[3]);
		mysql_format(handle_db, Query,sizeof(Query),"INSERT INTO `fabricas` (`ID`,`Localizacion`,`EntradaX`,`EntradaY`,`EntradaZ`,`EntradaA`,`Interior`,`VW`,`EnVenta`,`EnUso`) VALUES ('%d','%s','%f','%f','%f','%f','%d','%d','1','1')", id, zone, Pos[0], Pos[1], Pos[2], Pos[3], interior, id+1);
		mysql_tquery(handle_db,Query,"","");
		DarInteriorFabrica(id);
    	Fabricas[id][pEnUso] = 1;
		Fabricas[id][pValor] = precio;
		Fabricas[id][pEnVentaPor] = moneda;
		Fabricas[id][pEntradaX] = Pos[0];
		Fabricas[id][pEntradaY] = Pos[1];
		Fabricas[id][pEntradaZ] = Pos[2];
		Fabricas[id][pEntradaA] = Pos[3];
		Fabricas[id][pID] = id;
		Fabricas[id][pVW] = id+1;
		Fabricas[id][pInt] = id+1;
		format(Fabricas[id][pLocalizacion],80,zone);
		CargarFabricass(id);
		GuardarFabrica(id);
		if(moneda == 0)	mysql_format(handle_db, Query,sizeof(Query),"Creaste la fabrica ID: {DBED16}%d{FFFFFF} (Precio: {00CC00}$%s{FFFFFF}).",id,Numeros(precio));
		else mysql_format(handle_db, Query,sizeof(Query),"Creaste la fabrica ID: {DBED16}%d{FFFFFF} (Precio: {00CC00}%d "SERVER_COIN"{FFFFFF}).",id,precio);
		SendClientMessage(playerid,-1,Query);
		mysql_format(handle_db, Query,sizeof(Query),"Escribe {DBED16}/creargarajefabrica %d{FFFFFF} para crear el garaje. Recuerda mirar para el lado del portón.", id);
		SendClientMessage(playerid,-1,Query);
	}
	else SendClientMessage(playerid,-1,"Escribe {DBED16}/crearfabrica <Precio> <Moneda>");
	return 1;
}
CMD:creargarajecasa(playerid,params[])
{
    if(!sscanf(params,"d",params[0]))
    {
        new Float:Pos[4],p = params[0],string[500];
        GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
        GetPlayerFacingAngle(playerid,Pos[3]);
        if(PropInfo[p][pEnUso] == 1)
        {
            if(PropInfo[p][pGX] == 0)
            {
                PropInfo[p][pGX] = Pos[0];
                PropInfo[p][pGY] = Pos[1];
                PropInfo[p][pGZ] = Pos[2];
                PropInfo[p][pGA] = Pos[3];
                format(string,sizeof(string),"Creaste un garaje a la casa con id: {DBED15}%d",p);
                SendClientMessage(playerid,-1,string);
                format(string,sizeof(string),"UPDATE `propiedades` SET `GX`='%f',`GY`='%f',`GZ`='%f',`GA`='%f' WHERE `ID`='%d'",PropInfo[p][pGX],PropInfo[p][pGY],PropInfo[p][pGZ],PropInfo[p][pGA],PropInfo[p][pID]);
                mysql_tquery(handle_db,string,"","");
                BorrarLabelCasa(p);
                CargarPropiedad(p);
            }
            else SendClientMessage(playerid,-1,"Esa propiedad ya tiene un garage.");
        }
        else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
    }
    else SendClientMessage(playerid,-1,"Escribe {DBED15}/creargarajecasa {FFFFFF}<CasaID>");
    return true;
}
CMD:cambiarinterior(playerid,params[])
{
    new id,interior,string[126];
    if(sscanf(params, "dd", id,interior)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/cambiarinterior {FFFFFF}<CasaID> <Interior>");
    {
        if(PropInfo[id][pEnUso] == 1)
        {
            DarInteriorCasa(id,interior);
            switch(interior)
            {
                case 40: PropInfo[id][pTipo] = 2;
                case 41: PropInfo[id][pTipo] = 3;
                case 43: PropInfo[id][pTipo] = 4;
                default: PropInfo[id][pTipo] = 1;
            }
            PropInfo[id][pInterior] = interior;
            BorrarLabelCasa(id);
            CargarPropiedad(id);
            GuardarPropiedad(id);
            format(string,sizeof(string),"Cambiaste el interior de la casa (ID: {DBED15}%d {FFFFFF}- Interior: %d)",id,interior);
            SendClientMessage(playerid,-1,string);
        }
        else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
    }
    return 1;
}
CMD:ar(playerid, params[])
{
    new string[128], reportid;
	if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE, "USE: {DBED15}/ar [Report ID]");
	if(reportid < 0 || reportid > 500) return SendClientMessage(playerid, COLOR_GREY, "ID del reporte no debe ser menor de 0 ni mayor de 499!");
	if(Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese ID ya fue atendido.");
	if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
	{
		SendClientMessage(playerid, COLOR_GREY, "El que reportó se ha desconectado!");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		return 1;
	}
	format(string, sizeof(string), "%s{FFFFFF} aceptó el reporte de {FF3300}%s{FFFFFF} (ID: %i a ID: %i, #%i).", PlayerName(playerid), PlayerName(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][ReportadoID], reportid);
	MensajeAdmin(0xF00000FF, string, 3);
	IDReporte[playerid] = Reports[reportid][ReportadoID];
	format(IDReporteMensaje[playerid], 150, Reports[reportid][Report]);
	format(string, sizeof(string), "{00CC00}El Administrador %s está viendo tu reporte", PlayerName(playerid));
	SendClientMessage(Reports[reportid][ReportFrom], -1, string);
	Reports[reportid][CheckingReport] = playerid;
	Reports[reportid][BeingUsed] = 0;
	strmid(Reports[reportid][Report], "Ninguno", 0, 4, 4);
	return 1;
}
CMD:rr(playerid, params[])
{
    new string[128], reportid;
	if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USE: {DBED15}/rr [Report ID]");
	if(reportid < 0 || reportid > 499) return SendClientMessage(playerid, COLOR_GREY, "ID del reporte no debe ser menor de 0 ni mayor de 499!");
	if(Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese ID ya fue rechazado!");
	if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
	{
		SendClientMessage(playerid, COLOR_GREY, "El que reportó se ha desconectado!");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		return 1;
	}
	format(string, sizeof(string), "%s{FFFFFF} rechazó el reporte de {FF3300}%s{FFFFFF} (ID:%d) (#%i).", PlayerName(playerid), PlayerName(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
	MensajeAdmin(0xF00000FF, string, 3);
	IDReporte[playerid] = Reports[reportid][ReportadoID];
	format(IDReporteMensaje[playerid], 150, Reports[reportid][Report]);
	format(string, sizeof(string), "{FF3300}El administrador %s ha rechazado tu reporte", PlayerName(playerid));
	SendClientMessage(Reports[reportid][ReportFrom], -1, string);
	Reports[reportid][ReportFrom] = 999;
	Reports[reportid][BeingUsed] = 0;
	strmid(Reports[reportid][Report], "Ninguno", 0, 4, 4);
	return 1;
}

CMD:reportes(playerid, params[])
{
	new reportdialog[4000], itemid = 0;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][BeingUsed] == 1 && itemid < 100)
		{
			ListItemReportId[playerid][itemid] = i;
			itemid++;
            format(reportdialog, sizeof(reportdialog), "%sID: %d - Nv: %d - R: %s", reportdialog, i, PlayerInfo[i][pNivel], Reports[i][Report]);
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
		}
	}
	CancelReport[playerid] = itemid;
	format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
	format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
	ShowPlayerDialog(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reportes", reportdialog, "Ver reporte", "Cerrar");
	return 1;
}
CMD:info(playerid,params[])
{
    new string[170];
    for(new id = 0; id < MAX_PROPIEDADES; id++)
    {
    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]))
    	{
        	if(PropInfo[id][pEnUso] == 1)
        	{
       			format(string,sizeof(string),"Esta propiedad tiene la ID {DBED16}%d {FFFFFF}| Propietario: {DBED16}%s{FFFFFF} | Interior: {DBED16}%d",id,PropInfo[id][pPropietario],PropInfo[id][pInterior]);
 				SendClientMessage(playerid,-1,string);
        	}
        }
    }
    for(new id = 0; id < MAX_FABRICAS; id++)
    {
    	if(IsPlayerInRangeOfPoint(playerid,2,Fabricas[id][pEntradaX],Fabricas[id][pEntradaY],Fabricas[id][pEntradaZ]))
    	{
        	if(Fabricas[id][pEnUso] == 1)
        	{
        	    new banda = Fabricas[id][pBanda];
       			format(string,sizeof(string),"Esta fabrica tiene la ID {DBED16}%d{FFFFFF} | Nombre de banda: {DBED16}%s{FFFFFF}.",id,BandasInfo[banda][BNombre]);
 				SendClientMessage(playerid,-1,string);
        	}
        }
    }
	return 1;
}
CMD:eliminargarajefabrica(playerid,params[])
{
	new fabrica,string[200];
	if(sscanf(params, "d", fabrica))return SendClientMessage(playerid,-1,"Escribe {DBED16}/eliminargarajefabrica {FFFFFF}<Fabrica GarageID>");
	if(Fabricas[fabrica][pEntradaGX] == 0) return SendClientMessage(playerid,-1,"Esa fabrica no tiene un garage.");
	Fabricas[fabrica][pEntradaGX] = 0;
	Fabricas[fabrica][pEntradaGY] = 0;
	Fabricas[fabrica][pEntradaGZ] = 0;
	Fabricas[fabrica][pEntradaGA] = 0;
	format(string,sizeof(string),"Eliminaste el garaje ID: {DBED16}%d", fabrica);
	SendClientMessage(playerid,-1,string);
	mysql_format(handle_db, string,sizeof(string),"UPDATE `fabricas` SET `GarajeE_X`='%f',`GarajeE_Y`='%f',`GarajeE_Z`='%f',`GarajeE_A`='%f' WHERE `ID`='%d'",Fabricas[fabrica][pEntradaGX], Fabricas[fabrica][pEntradaGY], Fabricas[fabrica][pEntradaGZ], Fabricas[fabrica][pEntradaGA], Fabricas[fabrica][pID]);
	mysql_tquery(handle_db, string,"","");
	BorrarPuntosFabrica(fabrica);
	CargarFabricass(fabrica);
	return 1;
}
CMD:zz(playerid, params[])
{
	SetPosEx(playerid, 78.4577,7.4216,72.5629, 90, 0, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:garageid(playerid,params[])
{
    for(new id = 0; id < MAX_PROPIEDADES; id++)
    {
    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]))
    	{
        	if(PropInfo[id][pGX] != 0)
        	{
       			new string[170];
       			format(string,sizeof(string),"Esta garaje tiene la ID {DBED16}%d{FFFFFF}.", id);
 				SendClientMessage(playerid,-1,string);
        	}
        }
    }
	return 1;
}
CMD:borrargarage(playerid,params[])
{
	new casa,string[200];
	if(sscanf(params, "d", casa)) return SendClientMessage(playerid,-1,"Escribe {DBED16}/borrargarage {FFFFFF}<GarageID>");
	{
	    if(PropInfo[casa][pGX] != 0)
	    {
			PropInfo[casa][pGX] = 0,PropInfo[casa][pGY] = 0;
			PropInfo[casa][pGZ] = 0,PropInfo[casa][pGA] = 0;
			format(string,sizeof(string),"Eliminaste el garaje con id: {DBED16}%d", casa); SendClientMessage(playerid,-1,string);
			mysql_format(handle_db, string,sizeof(string),"UPDATE `propiedades` SET `GX`='%f',`GY`='%f',`GZ`='%f',`GA`='%f' WHERE `ID`='%d'",PropInfo[casa][pGX], PropInfo[casa][pGY], PropInfo[casa][pGZ], PropInfo[casa][pGA], PropInfo[casa][pID]);
			mysql_tquery(handle_db, string,"","");
			BorrarLabelCasa(casa),CargarPropiedad(casa);
		}
		else SendClientMessage(playerid,-1,"Esa propiedad no tiene un garage.");
	}
	return 1;
}
CMD:dararma(playerid,params[])
{
    new id,arma;
    if(sscanf(params,"dd",id,arma)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/dararma {FFFFFF}<PlayerID> <WeaponID>");
    if(IsPlayerNPC(id)) return 1;
    if(arma == 35 || arma == 36 || arma == 37 || arma == 38 || arma == 38 || arma == 39 || arma == 44 || arma == 40 || arma == 44 || arma == 16 || arma == 18) return SendClientMessage(playerid,-1,"No puedes dar ese arma.");
    DarArma(id,arma);
    return 1;
}
CMD:aa(playerid,params[])
{
    new texto[128],string[128];
    if(sscanf(params,"s[128]",texto)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/aa {FFFFFF}<Texto>");
    format(string,128,"BABYZONE: %s",texto);
    SendClientMessageToAll(COLOR_MEGAPHONE,string);
    return 1;
}
CMD:aa2(playerid,params[])
{
    new texto[128],string[128];
    if(sscanf(params,"s[128]",texto)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/aa2 {FFFFFF}<Texto>");
    format(string,128,"%s %s: %s",ADMIN_RANKS(PlayerInfo[playerid][pAdmin]),PlayerName(playerid),texto);
    SendClientMessageToAll(COLOR_MEGAPHONE,string);
    return 1;
}
CMD:fixveh(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
    SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    RepairVehicle(GetPlayerVehicleID(playerid));
    return 1;
}
CMD:fixvehid(playerid, params[])
{
    new ID;
	if(sscanf(params, "d", ID)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/fixvehID{FFFFFF} <ID>");
	SetVehicleHealth(ID, 1000.0);
	RepairVehicle(ID);
	return 1;
}
CMD:fixvehall(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        for(new v = 0; v < MAX_VEHICLES; v++) RepairVehicle(v),SetVehicleHealth(v, 1000.0);
    }
    return 1;
}
CMD:darvehiculo(playerid, params[])
{
	new giveplayerid, modelid;
	if(sscanf(params, "dd", giveplayerid, modelid)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/darvehiculo {FFFFFF}<PlayerID> <Modelo>");
	if(IsPlayerNPC(giveplayerid)) return 1;
	if(modelid < 400 || modelid > 611) return SendClientMessage(playerid, -1, "ID del vehiculo debe ser del 400 al 611 !");
	ComproVehiculoTienda(giveplayerid, modelid, 1, 50);
	return 1;
}
CMD:removeuser(playerid, params[])
{
    new name[MAX_PLAYER_NAME+1],DB_Query[128];
    if(sscanf(params, "s[128]", name)) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /removeuser <Nombre>");
    format(DB_Query, sizeof DB_Query, "SELECT * FROM `admin_names` WHERE `Nickname`='%s'", name);
    mysql_pquery(handle_db, DB_Query, "ActualizarUsuariosCortos", "dsd", playerid, name, 1);
    return 1;
}
CMD:adduser(playerid, params[])
{
    new name[MAX_PLAYER_NAME+1],DB_Query[128];
    if(sscanf(params, "s[128]", name)) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /adduser <Nombre>");
    format(DB_Query, sizeof DB_Query, "SELECT * FROM `admin_names` WHERE `Nickname`='%s'", name);
    mysql_pquery(handle_db, DB_Query, "ActualizarUsuariosCortos", "dsd", playerid, name, 2);
    return 1;
}
CMD:agregarspam(playerid, params[])
{
    new palabra[128];
    if(sscanf(params, "s[128]", palabra)) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /agregarspam <Palabra>");
    if(strlen(palabra) > 15) return SendClientMessage(playerid,-1,"Error: Palabra demasiado larga.");
    new DB_Query[128];
    format(DB_Query, sizeof DB_Query, "SELECT * FROM `anti_spam` WHERE `Bloqueada`='%s';", palabra);
    mysql_pquery(handle_db, DB_Query, "VerificarPalabra", "ds", playerid, palabra);
    return 1;
}
CMD:desarmar(playerid,params[])
{
    new id;
    if(sscanf(params,"d",id)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {DBED15}/desarmar {FFFFFF}<PlayerID>");
    if(IsPlayerNPC(id)) return 1;
    QuitarArmas(id);
    return 1;
}
//COMANDOS PARA IR A LUGARES
CMD:home(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), 1809.5894,-1299.8063,65.8125);
    return SetPosEx(playerid, 1809.5894,-1299.8063,65.8125,0,0,0);
}
CMD:grua(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), 1819.1549,-1284.6589,109.3594);
    return SetPosEx(playerid, 1819.1549,-1284.6589,109.3594,0,0,0);
}
CMD:car(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), 1802.7854,-1303.8938,93.0391);
    return SetPosEx(playerid, 1802.7854,-1303.8938,93.0391,0,0,0);
}
CMD:lc(playerid, params[])
{
    NoTeleportHack(playerid);
    if(GetPlayerState(playerid) == 2)
    {
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), 1);
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1);
        return SetVehiclePos(GetPlayerVehicleID(playerid), -729.276000,503.086944,1371.971801);
    }
    else return SetPosEx(playerid, -729.276000,503.086944,1371.971801,0,1,1);
}
CMD:ls(playerid, params[])
{
    if (GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6847,-1699.1049,13.3828);
    else return SetPosEx(playerid, 1513.4125,-1669.4844,14.0469,273.1677,0,0,0);
}
CMD:sf(playerid, params[])
{
    if (GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), -1707.7334,16.8676,3.5597);
    else return SetPosEx(playerid, -1612.7053,715.6451,13.2788,0,0,0,0);
}
CMD:lv(playerid, params[])
{
    if (GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
    else return SetPosEx(playerid, 1592.5369,1817.5045,10.8203,0,0,0,0);
}
CMD:emi(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 370.6194,169.2329,1040.1156,93.1764,5,5);
    else SetPosEx(playerid, 370.6194,169.2329,1040.1156,93.1764,5,5);
    return 1;
}
CMD:emi1(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 343.6336,180.1212,1040.1156,0,5,5);
    else SetPosEx(playerid, 343.6336,180.1212,1040.1156,93.1764,5,5);
    return 1;
}
CMD:emi2(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 342.2696,158.9033,1040.1078,0,5,5);
    else SetPosEx(playerid, 342.2696,158.9033,1040.1078,93.1764,5,5);
    return 1;
}
CMD:emi3(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 345.4146,149.0569,1040.1156,0,5,5);
    else SetPosEx(playerid, 345.4146,149.0569,1040.1156,93.1764,5,5);
    return 1;
}
CMD:emi4(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 363.2997,156.2610,1040.1156,0,5,5);
    else SetPosEx(playerid, 363.2997,156.2610,1040.1156,93.1764,5,5);
    return 1;
}
CMD:salon(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), -1263.3229,2108.4150,1246.5457,269.4925,13,1);
    else SetPosEx(playerid, -1263.3229,2108.4150,1246.5457,269.4925,13,1);
    return 1;
}
CMD:mina(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), -563.0829,2347.7573,79.1133,164.3775,0,0);
    else SetPosEx(playerid, -563.0829,2347.7573,79.1133,164.3775,0,0);
    return 1;
}
CMD:ferreteria1(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 2118.1362,2164.9448,10.6719,180.5532,0,0);
    else SetPosEx(playerid, 2110.9561,2165.3223,10.8203,0,0,0,0);
    return 1;
}
CMD:ferreteria2(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), 2866.6499,2426.7031,10.8203,136.9367,0,0);
    else SetPosEx(playerid, 2861.2434,2430.7300,11.0690,0,0,0,0);
    return 1;
}
CMD:ferreteria3(playerid, params[])
{
    if(GetPlayerState(playerid) == 2) SetPosVeh(GetPlayerVehicleID(playerid), -1477.9016,2597.3230,55.6913,88.2442,0,0);
    else SetPosEx(playerid, -1480.9446,2591.6626,55.8359,0,0,0,0);
    return 1;
}
CMD:mandarls(playerid, params[])
{
    if(sscanf(params, "r", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /mandarls <PlayerID>");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
    SetPosEx(params[0], 1529.6,-1691.2,13.3, 0, 0 ,0);
    SendClientMessage(playerid, COLOR_GRAD2, "¡Jugador teleportado!");
    return 1;
}
CMD:mandarsf(playerid, params[])
{
    if(sscanf(params, "r", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /mandarsf <PlayerID>");
    if(IsPlayerNPC(params[0])) return 1;
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    SetPosEx(params[0], 214.5570,126.0371,999.0156,267.6901, 10 ,5);
    SendClientMessage(playerid, COLOR_GRAD2, "Jugador teletransportado a SF");
    return 1;
}
CMD:mandarlv(playerid, params[])
{
    if(sscanf(params, "r", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "MODO DE USO: /mandarlv <PlayerID>");
    if(IsPlayerNPC(params[0])) return 1;
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    SetPosEx(params[0], 1592.5369,1817.5045,10.8203, 0, 0 ,0);
    SendClientMessage(playerid, COLOR_GRAD2, "¡Jugador teleportado a LV!");
    return 1;
}
CMD:dstat(playerid, params[])
{
    if(sscanf(params, "ddd", params[0],params[1],params[2]))
    {
        SendClientMessage(playerid, -1, "/dstat [playerid/nombre] [numero] [valor]");
        SendClientMessage(playerid, -1, "[Nivel 1] [Teléfono 2] [Experiencia 3] [Sexo 4] [Trabajo 5] [Trabajo VIP 6] [Nivel Armero 7] [Nivel Camionero 8] [Nivel Ladron 9]");
        SendClientMessage(playerid, -1, "[Nivel Transportista 10] [Nivel Basurero 11] [Nivel Mecanico 12] [Nivel Pescador 13] [Nivel Médico 14] [15 Horas de juego]");
    }
    else if (!IsPlayerConnected(params[0])) SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
    else
    {
        switch(params[1])
        {
            case 1: { SetPlayerScore(params[0], params[2]); PlayerInfo[params[0]][pNivel] = params[2]; CalcularNivel(params[0]); SetPlayerStats(params[0]); Actualizar(params[0]); MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 2: { PlayerInfo[params[0]][pNumero] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Teléfono: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 3: { PlayerInfo[params[0]][pExperiencia] = params[2]; CalcularNivel(params[0]); Actualizar(params[0]); MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Experiencia: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 4: { PlayerInfo[params[0]][pSexo] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Sexo: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 5: { PlayerInfo[params[0]][pTrabajo] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Trabajo: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 6: { PlayerInfo[params[0]][pTrabajo2] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Trabajo 2: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 7: { PlayerInfo[params[0]][pNivelArmero] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Armero: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 8: { PlayerInfo[params[0]][pNivelCamionero] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Camionero: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 9: { PlayerInfo[params[0]][pNivelLadron] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Ladron: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 10: { PlayerInfo[params[0]][pNivelTransportista] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Transportista: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 11: { PlayerInfo[params[0]][pNivelBasurero] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Basurero: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 12: { PlayerInfo[params[0]][pNivelMecanico] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Mecanico: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 13: { PlayerInfo[params[0]][pNivelPescador] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Pescador: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 14: { PlayerInfo[params[0]][pNivelMedico] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Nivel Médico: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            case 15: { PlayerInfo[params[0]][horasjugadas] = params[2]; MensajeEx(playerid,-1,"Usaste el comando /dstat con %s - Horas jugadas: %d.",PlayerInfo[params[0]][Nickname],params[2]); }
            default: {
                SendClientMessage(playerid, -1, "/dstat [playerid/nombre] [numero] [valor]");
                SendClientMessage(playerid, -1, "[Nivel 1] [Teléfono 2] [Experiencia 3] [Sexo 4] [Trabajo 5] [Trabajo VIP 6] [Nivel Armero 7] [Nivel Camionero 8] [Nivel Ladron 9]");
                SendClientMessage(playerid, -1, "[Nivel Transportista 10] [Nivel Basurero 11] [Nivel Mecanico 12] [Nivel Pescador 13] [Nivel Médico 14] [15 Horas de juego]");
            }
        }
    }
    return 1;
}
CMD:ban(playerid, params[])
{
	new string[256],day,month,year,hora,minuto,segundo;
	gettime(hora,minuto,segundo); getdate(year,month,day);
	new ID,ADMIN[256],Query[520];
	if(sscanf(params, "rs[256]", ID,ADMIN) )return SendClientMessage(playerid,COLOR_WHITE,"Escribe {DBED16}/ban {FFFFFF}<PlayerID> <Razon>");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PlayerInfo[ID][pAdmin] >= PlayerInfo[playerid][pAdmin] && PlayerInfo[ID][pAdmin] >= 4) return 1;
	if(PlayerInfo[params[0]][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
	if(JugadorLogeado[ID] == 0) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PlayerInfo[playerid][BaneosD] >= 6 && PlayerInfo[playerid][pAdmin] != 7 && PlayerInfo[playerid][BaneosD2] > gettime()) return SendClientMessage(playerid,-1,"Solamente puedes banear 6 jugadores por día.");
    if(!IsPlayerNPC(ID))
	{
	    foreach(new i : Player)
	    {
	        if(JugadorLogeado[i] == 1)
		    {
				if(PlayerInfo[i][pMuteos] == 1) MensajeEx(i, -1, "El jugador {FF3300}%s(ID: %d){FFFFFF} fue baneado por un admin. Razón: {FF3300}%s{FFFFFF}.",PlayerName(ID),ID, ADMIN);
			}
		}
		PlayerInfo[ID][pAdmin] = CMD_USER;
		format(string, 128, "Administrador: %s",PlayerName(playerid));
		MensajeAdmin(-1,string,3);
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `registros_admin` (Responsable, Jugador, Razon, Accion) VALUES ('%s','%s','%s','3')",PlayerName(playerid),PlayerName(ID),ADMIN); mysql_tquery(handle_db, Query);
		mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Baneado`='1',`razon`='%s',`Banpor`='%s' WHERE `Username`='%s'", ADMIN,PlayerName(playerid),PlayerName(ID)); mysql_tquery(handle_db, Query);
        format(string, sizeof(string), "El jugador %s(ID: %d) fue baneado por un admin. Razón: %s.",PlayerName(ID),ID, ADMIN);
		BanEx(ID, string);
		if(PlayerInfo[playerid][pAdmin] > 2)
		{
			PlayerInfo[playerid][BaneosD] ++;
			PlayerInfo[playerid][BaneosD2] = gettime() + 86400;
		}
	}
	return 1;
}
CMD:banoff(playerid,params[])
{
	new ID[32],RAZON[100],string[200],Query[520],pName[32],day,month,year,hora,minuto,segundo;
	gettime(hora,minuto,segundo); getdate(year,month,day);
	GetPlayerName(playerid, pName, 32);
	if(PlayerInfo[playerid][BaneosD] >= 120 && PlayerInfo[playerid][pAdmin] != 7 && PlayerInfo[playerid][BaneosD2] > gettime()) return SendClientMessage(playerid,-1,"Solamente puedes banear 120 jugadores por día.");
	if(!sscanf(params,"s[29]s[100]",ID,RAZON))
	{
	    if(PlayerInfo[params[0]][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
		format(string, sizeof(string), "{FFFFFF}El jugador {FF3300}%s{FFFFFF} fue baneado por un admin. Razón: {FF0000}%s{FFFFFF}.",ID,RAZON);
		MensajeAdmin(-1,string,3);
		format(string, 200, "Administrador: %s",PlayerName(playerid));
		MandarMensajeTodos(string);
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `registros_admin` (Responsable, Jugador, Razon, Accion) VALUES ('%s','%s','%s','3')",PlayerName(playerid),ID,RAZON); mysql_tquery(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='%s',`Banpor`='%s' WHERE `Username`=('%s')",RAZON,PlayerName(playerid),ID); mysql_tquery(handle_db, Query);
		if(PlayerInfo[playerid][pAdmin] > 2) PlayerInfo[playerid][BaneosD] ++,PlayerInfo[playerid][BaneosD2] = gettime() + 86400;
	}
	else return SendClientMessage(playerid,-1,"Modo de uso: /banoff [Nombre_Apellido] [Razon]");
	return 1;
}
CMD:bant(playerid, params[])
{
    new ID, days,razon[128],string[128];
    if(sscanf(params, "iis[128]", ID, days, razon)) return SendClientMessage(playerid,COLOR_WHITE,"Escribe {DBED16}/bant {FFFFFF}<PlayerID> <Dias> <Razon>");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(!IsPlayerNPC(ID))
	{
		new tiempobaneo = gettime() + (86400 * days);
    	if(PlayerInfo[playerid][BaneosD] >= 6 && PlayerInfo[playerid][pAdmin] != 7 && PlayerInfo[playerid][BaneosD2] > gettime()) return SendClientMessage(playerid,-1,"Solamente puedes banear 6 jugadores por día.");
		if(PlayerInfo[playerid][pAdmin] > 2)
		{
			PlayerInfo[playerid][BaneosD] ++;
			PlayerInfo[playerid][BaneosD2] = gettime() + 86400;
		}
 		format(string, sizeof(string), "{FF3300}%s(ID: %d){FFFFFF} fue baneado temporalmente por {FF3300}%d días{FFFFFF}. Razón: {FF3300}%s{FFFFFF}.",PlayerName(ID),ID,days, razon);
		MensajeAdmin(-1,string, 3);
		SendClientMessage(ID,-1,string);
		PlayerInfo[ID][pAdmin] = CMD_USER;
  		new Query[520];
		PlayerInfo[playerid][pTempBan] = tiempobaneo;
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TempBan`='%d',`razon`='%s',`Banpor`='%s' WHERE `Username`='%s'",tiempobaneo, razon,PlayerName(playerid),PlayerName(ID)); mysql_tquery(handle_db, Query);
		Kick(ID);
		return 1;
	}
    return 1;
}
CMD:bloquearcuenta(playerid, params[])
{
    if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return 0;
    new Jugador[MAX_PLAYER_NAME];
    if(sscanf(params, "s[25]", Jugador)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/bloquearcuenta {FFFFFF}<Nombre>");
    new DB_Query[128];
    mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `usuarios` SET `Bloqueado` = '1' WHERE `Username`='%s'", Jugador);
    mysql_query(handle_db, DB_Query);
    return 1;
}
CMD:desbloquearcuenta(playerid, params[])
{
    if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return 0;
    new Jugador[MAX_PLAYER_NAME];
    if(sscanf(params, "s[25]", Jugador)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/desbloquearcuenta {FFFFFF}<Nombre>");
    new DB_Query[128];
    mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `usuarios` SET `Bloqueado` = '0' WHERE `Username`='%s'", Jugador);
    mysql_query(handle_db, DB_Query);
    return 1;
}
CMD:menu(playerid,params[])
{
    new mensaje[256],string[24];
    if(PayDayActive == true) string = "Activo";
    else string = "Inactivo";
    format(mensaje,sizeof(mensaje),"{FFFFFF}- Tranquilizantes\n- Medicamentos\n- Crack\n- Marihuana\n- Caramelos\n- Piezas de armas\n- Patines\n- $ Dinero\n- Totems\n- Monedas("SERVER_COIN")\n- Pago diario (%s)",string);
    ShowPlayerDialog(playerid, D_REGALOS, DIALOG_STYLE_LIST, "{00CC00}Menú de regalos | "SERVER_COIN":RP", mensaje, "Siguiente","Cerrar");
    return 1;
}
CMD:qmenu(playerid,params[])
{
    ShowPlayerDialog(playerid, D_REGALOSQ, DIALOG_STYLE_LIST, "{00CC00}Menú para quitar cosas | "SERVER_COIN":RP", "{FFFFFF}- Tranquilizantes\n- Medicamentos\n- Crack\n- Marihuana\n- Caramelos\n- Piezas de armas\n- Patines\n- $ Dinero\n- Totems\n- Monedas("SERVER_COIN")", "Siguiente","Cerrar");
    return 1;
}
CMD:pintar(playerid,params[])
{
    new item[32],autoid = GetPlayerVehicleID(playerid);
	if(sscanf(params,"s[30]",item)) return 1;
	if(strcmp(item, "vehiculo", true)==0)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Debes estar en un vehiculo para pintarlo");
		if(PlayerInfo[playerid][Moneda] < 3) return ShowPlayerDialog(playerid, TALLER, DIALOG_STYLE_MSGBOX, "{d70000}No tienes los "SERVER_COIN" necesarios", "{FFFFFF}Pintar Cuesta {8c5c35}3 "SERVER_COIN"{FFFFFF}.\n\n{FFFFFF}Para más información usa {FF3300}/ayuda vehiculo", "Cerrar","");
		for(new a = 0; a < MAX_PAUTOS; a++)
		{
			if(autos[a][playerid] == autoid) return ShowPlayerDialog(playerid, TALLER, DIALOG_STYLE_INPUT, "Color primario", "{FFFFFF}Coloca el número del color primario que deseas utilizar en tu vehiculo", "Pintar","Cancelar");
		}
		SendClientMessage(playerid, -1, "Debes estar en un vehículo de tu propiedad");
		return 1;
	}
    return 1;
}
CMD:l(playerid, params[])
{
    for(new i = 0; i < 150 ; i++) SendClientMessageToAll(-1, "");
    SendClientMessageToAll(0xAA3333AA, "El log del chat fue borrado.");
    return 1;
}
CMD:darfaccion(playerid, params[])
{
    new string[126], ID, FACCION, RANGO;
    if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return 0;
    if(sscanf(params, "ddd", ID,FACCION,RANGO)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/darfaccion {FFFFFF}<PlayerID> <BandaID> <Rango 1-8>");
    if(RANGO > 8) return SendClientMessage(playerid,-1,"No puedes asignar un rango mas alto");
    if(RANGO == 0 && FACCION != 0) return SendClientMessage(playerid,-1,"No puedes asignar el rango 0");
    if(FACCION == 0)
    {
        format(string, sizeof(string), "{00CCFF}%s{FFFFFF} te sacó de la facción en la que estabas.", PlayerInfo[playerid][Nickname]);
        SendClientMessage(ID,-1, string);
        if(PlayerInfo[ID][pFaccion] == 1)
        {
            SetPlayerSkin(ID, PlayerInfo[ID][pRopa]);
            ClearAnimations(ID);
        }
        PlayerInfo[ID][pDuty] = 0;
        PlayerInfo[ID][pFaccion] = 0;
        PlayerInfo[ID][pRango] = 0;
        HidePlayerGangZones(ID);
        return 1;
    }
    if(FACCION > 0)
    {
        if(BandasInfo[FACCION][EnUso] == 0) return SendClientMessage(playerid,-1,"Error, esa banda no existe.");
        PlayerInfo[ID][pFaccion] = FACCION;
        PlayerInfo[ID][pRango] = RANGO;
        format(string, sizeof(string), "{00CCFF}%s{FFFFFF} te asignó rango %s en la facción %s", PlayerInfo[playerid][Nickname],RangoBanda(FACCION,PlayerInfo[ID][pRango]),BandasInfo[FACCION][BNombre]);
        SendClientMessage(ID,-1, string);
     }
    return 1;
}
CMD:pm(playerid,params[])
{
	new id,msj[128];
	if(sscanf(params,"ds[128]",id,msj)) return SendClientMessage(playerid, -1,"Escribe {DBED15}/pm {FFFFFF}<texto>");
	MensajeEx(id,-1,"* {DBED15}Mensaje: {FFFFFF}%s",msj);
	SendClientMessage(playerid,-1,"{00CC00}Enviaste este mensaje con exito");
	return 1;
}
CMD:guardarcuenta(playerid)
{
	if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return SendClientMessage(playerid, -1, "Necesitas permisos especiales para este comando.");
    foreach(new i : Player) GuardarCuenta(i);
    return 1;
}
CMD:ad(playerid,params[]) return SendClientMessage(playerid, COLORCARGO0, "Para enviar un anuncio solo necesitas llamar al {DBED15}número 430{FFFFFF} desde tu teléfono móvil{FFFFFF}.");
CMD:discord(playerid, params[]) return SendClientMessage(playerid, COLORCARGO0, "El discord del servidor es: {DBED15}"WEB_URL"{FFFFFF}.");
CMD:ac(playerid, params[])
{
    new id,vida;
    if(sscanf(params,"dd",id,vida)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/ac {FFFFFF}<PlayerID> <Cantidad>");
    if(IsPlayerNPC(id)) return 1;
    SetPlayerHealthEx(id, vida);
    SetPlayerArmourEx(id, vida);
    return 1;
}
CMD:duty(playerid, params[])
{
    new string[200];
    if(PlayerInfo[playerid][pAdmin] <= 3) return false;
    switch(AdminDuty[playerid])
    {
        case 0:
        {
            SetPlayerColor(playerid, 0xAA333300);
            format(string,sizeof(string),"[Administracion] %s %s(ID: %d) ahora está en servicio administrativo", ADMIN_RANKS(PlayerInfo[playerid][pAdmin]), PlayerInfo[playerid][Nickname], playerid);
            MensajeAdmin(0xAA333300, string, 2);
            AdminDuty[playerid] = 1;
        }
        default:
        {
            SetPlayerColor(playerid, DEFAULT_COLOR);
            format(string,sizeof(string),"[Administracion] %s %s(ID: %d) ahora está fuera de servicio administrativo", ADMIN_RANKS(PlayerInfo[playerid][pAdmin]), PlayerInfo[playerid][Nickname], playerid);
            MensajeAdmin(0xAA333300, string, 2);
            AdminDuty[playerid] = 0;
        }
    }
    return true;
}
CMD:limpiarchat(playerid, params[])
{
    LimpiarChat(playerid, 100, -1); SendClientMessage(playerid, 0xAA3333FF, "{8A0808}Limpiaste tu chat.");
    return 1;
}
CMD:desbug(playerid, params[])
{
    new id;
    if(!sscanf(params, "d", id))
    {
        if(sscanf(params, "r", id)) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /desbug <PlayerID>");
        if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
        SetPlayerInterior(id, 0);
        SetPlayerVirtualWorld(id, 0);
        SetCameraBehindPlayer(id);
        return SendClientMessage(playerid, COLOR_GRAD2, "¡Jugador enviado a la VW: 0 / Int: 0!");
    }
    if(PlayerInfo[playerid][pTiempoJail] == 0 && PlayerInfo[playerid][pTiempoCarcel] == 0)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetCameraBehindPlayer(playerid);
        return SendClientMessage(playerid, -1, "Si aun tienes problemas, por favor usa el comando {DBED15}/reportar [Tu ID] [Descripción del problema]");
    }
    else return SendClientMessage(playerid, -1, "No puedes usar este comando en prisión.");
}
CMD:npckick(playerid, params[])
{
	foreach(new i : Player) { if(IsPlayerNPC(i)) Kick(i); }
	SendClientMessage(playerid, -1, "NPCs Kickeados.");
	npctoggle = 0;
	return 1;
}
CMD:npcjoin(playerid, params[])
{
	if(npctoggle == 0) LoadNPCs(),SendClientMessage(playerid, -1, "NPCs Cargados.");
	else SendClientMessage(playerid, -1, " Todos los NPC están cargados, para re-cargarlos use /npckick y despues use este comando.");
	return 1;
}
CMD:adv(playerid,params[])
{
	new string[1000],id,mensaje[1000],ADMIN[256],ID;
	if(!sscanf(params,"d",id,ID,ADMIN))
	{
		if(IsPlayerNPC(id)) return 1;
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
		{
			MensajeEx(id,-1,"{DBED16}Hola {FF3300}%s{DBED16}, el equipo administrativo detectó el uso de CLEOS o MODS prohibidos.",PlayerInfo[id][Nickname]);
			MensajeEx(id,-1,"{DBED16}- No se permiten el uso de cleos o mods que te beneficien o den ventajas a tu jugador",mensaje);
			MensajeEx(id,-1,"{DBED16}por favor, salga del juego y desinstale/remueva todos los cleos o mods prohibidos.",mensaje);
			MensajeEx(id,-1,"{DBED16}- En caso que no sigas esta regla, podrás ser baneado permanentemente del servidor.",mensaje);
			MensajeEx(id,-1,"{DBED16}- Al parecer no conoces las reglas, leelas detenidamente ingresando el comando {FFFFFF}/reglas",mensaje);
			ShowPlayerDialog(id,INVENTARIO,DIALOG_STYLE_MSGBOX,"{FFFFFF}Información",mensaje,"Aceptar","");
			format(string, sizeof(string), "%s ha recibido una advertencia por parte de %s.", PlayerInfo[id][Nickname], PlayerInfo[playerid][Nickname]);
            MensajeAdmin(COLOR_GREY, string, 3);
			ExpulsarJugador(id,"Kickeado por un admin.");
		}
	}
	return 1;
}
CMD:jetpack(playerid, params[])
{
    if(PlayerTemp[playerid][pOwnerCMD_Use] == 0) return 0;
    if(!IsPlayerConnected(playerid)) return 1;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    return 1;
}
stock TunearCoche(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid),Float:health;
    GetVehicleHealth(vehicleid, health);
    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1134.6223,1226.0657,10.8203)) return 1;
    if(health < 375.0) return SendClientMessage(playerid, -1, "Primero debes reparar tu vehículo para tunear.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0x999999AA, "No estás en nigún vehículo.");
    if(!IsValidVehicleTunning(vehicleid)) return SendClientMessage(playerid,-1,"No puedes modificar este tipo de vehículos.");
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, 0x999999AA, "No estás en el lugar adecuado.");
    if(GetPlayerVehicle(playerid,vehicleid) == -1) return SendClientMessage(playerid, -1, "No puedes modificar éste vehículo.");
    if(PlayerInfo[playerid][pNivel] < 2) return SendClientMessage(playerid, -1, "{999999}Debes de ser al menos nivel 2 para tunear vehículos aquí.");
    EnGaraje[playerid] = true;
    TuneandoCoche[playerid] = vehicleid;
    SetVehiclePos(vehicleid, 2561.6660,2725.7131,1601.4573);
    SetVehicleZAngle(vehicleid, 0.0332);
    SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
    SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
    SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
    UpdateVehicleParams(TuneandoCoche[playerid]);
    SetCameraBehindPlayer(playerid);
    ShowTuning(playerid, DIALOG_VOBJECT_MENU);
    return 1;
}
stock EnReparacion(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1168.0515,1299.7306,10.9568)) return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "No estás en un vehículo.");
    QuitarDinero(playerid, 500);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	SendClientMessage(playerid, -1, "Tu vehículo ha sido reparado correctamente, gracias por reparar tu vehículo aqui");
	RepairVehicle(GetPlayerVehicleID(playerid));
	return 1;
}
CMD:irfabrica(playerid,params[])
{
	new fb;
	if(sscanf(params,"d",fb)) return SendClientMessage(playerid,-1,"Usa {DBED15}/irfabrica [ID]");
	SetPosEx(playerid,Fabricas[fb][pEntradaX],Fabricas[fb][pEntradaY],Fabricas[fb][pEntradaZ],Fabricas[fb][pEntradaA]+180.0,0,0);
	return true;
}
CMD:newname(playerid, params[])
{
    new ID, newname[24];
    if(sscanf(params, "ds[24]", ID, newname)) return SendClientMessage(playerid,-1,"Escribe {DBED15}/newname{ffffff} [id] [Nombre_Apellido].");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "El jugador no está conectado.");
	if(PlayerInfo[ID][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
    if(!IsValidName(newname)) return SendClientMessage(playerid,-1,"Nombre rechazado, por favor usa el formato {FBFE01}Nombre_Apellido{ffffff}.");
	if(cache_num_rows()) return SendClientMessage(playerid,-1,"Este nombre no esta disponible.");
    new query[250];
	mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `usuarios` WHERE `Username`='%s'",newname);
	mysql_query(handle_db, query, true);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `facciones` SET `Lider`='%s' WHERE `Lider`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
    mysql_format(handle_db, query, sizeof(query), "UPDATE `aka` SET `NAMES`='%s' WHERE `NAMES`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `invitaciones` SET `Invitado`='%s' WHERE `Invitado`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `log_ingresos` SET `Nombre`='%s' WHERE `Nombre`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "INSERT INTO `log_nombres`(`NombreAntiguo`, `NombreNuevo`) VALUES ('%s', '%s')", PlayerInfo[ID][Nickname], newname);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `log_transacciones` SET `Enviador`='%s' WHERE `Enviador`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `marihuana` SET `Owner`='%s' WHERE `Owner`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `propiedades` SET `Propietario`='%s' WHERE `Propietario`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `prendas` SET `Propietario`='%s' WHERE `Propietario`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Username`='%s' WHERE `Username`='%s'", newname, PlayerInfo[ID][Nickname]);
	mysql_query(handle_db, query, false);
	CargarCasas();
	CargarFacciones();
	MensajeEx(ID,-1,"Se te cambio el nombre correctamente a {DBED15}%s{ffffff}.",newname);
    MensajeEx(playerid,-1,"El nombre de {DBED15}%s{ffffff} fue cambiado a {DBED15}%s{ffffff}.",PlayerInfo[ID][Nickname], newname);
	GetPlayerName(ID, PlayerInfo[ID][Nickname], 24);
	SetPlayerName(ID, newname);
	return 1;
}
CMD:gaso(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return 0;
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Necesitas ser el conductor de un vehículo para usar este comando.");
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, COLOR_GREY, "USA: /gaso [gasolina]");
	new vehicleid = GetPlayerVehicleID(playerid);
	VehicleFuel[vehicleid] = params[0];
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][Combustible],VehicleFuel[vehicleid]);
	UpdatePlayerProgressBar(playerid,Progressbar[playerid][Combustible]);
	return 1;
}
//Flags ALIAS
alias:pm("mp");
alias:mute("mutear");
alias:mutead("mutearad");
alias:unmute("desmutear");
alias:unmutead("desmutearad");
alias:sethp("darvida");
alias:setarmor("darchaleco");
alias:habilidad("habilidades", "skills");
alias:cargos("c");
alias:l("cc");
alias:darvehiculo("shopcar");
alias:config("configuracion", "configuration");
alias:ban("ban222","banp");
alias:limpiarchat("lchat");
alias:san("sancionar");
alias:unsan("quitarsancion");
alias:darskin("setskin");
alias:desbanearip("unbanip");
alias:esposar("e");
alias:qmenu("quitarcosas");
alias:guardarcuenta("gd");
alias:miranda("derechos");
alias:reportar("re");
alias:listo("specoff");
//Flags CMDS
flags:mute(CMD_MOD_DUDAS);
flags:unmute(CMD_MOD_DUDAS);
flags:mutead(CMD_MOD_JUEGO);
flags:bant(CMD_MOD_JUEGO);
flags:ar(CMD_MOD_JUEGO);
flags:rr(CMD_MOD_JUEGO);
flags:reportes(CMD_MOD_JUEGO);
flags:unmutead(CMD_MOD_JUEGO);
flags:zz(CMD_MOD_JUEGO);
flags:car(CMD_MOD_JUEGO);
flags:grua(CMD_MOD_JUEGO);
flags:home(CMD_MOD_JUEGO);
flags:lc(CMD_MOD_JUEGO);
flags:ls(CMD_MOD_JUEGO);
flags:sf(CMD_MOD_JUEGO);
flags:lv(CMD_MOD_JUEGO);
flags:emi(CMD_MOD_JUEGO);
flags:emi1(CMD_MOD_JUEGO);
flags:emi2(CMD_MOD_JUEGO);
flags:emi3(CMD_MOD_JUEGO);
flags:emi4(CMD_MOD_JUEGO);
flags:salon(CMD_MOD_JUEGO);
flags:mina(CMD_MOD_JUEGO);
flags:desbug(CMD_MOD_JUEGO);
flags:ferreteria1(CMD_MOD_JUEGO);
flags:pm(CMD_MOD_JUEGO);
flags:san(CMD_MOD_JUEGO);
flags:spec(CMD_MOD_JUEGO);
flags:listo(CMD_MOD_JUEGO);
flags:kick(CMD_MOD_JUEGO);
flags:traercoche(CMD_MOD_JUEGO);
flags:ir(CMD_MOD_JUEGO);
flags:traer(CMD_MOD_JUEGO);
flags:slap(CMD_MOD_JUEGO);
flags:mandarls(CMD_MOD_JUEGO);
flags:revivir(CMD_MOD_JUEGO);
flags:crearcasa(CMD_MOD_JUEGO);
flags:pedidos(CMD_MOD_JUEGO);
flags:setarmor(CMD_MOD_JUEGO);
flags:sethp(CMD_MOD_JUEGO);
flags:check(CMD_MOD_JUEGO);
flags:editarentrada(CMD_MOD_JUEGO);
flags:editarcasa(CMD_MOD_JUEGO);
flags:creargarajecasa(CMD_MOD_JUEGO);
flags:cambiarinterior(CMD_MOD_JUEGO);
flags:ircasa(CMD_MOD_JUEGO);
flags:irgaraje(CMD_MOD_JUEGO);
flags:eliminarcasa(CMD_MOD_JUEGO);
flags:dararma(CMD_MOD_JUEGO);
flags:adv(CMD_MOD_GLOBAL);
flags:l(CMD_MOD_GLOBAL);
flags:sanoff(CMD_MOD_GLOBAL);
flags:ban(CMD_MOD_GLOBAL);
flags:desbanearip(CMD_MOD_GLOBAL);
flags:cord(CMD_MOD_GLOBAL);
flags:congelar(CMD_MOD_GLOBAL);
flags:descongelar(CMD_MOD_GLOBAL);
flags:darskin(CMD_MOD_GLOBAL);
flags:aka(CMD_MOD_GLOBAL);
flags:daka(CMD_MOD_GLOBAL);
flags:unsan(CMD_MOD_GLOBAL);
flags:info(CMD_MOD_GLOBAL);
flags:rac(CMD_MOD_GLOBAL);
flags:raccars(CMD_MOD_GLOBAL);
flags:resetearpuntos(CMD_MOD_GLOBAL);
flags:banoff(CMD_TECNICO);
flags:aa(CMD_TECNICO);
flags:fixveh(CMD_TECNICO);
flags:fixvehall(CMD_TECNICO);
flags:darvehiculo(CMD_TECNICO);
flags:desarmar(CMD_TECNICO);
flags:dstat(CMD_TECNICO);
flags:menu(CMD_TECNICO);
flags:qmenu(CMD_TECNICO);
flags:infoex(CMD_TECNICO);
flags:resetearcarreras(CMD_TECNICO);
flags:ccarrera(CMD_TECNICO);
flags:darsed(CMD_TECNICO);
flags:darhambre(CMD_TECNICO);
flags:recargarcamello(CMD_TECNICO);
flags:darvip(CMD_TECNICO);
flags:desocuparcasa(CMD_TECNICO);
flags:garageid(CMD_TECNICO);
flags:borrargarage(CMD_TECNICO);
flags:newname(CMD_TECNICO);
flags:npcjoin(CMD_ADM);
flags:npckick(CMD_ADM);
flags:agregarspam(CMD_ADM);
flags:aa2(CMD_ADM);
flags:baneados(CMD_ADM);
flags:fixvehid(CMD_ADM);
flags:eventos(CMD_ADM);
flags:ac(CMD_ADM);
flags:darprenda(CMD_ADM);
flags:creargarajefabrica(CMD_ADM);
flags:crearfabrica(CMD_ADM);
flags:eliminargarajefabrica(CMD_ADM);
flags:banip(CMD_ADM);
